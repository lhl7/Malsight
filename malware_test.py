import json

from core.anno_gen import *
from core.code_summarize import *

funcName = []
callee = {}
func_tokens = {}
summary = {}

def getSummary(malware_name):

    with open('func_tokens.json','r') as ft,open('call.json','r') as cal,open('topsorted.txt','r') as ts:
        for func_name in ts:
            funcName.append(func_name.strip())

        for line in cal:
            sample = json.loads(line.strip())
            callee[sample['func_name'].strip()] = sample['callee_list']

        for line in ft:
            sample = json.loads(line.strip())
            func_tokens[sample['func_name'].strip()] = sample['pesucode_tokens']

    with open('result.json','w') as rt:

        for func_name in funcName:
            print(func_name)
            code_tokens = func_tokens[func_name]
            api_calls, impo_strs = code_sequence_label(code_tokens)
            #print(api_calls)
            ctx = online_retrieve(api_calls)
            anno = static_annotation_generate(ctx)
            if func_name in callee:
                for func in callee[func_name]:
                    if func == func_name:
                        continue
                    if func in summary:
                        anno.append("function " + func + ":" + summary[func])

            func_summary = summarize(code_tokens, anno)
            summary[func_name] = func_summary
                
            obj = {
                'func_name': func_name,
                'summary': func_summary,
                'api_calls': api_calls,
                'anno': anno,
            }

            rt.write(json.dumps(obj))
            rt.write('\n')
            rt.flush()

#malware_name = "darkAngels"
#malware_name = "GANDCRAB"
#malware_name = "eternity_blue"
#malware_name = "virus1"
#malware_name = "globalmposter"
#malware_name = "extort"
#malware_name = "thantos"
#malware_name = "panda"
malware_name = "memz"
#malware_name = "ttpd"
getSummary(malware_name)